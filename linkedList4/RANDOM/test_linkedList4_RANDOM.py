#Pyguin test cases converted from /home/auri/temp/lucca/python_experiments/linkedList4/RANDOM/test_linkedList4.py
import pytest
import linkedList4 as module_0
import builtins as module_1

def test_case_0():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0

def test_case_1():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)

def test_case_2():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0

def test_case_3():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.size()
    assert var_2 == 0
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    node_2 = module_0.Node(none_type_0)

def test_case_4():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_5():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'

def test_case_6():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.size()
    assert var_2 == 0
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    node_2 = module_0.Node(var_5, var_3)
    assert node_2.data == ')'
    assert node_2.next == 0

def test_case_7():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.size()
    assert var_3 == 0

def test_case_8():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)

def test_case_9():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)

def test_case_10():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(var_5)
    none_type_4 = None
    node_0 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.size()
    assert var_8 == 0
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.search(none_type_2)

def test_case_11():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.size()
    assert var_5 == 0
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    var_10 = linked_list_7.search(var_9)
    none_type_8 = None
    node_1 = module_0.Node(none_type_8)
    var_11 = linked_list_5.push(var_9)

def test_case_12():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_0.remove(node_1)

def test_case_13():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.size()
    assert var_4 == 0
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0

def test_case_14():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(var_5)
    none_type_4 = None
    node_0 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.size()
    assert var_8 == 0
    var_9 = linked_list_3.push(none_type_2)

def test_case_15():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None

def test_case_16():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(var_5)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    node_0 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_17():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    var_5 = linked_list_4.search(var_4)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_5)
    node_3 = module_0.Node(linked_list_7)

def test_case_18():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0

def test_case_19():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    var_8 = linked_list_6.search(var_7)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    node_2 = module_0.Node(none_type_7)
    var_10 = linked_list_6.remove(var_8)

def test_case_20():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'

def test_case_21():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    none_type_6 = None
    node_2 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_6)
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    var_9 = linked_list_11.size()
    assert var_9 == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    var_11 = linked_list_9.search(var_10)
    int_0 = -1464
    var_12 = linked_list_5.remove(int_0)

def test_case_22():
    bool_0 = True
    node_0 = module_0.Node(bool_0)

def test_case_23():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.size()
    assert var_5 == 0
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    var_6 = linked_list_2.size()
    assert var_6 == 0

def test_case_24():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_9.size()
    assert var_10 == 0
    none_type_8 = None
    linked_list_10 = module_0.LinkedList(none_type_8)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_9 = None
    linked_list_12 = module_0.LinkedList(none_type_9)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    var_13 = linked_list_10.display()
    assert var_13 == ')'
    var_14 = linked_list_8.push(var_9)

def test_case_25():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(var_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    var_8 = linked_list_7.display()
    assert var_8 == ')'

def test_case_26():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.size()
    assert var_5 == 0
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_5)
    var_7 = linked_list_3.size()
    assert var_7 == 0

def test_case_27():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)

def test_case_28():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.size()
    assert var_8 == 0
    none_type_7 = None
    node_3 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_7)
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    none_type_8 = None
    node_4 = module_0.Node(none_type_8)
    list_0 = [node_4, node_4, node_3, linked_list_0]
    node_5 = module_0.Node(list_0)

def test_case_29():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_5)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(var_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_30():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    node_3 = module_0.Node(none_type_4)

def test_case_31():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.size()
    assert var_3 == 0
    node_3 = module_0.Node(bool_0, linked_list_2)

def test_case_32():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_7 = None
    node_4 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_7)
    none_type_8 = None
    linked_list_10 = module_0.LinkedList(none_type_8)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_9 = linked_list_11.push(var_8)
    var_10 = linked_list_1.size()
    assert var_10 == 1
    var_11 = linked_list_9.remove(var_10)

def test_case_33():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_1 = module_0.LinkedList(none_type_3)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    var_5 = linked_list_1.search(var_4)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_5)
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_6)
    none_type_7 = None
    linked_list_7 = module_0.LinkedList(none_type_7)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.push(var_8)
    none_type_8 = None
    linked_list_9 = module_0.LinkedList(none_type_8)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    none_type_9 = None
    node_4 = module_0.Node(none_type_9)
    linked_list_10 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_9)
    linked_list_11 = module_0.LinkedList(none_type_9)
    assert linked_list_11.head is None
    var_12 = linked_list_11.display()
    assert var_12 == ')'
    none_type_10 = None
    linked_list_12 = module_0.LinkedList(none_type_10)
    assert linked_list_12.head is None
    var_13 = linked_list_12.size()
    assert var_13 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_14 = linked_list_0.remove(var_13)

def test_case_34():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.push(var_7)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    linked_list_11 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_8)
    none_type_9 = None
    linked_list_12 = module_0.LinkedList(none_type_9)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_10 = None
    linked_list_14 = module_0.LinkedList(none_type_10)
    assert linked_list_14.head is None
    var_13 = linked_list_14.size()
    assert var_13 == 0
    var_14 = linked_list_12.display()
    assert var_14 == ')'
    none_type_11 = None
    linked_list_15 = module_0.LinkedList(none_type_11)
    assert linked_list_15.head is None
    var_15 = linked_list_15.size()
    assert var_15 == 0
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    node_6 = module_0.Node(none_type_9)

def test_case_35():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_4)
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_5)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(var_6)
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    none_type_8 = None
    linked_list_9 = module_0.LinkedList(none_type_8)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_9.size()
    assert var_9 == 0
    none_type_9 = None
    linked_list_10 = module_0.LinkedList(none_type_9)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_10 = None
    linked_list_12 = module_0.LinkedList(none_type_10)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    var_13 = linked_list_11.search(var_11)

def test_case_36():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'

def test_case_37():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_8 = None
    node_4 = module_0.Node(none_type_8)
    none_type_9 = None
    linked_list_12 = module_0.LinkedList(none_type_9)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    var_12 = linked_list_12.size()
    assert var_12 == 0
    none_type_10 = None
    linked_list_13 = module_0.LinkedList(none_type_10)
    assert linked_list_13.head is None
    var_13 = linked_list_13.size()
    assert var_13 == 0
    node_5 = module_0.Node(linked_list_8)

def test_case_38():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_4)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_5)
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_6)
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    var_12 = linked_list_9.search(var_11)
    none_type_9 = None
    linked_list_12 = module_0.LinkedList(none_type_9)
    assert linked_list_12.head is None
    var_13 = linked_list_12.size()
    assert var_13 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_10 = None
    linked_list_14 = module_0.LinkedList(none_type_10)
    assert linked_list_14.head is None
    var_14 = linked_list_14.size()
    assert var_14 == 0
    var_15 = linked_list_12.display()
    assert var_15 == ')'
    var_16 = linked_list_9.search(linked_list_14)

def test_case_39():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_4 = None
    node_0 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.size()
    assert var_7 == 0
    none_type_6 = None
    node_1 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_6)
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    var_12 = linked_list_9.display()
    assert var_12 == ')'
    var_13 = linked_list_9.search(var_12)
    none_type_9 = None
    node_3 = module_0.Node(none_type_9)
    linked_list_12 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_12.remove(none_type_9)
    none_type_10 = None
    node_4 = module_0.Node(none_type_10)
    linked_list_13 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_13.remove(none_type_10)
    none_type_11 = None
    linked_list_14 = module_0.LinkedList(none_type_11)
    assert linked_list_14.head is None
    var_16 = linked_list_14.size()
    assert var_16 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_17 = linked_list_15.push(var_16)
    var_18 = linked_list_12.push(linked_list_15)

def test_case_40():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(var_6)
    none_type_6 = None
    node_2 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_9 = linked_list_11.size()
    assert var_9 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_8 = None
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_10 = linked_list_13.size()
    assert var_10 == 0
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    var_12 = linked_list_11.search(var_11)
    none_type_9 = None
    node_3 = module_0.Node(none_type_9)
    linked_list_14 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_14.remove(none_type_9)
    bytes_0 = b'\xa6\x84\x0e\xf5\x9a\xa1\x9dUA1\xca\xf2\xf7P'
    node_4 = module_0.Node(bytes_0)

def test_case_41():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.push(var_7)
    var_9 = linked_list_3.remove(linked_list_1)

def test_case_42():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_5)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(var_7)
    node_4 = module_0.Node(none_type_4)

def test_case_43():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)

def test_case_44():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(var_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_5)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    var_7 = linked_list_3.search(linked_list_1)

def test_case_45():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()

def test_case_46():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)

def test_case_47():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(var_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    node_5 = module_0.Node(linked_list_6, none_type_0)

def test_case_48():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(var_6)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    linked_list_10 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_7)
    none_type_8 = None
    node_6 = module_0.Node(none_type_8)
    none_type_9 = None
    linked_list_11 = module_0.LinkedList(none_type_9)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    var_11 = linked_list_11.size()
    assert var_11 == 0
    none_type_10 = None
    linked_list_12 = module_0.LinkedList(none_type_10)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_11 = None
    linked_list_14 = module_0.LinkedList(none_type_11)
    assert linked_list_14.head is None
    var_13 = linked_list_14.size()
    assert var_13 == 0
    var_14 = linked_list_12.display()
    assert var_14 == ')'
    node_7 = module_0.Node(linked_list_1)

def test_case_49():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    var_8 = linked_list_5.search(var_7)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_5)
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_11.push(var_5)

def test_case_50():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(var_4)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_8 = None
    linked_list_12 = module_0.LinkedList(none_type_8)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    none_type_9 = None
    linked_list_13 = module_0.LinkedList(none_type_9)
    assert linked_list_13.head is None
    var_13 = linked_list_13.size()
    assert var_13 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    none_type_10 = None
    linked_list_15 = module_0.LinkedList(none_type_10)
    assert linked_list_15.head is None
    var_14 = linked_list_15.size()
    assert var_14 == 0
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    none_type_11 = None
    linked_list_17 = module_0.LinkedList(none_type_11)
    assert linked_list_17.head is None
    var_15 = linked_list_17.size()
    assert var_15 == 0
    var_16 = linked_list_15.display()
    assert var_16 == ')'
    var_17 = linked_list_15.search(var_16)
    node_6 = module_0.Node(none_type_2, linked_list_3)

def test_case_51():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0

def test_case_52():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    complex_1 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_53():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    var_5 = linked_list_1.search(var_4)
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_8 = linked_list_6.push(var_7)
    var_9 = linked_list_4.search(var_4)

def test_case_54():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    var_5 = linked_list_2.search(node_0)

def test_case_55():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    var_5 = linked_list_0.size()
    assert var_5 == 1

def test_case_56():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    var_11 = linked_list_8.search(var_10)
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_12 = linked_list_11.size()
    assert var_12 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    var_13 = linked_list_8.display()
    assert var_13 == ')'

def test_case_57():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_58():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)

def test_case_59():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.size()
    assert var_2 == 0
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    complex_1 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_1)
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    var_9 = linked_list_6.search(none_type_6)
    none_type_7 = None
    linked_list_7 = module_0.LinkedList(none_type_7)
    assert linked_list_7.head is None
    var_10 = linked_list_7.size()
    assert var_10 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_8 = None
    linked_list_9 = module_0.LinkedList(none_type_8)
    assert linked_list_9.head is None
    var_11 = linked_list_9.size()
    assert var_11 == 0
    var_12 = linked_list_7.display()
    assert var_12 == ')'
    var_13 = linked_list_7.search(var_12)
    var_14 = linked_list_9.push(none_type_6)

def test_case_60():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(var_3)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    none_type_5 = None
    node_0 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    var_9 = linked_list_7.size()
    assert var_9 == 0
    none_type_7 = None
    node_1 = module_0.Node(none_type_7)
    linked_list_8 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(none_type_7)
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList(linked_list_5)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'

def test_case_61():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(var_5)
    none_type_4 = None
    node_0 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_12 = linked_list_11.size()
    assert var_12 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    var_13 = linked_list_9.display()
    assert var_13 == ')'

def test_case_62():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    var_5 = linked_list_1.search(var_4)
    node_0 = module_0.Node(none_type_1, linked_list_1)

def test_case_63():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_4)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(var_6)
    complex_1 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_1)
    var_8 = linked_list_2.search(complex_1)

def test_case_64():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_3)
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    var_8 = linked_list_5.remove(var_7)

def test_case_65():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(var_3)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(var_6)
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    var_10 = linked_list_8.search(none_type_6)
    node_6 = module_0.Node(var_3)
    assert node_6.data == ')'

def test_case_66():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.size()
    assert var_5 == 0
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_5)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    none_type_7 = None
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_8 = None
    linked_list_10 = module_0.LinkedList(none_type_8)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    none_type_9 = None
    node_3 = module_0.Node(none_type_9)
    linked_list_11 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_9)
    linked_list_12 = module_0.LinkedList(none_type_9)
    assert linked_list_12.head is None
    list_0 = [none_type_6, var_7]
    var_12 = linked_list_5.search(list_0)

def test_case_67():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_8 = linked_list_6.display()
    assert var_8 == ')'

def test_case_68():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)

def test_case_69():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(var_5)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    var_10 = linked_list_7.search(var_9)
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    var_13 = linked_list_10.search(none_type_6)
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    var_14 = linked_list_0.search(complex_1)

def test_case_70():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    complex_1 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_8 = linked_list_5.display()
    complex_2 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_2)
    node_7 = module_0.Node(node_6)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    var_11 = linked_list_7.display()
    assert var_11 == ')'
    var_12 = linked_list_7.search(var_11)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_13 = linked_list_10.size()
    assert var_13 == 0
    var_14 = linked_list_10.display()
    assert var_14 == ')'
    node_9 = module_0.Node(linked_list_9)

def test_case_71():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_4)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(var_6)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    node_5 = module_0.Node(node_4)
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_7)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_72():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    var_8 = linked_list_6.search(var_7)
    none_type_6 = None
    node_1 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    var_12 = linked_list_11.display()
    assert var_12 == ')'
    var_13 = linked_list_11.search(none_type_7)
    none_type_8 = None
    node_3 = module_0.Node(none_type_8)
    linked_list_12 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_12.remove(none_type_8)
    none_type_9 = None
    linked_list_13 = module_0.LinkedList(none_type_9)
    assert linked_list_13.head is None
    var_15 = linked_list_13.size()
    assert var_15 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_16 = linked_list_14.push(var_15)
    none_type_10 = None
    node_4 = module_0.Node(none_type_10)
    linked_list_15 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_17 = linked_list_15.remove(none_type_10)
    linked_list_16 = module_0.LinkedList(none_type_10)
    assert linked_list_16.head is None
    var_18 = linked_list_15.display()
    node_5 = module_0.Node(linked_list_13)

def test_case_73():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.push(var_4)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_4.display()
    assert var_8 == ')'
    var_9 = linked_list_4.search(var_8)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_10 = linked_list_7.size()
    assert var_10 == 0
    var_11 = linked_list_7.size()
    assert var_11 == 0
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_8.remove(none_type_7)
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    node_6 = module_0.Node(var_5)

def test_case_74():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(bool_1)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    node_5 = module_0.Node(node_4)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(none_type_2)
    var_6 = linked_list_1.size()
    assert var_6 == 0

def test_case_75():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0

def test_case_76():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(bool_1)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    var_7 = linked_list_4.search(none_type_4)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    linked_list_5 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.remove(none_type_6)
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    none_type_7 = None
    linked_list_7 = module_0.LinkedList(none_type_7)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_5.display()

def test_case_77():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_0 = module_0.Node(var_4)
    assert node_0.data == 0
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_78():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_3)
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_5 = linked_list_2.display()
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_5)
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.push(var_8)
    complex_2 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_2)
    node_7 = module_0.Node(node_6)
    var_10 = linked_list_5.remove(linked_list_3)

def test_case_79():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'

def test_case_80():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_3.size()
    assert var_6 == 0

def test_case_81():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)

def test_case_82():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    var_7 = linked_list_5.search(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_2.display()
    assert var_9 == ')'

def test_case_83():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_1 = module_0.Node(var_5)
    assert node_1.data == 0
    var_6 = linked_list_5.push(linked_list_4)

def test_case_84():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(var_3)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    var_9 = linked_list_6.search(var_8)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_5 = module_0.Node(var_11)
    assert node_5.data == 0
    node_6 = module_0.Node(var_10)
    assert node_6.data == 0

def test_case_85():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_2 = module_0.LinkedList(none_type_4)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_2.display()
    assert var_6 == ')'
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.remove(none_type_6)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    none_type_7 = None
    linked_list_6 = module_0.LinkedList(none_type_7)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    var_10 = linked_list_6.search(none_type_7)
    none_type_8 = None
    linked_list_7 = module_0.LinkedList(none_type_8)
    assert linked_list_7.head is None
    var_11 = linked_list_7.size()
    assert var_11 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_9 = None
    linked_list_9 = module_0.LinkedList(none_type_9)
    assert linked_list_9.head is None
    var_12 = linked_list_9.size()
    assert var_12 == 0
    var_13 = linked_list_7.display()
    assert var_13 == ')'
    var_14 = linked_list_7.search(var_13)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_10 = None
    linked_list_10 = module_0.LinkedList(none_type_10)
    assert linked_list_10.head is None
    var_15 = linked_list_10.size()
    assert var_15 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_7 = module_0.Node(var_15)
    assert node_7.data == 0
    var_16 = linked_list_11.display()
    assert var_16 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_86():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_6 = module_0.Node(var_2)
    assert node_6.data == 0
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    var_4 = linked_list_1.remove(var_1)

def test_case_87():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_0.size()
    assert var_2 == 0

def test_case_88():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'

def test_case_89():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(var_0)
    assert node_3.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_5 = module_0.Node(var_2)
    assert node_5.data == 0
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_6.display()
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_9 = linked_list_11.size()
    assert var_9 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_10 = linked_list_13.size()
    assert var_10 == 0
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    var_12 = linked_list_11.search(var_11)
    var_13 = linked_list_0.display()
    assert var_13 == ')'

def test_case_90():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.size()
    assert var_5 == 0
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.remove(none_type_4)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_6 = module_0.Node(var_7)
    assert node_6.data == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_91():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)

def test_case_92():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_4.search(none_type_3)

def test_case_93():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.size()
    assert var_6 == 0
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(var_7)
    assert node_4.data == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_8 = module_0.Node(none_type_7)

def test_case_94():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)

def test_case_95():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(var_3)
    assert node_5.data == 0
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.remove(none_type_5)
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    var_10 = linked_list_1.size()
    assert var_10 == 0

def test_case_96():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    var_5 = linked_list_2.search(var_4)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    var_6 = linked_list_4.search(var_0)

def test_case_97():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(var_3)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.size()
    assert var_8 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_6)
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_10 = linked_list_7.display()
    node_8 = module_0.Node(linked_list_8)
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_11 = linked_list_9.size()
    assert var_11 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    var_12 = linked_list_11.size()
    assert var_12 == 0
    var_13 = linked_list_9.display()
    assert var_13 == ')'
    none_type_9 = None
    linked_list_12 = module_0.LinkedList(none_type_9)
    assert linked_list_12.head is None
    var_14 = linked_list_12.size()
    assert var_14 == 0
    var_15 = linked_list_2.search(node_1)

def test_case_98():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_99():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    var_7 = linked_list_3.search(var_6)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    node_2 = module_0.Node(linked_list_9)
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_6)
    none_type_7 = None
    node_4 = module_0.Node(none_type_7)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.remove(none_type_7)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_100():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    var_2 = linked_list_0.remove(var_1)

def test_case_101():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    var_3 = linked_list_0.display()
    assert var_3 == ')'

def test_case_102():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)

def test_case_103():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_4 = module_0.Node(var_1)
    assert node_4.data == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_6 = module_0.Node(var_3)
    assert node_6.data == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_7.display()
    node_10 = module_0.Node(linked_list_8)
    var_7 = linked_list_7.remove(none_type_0)

def test_case_104():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None

def test_case_105():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.remove(none_type_4)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_5)
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    node_4 = module_0.Node(linked_list_6)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_6)
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_9 = module_0.Node(list_0)
    node_10 = module_0.Node(node_9, list_0)
    none_type_7 = None
    node_11 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0

def test_case_106():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_4)
    assert node_2.data == 0
    var_5 = linked_list_0.remove(var_0)

def test_case_107():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    complex_1 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_1)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(node_4)

def test_case_108():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0

def test_case_109():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    var_10 = linked_list_6.search(var_9)
    var_11 = linked_list_1.push(var_4)

def test_case_110():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None

def test_case_111():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(bool_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0

def test_case_112():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.remove(none_type_4)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.size()
    assert var_7 == 0
    none_type_7 = None
    node_4 = module_0.Node(none_type_7)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_7)
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    none_type_8 = None
    linked_list_9 = module_0.LinkedList(none_type_8)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_9 = None
    linked_list_11 = module_0.LinkedList(none_type_9)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    var_12 = linked_list_9.display()
    assert var_12 == ')'
    var_13 = linked_list_9.search(var_12)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)

def test_case_113():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    var_6 = linked_list_5.size()
    assert var_6 == 0

def test_case_114():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_3 = module_0.Node(var_1)
    assert node_3.data == 0
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    var_4 = linked_list_3.search(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(var_5)
    assert node_7.data == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    complex_1 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_1)
    complex_2 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_2)
    node_10 = module_0.Node(node_9)
    var_10 = linked_list_4.remove(none_type_7)

def test_case_115():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_5 = module_0.Node(linked_list_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    node_8 = module_0.Node(node_7)
    var_5 = linked_list_4.display()
    assert var_5 == ')'

def test_case_116():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(var_2)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_4.display()
    node_2 = module_0.Node(linked_list_5)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_5)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_11.push(var_10)
    var_12 = linked_list_7.remove(linked_list_1)

def test_case_117():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(var_2)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    var_4 = linked_list_3.size()
    assert var_4 == 1

def test_case_118():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    none_type_7 = None
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.size()
    assert var_8 == 0
    none_type_8 = None
    node_4 = module_0.Node(none_type_8)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_8)
    none_type_9 = None
    linked_list_10 = module_0.LinkedList(none_type_9)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_11.push(var_10)
    linked_list_12 = module_0.LinkedList(linked_list_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'

def test_case_119():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.size()
    assert var_3 == 0
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_3)
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    var_7 = linked_list_5.search(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_7)
    none_type_8 = None
    linked_list_10 = module_0.LinkedList(none_type_8)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_9.search(var_8)

def test_case_120():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.remove(none_type_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(var_2)
    assert node_4.data == 0
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_5 = linked_list_7.display()
    node_6 = module_0.Node(linked_list_8)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_7 = linked_list_11.size()
    assert var_7 == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_9 = linked_list_12.size()
    assert var_9 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_7 = module_0.Node(var_9)
    assert node_7.data == 0
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    node_9 = module_0.Node(bool_2)
    var_10 = linked_list_10.size()
    assert var_10 == 0

def test_case_121():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(var_7)
    assert node_3.data == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_6)
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_13 = linked_list_13.push(var_12)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(bool_1)
    none_type_8 = None
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    var_14 = linked_list_14.size()
    assert var_14 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    node_8 = module_0.Node(var_14)
    assert node_8.data == 0
    var_15 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'linkedList4.Node'
    assert var_15.data is None
    assert var_15.next is None

def test_case_122():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)

def test_case_123():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.size()
    assert var_5 == 0
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_8 = module_0.Node(var_7)
    assert node_8.data == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    int_0 = 903
    dict_1 = {none_type_0: list_0, var_5: int_0, bool_1: str_0, none_type_5: linked_list_3}
    linked_list_8 = module_0.LinkedList(dict_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'

def test_case_124():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)

def test_case_125():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(var_3)
    assert node_3.data == 0
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_5 = module_0.Node(var_6)
    assert node_5.data == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_6 = module_0.Node(none_type_2, var_6)
    assert node_6.next == 0

def test_case_126():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    var_2 = linked_list_1.size()
    assert var_2 == 0

def test_case_127():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_128():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(var_0)
    assert node_3.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_4.display()
    assert var_8 == ')'
    var_9 = linked_list_4.search(var_8)
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    node_8 = module_0.Node(node_7)
    var_10 = linked_list_6.display()
    assert var_10 == ')'

def test_case_129():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_1.search(var_0)

def test_case_130():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'

def test_case_131():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)

def test_case_132():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.size()
    assert var_3 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    var_4 = linked_list_0.remove(var_0)

def test_case_133():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_4)
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_134():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_135():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    var_3 = linked_list_0.display()

def test_case_136():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(var_3)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.search(int_0)
    complex_1 = 1310.36731 + 1563.57861j
    var_12 = linked_list_7.remove(complex_1)

def test_case_137():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    var_4 = linked_list_3.search(none_type_3)
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    node_4 = module_0.Node(node_3)
    complex_2 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_2)
    bytes_0 = b'\x8c:\x05\xecP\xc8\xdc\x11"\x06\x17\x1aO\xf2'
    node_6 = module_0.Node(bytes_0)

def test_case_138():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(var_3)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(linked_list_6, linked_list_5)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_5 = module_0.Node(var_7)
    assert node_5.data == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    node_6 = module_0.Node(none_type_1, linked_list_5)

def test_case_139():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_1)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.search(int_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_1 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.search(int_1)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_4 = module_0.Node(linked_list_9, linked_list_8)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_140():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(linked_list_2, linked_list_1)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(none_type_2)

def test_case_141():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    var_3 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.Node'
    assert var_3.data is None
    assert var_3.next is None

def test_case_142():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.size()
    assert var_5 == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_6 = module_0.Node(var_6)
    assert node_6.data == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_5)
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_9 = linked_list_6.display()
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.search(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    var_12 = linked_list_8.display()
    assert var_12 == ')'

def test_case_143():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_4 = module_0.Node(linked_list_2, linked_list_1)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_5 = module_0.Node(var_4)
    assert node_5.data == 0
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_9 = linked_list_9.display()
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_8 = None
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_11 = linked_list_13.size()
    assert var_11 == 0
    var_12 = linked_list_11.display()
    assert var_12 == ')'
    none_type_9 = None
    node_8 = module_0.Node(none_type_9)
    linked_list_14 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_14.remove(none_type_9)
    linked_list_15 = module_0.LinkedList(none_type_9)
    assert linked_list_15.head is None
    var_14 = linked_list_15.display()
    assert var_14 == ')'
    var_15 = linked_list_2.size()
    assert var_15 == 1

def test_case_144():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)

def test_case_145():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()

def test_case_146():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_4)
    var_8 = linked_list_6.remove(linked_list_6)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_3 = module_0.Node(var_9)
    assert node_3.data == 0
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(bool_0)
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'

def test_case_147():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    var_7 = linked_list_6.search(none_type_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.push(var_9)
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_6)
    var_12 = linked_list_10.remove(linked_list_10)
    var_13 = linked_list_6.search(var_3)

def test_case_148():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.display()
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    node_3 = module_0.Node(none_type_1)

def test_case_149():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_7 = linked_list_4.display()
    node_2 = module_0.Node(linked_list_5)
    node_3 = module_0.Node(node_1)

def test_case_150():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    var_5 = linked_list_2.search(var_4)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.size()
    assert var_7 == 0
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_10 = linked_list_7.size()
    assert var_10 == 0
    var_11 = linked_list_7.display()
    assert var_11 == ')'
    var_12 = linked_list_7.search(none_type_6)
    var_13 = linked_list_7.remove(node_1)

def test_case_151():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(none_type_2)
    complex_1 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_1)
    node_3 = module_0.Node(node_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_6 = module_0.Node(var_8)
    assert node_6.data == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    var_10 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.Node'
    assert var_10.data is None
    assert var_10.next is None

def test_case_152():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None

def test_case_153():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_4 = module_0.Node(var_2)
    assert node_4.data == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_7 = module_0.Node(var_4)
    assert node_7.data == 0
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_9 = module_0.Node(list_1)
    node_10 = module_0.Node(node_9, list_1)
    node_11 = module_0.Node(node_9, dict_1)
    var_6 = linked_list_3.size()
    assert var_6 == 0

def test_case_154():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(linked_list_3, linked_list_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_6 = linked_list_10.size()
    assert var_6 == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    var_8 = linked_list_8.search(var_7)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.remove(none_type_5)
    var_10 = linked_list_11.display()
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_6)
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    linked_list_14 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_14.remove(none_type_7)
    linked_list_15 = module_0.LinkedList(none_type_7)
    assert linked_list_15.head is None
    var_13 = linked_list_14.display()
    linked_list_16 = module_0.LinkedList(linked_list_13)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'

def test_case_155():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)

def test_case_156():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.remove(linked_list_5)
    var_7 = linked_list_2.push(none_type_0)

def test_case_157():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    var_3 = linked_list_1.remove(linked_list_1)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_4)
    assert node_2.data == 0
    node_3 = module_0.Node(none_type_0)

def test_case_158():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_1)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.search(int_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(var_5)
    assert node_3.data == 0
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_5 = module_0.Node(var_6)
    assert node_5.data == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_6.display()
    assert var_10 == ')'

def test_case_159():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_1 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(int_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.remove(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_4)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_10 = linked_list_9.display()
    linked_list_11 = module_0.LinkedList(dict_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'

def test_case_160():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_4 = module_0.Node(var_2)
    assert node_4.data == 0
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_6 = module_0.Node(var_3)
    assert node_6.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_8 = module_0.Node(list_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_161():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(linked_list_2, linked_list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    var_5 = linked_list_4.search(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    var_10 = linked_list_6.search(var_9)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_9.remove(none_type_5)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_12 = linked_list_10.size()
    assert var_12 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_13 = linked_list_11.push(var_12)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_162():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_5 = module_0.Node(var_4)
    assert node_5.data == 0
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    int_1 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.search(int_1)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_5)
    var_9 = linked_list_9.display()
    var_10 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.Node'
    assert var_10.data is None
    assert var_10.next is None

def test_case_163():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.size()
    assert var_7 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    node_8 = module_0.Node(node_6, dict_0)
    node_9 = module_0.Node(var_5)
    assert node_9.data == ')'

def test_case_164():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.size()
    assert var_6 == 0
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    node_7 = module_0.Node(node_5, dict_0)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    var_9 = linked_list_6.search(none_type_6)
    node_9 = module_0.Node(var_3)

def test_case_165():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.search(int_0)
    var_8 = linked_list_7.remove(bool_0)

def test_case_166():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_4 = module_0.Node(linked_list_4)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_6 = module_0.Node(var_6)
    assert node_6.data == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_7.search(linked_list_6)

def test_case_167():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.size()
    assert var_4 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.remove(none_type_4)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_6)
    var_7 = linked_list_7.display()
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_8 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_7)
    var_9 = linked_list_8.remove(linked_list_8)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_10 = module_0.Node(list_1)
    none_type_8 = None
    linked_list_9 = module_0.LinkedList(none_type_8)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_0.push(none_type_0)

def test_case_168():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.search(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_5 = module_0.Node(var_6)
    assert node_5.data == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_8 = module_0.Node(var_10)
    assert node_8.data == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.remove(none_type_6)
    var_13 = linked_list_12.display()
    node_10 = module_0.Node(none_type_5, complex_0)

def test_case_169():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    var_5 = linked_list_1.search(var_4)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.remove(none_type_4)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_170():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_4 = module_0.Node(linked_list_4)
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    node_6 = module_0.Node(node_5)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(var_4)
    assert node_7.data == 0
    bool_0 = True
    node_8 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_9 = module_0.Node(var_5)
    assert node_9.data == 0
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_7 = linked_list_11.size()
    assert var_7 == 0
    var_8 = linked_list_11.display()
    assert var_8 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_7 = None
    node_11 = module_0.Node(none_type_7)
    linked_list_13 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_13.remove(none_type_7)
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    var_10 = linked_list_13.display()
    var_11 = linked_list_7.push(linked_list_2)

def test_case_171():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.remove(linked_list_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.search(int_0)
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_1)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_6 = module_0.Node(linked_list_6, linked_list_5)
    var_8 = linked_list_0.search(var_6)

def test_case_172():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    var_3 = linked_list_0.push(var_2)

def test_case_173():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(linked_list_2, linked_list_1)
    var_3 = linked_list_0.display()
    assert var_3 == ')'

def test_case_174():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'

def test_case_175():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    var_3 = linked_list_0.push(node_1)

def test_case_176():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_4 = module_0.Node(list_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    linked_list_8 = module_0.LinkedList(var_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'

def test_case_177():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)

def test_case_178():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_4)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.push(var_7)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_179():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    node_4 = module_0.Node(bool_0, linked_list_1)

def test_case_180():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None

def test_case_181():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(node_3, list_1)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(var_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_2, dict_2, str_2, dict_2]
    node_7 = module_0.Node(list_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_8 = module_0.Node(str_1)

def test_case_182():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None

def test_case_183():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_2 = module_0.Node(var_7)
    assert node_2.data == 0
    int_1 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.push(int_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(node_6, list_1)
    var_9 = linked_list_7.remove(node_7)

def test_case_184():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    var_4 = linked_list_3.remove(none_type_0)

def test_case_185():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(none_type_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_4)
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_9 = module_0.Node(var_6)
    assert node_9.data == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'

def test_case_186():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_5 = module_0.Node(list_1)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(var_4)
    assert node_7.data == 0
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    var_8 = linked_list_7.search(var_7)
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_2, dict_2, str_2, dict_2]
    node_8 = module_0.Node(list_2)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    int_1 = 629
    var_9 = linked_list_0.push(int_1)

def test_case_187():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0

def test_case_188():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    var_4 = linked_list_4.display()
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(var_5)
    assert node_4.data == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.push(var_7)
    var_9 = linked_list_2.size()
    assert var_9 == 0

def test_case_189():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_190():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    var_5 = linked_list_2.search(var_4)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    var_8 = linked_list_5.search(none_type_4)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(node_1)

def test_case_191():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    var_3 = linked_list_1.size()
    assert var_3 == 0

def test_case_192():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_1 = module_0.Node(list_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.search(int_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    node_8 = module_0.Node(node_7)
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_2, dict_2, str_2, dict_2]
    node_9 = module_0.Node(list_2)
    node_10 = module_0.Node(node_9, list_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_193():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    var_2 = linked_list_2.remove(linked_list_2)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(node_2, list_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(str_0)

def test_case_194():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(var_2)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_195():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(node_5, list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    var_8 = linked_list_4.push(none_type_0)

def test_case_196():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    var_2 = linked_list_0.search(var_1)

def test_case_197():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(var_3)
    var_5 = linked_list_1.remove(var_0)

def test_case_198():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_5 = module_0.Node(list_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_2, dict_2, str_2, dict_2]
    node_6 = module_0.Node(list_2)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_1 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.search(int_1)
    var_10 = linked_list_5.search(linked_list_10)

def test_case_199():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(linked_list_2, linked_list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.size()
    assert var_6 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(node_7, list_1)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.remove(none_type_5)
    var_8 = linked_list_8.search(node_9)
    int_1 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(int_1)
    var_10 = linked_list_9.display()
    assert var_10 == '(-1061)'

def test_case_200():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    var_5 = linked_list_6.search(none_type_3)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(bool_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_201():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    var_6 = linked_list_2.search(none_type_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_4.remove(none_type_4)
    var_8 = linked_list_4.remove(linked_list_4)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(bool_0)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_9 = linked_list_5.size()
    assert var_9 == 0

def test_case_202():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.remove(none_type_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    node_5 = module_0.Node(linked_list_7)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_7 = module_0.Node(var_7)
    assert node_7.data == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_8 = module_0.Node(list_1)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    var_9 = linked_list_10.display()
    assert var_9 == ')'

def test_case_203():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_4)
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_8 = module_0.Node(var_4)
    assert node_8.data == 0
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_9 = module_0.Node(list_1)
    node_10 = module_0.Node(node_9, list_1)
    node_11 = module_0.Node(node_9, dict_1)
    node_12 = module_0.Node(none_type_2, bool_0)
    var_6 = linked_list_6.remove(node_12)

def test_case_204():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    var_5 = linked_list_3.remove(node_4)

def test_case_205():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.size()
    assert var_4 == 0
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(var_5)
    assert node_4.data == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(linked_list_2)

def test_case_206():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(bool_0)
    var_1 = linked_list_0.size()
    assert var_1 == 0

def test_case_207():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(var_1)
    assert node_3.data == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_5 = module_0.Node(var_3)
    assert node_5.data == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    var_6 = linked_list_8.size()
    assert var_6 == 0
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_5)
    var_8 = linked_list_9.display()
    int_0 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.push(int_0)
    linked_list_11 = module_0.LinkedList(linked_list_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'

def test_case_208():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(int_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_7.display()
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(node_6, list_1)
    node_8 = module_0.Node(node_6, dict_1)
    bool_1 = True
    node_9 = module_0.Node(bool_1)
    node_10 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    node_11 = module_0.Node(node_0)

def test_case_209():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)

def test_case_210():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)

def test_case_211():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_212():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_2 = module_0.Node(var_5)
    assert node_2.data == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.remove(none_type_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_4 = module_0.Node(var_8)
    assert node_4.data == 0
    int_0 = 1454
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_9 = linked_list_11.search(int_0)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.remove(none_type_6)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_6 = module_0.Node(linked_list_12, linked_list_11)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    var_11 = linked_list_11.size()
    assert var_11 == 0

def test_case_213():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.search(node_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_214():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()

def test_case_215():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(bool_1)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(var_3)
    assert node_5.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_8 = linked_list_8.display()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    bool_3 = True
    node_9 = module_0.Node(bool_3)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_10 = module_0.Node(list_1)
    node_11 = module_0.Node(node_10, list_1)
    node_12 = module_0.Node(node_10, dict_1)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_9 = linked_list_11.size()
    assert var_9 == 0
    var_10 = linked_list_11.display()
    assert var_10 == ')'
    set_0 = {var_3, node_10}
    var_11 = linked_list_11.remove(set_0)

def test_case_216():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(int_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_1)
    var_5 = linked_list_3.display()
    var_6 = linked_list_3.display()
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_7 = linked_list_4.size()
    assert var_7 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_1 = module_0.Node(var_7)
    assert node_1.data == 0
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    var_10 = linked_list_6.display()
    assert var_10 == ')'
    var_11 = linked_list_6.search(var_10)
    var_12 = linked_list_6.display()
    assert var_12 == ')'

def test_case_217():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(var_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    bytes_0 = b'\x84od&\xf1<V<\x0c\x9a_\x19\xcb\xfa\x1f'
    set_0 = {var_2}
    node_7 = module_0.Node(bytes_0, set_0)

def test_case_218():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.remove(linked_list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    node_4 = module_0.Node(linked_list_0)

def test_case_219():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_220():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.display()
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(linked_list_6, linked_list_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    none_type_6 = None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_12.remove(none_type_6)
    var_13 = linked_list_4.display()
    assert var_13 == ')'

def test_case_221():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    int_1 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    var_4 = linked_list_4.display()
    var_5 = linked_list_4.display()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_8 = module_0.Node(var_6)
    assert node_8.data == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_4.size()
    assert var_9 == 1

def test_case_222():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(linked_list_2, linked_list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    var_4 = linked_list_4.remove(linked_list_4)
    node_4 = module_0.Node(linked_list_1)

def test_case_223():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_3)
    var_4 = linked_list_4.push(none_type_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_2.search(linked_list_3)

def test_case_224():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)

def test_case_225():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.remove(none_type_2)
    var_3 = linked_list_4.search(node_1)
    node_2 = module_0.Node(var_2)

def test_case_226():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.search(int_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    node_1 = module_0.Node(var_3, none_type_0)

def test_case_227():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_4.display()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.size()
    assert var_7 == 0
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_228():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(var_0)
    assert node_3.data == 0
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_229():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    linked_list_4 = module_0.LinkedList(var_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'

def test_case_230():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_2)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(var_5)
    assert node_4.data == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(var_8)
    bytes_0 = b's\x96I<\xb4\xd1'
    node_6 = module_0.Node(bytes_0, node_2)

def test_case_231():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    var_4 = linked_list_4.search(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_4 = module_0.Node(linked_list_0)

def test_case_232():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_3)
    assert node_1.data == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_6.display()
    node_4 = module_0.Node(linked_list_7)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(node_6, list_1)
    node_8 = module_0.Node(none_type_5)

def test_case_233():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_7 = module_0.Node(list_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    var_9 = linked_list_7.search(var_8)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_234():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_6 = module_0.Node(linked_list_1, linked_list_0)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    int_1 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_1)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    var_4 = linked_list_4.display()
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_9 = module_0.Node(bool_1)

def test_case_235():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.remove(none_type_5)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_4 = module_0.Node(list_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_5 = module_0.Node(list_0)

def test_case_236():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    var_3 = linked_list_2.remove(linked_list_2)

def test_case_237():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    var_1 = linked_list_0.display()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(var_3)
    assert node_3.data == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_4.display()
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    var_6 = linked_list_5.size()
    assert var_6 == 0

def test_case_238():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.display()
    var_4 = linked_list_1.display()
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_5 = linked_list_2.size()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    var_7 = linked_list_2.display()
    assert var_7 == ')'
    var_8 = linked_list_2.search(var_7)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_6.remove(none_type_5)
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    int_0 = -1061
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_11 = linked_list_8.push(int_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    var_13 = linked_list_6.remove(var_9)

def test_case_239():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    var_3 = linked_list_3.remove(linked_list_3)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_6.display()
    node_7 = module_0.Node(linked_list_7)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_240():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    var_3 = linked_list_2.search(var_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.remove(none_type_3)
    var_7 = linked_list_6.search(node_3)
    var_8 = linked_list_1.push(linked_list_1)

def test_case_241():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    var_3 = linked_list_2.search(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    var_5 = linked_list_3.remove(linked_list_3)
    var_6 = linked_list_2.display()
    assert var_6 == ')'

def test_case_242():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)

def test_case_243():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    var_3 = linked_list_3.display()
    var_4 = linked_list_3.display()
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    var_10 = linked_list_6.display()
    assert var_10 == ')'
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_11 = linked_list_9.size()
    assert var_11 == 0
    var_12 = linked_list_9.display()
    assert var_12 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    node_2 = module_0.Node(none_type_7)
    linked_list_11 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_11.remove(none_type_7)
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_14 = linked_list_12.display()
    assert var_14 == ')'
    none_type_8 = None
    node_3 = module_0.Node(none_type_8)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_15 = linked_list_13.remove(none_type_8)
    var_16 = linked_list_13.search(node_3)
    none_type_9 = None
    node_4 = module_0.Node(none_type_9)
    linked_list_14 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_17 = linked_list_14.remove(none_type_9)
    none_type_10 = None
    node_5 = module_0.Node(none_type_10)
    linked_list_15 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_18 = linked_list_15.remove(none_type_10)
    linked_list_16 = module_0.LinkedList(none_type_10)
    assert linked_list_16.head is None
    var_19 = linked_list_13.size()
    assert var_19 == 0

def test_case_244():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.size()
    assert var_2 == 0
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.display()
    assert var_8 == ')'

def test_case_245():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    var_2 = linked_list_0.push(str_0)

def test_case_246():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)

def test_case_247():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'

def test_case_248():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None

def test_case_249():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(node_4, list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    var_3 = linked_list_4.push(none_type_2)
    complex_1 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_1)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    var_6 = linked_list_5.search(none_type_3)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.size()
    assert var_8 == 0
    str_3 = '>M\x0bE2WfnbV=TJz'
    var_9 = linked_list_4.search(str_3)

def test_case_250():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(var_4)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    var_6 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList4.Node'
    assert var_6.data is None
    assert var_6.next is None

def test_case_251():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.display()
    var_6 = linked_list_4.display()
    list_0 = [node_0, bool_1, linked_list_1, var_5]
    node_6 = module_0.Node(list_0)

def test_case_252():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_3)
    var_4 = linked_list_3.push(none_type_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_4)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    var_6 = linked_list_3.pop()

def test_case_253():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_6 = module_0.Node(var_6)
    assert node_6.data == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    var_9 = linked_list_6.size()
    assert var_9 == 0
    int_0 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_10 = linked_list_7.push(int_0)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_11 = linked_list_8.remove(none_type_6)
    var_12 = linked_list_8.search(node_8)
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_9.remove(none_type_7)
    var_14 = linked_list_9.push(none_type_7)
    var_15 = linked_list_2.size()
    assert var_15 == 0

def test_case_254():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(bool_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.size()
    assert var_5 == 0
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_4)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_8 = linked_list_6.push(var_7)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    none_type_7 = None
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    var_11 = linked_list_8.display()
    assert var_11 == ')'
    var_12 = linked_list_8.search(none_type_7)
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_13 = linked_list_9.remove(none_type_8)
    var_14 = linked_list_2.search(node_8)

def test_case_255():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(float_0)
    float_1 = 2634.854
    dict_0 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_1]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    var_7 = linked_list_3.search(none_type_3)

def test_case_256():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    var_3 = linked_list_4.display()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(none_type_2)

def test_case_257():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(var_5)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.remove(none_type_6)
    linked_list_13 = module_0.LinkedList(var_8)
    assert linked_list_13.head is None
    bool_1 = False
    var_9 = linked_list_9.search(bool_1)

def test_case_258():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    var_5 = linked_list_3.push(none_type_2)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.search(int_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_5 = module_0.Node(linked_list_5, linked_list_4)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_5)
    var_10 = linked_list_9.display()
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.remove(none_type_6)
    var_12 = linked_list_10.search(node_7)
    none_type_7 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_13 = linked_list_11.remove(none_type_7)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    float_0 = -2869.0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_14 = linked_list_13.push(float_0)
    var_15 = linked_list_2.remove(node_0)

def test_case_259():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)

def test_case_260():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(var_5)
    assert linked_list_9.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(node_6, list_1)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_7 = linked_list_10.display()
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_8 = linked_list_12.size()
    assert var_8 == 0
    var_9 = linked_list_12.size()
    assert var_9 == 0
    var_10 = linked_list_5.size()
    assert var_10 == 0

def test_case_261():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_262():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_2)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    node_5 = module_0.Node(node_4)
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.push(float_0)
    var_10 = linked_list_8.push(node_3)

def test_case_263():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    int_1 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(var_4)
    str_0 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_7 = linked_list_8.display()
    node_5 = module_0.Node(linked_list_9)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_4)
    var_9 = linked_list_10.remove(linked_list_10)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(none_type_6)
    var_11 = linked_list_11.display()
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_12.remove(linked_list_3)

def test_case_264():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None

def test_case_265():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.display()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_1.search(dict_0)

def test_case_266():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)

def test_case_267():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    var_2 = linked_list_2.push(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    var_3 = linked_list_0.search(node_1)

def test_case_268():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.search(node_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    node_5 = module_0.Node(none_type_4)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_5 = module_0.LinkedList(none_type_6)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.size()
    assert var_7 == 0
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_7)
    var_9 = linked_list_6.push(none_type_7)
    var_10 = linked_list_3.search(var_1)

def test_case_269():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.remove(linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    var_6 = linked_list_5.search(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    var_10 = linked_list_6.search(var_9)
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_1 = [dict_1]
    list_2 = [bool_1, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_1, list_1, tuple_0)
    node_7 = module_0.Node(tuple_1)
    var_11 = linked_list_6.display()
    assert var_11 == ')'

def test_case_270():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(var_5)
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.search(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(var_9)
    assert linked_list_11.head is None
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_5 = module_0.Node(var_10)
    assert node_5.data == 0
    int_1 = 1454
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_11 = linked_list_14.search(int_1)
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_15 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_15.remove(none_type_7)
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    node_7 = module_0.Node(linked_list_15, linked_list_14)
    none_type_8 = None
    linked_list_17 = module_0.LinkedList(none_type_8)
    assert linked_list_17.head is None
    var_13 = linked_list_17.size()
    assert var_13 == 0
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None
    none_type_9 = None
    linked_list_19 = module_0.LinkedList(none_type_9)
    assert linked_list_19.head is None
    var_14 = linked_list_19.size()
    assert var_14 == 0
    var_15 = linked_list_17.display()
    assert var_15 == ')'
    var_16 = linked_list_17.search(var_15)
    node_8 = module_0.Node(node_5)

def test_case_271():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.push(none_type_1)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.display()
    var_7 = linked_list_5.display()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_11 = linked_list_9.size()
    assert var_11 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_12 = linked_list_11.size()
    assert var_12 == 0
    var_13 = linked_list_9.display()
    assert var_13 == ')'
    var_14 = linked_list_9.search(var_13)
    node_7 = module_0.Node(none_type_5)

def test_case_272():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    node_8 = module_0.Node(none_type_3)
    var_4 = linked_list_1.remove(none_type_2)

def test_case_273():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_274():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_1)
    var_4 = linked_list_4.search(node_3)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(node_4)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_3 = True
    list_0 = [dict_0]
    list_1 = [bool_3, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_3, list_0, tuple_0)
    node_6 = module_0.Node(tuple_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    var_8 = linked_list_3.display()
    assert var_8 == ')'

def test_case_275():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)

def test_case_276():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_2.remove(none_type_1)
    node_2 = module_0.Node(var_0)

def test_case_277():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.search(node_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(var_4)
    assert linked_list_5.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_6 = module_0.Node(var_5)
    assert node_6.data == 0
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    bool_1 = True
    node_9 = module_0.Node(bool_1)
    node_10 = module_0.Node(node_9)
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_8.push(node_8)

def test_case_278():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_279():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_3)
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(var_4)
    var_6 = linked_list_0.display()

def test_case_280():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.remove(none_type_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_2 = [dict_1, dict_1, str_0, dict_1]
    node_6 = module_0.Node(list_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_2 = linked_list_5.size()
    assert var_2 == 0
    var_3 = linked_list_5.size()
    assert var_3 == 0
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.search(int_0)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_9 = module_0.Node(linked_list_7, linked_list_6)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_7 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(var_7)
    assert linked_list_12.head is None
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_8 = linked_list_13.size()
    assert var_8 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    node_11 = module_0.Node(var_8)
    assert node_11.data == 0
    var_9 = linked_list_14.display()
    assert var_9 == ')'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0

def test_case_281():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'

def test_case_282():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    node_5 = module_0.Node(node_4)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_1)
    var_4 = linked_list_3.search(node_6)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    var_6 = linked_list_4.push(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    node_8 = module_0.Node(var_5)

def test_case_283():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(var_5)
    assert linked_list_8.head is None
    none_type_4 = None
    node_0 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_4)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_7 = linked_list_0.search(linked_list_9)

def test_case_284():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(var_3)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_4)
    var_8 = linked_list_6.remove(linked_list_6)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_5)
    var_10 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_5 = module_0.Node(var_9)

def test_case_285():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    var_2 = linked_list_0.size()
    assert var_2 == 0

def test_case_286():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.remove(none_type_3)
    var_4 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    set_0 = {var_2, none_type_2}
    var_5 = linked_list_2.push(set_0)

def test_case_287():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_288():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    var_5 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    node_5 = module_0.Node(linked_list_6)
    var_8 = linked_list_5.search(var_6)
    node_6 = module_0.Node(var_0)
    assert node_6.data == 0

def test_case_289():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_1)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(node_3)

def test_case_290():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_291():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    node_3 = module_0.Node(linked_list_5)
    var_5 = linked_list_4.search(var_3)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_5 = module_0.Node(var_6)
    assert node_5.data == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.search(int_0)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    complex_1 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList(none_type_0)
    assert linked_list_10.head is None

def test_case_292():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_1 = module_0.Node(list_1)
    node_2 = module_0.Node(node_1, list_1)
    node_3 = module_0.Node(node_1, dict_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_7 = module_0.Node(var_4)
    assert node_7.data == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.remove(none_type_5)
    var_10 = linked_list_10.search(node_8)
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    var_12 = linked_list_11.display()
    assert var_12 == ')'
    node_9 = module_0.Node(linked_list_1)

def test_case_293():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(int_0)
    int_1 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_1)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_5.remove(none_type_0)
    linked_list_6 = module_0.LinkedList(none_type_0)
    assert linked_list_6.head is None
    var_3 = linked_list_5.display()
    node_6 = module_0.Node(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_7 = module_0.Node(none_type_0)

def test_case_294():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    var_4 = linked_list_4.display()
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    var_7 = linked_list_5.search(none_type_3)
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_1 = [dict_1]
    list_2 = [bool_1, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_1, list_1, tuple_0)
    node_6 = module_0.Node(tuple_1)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    var_11 = linked_list_7.search(var_10)
    var_12 = linked_list_1.search(var_0)

def test_case_295():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    var_3 = linked_list_3.search(var_1)
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_3 = module_0.Node(tuple_1)
    var_4 = linked_list_0.remove(dict_0)

def test_case_296():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_5.display()
    node_6 = module_0.Node(linked_list_6)
    int_0 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    node_8 = module_0.Node(bool_0)

def test_case_297():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(node_2)

def test_case_298():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_299():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_5)
    none_type_6 = None
    linked_list_5 = module_0.LinkedList(none_type_6)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(var_5)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_300():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.display()
    assert var_2 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.search(int_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(linked_list_5, linked_list_4)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_7 = module_0.Node(var_6)
    assert node_7.data == 0
    var_7 = linked_list_10.display()
    assert var_7 == ')'
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_9 = module_0.Node(var_8)
    assert node_9.data == 0
    var_9 = linked_list_12.display()
    assert var_9 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_7 = None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_10 = linked_list_14.remove(none_type_7)
    var_11 = linked_list_0.search(node_4)

def test_case_301():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)

def test_case_302():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_1)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(node_4)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.size()
    assert var_4 == 0
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.display()
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_11.remove(none_type_7)
    linked_list_12 = module_0.LinkedList(var_11)
    assert linked_list_12.head is None
    node_9 = module_0.Node(linked_list_3)

def test_case_303():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(float_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    float_1 = 2634.854
    dict_0 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_1]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    var_5 = linked_list_0.pop()
    assert var_5 == -1061
    assert linked_list_0.head is None

def test_case_304():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(var_5)
    assert node_4.data == 0
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    var_8 = linked_list_4.display()
    assert var_8 == ')'

def test_case_305():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_306():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_307():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_1)
    node_1 = module_0.Node(node_0, list_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_2 = linked_list_1.search(none_type_2)

def test_case_308():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_309():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_1)
    complex_0 = 2338.782 - 2046.454183j
    linked_list_2 = module_0.LinkedList(complex_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'

def test_case_310():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)

def test_case_311():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.remove(none_type_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_4)
    var_5 = linked_list_6.push(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_7.display()
    node_6 = module_0.Node(linked_list_8)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_0)
    none_type_6 = None
    node_10 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.remove(none_type_6)
    var_9 = linked_list_9.search(node_10)
    node_11 = module_0.Node(none_type_0)

def test_case_312():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_2)
    var_4 = linked_list_4.search(node_1)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_9 = linked_list_7.display()
    node_3 = module_0.Node(linked_list_8)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    var_12 = linked_list_9.display()
    assert var_12 == ')'
    var_13 = linked_list_9.search(var_12)
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_14 = linked_list_12.size()
    assert var_14 == 0
    none_type_8 = None
    node_4 = module_0.Node(none_type_8)
    linked_list_13 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_13.remove(none_type_8)
    none_type_9 = None
    node_5 = module_0.Node(none_type_9)
    linked_list_14 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_16 = linked_list_14.remove(none_type_9)
    linked_list_15 = module_0.LinkedList(none_type_9)
    assert linked_list_15.head is None
    var_17 = linked_list_14.display()
    var_18 = linked_list_5.remove(none_type_1)

def test_case_313():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(var_3)
    assert node_3.data == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.remove(none_type_2)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    int_1 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.search(int_1)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    complex_1 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    var_9 = linked_list_5.push(var_0)

def test_case_314():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    var_3 = linked_list_2.search(var_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.size()
    assert var_6 == 0
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.search(int_0)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_6)
    var_11 = linked_list_10.display()
    var_12 = linked_list_10.display()
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_315():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    var_9 = linked_list_2.display()
    assert var_9 == '(0)'

def test_case_316():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None

def test_case_317():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.size()
    assert var_3 == 0
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_4)
    var_5 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_5)
    int_0 = -1061
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(int_0)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_11 = linked_list_1.display()
    assert var_11 == ')'

def test_case_318():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0

def test_case_319():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_1)
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.remove(linked_list_1)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_7 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_0.pop()
    assert var_4 == 'n'

def test_case_320():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    list_0 = []
    var_7 = linked_list_6.push(list_0)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_6)
    var_10 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.search(int_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_12.remove(none_type_7)
    var_13 = linked_list_12.search(node_7)
    var_14 = linked_list_12.display()
    assert var_14 == ')'

def test_case_321():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)

def test_case_322():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'

def test_case_323():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None

def test_case_324():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)

def test_case_325():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_4.display()
    var_4 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_0.push(linked_list_2)

def test_case_326():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_5 = module_0.Node(var_1)
    assert node_5.data == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_6 = module_0.Node(list_1)
    var_3 = linked_list_4.remove(none_type_1)

def test_case_327():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.search(int_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(linked_list_6, linked_list_5)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    var_8 = linked_list_2.display()
    assert var_8 == '(0)'

def test_case_328():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_8 = module_0.Node(list_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_3 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    float_0 = -2869.0
    node_9 = module_0.Node(float_0)
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_11 = module_0.Node(var_4)
    assert node_11.data == 0
    var_5 = linked_list_8.display()
    assert var_5 == ')'
    var_6 = linked_list_5.remove(none_type_1)

def test_case_329():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'

def test_case_330():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    var_0 = linked_list_0.remove(dict_0)

def test_case_331():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_1 = module_0.Node(linked_list_4)
    var_5 = linked_list_3.search(var_3)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    var_8 = linked_list_7.push(none_type_4)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None

def test_case_332():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    var_2 = linked_list_1.search(var_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    var_4 = linked_list_3.remove(linked_list_3)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(linked_list_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'

def test_case_333():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    list_0 = []
    var_1 = linked_list_1.push(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_0, dict_0, str_1, dict_0]
    node_6 = module_0.Node(list_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_8 = module_0.Node(var_3)
    assert node_8.data == 0
    var_4 = linked_list_7.display()
    assert var_4 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_0.remove(none_type_2)

def test_case_334():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_8 = module_0.Node(var_4)
    assert node_8.data == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    complex_1 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_1)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    var_8 = linked_list_7.search(none_type_3)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    node_10 = module_0.Node(linked_list_4, node_3)

def test_case_335():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    var_5 = linked_list_0.display()

def test_case_336():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.size()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    float_0 = -2869.0
    node_6 = module_0.Node(float_0)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_1.size()
    assert var_6 == 0
    node_9 = module_0.Node(var_6, float_0)
    assert node_9.data == 0

def test_case_337():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(var_5)
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    none_type_7 = None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_10 = linked_list_12.remove(none_type_7)
    none_type_8 = None
    node_0 = module_0.Node(none_type_8)
    linked_list_13 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_13.remove(none_type_8)
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    var_12 = linked_list_13.display()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_9 = None
    linked_list_15 = module_0.LinkedList(none_type_9)
    assert linked_list_15.head is None
    var_13 = linked_list_15.size()
    assert var_13 == 0
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    node_2 = module_0.Node(var_13)
    assert node_2.data == 0
    var_14 = linked_list_16.display()
    assert var_14 == ')'
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    linked_list_18 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_18.head).__module__}.{type(linked_list_18.head).__qualname__}' == 'linkedList4.Node'

def test_case_338():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(var_4)
    assert node_4.data == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_1 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_6 = linked_list_10.size()
    assert var_6 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_6 = module_0.Node(var_6)
    assert node_6.data == 0
    var_7 = linked_list_11.display()
    assert var_7 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.size()
    assert var_8 == 0
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_13 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_13.remove(none_type_4)
    var_10 = linked_list_13.display()
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    node_10 = module_0.Node(var_10)
    str_2 = '3$;;z6n'
    linked_list_14 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_15 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_3)

def test_case_339():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)

def test_case_340():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    var_4 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    var_5 = linked_list_4.search(int_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    var_8 = linked_list_5.search(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)

def test_case_341():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(float_0)
    linked_list_6 = module_0.LinkedList(var_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'

def test_case_342():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_3 = linked_list_7.size()
    assert var_3 == 0
    var_4 = linked_list_7.display()
    assert var_4 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_6 = linked_list_9.display()
    linked_list_11 = module_0.LinkedList(var_4)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'

def test_case_343():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_344():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_1 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_4 = module_0.Node(linked_list_3, linked_list_2)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_1)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(var_4)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_4)
    var_7 = linked_list_9.display()
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    node_8 = module_0.Node(var_7)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    var_9 = linked_list_11.display()
    assert var_9 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_9 = module_0.Node(tuple_1)
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_10 = linked_list_13.size()
    assert var_10 == 0
    var_11 = linked_list_13.display()
    assert var_11 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_12 = linked_list_14.display()
    assert var_12 == ')'
    none_type_8 = None
    node_10 = module_0.Node(none_type_8)
    linked_list_15 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_15.remove(none_type_8)
    linked_list_16 = module_0.LinkedList(none_type_8)
    assert linked_list_16.head is None
    var_14 = linked_list_15.display()
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None

def test_case_345():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0
    linked_list_7 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'

def test_case_346():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.search(node_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(none_type_2)
    int_1 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_5 = module_0.Node(linked_list_4, linked_list_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_0)
    float_0 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(float_0)
    node_9 = module_0.Node(var_3)

def test_case_347():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.display()
    assert var_3 == ')'

def test_case_348():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 3548
    var_9 = linked_list_7.search(int_0)
    node_4 = module_0.Node(int_0, var_9)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_6 = None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.remove(none_type_6)
    linked_list_11 = module_0.LinkedList(var_11)
    assert linked_list_11.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_5 = module_0.Node(tuple_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_2 = [dict_1, dict_1, str_0, dict_1]
    node_6 = module_0.Node(list_2)
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    linked_list_12 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.remove(none_type_7)
    var_13 = linked_list_12.display()
    var_14 = linked_list_8.size()
    assert var_14 == 0

def test_case_349():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_2 = linked_list_5.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.search(int_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    var_7 = linked_list_8.search(none_type_5)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_6)
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.display()
    assert var_9 == ')'
    str_2 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(linked_list_11)
    none_type_8 = None
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    var_11 = linked_list_14.size()
    assert var_11 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_12 = linked_list_14.display()
    assert var_12 == ')'
    set_0 = {linked_list_3, node_2}
    var_13 = linked_list_4.remove(set_0)

def test_case_350():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_1.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    list_0 = []
    var_6 = linked_list_4.push(list_0)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_4)
    var_8 = linked_list_5.push(none_type_4)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_6.display()
    assert var_9 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_10 = linked_list_7.size()
    assert var_10 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_2 = module_0.Node(list_0, linked_list_9)

def test_case_351():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    set_0 = {node_1, linked_list_1}
    node_4 = module_0.Node(set_0)

def test_case_352():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.display()
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.search(int_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(linked_list_5, linked_list_4)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_8 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList(var_8)
    assert linked_list_12.head is None
    node_5 = module_0.Node(var_1, complex_0)

def test_case_353():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_1)
    var_4 = linked_list_5.display()
    int_1 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(int_1)
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_9 = module_0.Node(var_6)
    assert node_9.data == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    node_10 = module_0.Node(none_type_1)

def test_case_354():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    var_7 = linked_list_0.display()
    assert var_7 == ')'

def test_case_355():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(float_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(none_type_2)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    str_2 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    node_10 = module_0.Node(bool_1)
    bool_2 = True
    node_11 = module_0.Node(bool_2)
    node_12 = module_0.Node(bool_2)
    float_1 = -4426.2672
    var_7 = linked_list_8.search(float_1)

def test_case_356():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    node_4 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_5 = module_0.Node(var_3)
    assert node_5.data == 0
    str_0 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_10.remove(none_type_5)
    var_5 = linked_list_10.display()
    var_6 = linked_list_10.display()
    node_7 = module_0.Node(linked_list_3, var_1)
    assert node_7.next == ')'

def test_case_357():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_5 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    bool_0 = True
    node_8 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_9 = module_0.Node(var_7)
    assert node_9.data == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_0.search(linked_list_5)

def test_case_358():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(float_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_6 = linked_list_3.display()
    assert var_6 == '(-2869.0)'

def test_case_359():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 3548
    var_4 = linked_list_4.search(int_0)
    node_4 = module_0.Node(int_0, var_4)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.search(node_5)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(var_2)
    assert linked_list_8.head is None

def test_case_360():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.search(node_3)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.size()
    assert var_6 == 0
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    bool_3 = True
    node_8 = module_0.Node(bool_3)
    node_9 = module_0.Node(bool_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_10 = module_0.Node(list_0)
    bool_4 = True
    node_11 = module_0.Node(bool_4)
    node_12 = module_0.Node(node_11)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_3.remove(node_4)

def test_case_361():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.size()
    assert var_5 == 0
    var_6 = linked_list_1.display()

def test_case_362():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(var_6)
    assert node_2.data == 0
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    var_8 = linked_list_6.display()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(var_8)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_363():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.push(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    node_4 = module_0.Node(linked_list_5)
    var_7 = linked_list_4.search(var_5)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    float_1 = 2634.854
    dict_1 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_1]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_6 = module_0.Node(tuple_1)
    var_8 = linked_list_1.push(none_type_1)

def test_case_364():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_2)
    var_2 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_5 = module_0.Node(tuple_1)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_8.display()
    assert var_4 == ')'
    str_2 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_8.remove(linked_list_8)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_11.remove(none_type_6)
    var_7 = linked_list_11.display()
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    node_9 = module_0.Node(var_7)
    str_3 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_8 = None
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    var_8 = linked_list_14.size()
    assert var_8 == 0
    var_9 = linked_list_1.push(linked_list_1)

def test_case_365():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(linked_list_3, linked_list_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    var_5 = linked_list_6.push(none_type_2)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_4)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.push(var_9)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_6 = module_0.Node(tuple_1)
    int_1 = 1454
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.search(int_1)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    node_8 = module_0.Node(node_7)
    var_12 = linked_list_6.search(var_0)
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList4.Node'
    assert var_12.data is None
    assert f'{type(var_12.next).__module__}.{type(var_12.next).__qualname__}' == 'linkedList4.Node'

def test_case_366():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(var_4)
    assert linked_list_6.head is None
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    var_8 = linked_list_7.remove(node_3)

def test_case_367():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(bool_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    var_3 = linked_list_3.display()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    node_8 = module_0.Node(var_3)
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    var_9 = linked_list_7.search(var_8)
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_10 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_7)
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    var_12 = linked_list_0.push(none_type_2)

def test_case_368():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_5 = module_0.Node(var_5)
    assert node_5.data == 0
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.size()
    assert var_8 == 0
    int_0 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(int_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_369():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(float_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(var_5)
    node_4 = module_0.Node(linked_list_1)

def test_case_370():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    str_2 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_3 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_2 = linked_list_6.display()
    assert var_2 == ')'
    var_3 = linked_list_5.push(var_1)

def test_case_371():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(var_3)
    assert linked_list_4.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_3)
    var_5 = linked_list_6.display()
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    node_5 = module_0.Node(var_5)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_8 = module_0.Node(var_5)

def test_case_372():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_1.search(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(var_4)
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    str_0 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.search(int_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.remove(none_type_5)
    var_8 = linked_list_2.push(complex_1)

def test_case_373():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    str_2 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_6.remove(none_type_2)
    var_3 = linked_list_6.display()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(var_3)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_7 = module_0.Node(var_4)
    assert node_7.data == 0
    var_5 = linked_list_8.display()
    assert var_5 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_6 = linked_list_10.size()
    assert var_6 == 0
    str_3 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_6 = None
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    list_1 = []
    var_7 = linked_list_13.push(list_1)
    str_4 = 'bDW;iy=HR-qhC'
    node_8 = module_0.Node(str_4)

def test_case_374():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    var_3 = linked_list_3.search(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    var_7 = linked_list_4.search(var_6)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    int_0 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.push(int_0)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_5)
    var_12 = linked_list_10.display()
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_14 = linked_list_11.display()
    node_8 = module_0.Node(linked_list_12)
    var_15 = linked_list_3.display()
    assert var_15 == ')'

def test_case_375():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_2)
    var_5 = linked_list_3.search(node_3)
    node_4 = module_0.Node(none_type_0, node_3)

def test_case_376():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_1 = 3548
    var_4 = linked_list_4.search(int_1)
    node_3 = module_0.Node(int_1, var_4)
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    list_0 = []
    var_7 = linked_list_6.push(list_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(node_4, list_1)
    node_6 = module_0.Node(var_1)

def test_case_377():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    var_4 = linked_list_1.display()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(var_4)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_6 = module_0.Node(var_7)
    assert node_6.data == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_378():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(linked_list_2)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_2 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    float_0 = -2869.0
    node_4 = module_0.Node(float_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_3)
    var_5 = linked_list_7.display()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    var_7 = linked_list_8.size()
    assert var_7 == 0
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_9 = linked_list_9.display()
    node_8 = module_0.Node(linked_list_10)
    var_10 = linked_list_9.search(var_8)
    var_11 = linked_list_3.size()
    assert var_11 == 7

def test_case_379():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)

def test_case_380():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(node_2, list_1)
    node_4 = module_0.Node(node_2, dict_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_5 = module_0.Node(var_3)
    assert node_5.data == 0
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(bool_0)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.display()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.size()
    assert var_7 == 0
    var_8 = linked_list_1.remove(var_0)

def test_case_381():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(node_1, var_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_0.display()

def test_case_382():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_1)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_1)
    var_3 = linked_list_2.search(none_type_0)

def test_case_383():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    str_2 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_4.display()
    assert var_1 == ')'
    str_3 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(linked_list_4)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_7.remove(none_type_2)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_4 = linked_list_8.search(int_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_2 = module_0.Node(linked_list_9, linked_list_8)
    var_6 = linked_list_9.size()
    assert var_6 == 1

def test_case_384():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_385():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(var_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_4.display()
    node_4 = module_0.Node(linked_list_5)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.remove(none_type_5)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)
    node_9 = module_0.Node(node_7, dict_0)
    var_9 = linked_list_8.push(node_5)

def test_case_386():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    var_4 = linked_list_2.remove(linked_list_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    none_type_4 = None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.remove(none_type_4)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    float_0 = -2869.0
    node_4 = module_0.Node(float_0)
    var_10 = linked_list_3.display()
    assert var_10 == ')'

def test_case_387():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    var_2 = linked_list_1.search(var_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_3)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    node_7 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(none_type_5)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_0)
    bool_0 = True
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(node_8)
    complex_0 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_11 = module_0.Node(list_1)
    node_12 = module_0.Node(node_11, list_1)
    none_type_6 = None
    node_13 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_6)
    var_7 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_14 = module_0.Node(node_13, var_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_388():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'

def test_case_389():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)

def test_case_390():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.size()
    assert var_2 == 0
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_7 = linked_list_11.remove(none_type_7)
    linked_list_12 = module_0.LinkedList(var_7)
    assert linked_list_12.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    none_type_8 = None
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_8 = linked_list_13.size()
    assert var_8 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_9 = linked_list_14.display()
    assert var_9 == ')'

def test_case_391():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_2)
    var_3 = linked_list_2.display()
    assert var_3 == ')'

def test_case_392():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)

def test_case_393():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    int_1 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.search(int_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_2)
    var_4 = linked_list_5.push(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_3)
    var_6 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_6 = module_0.Node(node_5, var_5)
    node_7 = module_0.Node(linked_list_1)

def test_case_394():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(var_3)
    assert linked_list_5.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_3)
    var_5 = linked_list_7.display()
    var_6 = linked_list_7.display()
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(node_5, list_1)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(bool_1)
    var_7 = linked_list_1.push(str_1)

def test_case_395():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_396():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    var_2 = linked_list_3.display()
    var_3 = linked_list_3.display()
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_0 = 3548
    var_6 = linked_list_6.search(int_0)
    node_5 = module_0.Node(int_0, var_6)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    node_7 = module_0.Node(linked_list_8)
    var_9 = linked_list_7.search(var_7)
    var_10 = linked_list_8.search(node_7)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_12 = linked_list_10.size()
    assert var_12 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_8 = module_0.Node(var_12)
    assert node_8.data == 0
    var_13 = linked_list_11.push(none_type_4)
    var_14 = linked_list_1.pop()
    assert var_14 == 'n'

def test_case_397():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0
    node_5 = module_0.Node(linked_list_3)

def test_case_398():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_2.push(none_type_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 3548
    var_5 = linked_list_4.search(int_0)
    node_3 = module_0.Node(int_0, var_5)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.remove(none_type_3)
    var_7 = linked_list_6.search(node_4)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    var_9 = linked_list_7.display()
    var_10 = linked_list_7.display()
    linked_list_8 = module_0.LinkedList(var_2)
    assert linked_list_8.head is None

def test_case_399():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    var_5 = linked_list_7.remove(none_type_3)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    var_7 = linked_list_9.push(var_6)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    float_0 = -2869.0
    linked_list_10 = module_0.LinkedList()
    var_8 = linked_list_10.push(float_0)
    linked_list_11 = module_0.LinkedList()

def test_case_400():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(float_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    float_1 = -2869.0
    node_1 = module_0.Node(float_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(var_4)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_4 = module_0.Node(var_6)
    assert node_4.data == 0
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    var_9 = linked_list_11.display()
    assert var_9 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    tuple_0 = (var_6,)
    var_10 = linked_list_12.remove(tuple_0)

def test_case_401():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_1 = module_0.LinkedList(none_type_3)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(float_0)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_5)
    var_5 = linked_list_5.remove(linked_list_5)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    node_7 = module_0.Node(node_6)
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    list_0 = []
    var_6 = linked_list_6.push(list_0)
    var_7 = linked_list_2.push(list_0)

def test_case_402():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    var_6 = linked_list_2.display()
    assert var_6 == ')'

def test_case_403():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_1)
    node_3 = module_0.Node(node_2)
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'

def test_case_404():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_1 = module_0.Node(var_5)
    assert node_1.data == 0
    var_6 = linked_list_7.push(none_type_2)
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_7 = linked_list_8.remove(list_0)

def test_case_405():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    list_0 = []
    var_7 = linked_list_6.push(list_0)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_1 = [dict_0]
    list_2 = [bool_0, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_0, bool_0, list_1, tuple_0)
    node_1 = module_0.Node(tuple_1)
    none_type_7 = None
    node_2 = module_0.Node(none_type_7)
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_9 = None
    linked_list_13 = module_0.LinkedList(none_type_9)
    assert linked_list_13.head is None
    var_12 = linked_list_13.size()
    assert var_12 == 0
    var_13 = linked_list_11.display()
    assert var_13 == ')'
    var_14 = linked_list_11.search(var_13)
    list_3 = [str_0, linked_list_11, var_3]
    bool_1 = True
    dict_1 = {var_1: list_3, node_1: var_12, var_8: linked_list_3, var_10: bool_1}
    node_3 = module_0.Node(dict_1)

def test_case_406():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_0)
    var_3 = linked_list_1.display()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    float_1 = 2634.854
    dict_1 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_1 = True
    list_1 = [dict_1]
    list_2 = [bool_1, float_1]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_1, list_1, tuple_0)
    node_5 = module_0.Node(tuple_1)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_5 = linked_list_2.display()
    node_7 = module_0.Node(linked_list_3)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    node_9 = module_0.Node(node_8)
    str_1 = '#p1jIXa}Q?(h'
    dict_2 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_3 = [dict_2, dict_2, str_1, dict_2]
    node_10 = module_0.Node(list_3)
    node_11 = module_0.Node(node_10, list_3)
    str_2 = '#p1jIXa}Q?(h'
    dict_3 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_4 = [dict_3, dict_3, str_2, dict_3]
    node_12 = module_0.Node(list_4)
    node_13 = module_0.Node(node_12, list_4)
    node_14 = module_0.Node(node_12, dict_3)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_15 = module_0.Node(var_6)
    assert node_15.data == 0
    var_7 = linked_list_0.pop()
    assert var_7 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_0.head is None

def test_case_407():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(float_0)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_1)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(node_8, list_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_10 = module_0.Node(var_10)
    assert node_10.data == 0
    var_11 = linked_list_11.push(none_type_6)
    var_12 = linked_list_5.push(none_type_0)

def test_case_408():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)

def test_case_409():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)

def test_case_410():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_9 = linked_list_7.display()
    node_3 = module_0.Node(linked_list_8)
    var_10 = linked_list_7.search(var_8)
    var_11 = linked_list_8.search(node_3)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_9.remove(none_type_5)
    var_13 = linked_list_9.display()
    var_14 = linked_list_9.display()
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_15 = linked_list_10.search(int_0)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    int_1 = 1454
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_16 = linked_list_12.search(int_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_13 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_17 = linked_list_13.display()
    assert var_17 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_6 = None
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    str_0 = '3$;;z6n'
    linked_list_15 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_18 = linked_list_14.display()
    assert var_18 == ')'
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    linked_list_16 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_19 = linked_list_16.remove(none_type_7)
    bool_1 = True
    node_9 = module_0.Node(bool_1)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(bool_1)
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None

def test_case_411():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.search(int_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_1)
    var_6 = linked_list_4.display()
    var_7 = linked_list_4.display()
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.search(int_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_7 = module_0.Node(linked_list_6, linked_list_5)
    var_10 = linked_list_1.display()
    assert var_10 == ')'

def test_case_412():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None

def test_case_413():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_0)
    node_1 = module_0.Node(linked_list_0, linked_list_1)

def test_case_414():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'

def test_case_415():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(var_3)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = 3548
    var_7 = linked_list_5.search(int_0)
    node_0 = module_0.Node(int_0, var_7)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    var_8 = linked_list_1.size()
    assert var_8 == 0

def test_case_416():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.search(int_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(linked_list_5, linked_list_4)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    list_0 = []
    var_6 = linked_list_8.push(list_0)
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_7)
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_8 = linked_list_9.display()
    node_7 = module_0.Node(linked_list_10)
    var_9 = linked_list_9.search(var_7)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.remove(var_7)

def test_case_417():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_3 = module_0.Node(linked_list_1)
    node_4 = module_0.Node(linked_list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.remove(linked_list_5)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.push(float_0)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_1)
    var_10 = linked_list_8.display()
    assert var_10 == '(-2869.0)'
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.search(int_0)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_11 = module_0.Node(linked_list_10, linked_list_9)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_13 = linked_list_12.display()
    assert var_13 == ')'
    none_type_6 = None
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    str_0 = '3$;;z6n'
    linked_list_14 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_13.display()
    assert var_14 == ')'
    str_1 = '3$;;z6n'
    linked_list_15 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_13.remove(linked_list_13)
    bool_2 = True
    node_12 = module_0.Node(bool_2)
    none_type_7 = None
    linked_list_16 = module_0.LinkedList(none_type_7)
    assert linked_list_16.head is None
    var_16 = linked_list_16.size()
    assert var_16 == 0
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    node_13 = module_0.Node(var_16)
    assert node_13.data == 0
    var_17 = linked_list_17.display()
    assert var_17 == ')'
    var_18 = linked_list_8.search(none_type_7)

def test_case_418():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    var_3 = linked_list_2.search(var_1)
    var_4 = linked_list_3.search(node_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    float_0 = -2869.0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(float_0)
    float_1 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.push(float_1)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    var_9 = linked_list_7.display()
    assert var_9 == '(-2869.0)'
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    var_11 = linked_list_8.display()
    assert var_11 == ')'
    var_12 = linked_list_8.search(none_type_4)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_419():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(linked_list_5)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_8.display()
    node_4 = module_0.Node(linked_list_9)
    var_10 = linked_list_8.search(var_8)
    var_11 = linked_list_9.search(node_4)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_10.display()
    assert var_12 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_13 = linked_list_2.size()
    assert var_13 == 1

def test_case_420():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_2)
    var_4 = linked_list_2.display()
    var_5 = linked_list_2.display()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_4)
    var_7 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(node_3, var_6)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    list_0 = []
    var_9 = linked_list_7.push(list_0)
    linked_list_8 = module_0.LinkedList(var_0)
    assert linked_list_8.head is None

def test_case_421():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1

def test_case_422():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 3548
    var_5 = linked_list_4.search(int_0)
    node_1 = module_0.Node(int_0, var_5)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(float_0)
    var_8 = linked_list_7.pop()
    assert var_8 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    var_13 = linked_list_10.search(var_12)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None

def test_case_423():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    var_1 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_5 = module_0.Node(node_4, var_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.push(int_0)
    var_3 = linked_list_5.size()
    assert var_3 == 1
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_424():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(linked_list_1)
    float_1 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(float_1)
    var_5 = linked_list_4.search(linked_list_0)

def test_case_425():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(float_0)
    var_3 = linked_list_3.pop()
    assert var_3 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(var_7)
    assert node_4.data == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.search(int_0)
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(node_5)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    str_1 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_12 = linked_list_12.display()
    assert var_12 == ')'
    linked_list_14 = module_0.LinkedList(linked_list_4)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'

def test_case_426():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_1.search(var_2)

def test_case_427():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0

def test_case_428():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    var_3 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.Node'
    assert var_3.data is None
    assert var_3.next is None
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_5)
    var_4 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    var_5 = linked_list_0.pop()
    assert var_5 == 243

def test_case_429():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_2)
    var_5 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(none_type_4)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_8 = linked_list_11.display()
    assert var_8 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_9 = linked_list_12.display()
    assert var_9 == ')'
    node_8 = module_0.Node(var_9)
    assert node_8.data == ')'
    none_type_6 = None
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_10 = linked_list_13.remove(none_type_6)
    bool_1 = True
    node_9 = module_0.Node(bool_1)

def test_case_430():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    str_1 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_1 = linked_list_4.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.remove(none_type_2)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None

def test_case_431():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    var_4 = linked_list_1.search(var_2)
    var_5 = linked_list_2.search(node_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_3.remove(none_type_2)
    var_7 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    var_9 = linked_list_6.size()
    assert var_9 == 0
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_10 = linked_list_7.size()
    assert var_10 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    float_0 = -2869.0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_12.push(float_0)
    var_13 = linked_list_12.pop()
    assert var_13 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_12.head is None
    none_type_8 = None
    node_6 = module_0.Node(none_type_8)
    linked_list_13 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_13.remove(none_type_8)
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None

def test_case_432():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(none_type_2)
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0

def test_case_433():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(int_0)
    node_3 = module_0.Node(int_0, var_0)
    assert node_3.next == ')'

def test_case_434():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_7 = module_0.Node(var_4)
    assert node_7.data == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.size()
    assert var_7 == 0
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(var_6)
    assert node_10.data == 0
    set_0 = {var_6, var_5, var_7}
    var_8 = linked_list_1.remove(set_0)

def test_case_435():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_2)
    var_2 = linked_list_1.display()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(var_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    node_6 = module_0.Node(var_3)
    assert node_6.data == ')'
    var_4 = linked_list_0.size()
    assert var_4 == 1

def test_case_436():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    node_3 = module_0.Node(node_0)

def test_case_437():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(int_0)
    var_1 = linked_list_1.size()
    assert var_1 == 1
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_438():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_5 = module_0.Node(var_0)
    assert node_5.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    float_0 = -2869.0
    node_6 = module_0.Node(float_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_3)
    bool_3 = True
    node_8 = module_0.Node(bool_3)
    node_9 = module_0.Node(bool_3)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_10 = module_0.Node(list_0)
    node_11 = module_0.Node(node_10, list_0)
    node_12 = module_0.Node(node_10, dict_0)
    list_1 = [bool_2]
    node_13 = module_0.Node(var_1, list_1)
    assert node_13.data == ')'

def test_case_439():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.display()
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    node_1 = module_0.Node(var_3)
    assert node_1.data == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(var_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_8.display()
    var_10 = linked_list_8.pop()
    assert linked_list_8.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.Node'
    assert var_10.data is None
    assert var_10.next is None
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_8)
    var_11 = linked_list_10.remove(none_type_6)
    var_12 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    linked_list_13 = module_0.LinkedList()

def test_case_440():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    node_0 = module_0.Node(none_type_1)

def test_case_441():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_1 = module_0.Node(linked_list_4)
    var_5 = linked_list_3.search(var_3)
    var_6 = linked_list_4.search(node_1)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.search(int_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList(var_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'

def test_case_442():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_0.display()
    assert var_5 == ')'

def test_case_443():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    var_6 = linked_list_2.search(var_5)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_2 = module_0.Node(var_7)
    assert node_2.data == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.push(float_0)
    var_10 = linked_list_8.pop()
    assert var_10 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_12 = linked_list_10.display()
    var_13 = linked_list_10.pop()
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList4.Node'
    assert var_13.data is None
    assert var_13.next is None
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    var_14 = linked_list_12.size()
    assert var_14 == 0
    linked_list_13 = module_0.LinkedList()
    node_6 = module_0.Node(var_14)
    assert node_6.data == 0
    var_15 = linked_list_13.display()
    assert var_15 == ')'
    linked_list_14 = module_0.LinkedList()
    var_16 = linked_list_6.display()
    assert var_16 == ')'

def test_case_444():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    node_4 = module_0.Node(linked_list_3)
    node_5 = module_0.Node(linked_list_2)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    node_9 = module_0.Node(var_6)
    assert node_9.data == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    var_9 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList4.Node'
    assert var_9.data is None
    assert var_9.next is None
    none_type_5 = None
    node_11 = module_0.Node(none_type_5)
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    var_10 = linked_list_9.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.display()
    assert var_11 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    int_1 = -1061
    linked_list_11 = module_0.LinkedList()
    var_12 = linked_list_11.push(int_1)
    node_12 = module_0.Node(var_6)
    assert node_12.data == ')'

def test_case_445():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = linked_list_2.remove(none_type_1)

def test_case_446():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.size()
    assert var_5 == 0
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(var_4)
    assert node_4.data == 0
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    node_7 = module_0.Node(node_6)
    var_9 = linked_list_1.remove(none_type_2)

def test_case_447():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.size()
    assert var_3 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_1)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_3.display()
    assert var_6 == ')'

def test_case_448():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_449():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.search(int_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_4 = module_0.Node(linked_list_2, linked_list_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_4 = linked_list_0.push(node_1)

def test_case_450():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_3)
    var_5 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_5 = module_0.Node(node_4, var_4)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = 3548
    var_8 = linked_list_5.search(int_0)
    node_6 = module_0.Node(int_0, var_8)
    var_9 = linked_list_4.remove(node_3)

def test_case_451():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_5 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.search(var_2)
    var_5 = linked_list_3.search(node_5)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    list_0 = []
    var_6 = linked_list_4.push(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    node_6 = module_0.Node(var_7)
    assert node_6.data == ')'
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(node_7, list_1)
    node_9 = module_0.Node(node_7, dict_0)
    complex_0 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_0)
    node_11 = module_0.Node(node_10)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.display()
    assert var_9 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_10 = linked_list_4.size()
    assert var_10 == 1

def test_case_452():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(linked_list_2)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    var_3 = linked_list_3.remove(var_1)

def test_case_453():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    var_5 = linked_list_6.search(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_454():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_4.push(none_type_1)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    var_8 = linked_list_5.search(var_7)
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_2 = [dict_1, dict_1, str_0, dict_1]
    node_5 = module_0.Node(list_2)
    node_6 = module_0.Node(node_5, list_2)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    var_11 = linked_list_11.size()
    assert var_11 == 0
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    node_11 = module_0.Node(var_10)
    assert node_11.data == 0
    var_12 = linked_list_0.display()

def test_case_455():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    node_5 = module_0.Node(var_4)
    assert node_5.data == ')'
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(int_0)
    node_6 = module_0.Node(linked_list_2)

def test_case_456():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_457():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_458():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_0)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    node_1 = module_0.Node(linked_list_5)
    var_7 = linked_list_4.search(var_5)
    var_8 = linked_list_5.search(node_1)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_6.remove(none_type_3)
    var_10 = linked_list_6.search(node_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    int_1 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_11 = linked_list_7.search(int_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_8.display()
    assert var_12 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_13 = linked_list_9.size()
    assert var_13 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_4 = module_0.Node(var_13)
    assert node_4.data == 0
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_11.remove(none_type_5)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    node_7 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_459():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_3)
    assert node_1.data == 0
    var_4 = linked_list_1.push(none_type_0)

def test_case_460():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.push(float_0)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_2)
    var_3 = linked_list_5.display()
    assert var_3 == '(-2869.0)'
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_5 = linked_list_6.display()
    node_8 = module_0.Node(linked_list_7)
    node_9 = module_0.Node(linked_list_6)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    str_2 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.display()
    assert var_8 == ')'
    float_1 = -2869.0
    node_10 = module_0.Node(float_1)
    node_11 = module_0.Node(bool_2, var_0)
    assert node_11.next == ')'

def test_case_461():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    var_5 = linked_list_3.display()
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    node_2 = module_0.Node(var_5)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.display()
    assert var_6 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_8 = linked_list_8.display()
    node_5 = module_0.Node(linked_list_9)
    node_6 = module_0.Node(var_2)
    assert node_6.data == ')'

def test_case_462():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    var_5 = linked_list_6.remove(linked_list_6)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_3)
    var_7 = linked_list_7.display()
    var_8 = linked_list_7.display()
    var_9 = linked_list_5.display()
    assert var_9 == ')'

def test_case_463():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(float_0)
    var_4 = linked_list_4.pop()
    assert var_4 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_4.head is None
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.display()
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    node_9 = module_0.Node(var_6)
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    var_10 = linked_list_7.search(none_type_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_11 = linked_list_8.display()
    assert var_11 == ')'
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_13 = linked_list_9.display()
    node_12 = module_0.Node(linked_list_10)
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    node_13 = module_0.Node(var_4)

def test_case_464():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(linked_list_3, linked_list_2)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.push(linked_list_5)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(var_5)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_8 = linked_list_9.display()
    node_5 = module_0.Node(linked_list_10)
    node_6 = module_0.Node(linked_list_9)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_9 = linked_list_11.size()
    assert var_9 == 0
    var_10 = linked_list_11.display()
    assert var_10 == ')'
    var_11 = linked_list_11.search(none_type_6)
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    none_type_8 = None
    node_8 = module_0.Node(none_type_8)
    none_type_9 = None
    linked_list_13 = module_0.LinkedList(none_type_9)
    assert linked_list_13.head is None
    var_13 = linked_list_13.size()
    assert var_13 == 0
    var_14 = linked_list_13.size()
    assert var_14 == 0
    none_type_10 = None
    linked_list_14 = module_0.LinkedList(none_type_10)
    assert linked_list_14.head is None
    list_0 = []
    var_15 = linked_list_14.push(list_0)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None

def test_case_465():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_3)
    var_5 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    node_3 = module_0.Node(var_6)
    assert node_3.data == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    node_5 = module_0.Node(node_4)
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.search(int_0)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    str_0 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    float_0 = -2869.0
    node_6 = module_0.Node(float_0)
    var_10 = linked_list_7.push(var_7)

def test_case_466():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    node_1 = module_0.Node(var_1)
    assert node_1.data == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    list_0 = []
    var_3 = linked_list_4.push(list_0)
    var_4 = linked_list_2.push(linked_list_2)

def test_case_467():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    node_0 = module_0.Node(var_1)
    assert node_0.data == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 3548
    var_4 = linked_list_3.search(int_0)
    node_1 = module_0.Node(int_0, var_4)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_468():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_7 = module_0.Node(var_4)
    assert node_7.data == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    node_9 = module_0.Node(linked_list_7)
    var_8 = linked_list_6.search(var_6)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    var_12 = linked_list_9.display()
    assert var_12 == ')'
    var_13 = linked_list_9.search(var_12)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_12.remove(none_type_5)
    var_15 = linked_list_12.remove(linked_list_12)
    node_11 = module_0.Node(var_1, linked_list_8)
    assert node_11.data == '(-2869.0)'

def test_case_469():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.push(none_type_2)
    var_6 = linked_list_0.pop()
    assert var_6 == 243

def test_case_470():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    str_2 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_4.display()
    assert var_1 == ')'
    str_3 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(linked_list_4)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_7 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_7.remove(none_type_1)
    var_4 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_5 = linked_list_9.search(int_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_10 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_10.remove(none_type_2)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_3 = module_0.Node(linked_list_10, linked_list_9)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_12 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_13 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_13.remove(none_type_3)
    var_8 = linked_list_13.display()
    var_9 = linked_list_13.display()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_14 = module_0.LinkedList(none_type_5)
    assert linked_list_14.head is None
    var_10 = linked_list_14.size()
    assert var_10 == 0
    var_11 = linked_list_14.size()
    assert var_11 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    var_12 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList4.Node'
    assert var_12.data is None
    assert var_12.next is None

def test_case_471():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.display()
    var_4 = linked_list_2.display()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_6 = linked_list_3.display()
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(bool_1)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_7.remove(none_type_4)
    var_11 = linked_list_7.push(none_type_4)
    var_12 = linked_list_0.display()
    assert var_12 == ')'

def test_case_472():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_0.size()
    assert var_1 == 0

def test_case_473():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_474():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_3)
    var_4 = linked_list_5.display()
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    node_2 = module_0.Node(var_4)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(none_type_0)

def test_case_475():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    node_0 = module_0.Node(var_2)
    assert node_0.data == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_2.push(linked_list_2)

def test_case_476():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    var_4 = linked_list_1.size()
    assert var_4 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_3)
    assert node_3.data == 0
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_2.remove(linked_list_2)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_5 = module_0.Node(node_3)

def test_case_477():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_478():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_2)
    var_6 = linked_list_6.remove(linked_list_6)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    tuple_2 = (var_6, list_1)
    var_7 = linked_list_2.search(tuple_2)

def test_case_479():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.search(int_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    node_2 = module_0.Node(var_5)
    assert node_2.data == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    float_0 = -2869.0
    node_3 = module_0.Node(float_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    str_1 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_6 = module_0.Node(var_6)
    assert node_6.data == ')'

def test_case_480():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_1 = -2869.0
    node_1 = module_0.Node(float_1)
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(int_0)
    var_2 = linked_list_2.size()
    assert var_2 == 1
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    node_6 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    list_2 = []
    var_5 = linked_list_6.push(list_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_6 = None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_7 = linked_list_10.remove(none_type_6)
    linked_list_11 = module_0.LinkedList(var_7)
    assert linked_list_11.head is None
    node_7 = module_0.Node(none_type_1, linked_list_0)

def test_case_481():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'

def test_case_482():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_0)
    var_3 = linked_list_1.search(node_3)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(var_5)
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    list_0 = []
    var_6 = linked_list_6.push(list_0)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    var_8 = linked_list_7.display()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    node_6 = module_0.Node(var_8)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_483():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    var_5 = linked_list_3.size()
    assert var_5 == 0
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_1 = 3548
    var_8 = linked_list_6.search(int_1)
    node_4 = module_0.Node(int_1, var_8)
    var_9 = linked_list_0.size()
    assert var_9 == 1

def test_case_484():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_3)
    assert node_1.data == 0
    var_4 = linked_list_3.push(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(node_3, var_5)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.remove(none_type_3)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_6)
    var_12 = linked_list_11.remove(linked_list_11)
    var_13 = linked_list_4.display()
    assert var_13 == '(n, 6, z, ;, ;, $, 3)'

def test_case_485():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    var_4 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_5 = module_0.Node(node_4, var_3)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.remove(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    float_0 = -2869.0
    node_6 = module_0.Node(float_0)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    node_8 = module_0.Node(node_7)
    bool_1 = True
    node_9 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_10 = module_0.Node(var_7)
    assert node_10.data == 0
    var_8 = linked_list_10.display()
    assert var_8 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    tuple_0 = (var_0,)
    var_9 = linked_list_4.push(tuple_0)

def test_case_486():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(int_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_3)
    var_6 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList(linked_list_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'

def test_case_487():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    var_4 = linked_list_3.size()
    assert var_4 == 1
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.remove(none_type_3)
    var_8 = linked_list_5.push(var_3)

def test_case_488():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    node_2 = module_0.Node(linked_list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_1 = [dict_0]
    list_2 = [bool_0, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_0, bool_0, list_1, tuple_0)
    node_5 = module_0.Node(tuple_1)
    var_4 = linked_list_2.remove(list_2)

def test_case_489():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_3 = linked_list_6.display()
    assert var_3 == ')'
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.push(float_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_0)
    var_5 = linked_list_7.display()
    assert var_5 == '(-2869.0)'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    str_2 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(linked_list_8)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.remove(none_type_5)
    var_9 = linked_list_11.display()
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    node_9 = module_0.Node(var_9)
    none_type_7 = None
    node_10 = module_0.Node(none_type_7)
    linked_list_12 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.remove(none_type_7)
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    none_type_8 = None
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    var_11 = linked_list_14.size()
    assert var_11 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_12 = linked_list_14.display()
    assert var_12 == ')'
    none_type_9 = None
    node_11 = module_0.Node(none_type_9)
    linked_list_16 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_16.remove(none_type_9)
    none_type_10 = None
    linked_list_17 = module_0.LinkedList(none_type_10)
    assert linked_list_17.head is None
    var_14 = linked_list_17.size()
    assert var_14 == 0
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None
    var_15 = linked_list_18.push(var_14)
    node_12 = module_0.Node(linked_list_1)

def test_case_490():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.size()
    assert var_2 == 0
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(var_1)
    assert node_4.data == 0
    var_3 = linked_list_0.size()
    assert var_3 == 0

def test_case_491():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    linked_list_3 = module_0.LinkedList()
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_3)
    var_4 = linked_list_5.remove(none_type_1)
    linked_list_6 = module_0.LinkedList(none_type_1)
    var_5 = linked_list_5.display()
    node_4 = module_0.Node(linked_list_6)
    var_6 = linked_list_5.search(var_4)
    var_7 = linked_list_6.search(node_4)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_5)
    var_8 = linked_list_7.remove(none_type_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    node_7 = module_0.Node(none_type_3)
    int_0 = -1061
    linked_list_8 = module_0.LinkedList()
    var_9 = linked_list_8.push(int_0)
    node_8 = module_0.Node(none_type_0)

def test_case_492():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_2 = linked_list_2.display()
    assert var_2 == '(-2869.0)'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(var_4)
    assert linked_list_6.head is None
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.search(int_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.remove(none_type_3)
    var_7 = linked_list_8.search(node_3)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_8 = linked_list_9.push(linked_list_9)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_5)
    var_10 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_5 = module_0.Node(node_4, var_9)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_6)
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_12 = linked_list_12.display()
    node_7 = module_0.Node(linked_list_13)
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_13 = linked_list_14.remove(none_type_7)
    none_type_8 = None
    linked_list_15 = module_0.LinkedList(none_type_8)
    assert linked_list_15.head is None
    var_14 = linked_list_15.size()
    assert var_14 == 0
    var_15 = linked_list_15.display()
    assert var_15 == ')'
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    int_1 = 3548
    var_16 = linked_list_16.search(int_1)
    node_9 = module_0.Node(int_1, var_16)
    var_17 = linked_list_10.size()
    assert var_17 == 1

def test_case_493():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(none_type_2)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(node_6, list_1)
    node_8 = module_0.Node(node_6, dict_1)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_7 = linked_list_4.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_9 = linked_list_6.size()
    assert var_9 == 0
    var_10 = linked_list_6.display()
    assert var_10 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bool_0 = True
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(node_9)
    var_11 = linked_list_7.search(var_5)

def test_case_494():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    node_3 = module_0.Node(var_1)
    assert node_3.data == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_6 = module_0.LinkedList(none_type_0)
    assert linked_list_6.head is None
    var_2 = linked_list_6.size()
    assert var_2 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_5 = module_0.Node(var_2)
    assert node_5.data == 0
    var_3 = linked_list_7.display()
    assert var_3 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_4 = linked_list_6.remove(linked_list_4)

def test_case_495():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_2.size()
    assert var_5 == 0

def test_case_496():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    node_2 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.remove(var_0)

def test_case_497():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_4 = linked_list_5.display()
    node_4 = module_0.Node(linked_list_6)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_5 = module_0.Node(var_5)
    assert node_5.data == 0
    linked_list_9 = module_0.LinkedList(var_0)
    assert linked_list_9.head is None

def test_case_498():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_499():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    int_0 = 3548
    var_9 = linked_list_8.search(int_0)
    node_3 = module_0.Node(int_0, var_9)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    int_1 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.push(int_1)
    var_11 = linked_list_10.size()
    assert var_11 == 1
    int_2 = 1454
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.search(int_2)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_12.remove(none_type_4)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_5 = module_0.Node(linked_list_12, linked_list_11)
    node_6 = module_0.Node(var_13)

def test_case_500():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    var_2 = linked_list_0.remove(node_1)

def test_case_501():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)

def test_case_502():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)

def test_case_503():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.search(int_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_6 = module_0.Node(var_9)
    assert node_6.data == 0
    var_10 = linked_list_11.push(none_type_3)
    var_11 = linked_list_11.remove(linked_list_2)

def test_case_504():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    str_0 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_10 = linked_list_10.display()
    node_7 = module_0.Node(linked_list_11)
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_11 = linked_list_12.push(linked_list_12)
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    linked_list_13 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_13.remove(none_type_7)
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    var_13 = linked_list_13.display()
    none_type_8 = None
    linked_list_15 = module_0.LinkedList(none_type_8)
    assert linked_list_15.head is None
    str_1 = '3$;;z6n'
    linked_list_16 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_15.display()
    assert var_14 == ')'
    float_0 = -2869.0
    node_9 = module_0.Node(float_0)
    str_2 = 'RhJ%'
    node_10 = module_0.Node(str_2)

def test_case_505():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(float_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    var_5 = linked_list_3.display()
    assert var_5 == '(-2869.0)'
    var_6 = linked_list_3.display()
    assert var_6 == '(-2869.0)'

def test_case_506():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(linked_list_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    node_2 = module_0.Node(var_3)
    assert node_2.data == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_4 = linked_list_8.push(linked_list_8)
    var_5 = linked_list_7.size()
    assert var_5 == 0
    var_6 = linked_list_5.push(str_0)

def test_case_507():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_508():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_3 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.search(var_2)
    var_5 = linked_list_3.search(node_3)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_4.display()

def test_case_509():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    var_5 = linked_list_5.search(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_3)
    var_7 = linked_list_6.display()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(var_7)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_8 = linked_list_7.push(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(bool_0)
    int_0 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(int_0)
    var_10 = linked_list_9.size()
    assert var_10 == 1
    str_1 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_6.size()
    assert var_11 == 1

def test_case_510():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    node_4 = module_0.Node(none_type_1)

def test_case_511():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_6.display()
    var_6 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList4.Node'
    assert var_6.data is None
    assert var_6.next is None
    var_7 = linked_list_2.push(var_1)

def test_case_512():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    str_0 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    list_0 = []
    var_5 = linked_list_9.push(list_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_513():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(linked_list_0)

def test_case_514():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_7 = linked_list_8.display()
    node_2 = module_0.Node(linked_list_9)
    var_8 = linked_list_8.search(var_6)
    var_9 = linked_list_9.search(node_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    float_0 = -2869.0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.push(float_0)
    var_11 = linked_list_11.pop()
    assert var_11 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_11.head is None
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    var_13 = linked_list_12.display()
    assert var_13 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(node_4, list_1)
    node_6 = module_0.Node(node_4, dict_1)
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_14 = linked_list_13.display()
    assert var_14 == ')'
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_0)
    linked_list_14 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'

def test_case_515():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    var_4 = linked_list_2.search(node_1)
    int_1 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.search(int_1)
    node_2 = module_0.Node(var_5)
    node_3 = module_0.Node(var_0, int_0)

def test_case_516():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_0 = module_0.Node(var_4)
    assert node_0.data == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_6 = linked_list_10.size()
    assert var_6 == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_9 = linked_list_11.display()
    node_4 = module_0.Node(linked_list_12)
    var_10 = linked_list_11.search(var_8)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_13.remove(none_type_6)
    none_type_7 = None
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    var_12 = linked_list_14.size()
    assert var_12 == 0
    var_13 = linked_list_14.display()
    assert var_13 == ')'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    int_0 = 3548
    var_14 = linked_list_15.search(int_0)
    node_6 = module_0.Node(int_0, var_14)
    none_type_8 = None
    linked_list_16 = module_0.LinkedList(none_type_8)
    assert linked_list_16.head is None
    var_15 = linked_list_16.size()
    assert var_15 == 0
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    var_16 = linked_list_17.display()
    assert var_16 == ')'
    node_7 = module_0.Node(linked_list_4)

def test_case_517():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_518():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.size()
    assert var_3 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.remove(none_type_3)
    var_5 = linked_list_2.search(node_4)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_4)
    var_7 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_8 = module_0.Node(node_7, var_6)
    node_9 = module_0.Node(linked_list_4)
    bool_2 = True
    linked_list_6 = module_0.LinkedList(bool_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'

def test_case_519():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'

def test_case_520():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_3 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.search(var_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList(var_4)
    assert linked_list_5.head is None

def test_case_521():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    node_0 = module_0.Node(var_1)
    assert node_0.data == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_0 = None
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    var_5 = linked_list_4.search(var_4)
    var_6 = linked_list_5.size()
    assert var_6 == 0

def test_case_522():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.push(linked_list_5)
    var_4 = linked_list_4.size()
    assert var_4 == 0
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.search(int_0)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    var_9 = linked_list_7.search(var_8)
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_10 = linked_list_10.push(linked_list_10)
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    list_0 = []
    var_11 = linked_list_11.push(list_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_1)
    var_12 = linked_list_7.remove(var_6)

def test_case_523():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(float_0)
    var_2 = linked_list_2.pop()
    assert var_2 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_2.head is None
    complex_0 = 3107.84 - 857.7j
    set_0 = {node_0, var_1}
    node_1 = module_0.Node(complex_0, set_0)

def test_case_524():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_3 = linked_list_5.display()
    var_4 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    var_5 = linked_list_7.push(float_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    var_6 = linked_list_7.display()
    assert var_6 == '(-2869.0)'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    node_5 = module_0.Node(var_7)
    assert node_5.data == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    linked_list_10 = module_0.LinkedList()
    var_9 = linked_list_5.size()
    assert var_9 == 0

def test_case_525():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(none_type_1)
    var_4 = linked_list_2.search(node_2)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.size()
    assert var_6 == 0
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(var_5)
    assert node_7.data == 0
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_11 = linked_list_8.size()
    assert var_11 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_7 = None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_12 = linked_list_10.remove(none_type_7)
    linked_list_11 = module_0.LinkedList(var_12)
    assert linked_list_11.head is None
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    linked_list_12 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_12.remove(none_type_8)
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_14 = linked_list_12.display()
    node_10 = module_0.Node(linked_list_13)
    node_11 = module_0.Node(linked_list_12)
    linked_list_14 = module_0.LinkedList(linked_list_9)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'

def test_case_526():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.display()
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    node_5 = module_0.Node(linked_list_6)
    var_7 = linked_list_4.remove(none_type_3)

def test_case_527():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_7 = None
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    var_9 = linked_list_6.search(var_8)
    none_type_8 = None
    node_1 = module_0.Node(none_type_8)
    linked_list_9 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_8)
    linked_list_10 = module_0.LinkedList(none_type_8)
    assert linked_list_10.head is None
    var_11 = linked_list_9.display()
    node_2 = module_0.Node(linked_list_10)
    node_3 = module_0.Node(linked_list_9)
    var_12 = linked_list_7.push(var_2)

def test_case_528():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    assert var_1 == '(n, 6, z, ;, ;, $, 3)'

def test_case_529():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)

def test_case_530():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.push(float_0)
    var_4 = linked_list_5.pop()
    assert var_4 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_5.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    node_4 = module_0.Node(linked_list_7)
    var_7 = linked_list_6.search(var_5)
    var_8 = linked_list_6.pop()
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList4.Node'
    assert var_8.data is None
    assert var_8.next is None

def test_case_531():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    node_3 = module_0.Node(linked_list_3)
    node_4 = module_0.Node(linked_list_2)
    var_5 = linked_list_1.display()
    assert var_5 == ')'

def test_case_532():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    var_3 = linked_list_2.search(none_type_2)
    var_4 = linked_list_2.remove(var_0)

def test_case_533():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.display()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(var_2)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    node_7 = module_0.Node(node_6)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_2 = module_0.LinkedList(none_type_4)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.size()
    assert var_4 == 0
    bool_0 = True
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(var_3)
    assert node_10.data == 0
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_1 = [dict_1]
    list_2 = [bool_1, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_1, list_1, tuple_0)
    node_11 = module_0.Node(tuple_1)
    linked_list_7 = module_0.LinkedList(bool_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'

def test_case_534():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_3.display()
    node_3 = module_0.Node(linked_list_4)
    var_3 = linked_list_3.search(var_1)
    var_4 = linked_list_4.search(node_3)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_3)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(var_8)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_6 = None
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_12 = linked_list_13.size()
    assert var_12 == 0
    var_13 = linked_list_11.display()
    assert var_13 == ')'
    var_14 = linked_list_11.search(var_13)
    var_15 = linked_list_13.search(var_3)

def test_case_535():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_536():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_1 = module_0.Node(var_0)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_6.remove(none_type_2)
    var_4 = linked_list_6.search(node_7)
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    node_9 = module_0.Node(node_8)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_5 = linked_list_8.push(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_5.remove(var_0)

def test_case_537():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_0.size()
    assert var_1 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    complex_1 = -1265.460815 + 1056.434j
    node_6 = module_0.Node(node_5, complex_1)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    node_7 = module_0.Node(var_6)
    assert node_7.data == ')'
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.search(int_0)
    node_8 = module_0.Node(linked_list_2)

def test_case_538():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.remove(none_type_4)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    str_2 = 'B\rNr6gvz>uZY/'
    var_9 = linked_list_12.remove(str_2)

def test_case_539():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.display()
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_5 = module_0.Node(list_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_4)
    var_9 = linked_list_9.push(none_type_4)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_11 = linked_list_10.display()
    node_8 = module_0.Node(linked_list_11)
    node_9 = module_0.Node(linked_list_10)
    var_12 = linked_list_3.search(var_10)

def test_case_540():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    var_6 = linked_list_2.search(var_5)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    var_9 = linked_list_5.display()
    assert var_9 == ')'
    node_1 = module_0.Node(var_7)
    assert node_1.data == 0

def test_case_541():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(float_0)
    var_4 = linked_list_3.pop()
    assert var_4 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(linked_list_4)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_6 = module_0.Node(node_5, complex_0)
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(int_0)
    var_7 = linked_list_5.size()
    assert var_7 == 1
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    str_2 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_6.remove(linked_list_6)
    str_3 = '#p1jIXa}Q?(h'
    dict_1 = {str_3: str_3, str_3: str_3, str_3: str_3}
    list_1 = [dict_1, dict_1, str_3, dict_1]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(node_7, list_1)
    node_9 = module_0.Node(node_7, dict_1)
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_3)
    var_11 = linked_list_9.display()
    none_type_4 = None
    node_11 = module_0.Node(none_type_4)
    node_12 = module_0.Node(var_11)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    node_13 = module_0.Node(var_12)
    assert node_13.data == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    bool_1 = True
    node_14 = module_0.Node(bool_1)
    node_15 = module_0.Node(node_14)
    node_16 = module_0.Node(bool_1)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_542():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_1 = module_0.Node(linked_list_3)
    var_4 = linked_list_1.search(var_1)

def test_case_543():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)

def test_case_544():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_4.display()
    node_1 = module_0.Node(linked_list_5)
    node_2 = module_0.Node(linked_list_4)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_8.remove(none_type_3)
    var_5 = linked_list_8.push(none_type_3)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_7 = linked_list_11.size()
    assert var_7 == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    var_9 = linked_list_9.search(var_8)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 0
    var_11 = linked_list_12.size()
    assert var_11 == 0
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_7 = module_0.Node(tuple_1)
    var_12 = linked_list_7.size()
    assert var_12 == 0

def test_case_545():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None

def test_case_546():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(linked_list_2)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.search(int_0)
    node_3 = module_0.Node(var_4)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    node_4 = module_0.Node(node_3)

def test_case_547():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    var_4 = linked_list_3.pop()
    assert linked_list_3.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    none_type_2 = None
    linked_list_7 = module_0.LinkedList()
    var_6 = linked_list_7.remove(none_type_2)
    linked_list_8 = module_0.LinkedList(var_6)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    str_1 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(linked_list_9)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    var_9 = linked_list_12.size()
    assert var_9 == 0
    var_10 = linked_list_12.display()
    assert var_10 == ')'
    linked_list_13 = module_0.LinkedList()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_14 = module_0.LinkedList(node_5)
    var_11 = linked_list_14.remove(none_type_5)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    node_7 = module_0.Node(none_type_6)
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    none_type_8 = None
    linked_list_15 = module_0.LinkedList(none_type_8)
    var_12 = linked_list_15.size()
    assert var_12 == 0
    var_13 = linked_list_15.size()
    assert var_13 == 0
    var_14 = linked_list_10.display()
    assert var_14 == '(n, 6, z, ;, ;, $, 3)'

def test_case_548():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1

def test_case_549():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_1 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_1)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(linked_list_3, linked_list_2)
    int_2 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.search(int_2)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(node_6, list_1)
    linked_list_6 = module_0.LinkedList(var_1)
    assert linked_list_6.head is None

def test_case_550():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    str_1 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_0.push(linked_list_0)

def test_case_551():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    var_5 = linked_list_2.search(var_4)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(linked_list_5)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    var_10 = linked_list_8.search(none_type_4)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_13 = linked_list_11.display()
    var_14 = linked_list_11.pop()
    assert linked_list_11.head is None
    assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList4.Node'
    assert var_14.data is None
    assert var_14.next is None
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    str_2 = '3$;;z6n'
    linked_list_14 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_13.display()
    assert var_15 == ')'
    linked_list_15 = module_0.LinkedList()
    int_0 = -1061
    linked_list_16 = module_0.LinkedList()
    var_16 = linked_list_16.push(int_0)
    var_17 = linked_list_16.size()
    assert var_17 == 1
    node_8 = module_0.Node(var_17, var_17)
    assert node_8.data == 1
    assert node_8.next == 1
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    linked_list_17 = module_0.LinkedList(node_9)
    var_18 = linked_list_17.remove(none_type_8)
    var_19 = linked_list_17.push(none_type_8)
    var_20 = linked_list_14.pop()
    assert var_20 == 'n'

def test_case_552():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_3 = module_0.Node(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0

def test_case_553():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(bytes_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    node_0 = module_0.Node(var_3)
    assert node_0.data == ')'
    var_4 = linked_list_2.display()
    assert var_4 == ')'

def test_case_554():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    var_3 = linked_list_3.push(linked_list_3)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.display()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    node_3 = module_0.Node(var_5)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList()
    var_6 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_3)

def test_case_555():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.search(int_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(linked_list_4, linked_list_3)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_6.display()
    assert var_3 == ')'
    node_5 = module_0.Node(var_3)
    assert node_5.data == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_556():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.remove(linked_list_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(none_type_2)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(var_4)
    assert node_5.data == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(float_0)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_2)
    var_7 = linked_list_5.display()
    assert var_7 == '(-2869.0)'
    var_8 = linked_list_5.search(none_type_3)

def test_case_557():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_1 = module_0.Node(var_3)
    assert node_1.data == 0
    var_4 = linked_list_4.push(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(linked_list_6)
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_558():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(linked_list_5)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    str_2 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_7 = linked_list_11.size()
    assert var_7 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_4 = None
    linked_list_13 = module_0.LinkedList(none_type_4)
    assert linked_list_13.head is None
    var_8 = linked_list_13.size()
    assert var_8 == 0
    var_9 = linked_list_11.display()
    assert var_9 == ')'
    var_10 = linked_list_11.search(var_9)
    var_11 = linked_list_3.size()
    assert var_11 == 0

def test_case_559():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_1 = module_0.Node(linked_list_3)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    var_5 = linked_list_5.display()
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    node_5 = module_0.Node(var_5)
    node_6 = module_0.Node(none_type_3)

def test_case_560():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(var_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    node_3 = module_0.Node(linked_list_7)
    var_7 = linked_list_6.search(var_5)
    var_8 = linked_list_7.search(node_3)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_8.display()
    assert var_11 == ')'
    var_12 = linked_list_8.search(var_11)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    node_6 = module_0.Node(node_5)
    var_13 = linked_list_0.push(node_2)

def test_case_561():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None

def test_case_562():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_2 = [dict_1, dict_1, str_0, dict_1]
    node_3 = module_0.Node(list_2)
    node_4 = module_0.Node(node_3, list_2)
    node_5 = module_0.Node(node_3, dict_1)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_1 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(int_1)
    var_4 = linked_list_4.size()
    assert var_4 == 1
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_1)
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_10 = module_0.Node(node_9, var_5)
    var_7 = linked_list_4.remove(str_0)

def test_case_563():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.remove(none_type_2)
    var_3 = linked_list_5.search(node_3)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.remove(none_type_3)
    var_5 = linked_list_7.search(node_6)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    node_7 = module_0.Node(var_6)
    assert node_7.data == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    var_9 = linked_list_9.search(none_type_4)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    float_0 = -2869.0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.push(float_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_10 = module_0.Node(list_0)
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_12 = linked_list_12.display()
    assert var_12 == ')'
    var_13 = linked_list_8.search(var_11)

def test_case_564():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(int_0)
    var_3 = linked_list_2.size()
    assert var_3 == 1
    node_3 = module_0.Node(var_3, var_3)
    assert node_3.data == 1
    assert node_3.next == 1
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(float_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_1)
    var_6 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_5 = module_0.Node(node_4, var_5)
    node_6 = module_0.Node(linked_list_4)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_1 = 3548
    var_9 = linked_list_7.search(int_1)
    node_7 = module_0.Node(int_1, var_9)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(none_type_3)
    var_11 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_565():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_2 = module_0.Node(tuple_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_2 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_3 = [dict_2, dict_2, str_1, dict_2]
    node_3 = module_0.Node(list_3)
    node_4 = module_0.Node(node_3, list_3)
    node_5 = module_0.Node(node_3, dict_2)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_566():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    var_2 = linked_list_0.push(var_0)

def test_case_567():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_4 = module_0.Node(node_3, var_0)
    node_5 = module_0.Node(linked_list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    node_7 = module_0.Node(node_6)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.search(node_8)
    bool_1 = True
    node_9 = module_0.Node(bool_1)
    node_10 = module_0.Node(node_9)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(linked_list_6)
    bool_2 = True
    node_11 = module_0.Node(bool_2)
    node_12 = module_0.Node(node_11)
    node_13 = module_0.Node(bool_2)
    complex_1 = -1265.460815 + 1056.434j
    node_14 = module_0.Node(node_13, complex_1)
    none_type_4 = None
    node_15 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_15)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    var_9 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_568():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_6 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    var_7 = linked_list_2.search(var_5)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_8 = linked_list_4.size()
    assert var_8 == 0
    var_9 = linked_list_4.size()
    assert var_9 == 0
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_10 = linked_list_5.size()
    assert var_10 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_11 = linked_list_7.size()
    assert var_11 == 0
    var_12 = linked_list_5.display()
    assert var_12 == ')'
    var_13 = linked_list_5.search(var_12)
    var_14 = linked_list_4.search(linked_list_3)

def test_case_569():
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(str_0)

def test_case_570():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    linked_list_3 = module_0.LinkedList(var_0)
    assert linked_list_3.head is None

def test_case_571():
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)

def test_case_572():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.push(none_type_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    complex_1 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_1)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.display()
    assert var_6 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_3.display()
    assert var_7 == ')'

def test_case_573():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_2 = linked_list_9.size()
    assert var_2 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_3 = linked_list_10.display()
    assert var_3 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_4 = linked_list_10.remove(linked_list_10)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_5 = linked_list_12.size()
    assert var_5 == 0
    var_6 = linked_list_12.size()
    assert var_6 == 0
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    int_0 = -1061
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_7 = linked_list_13.push(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_7 = None
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    var_8 = linked_list_14.size()
    assert var_8 == 0
    var_9 = linked_list_14.display()
    assert var_9 == ')'
    var_10 = linked_list_14.search(none_type_7)
    var_11 = linked_list_7.push(linked_list_1)

def test_case_574():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.search(node_3)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_4.display()
    node_7 = module_0.Node(linked_list_5)
    node_8 = module_0.Node(linked_list_4)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_7 = linked_list_10.push(linked_list_10)
    var_8 = linked_list_9.size()
    assert var_8 == 0
    node_10 = module_0.Node(node_6)

def test_case_575():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_0 = module_0.Node(var_3)
    assert node_0.data == 0
    var_4 = linked_list_5.push(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.remove(none_type_2)
    node_2 = module_0.Node(str_1, linked_list_6)

def test_case_576():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(bytes_0)
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(float_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_4)
    var_6 = linked_list_0.display()
    assert var_6 == ')'

def test_case_577():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    var_3 = linked_list_1.display()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_4 = module_0.Node(list_1)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    str_2 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    float_0 = -2869.0
    node_5 = module_0.Node(float_0)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_9 = linked_list_9.display()
    var_10 = linked_list_9.pop()
    assert linked_list_9.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.Node'
    assert var_10.data is None
    assert var_10.next is None
    str_3 = '#p1jIXa}Q?(h'
    dict_2 = {str_3: str_3, str_3: str_3, str_3: str_3}
    list_2 = [dict_2, dict_2, str_3, dict_2]
    node_7 = module_0.Node(list_2)
    linked_list_11 = module_0.LinkedList()
    float_1 = -2869.0
    linked_list_12 = module_0.LinkedList()
    var_11 = linked_list_12.push(float_1)
    var_12 = linked_list_12.pop()
    var_13 = linked_list_12.push(none_type_6)

def test_case_578():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.search(node_1)
    var_5 = linked_list_1.search(none_type_0)

def test_case_579():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.search(node_1)
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(str_0)
    var_4 = linked_list_0.remove(var_2)

def test_case_580():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(bytes_0)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    node_0 = module_0.Node(var_2)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_2)
    var_4 = linked_list_4.search(node_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    var_8 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_8 = module_0.Node(node_7, var_7)
    tuple_0 = (complex_0, var_3, node_4)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.remove(tuple_0)

def test_case_581():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 3548
    var_4 = linked_list_2.search(int_0)
    node_1 = module_0.Node(int_0, var_4)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    node_2 = module_0.Node(var_5)
    assert node_2.data == ')'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_2)
    var_7 = linked_list_4.display()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_9 = linked_list_5.display()
    node_5 = module_0.Node(linked_list_6)
    node_6 = module_0.Node(linked_list_5)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_7.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_12 = linked_list_9.display()
    assert var_12 == ')'
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_13 = linked_list_8.push(var_3)

def test_case_582():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)

def test_case_583():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    var_3 = linked_list_0.search(bool_0)

def test_case_584():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.remove(none_type_4)
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_9 = linked_list_11.display()
    node_4 = module_0.Node(linked_list_12)
    var_10 = linked_list_11.search(var_8)
    var_11 = linked_list_12.search(node_4)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    str_0 = '3$;;z6n'
    linked_list_14 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_13.display()
    assert var_12 == ')'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    str_1 = '3$;;z6n'
    linked_list_16 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    none_type_6 = None
    linked_list_17 = module_0.LinkedList(none_type_6)
    assert linked_list_17.head is None
    var_13 = linked_list_17.size()
    assert var_13 == 0
    var_14 = linked_list_17.display()
    assert var_14 == ')'
    var_15 = linked_list_17.search(none_type_6)
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None

def test_case_585():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    var_5 = linked_list_5.remove(none_type_2)
    var_6 = linked_list_5.display()
    linked_list_6 = module_0.LinkedList()

def test_case_586():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(str_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_1 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.search(int_1)
    var_7 = linked_list_7.remove(node_4)

def test_case_587():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    var_5 = linked_list_1.search(var_3)
    var_6 = linked_list_2.search(node_2)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_7 = linked_list_3.push(int_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_4.remove(none_type_2)
    var_9 = linked_list_4.push(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    int_1 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_10 = linked_list_5.push(int_1)
    var_11 = linked_list_5.size()
    assert var_11 == 1
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_12 = linked_list_6.size()
    assert var_12 == 0
    var_13 = linked_list_6.display()
    assert var_13 == ')'
    bool_1 = True
    var_14 = linked_list_5.remove(bool_1)

def test_case_588():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_1.size()
    assert var_2 == 0

def test_case_589():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(var_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_590():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_3)
    var_4 = linked_list_5.display()
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    node_11 = module_0.Node(var_4)
    bool_1 = True
    node_12 = module_0.Node(bool_1)
    node_13 = module_0.Node(node_12)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_591():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    list_2 = []
    var_6 = linked_list_8.push(list_2)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_8 = linked_list_11.remove(none_type_5)
    var_9 = linked_list_11.search(node_4)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_3 = [dict_2, dict_2, str_2, dict_2]
    node_7 = module_0.Node(list_3)
    int_0 = 1454
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_10 = linked_list_13.search(int_0)
    node_8 = module_0.Node(var_10)
    var_11 = linked_list_5.remove(none_type_2)

def test_case_592():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_1 = module_0.Node(tuple_1)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_2 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_3 = [dict_2, dict_2, str_1, dict_2]
    node_2 = module_0.Node(list_3)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_0 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.push(int_0)
    var_5 = linked_list_7.size()
    assert var_5 == 1
    str_2 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_3 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_11 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_11.remove(none_type_2)
    linked_list_12 = module_0.LinkedList(none_type_2)
    assert linked_list_12.head is None
    linked_list_13 = module_0.LinkedList(list_3)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'

def test_case_593():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_594():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    node_3 = module_0.Node(var_2)
    assert node_3.data == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = 3548
    var_6 = linked_list_5.search(int_0)
    node_7 = module_0.Node(int_0, var_6)
    bool_0 = True
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(bool_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_10 = module_0.Node(list_1)
    node_11 = module_0.Node(node_10, list_1)
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_2, dict_2, str_2, dict_2]
    node_12 = module_0.Node(list_2)
    int_1 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.search(int_1)
    var_8 = linked_list_2.display()
    assert var_8 == ')'

def test_case_595():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_596():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_1.remove(var_2)

def test_case_597():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_3 = module_0.Node(linked_list_2)
    node_4 = module_0.Node(linked_list_1)
    node_5 = module_0.Node(linked_list_1)

def test_case_598():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_599():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_600():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(float_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    var_3 = linked_list_1.display()
    assert var_3 == '(-2869.0)'
    node_6 = module_0.Node(node_5, var_0)

def test_case_601():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_1)
    var_4 = linked_list_3.search(node_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_0 = 3548
    var_7 = linked_list_6.search(int_0)
    node_4 = module_0.Node(int_0, var_7)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_1 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.search(int_1)
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    list_0 = []
    var_10 = linked_list_13.push(list_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_1)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    float_0 = -2869.0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_11 = linked_list_15.push(float_0)
    var_12 = linked_list_15.pop()
    assert var_12 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_15.head is None
    none_type_6 = None
    linked_list_16 = module_0.LinkedList(none_type_6)
    assert linked_list_16.head is None
    var_13 = linked_list_16.size()
    assert var_13 == 0
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    none_type_7 = None
    linked_list_18 = module_0.LinkedList(none_type_7)
    assert linked_list_18.head is None
    linked_list_19 = module_0.LinkedList(linked_list_9)
    assert f'{type(linked_list_19.head).__module__}.{type(linked_list_19.head).__qualname__}' == 'linkedList4.Node'

def test_case_602():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_2 = linked_list_5.size()
    assert var_2 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_3 = linked_list_7.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    node_3 = module_0.Node(var_3)
    assert node_3.data == 0

def test_case_603():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_1 = linked_list_4.size()
    assert var_1 == 0
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.remove(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_6.push(node_5)

def test_case_604():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    int_1 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.search(int_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(linked_list_3, linked_list_2)
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(linked_list_7)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_0)
    complex_1 = -1265.460815 + 1056.434j
    node_7 = module_0.Node(node_6, complex_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_0.search(str_0)

def test_case_605():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_4 = linked_list_8.size()
    assert var_4 == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_5)
    var_7 = linked_list_9.display()
    var_8 = linked_list_9.display()
    node_4 = module_0.Node(none_type_5)

def test_case_606():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(str_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 3548
    var_8 = linked_list_7.search(int_0)
    node_2 = module_0.Node(int_0, var_8)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_12 = linked_list_10.push(linked_list_10)
    node_3 = module_0.Node(var_5)
    assert node_3.data == ')'

def test_case_607():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 3548
    var_3 = linked_list_4.search(int_0)
    node_1 = module_0.Node(int_0, var_3)
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.search(int_1)
    node_2 = module_0.Node(var_4)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_2)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(var_7)
    assert linked_list_10.head is None
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_8 = linked_list_11.remove(none_type_5)
    var_9 = linked_list_11.search(node_4)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_13.remove(none_type_6)
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    var_11 = linked_list_13.display()
    node_8 = module_0.Node(linked_list_14)
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_15 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_15.remove(none_type_7)
    linked_list_16 = module_0.LinkedList(none_type_7)
    assert linked_list_16.head is None
    var_13 = linked_list_15.display()
    node_10 = module_0.Node(linked_list_16)
    node_11 = module_0.Node(linked_list_15)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_12 = module_0.Node(list_0)
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    float_0 = -2869.0
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None
    var_14 = linked_list_18.push(float_0)
    var_15 = linked_list_18.pop()
    assert var_15 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_18.head is None
    linked_list_19 = module_0.LinkedList(linked_list_12)
    assert f'{type(linked_list_19.head).__module__}.{type(linked_list_19.head).__qualname__}' == 'linkedList4.Node'

def test_case_608():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    var_2 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(node_2, var_1)
    node_4 = module_0.Node(linked_list_3)
    float_1 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.push(float_1)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_0)
    var_4 = linked_list_5.display()
    assert var_4 == '(-2869.0)'
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_9 = module_0.Node(var_5)
    assert node_9.data == 0
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(linked_list_8)
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_10 = module_0.Node(list_1)
    node_11 = module_0.Node(node_10, list_1)
    none_type_4 = None
    node_12 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_13 = module_0.Node(var_8)
    assert node_13.data == 0
    var_9 = linked_list_4.size()
    assert var_9 == 0

def test_case_609():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    var_6 = linked_list_6.search(none_type_3)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_1 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_12.remove(none_type_5)
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_9 = linked_list_12.display()
    var_10 = linked_list_12.pop()
    assert linked_list_12.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.Node'
    assert var_10.data is None
    assert var_10.next is None
    none_type_6 = None
    linked_list_14 = module_0.LinkedList()
    var_11 = linked_list_14.remove(none_type_6)
    none_type_7 = None
    linked_list_15 = module_0.LinkedList(none_type_7)
    var_12 = linked_list_15.size()
    assert var_12 == 0
    linked_list_16 = module_0.LinkedList()
    none_type_8 = None
    linked_list_17 = module_0.LinkedList()
    var_13 = linked_list_17.remove(none_type_8)
    linked_list_18 = module_0.LinkedList(var_13)
    var_14 = linked_list_12.remove(none_type_0)

def test_case_610():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_611():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(var_3)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    node_4 = module_0.Node(linked_list_6)
    node_5 = module_0.Node(linked_list_5)
    bytes_0 = b'\xa5[%<'
    node_6 = module_0.Node(bytes_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)
    node_9 = module_0.Node(node_7, dict_0)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.search(int_0)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_11 = linked_list_5.push(linked_list_1)

def test_case_612():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_1)
    var_5 = linked_list_2.display()
    var_6 = linked_list_2.display()
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_613():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(none_type_1)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.search(int_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(linked_list_4, linked_list_3)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    var_8 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(node_3, var_7)
    var_9 = linked_list_6.search(var_6)

def test_case_614():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    str_2 = '$T\x0bL=O]w^NF\tP'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(str_2)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    var_5 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_1 = module_0.Node(node_0, var_4)
    node_2 = module_0.Node(linked_list_6)
    var_6 = linked_list_0.remove(linked_list_4)

def test_case_615():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)

def test_case_616():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(node_3, list_1)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    str_2 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    node_7 = module_0.Node(none_type_1)

def test_case_617():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(node_2, list_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_1 = linked_list_1.size()
    assert var_1 == 0

def test_case_618():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)

def test_case_619():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(bytes_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_2 = [dict_1, dict_1, str_0, dict_1]
    node_2 = module_0.Node(list_2)
    node_3 = module_0.Node(node_2, list_2)
    node_4 = module_0.Node(node_2, dict_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_1)
    complex_0 = -1265.460815 + 1056.434j
    node_8 = module_0.Node(node_7, complex_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(bool_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_2 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_3 = [dict_2, dict_2, str_1, dict_2]
    node_11 = module_0.Node(list_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_2 = '%'
    var_5 = linked_list_3.push(str_2)

def test_case_620():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_5.remove(linked_list_5)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_0 = module_0.Node(var_6)
    assert node_0.data == 0
    var_7 = linked_list_9.push(none_type_3)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_4)
    var_9 = linked_list_10.display()
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    node_3 = module_0.Node(var_9)
    str_0 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_5 = module_0.Node(var_10)
    assert node_5.data == 0
    var_11 = linked_list_13.display()
    assert var_11 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    none_type_7 = None
    linked_list_15 = module_0.LinkedList(none_type_7)
    assert linked_list_15.head is None
    var_12 = linked_list_15.size()
    assert var_12 == 0
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    var_13 = linked_list_15.display()
    assert var_13 == ')'
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None

def test_case_621():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(linked_list_2)
    var_2 = linked_list_1.size()
    assert var_2 == 0
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.search(int_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(linked_list_4, linked_list_3)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    node_6 = module_0.Node(linked_list_7)
    var_7 = linked_list_6.search(var_5)
    var_8 = linked_list_7.search(node_6)
    int_1 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.search(int_1)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_11 = linked_list_4.display()

def test_case_622():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_1 = -2869.0
    node_1 = module_0.Node(float_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(linked_list_4, linked_list_3)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(linked_list_8)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    complex_0 = -1265.460815 + 1056.434j
    node_7 = module_0.Node(node_6, complex_0)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    node_9 = module_0.Node(none_type_4)

def test_case_623():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_1 = linked_list_4.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_5.display()
    assert var_2 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_4 = module_0.Node(list_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.remove(none_type_1)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.push(var_4)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_3)
    var_7 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_7 = module_0.Node(node_6, var_6)
    node_8 = module_0.Node(dict_0)

def test_case_624():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)

def test_case_625():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_2.push(none_type_0)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    var_4 = linked_list_3.size()
    assert var_4 == 1
    node_3 = module_0.Node(var_4, var_4)
    assert node_3.data == 1
    assert node_3.next == 1
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_2)
    var_7 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_5 = module_0.Node(node_4, var_6)
    node_6 = module_0.Node(linked_list_6)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)
    int_1 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.push(int_1)
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    set_0 = set()
    var_12 = linked_list_6.remove(set_0)

def test_case_626():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.push(linked_list_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    node_3 = module_0.Node(none_type_3)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.push(int_0)
    float_0 = 4618.447563
    var_6 = linked_list_3.remove(float_0)
    list_0 = [linked_list_2, linked_list_3, node_3]
    node_4 = module_0.Node(node_1, list_0)

def test_case_627():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    node_1 = module_0.Node(none_type_0, linked_list_0)

def test_case_628():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.display()
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_2)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_5 = module_0.Node(node_4, complex_0)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_4)
    var_8 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.remove(none_type_5)
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    complex_1 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_1)
    node_9 = module_0.Node(node_8)
    node_10 = module_0.Node(none_type_3)

def test_case_629():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    node_2 = module_0.Node(var_3)
    assert node_2.data == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.display()
    assert var_6 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_7 = linked_list_5.size()
    assert var_7 == 0

def test_case_630():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_4.remove(linked_list_4)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(none_type_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(node_2, list_1)
    node_4 = module_0.Node(node_2, dict_1)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.remove(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_9.size()
    assert var_8 == 0
    bool_0 = True
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(var_7)
    assert node_9.data == 0
    var_9 = linked_list_7.size()
    assert var_9 == 0

def test_case_631():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_0 = module_0.LinkedList(none_type_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_3 = None
    linked_list_1 = module_0.LinkedList(none_type_3)
    assert linked_list_1.head is None
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    str_2 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(linked_list_1)
    str_3 = '#p1jIXa}Q?(h'
    dict_1 = {str_3: str_3, str_3: str_3, str_3: str_3}
    list_1 = [dict_1, dict_1, str_3, dict_1]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(node_4, list_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    str_4 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.display()
    assert var_5 == ')'

def test_case_632():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.push(linked_list_1)

def test_case_633():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.search(int_1)
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_5 = linked_list_9.display()
    assert var_5 == ')'
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_6 = linked_list_10.push(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_6 = module_0.Node(none_type_1)

def test_case_634():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    var_5 = linked_list_1.search(var_3)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    node_4 = module_0.Node(none_type_1)

def test_case_635():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.search(node_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None

def test_case_636():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_5 = module_0.Node(none_type_2, linked_list_1)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 3548
    var_4 = linked_list_3.search(int_0)
    node_6 = module_0.Node(int_0, var_4)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(bool_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_4)
    var_6 = linked_list_5.display()
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_6)
    var_8 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_12 = module_0.Node(node_11, var_7)
    none_type_7 = None
    node_13 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_7)
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_10 = linked_list_9.display()
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_637():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    node_2 = module_0.Node(linked_list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_8 = linked_list_7.push(bytes_0)
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_4)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.push(var_10)
    none_type_6 = None
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_12 = linked_list_13.size()
    assert var_12 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_13 = linked_list_13.display()
    assert var_13 == ')'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_16 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_16.remove(none_type_7)
    linked_list_17 = module_0.LinkedList(none_type_7)
    assert linked_list_17.head is None
    var_15 = linked_list_16.display()
    var_16 = linked_list_16.pop()
    assert linked_list_16.head is None
    assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'linkedList4.Node'
    assert var_16.data is None
    assert var_16.next is None
    node_7 = module_0.Node(none_type_0)

def test_case_638():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(node_0)

def test_case_639():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    var_3 = linked_list_3.push(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(linked_list_4, var_3)

def test_case_640():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    bool_0 = True
    set_0 = {bool_0}
    none_type_2 = None
    node_5 = module_0.Node(set_0, none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    str_2 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_3.remove(linked_list_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_641():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.remove(none_type_6)
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    node_9 = module_0.Node(none_type_7)
    var_9 = linked_list_2.push(none_type_2)

def test_case_642():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    node_1 = module_0.Node(none_type_0, linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_3.display()
    node_3 = module_0.Node(linked_list_4)
    node_4 = module_0.Node(linked_list_3)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(bool_0)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_1 = '$T\x0bL=O]w^NF\tP'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.remove(str_1)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_8.push(linked_list_9)
    bool_1 = True
    var_8 = linked_list_7.search(bool_1)

def test_case_643():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(node_2, var_5)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    node_5 = module_0.Node(linked_list_8)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_4)
    var_10 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_7 = module_0.Node(node_6, var_9)
    node_8 = module_0.Node(node_6)
    bytes_0 = b'\xa5[%<'
    node_9 = module_0.Node(bytes_0)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_12 = linked_list_11.display()
    int_1 = -1061
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_13 = linked_list_13.push(int_1)
    var_14 = linked_list_13.size()
    assert var_14 == 1
    node_11 = module_0.Node(none_type_2, var_4)
    assert node_11.next == ')'

def test_case_644():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    var_4 = linked_list_4.size()
    assert var_4 == 0

def test_case_645():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_2 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    str_3 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(linked_list_5)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_8.remove(none_type_3)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_7 = linked_list_10.push(var_6)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_8 = linked_list_11.display()
    assert var_8 == ')'
    node_4 = module_0.Node(var_8)
    assert node_4.data == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    linked_list_13 = module_0.LinkedList(dict_0)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_13.remove(linked_list_2)

def test_case_646():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_2.push(linked_list_3)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(var_5)
    assert linked_list_7.head is None
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(bytes_0)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_5)
    var_8 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_3 = module_0.Node(node_2, var_7)
    node_4 = module_0.Node(linked_list_9)
    node_5 = module_0.Node(linked_list_1, var_8)

def test_case_647():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_1 = module_0.Node(node_0, var_2)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.remove(none_type_2)
    var_5 = linked_list_5.search(node_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    node_3 = module_0.Node(var_6)
    assert node_3.data == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'

def test_case_648():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.search(node_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.size()
    assert var_5 == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(var_4)
    assert node_5.data == 0
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.size()
    assert var_7 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_7 = module_0.Node(var_9)
    assert node_7.data == 0
    var_10 = linked_list_8.push(none_type_6)
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_9.remove(none_type_7)
    var_12 = linked_list_9.display()
    var_13 = linked_list_9.display()
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    linked_list_10 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_10.remove(none_type_8)
    none_type_9 = None
    node_10 = module_0.Node(none_type_9)
    node_11 = module_0.Node(none_type_9)
    str_0 = '2'
    linked_list_11 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_7.push(linked_list_11)

def test_case_649():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_650():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(int_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_1 = module_0.Node(list_1)
    node_2 = module_0.Node(node_1, list_1)
    int_1 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(int_1)
    float_0 = 4618.447563
    var_6 = linked_list_5.remove(float_0)
    float_1 = 2634.854
    dict_2 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_0 = True
    list_2 = [dict_2]
    list_3 = [bool_0, float_1]
    tuple_0 = (list_3,)
    tuple_1 = (dict_2, bool_0, list_2, tuple_0)
    node_3 = module_0.Node(tuple_1)
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    str_2 = '$T\x0bL=O]w^NF\tP'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.remove(str_2)
    var_9 = linked_list_6.remove(linked_list_7)

def test_case_651():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(node_1, var_1)
    node_3 = module_0.Node(linked_list_1)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_9.search(int_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.remove(none_type_3)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_6 = module_0.Node(linked_list_10, linked_list_9)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.display()
    assert var_8 == ')'
    none_type_4 = None
    linked_list_13 = module_0.LinkedList(none_type_4)
    assert linked_list_13.head is None
    var_9 = linked_list_13.size()
    assert var_9 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    node_7 = module_0.Node(var_9)
    assert node_7.data == 0
    var_10 = linked_list_14.push(none_type_4)
    str_0 = '3$;;z6n'
    linked_list_15 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    linked_list_16 = module_0.LinkedList(none_type_5)
    assert linked_list_16.head is None
    var_11 = linked_list_16.size()
    assert var_11 == 0
    var_12 = linked_list_16.display()
    assert var_12 == ')'
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    none_type_6 = None
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None
    var_13 = linked_list_18.remove(none_type_6)
    linked_list_19 = module_0.LinkedList()
    assert linked_list_19.head is None

def test_case_652():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bytes_0 = b'\xa5[%<'
    node_3 = module_0.Node(bytes_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.search(node_4)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(var_3)
    assert node_7.data == 0
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_6 = linked_list_8.display()
    node_10 = module_0.Node(linked_list_9)
    var_7 = linked_list_6.search(none_type_1)

def test_case_653():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_2 = linked_list_4.display()
    node_1 = module_0.Node(linked_list_5)
    var_3 = linked_list_4.search(var_1)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    str_0 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    var_9 = linked_list_7.remove(linked_list_7)

def test_case_654():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    node_1 = module_0.Node(none_type_0, linked_list_0)
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_0 = linked_list_3.size()
    assert var_0 == 0
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 3548
    var_2 = linked_list_4.search(int_0)
    node_2 = module_0.Node(int_0, var_2)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    list_0 = []
    var_3 = linked_list_5.push(list_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(bytes_0)
    bool_0 = True
    set_0 = {bool_0}
    none_type_4 = None
    node_3 = module_0.Node(set_0, none_type_4)
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(float_0)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_5)
    var_7 = linked_list_8.push(none_type_5)
    var_8 = linked_list_8.pop()

def test_case_655():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    node_0 = module_0.Node(var_1)
    assert node_0.data == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_4 = linked_list_1.search(linked_list_2)

def test_case_656():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    node_1 = module_0.Node(var_1)
    assert node_1.data == ')'

def test_case_657():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    var_4 = linked_list_2.remove(linked_list_0)

def test_case_658():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_0 = module_0.Node(var_4)
    assert node_0.data == 0
    var_5 = linked_list_4.push(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    var_7 = linked_list_5.remove(linked_list_5)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    node_2 = module_0.Node(none_type_1)

def test_case_659():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(node_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(var_5)
    assert node_2.data == 0
    var_6 = linked_list_4.search(none_type_2)

def test_case_660():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(node_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_3)
    var_4 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_5 = module_0.Node(node_4, var_3)
    node_6 = module_0.Node(node_4)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    var_6 = linked_list_7.display()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    float_0 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(float_0)
    var_8 = linked_list_9.pop()
    assert var_8 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_9.head is None
    int_0 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.push(int_0)
    var_10 = linked_list_10.size()
    assert var_10 == 1
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_9 = module_0.Node(list_1)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_661():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(var_5)
    assert node_4.data == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_5)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(linked_list_7)
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_8 = module_0.Node(var_10)
    assert node_8.data == 0
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    linked_list_12 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_8)
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None

def test_case_662():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_6.remove(none_type_2)
    var_3 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_8.remove(none_type_3)
    var_5 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_4 = module_0.Node(node_3, var_4)
    node_5 = module_0.Node(linked_list_8)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_6 = linked_list_11.size()
    assert var_6 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_7 = linked_list_12.display()
    assert var_7 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_8 = linked_list_12.remove(linked_list_12)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_14 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_14.remove(none_type_5)
    var_10 = linked_list_14.display()
    var_11 = linked_list_14.display()
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_12 = linked_list_15.display()
    assert var_12 == ')'
    var_13 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList4.Node'
    assert var_13.data is None
    assert var_13.next is None

def test_case_663():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    bool_2 = True
    set_0 = {bool_2}
    none_type_1 = None
    node_3 = module_0.Node(set_0, none_type_1)
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_1.remove(node_1)

def test_case_664():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    var_6 = linked_list_4.search(var_5)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.search(int_0)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_3 = module_0.Node(linked_list_10, linked_list_9)
    int_1 = -1061
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.push(int_1)
    var_12 = linked_list_12.size()
    assert var_12 == 1
    node_4 = module_0.Node(var_12, var_12)
    assert node_4.data == 1
    assert node_4.next == 1
    bytes_0 = b'\xa5[%<'
    node_5 = module_0.Node(bytes_0)
    str_0 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    int_2 = 1429
    linked_list_14 = module_0.LinkedList(int_2)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_14.pop()
    assert var_13 == 1429
    assert linked_list_14.head is None

def test_case_665():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(int_0)
    var_5 = linked_list_3.size()
    assert var_5 == 1
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_2)
    var_7 = linked_list_4.remove(linked_list_4)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_8 = linked_list_5.size()
    assert var_8 == 0
    var_9 = linked_list_5.display()
    assert var_9 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_10 = linked_list_6.display()
    assert var_10 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_11 = linked_list_8.remove(none_type_4)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_9.display()
    assert var_12 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_12.remove(none_type_6)
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    none_type_8 = None
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_14 = linked_list_13.size()
    assert var_14 == 0
    var_15 = linked_list_13.size()
    assert var_15 == 0
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(var_14)
    assert node_7.data == 0
    none_type_9 = None
    linked_list_14 = module_0.LinkedList(none_type_9)
    assert linked_list_14.head is None
    var_16 = linked_list_14.push(linked_list_14)
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    node_9 = module_0.Node(node_8)
    node_10 = module_0.Node(bool_2)
    complex_0 = -1265.460815 + 1056.434j
    node_11 = module_0.Node(node_10, complex_0)
    linked_list_15 = module_0.LinkedList(var_5)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'

def test_case_666():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_6 = module_0.Node(var_3)
    assert node_6.data == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    node_7 = module_0.Node(var_5)
    assert node_7.data == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_2.search(node_6)

def test_case_667():
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_0.size()
    assert var_1 == 0

def test_case_668():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    var_4 = linked_list_1.display()
    var_5 = linked_list_1.display()
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_6 = linked_list_2.search(int_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_7 = linked_list_4.push(float_0)
    var_8 = linked_list_4.pop()
    assert var_8 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_4.head is None
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_9 = linked_list_5.search(int_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(linked_list_6, linked_list_5)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_8.remove(none_type_3)
    var_12 = linked_list_8.display()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    node_7 = module_0.Node(var_12)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_9.remove(none_type_5)
    var_14 = linked_list_9.push(none_type_5)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_15 = linked_list_10.size()
    assert var_15 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_7 = None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_16 = linked_list_12.remove(none_type_7)
    linked_list_13 = module_0.LinkedList(var_16)
    assert linked_list_13.head is None
    node_9 = module_0.Node(node_4)

def test_case_669():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 3548
    var_5 = linked_list_4.search(int_0)
    node_1 = module_0.Node(int_0, var_5)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0

def test_case_670():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_2.display()
    assert var_5 == ')'

def test_case_671():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    var_6 = linked_list_5.display()
    var_7 = linked_list_5.display()
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_2 = module_0.Node(var_9)
    assert node_2.data == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_4)
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_12 = linked_list_11.display()
    node_4 = module_0.Node(linked_list_12)
    var_13 = linked_list_11.search(var_11)
    linked_list_13 = module_0.LinkedList(linked_list_2)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'

def test_case_672():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(var_4)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    node_2 = module_0.Node(linked_list_7)
    var_8 = linked_list_6.search(var_6)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.remove(none_type_4)
    var_10 = linked_list_8.search(node_3)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_9.remove(none_type_5)
    var_12 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_5 = module_0.Node(node_4, var_11)
    node_6 = module_0.Node(linked_list_9)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_673():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(node_1, var_2)
    float_1 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(float_1)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    var_5 = linked_list_4.display()
    assert var_5 == '(-2869.0)'
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(int_0)
    int_1 = -1421
    node_6 = module_0.Node(int_1, node_2)

def test_case_674():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(var_2)
    assert linked_list_6.head is None
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_7.remove(none_type_3)
    var_4 = linked_list_7.push(none_type_3)
    linked_list_8 = module_0.LinkedList(linked_list_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'

def test_case_675():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.search(int_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(linked_list_2, linked_list_1)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.remove(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    var_3 = linked_list_3.display()
    assert var_3 == ')'

def test_case_676():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.size()
    assert var_2 == 0
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(linked_list_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.remove(none_type_4)
    int_0 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(int_0)
    float_0 = 4618.447563
    var_7 = linked_list_7.remove(float_0)
    str_2 = '$T\x0bL=O]w^NF\tP'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.remove(str_2)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    var_9 = linked_list_5.size()
    assert var_9 == 7

def test_case_677():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_4 = module_0.Node(node_1, var_1)

def test_case_678():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    node_0 = module_0.Node(var_3)
    assert node_0.data == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_2 = None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.remove(none_type_2)
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.search(int_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_3)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_2 = module_0.Node(linked_list_10, linked_list_9)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    str_0 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_12.display()
    assert var_9 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_15 = module_0.LinkedList(none_type_6)
    assert linked_list_15.head is None
    var_10 = linked_list_15.size()
    assert var_10 == 0
    var_11 = linked_list_15.size()
    assert var_11 == 0
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_16 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_16.remove(none_type_7)
    linked_list_17 = module_0.LinkedList(none_type_7)
    assert linked_list_17.head is None
    var_13 = linked_list_16.display()
    node_7 = module_0.Node(linked_list_17)
    node_8 = module_0.Node(linked_list_16)
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    linked_list_18 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_18.head).__module__}.{type(linked_list_18.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_18.remove(none_type_8)
    var_15 = linked_list_18.remove(linked_list_18)
    none_type_9 = None
    node_10 = module_0.Node(none_type_9)
    linked_list_19 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_19.head).__module__}.{type(linked_list_19.head).__qualname__}' == 'linkedList4.Node'
    var_16 = linked_list_19.remove(none_type_9)
    linked_list_20 = module_0.LinkedList(none_type_9)
    assert linked_list_20.head is None
    linked_list_21 = module_0.LinkedList()
    assert linked_list_21.head is None
    var_17 = linked_list_21.remove(node_10)
    linked_list_22 = module_0.LinkedList()
    assert linked_list_22.head is None

def test_case_679():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(node_2)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    int_0 = 3548
    var_8 = linked_list_8.search(int_0)
    node_3 = module_0.Node(int_0, var_8)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_9.size()
    assert var_10 == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(var_9)
    assert node_6.data == 0
    var_11 = linked_list_4.search(var_9)

def test_case_680():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(bytes_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_1)
    var_3 = linked_list_4.remove(linked_list_4)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(var_5)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    int_0 = -1061
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.push(int_0)
    float_0 = 4618.447563
    var_11 = linked_list_11.remove(float_0)
    node_3 = module_0.Node(str_0)

def test_case_681():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(linked_list_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_4 = module_0.Node(node_3, complex_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    var_4 = linked_list_2.display()
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(linked_list_6)
    var_7 = linked_list_4.push(linked_list_3)

def test_case_682():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.remove(linked_list_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 3548
    var_5 = linked_list_3.search(int_0)
    node_4 = module_0.Node(int_0, var_5)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_5)
    var_8 = linked_list_6.push(none_type_5)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None

def test_case_683():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(float_0)
    var_3 = linked_list_3.pop()
    assert var_3 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = -3830
    node_4 = module_0.Node(none_type_0, int_0)

def test_case_684():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    node_0 = module_0.Node(var_1)
    assert node_0.data == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    var_4 = linked_list_1.push(var_0)

def test_case_685():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_4)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    node_5 = module_0.Node(none_type_5)
    str_0 = '.\ta'
    node_6 = module_0.Node(str_0)

def test_case_686():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(node_0)
    node_1 = module_0.Node(none_type_0)

def test_case_687():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(var_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_688():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(var_3)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_0 = b'\xa5[%<'
    node_6 = module_0.Node(bytes_0)
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'

def test_case_689():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(int_0)
    var_1 = linked_list_1.size()
    assert var_1 == 1
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(node_1)
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    var_7 = linked_list_5.search(var_6)
    var_8 = linked_list_7.display()
    assert var_8 == ')'

def test_case_690():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(linked_list_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(var_6)
    assert node_7.data == 0
    var_7 = linked_list_6.push(none_type_4)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(node_8, list_1)
    node_10 = module_0.Node(node_8, dict_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_691():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_4 = module_0.Node(node_3, var_0)
    node_5 = module_0.Node(node_3)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(bool_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.display()
    assert var_4 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_9 = module_0.Node(list_0, none_type_3)

def test_case_692():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(int_0)
    float_0 = 4618.447563
    var_2 = linked_list_1.remove(float_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_1 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.search(int_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_1 = module_0.Node(var_8)
    assert node_1.data == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    str_0 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.display()
    assert var_12 == ')'
    var_13 = linked_list_7.push(var_2)

def test_case_693():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.push(none_type_1)

def test_case_694():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(dict_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'

def test_case_695():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    list_0 = []
    var_2 = linked_list_2.push(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(var_4)
    assert node_2.data == 0
    var_5 = linked_list_5.push(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.remove(none_type_4)
    var_7 = linked_list_6.search(node_3)
    var_8 = linked_list_3.search(var_3)

def test_case_696():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    str_1 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_5 = module_0.Node(list_1)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    bytes_0 = b'\xa5[%<'
    node_7 = module_0.Node(bytes_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    node_8 = module_0.Node(var_3)
    assert node_8.data == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_1)
    var_5 = linked_list_6.size()
    assert var_5 == 1

def test_case_697():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_0.push(linked_list_0)

def test_case_698():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_1 = module_0.Node(var_7)
    assert node_1.data == 0
    var_8 = linked_list_8.push(none_type_2)
    var_9 = linked_list_6.push(linked_list_6)
    int_1 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.push(int_1)
    var_11 = linked_list_9.size()
    assert var_11 == 1
    node_2 = module_0.Node(var_11, var_11)
    assert node_2.data == 1
    assert node_2.next == 1
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_10.remove(none_type_3)
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_13 = linked_list_10.display()
    node_4 = module_0.Node(linked_list_11)
    node_5 = module_0.Node(linked_list_10)
    var_14 = linked_list_1.search(node_4)

def test_case_699():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.search(int_0)
    node_1 = module_0.Node(var_3)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    var_5 = linked_list_2.size()
    assert var_5 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_7 = linked_list_4.size()
    assert var_7 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_6 = module_0.Node(var_7)
    assert node_6.data == 0
    var_8 = linked_list_5.push(none_type_3)
    var_9 = linked_list_3.push(linked_list_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_700():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    var_5 = linked_list_3.search(var_3)
    var_6 = linked_list_4.search(node_2)
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.search(int_1)
    node_3 = module_0.Node(var_7)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_2)
    var_9 = linked_list_6.push(none_type_2)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.remove(node_5)
    node_6 = module_0.Node(var_6)

def test_case_701():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_702():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(linked_list_0)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    var_5 = linked_list_4.search(none_type_1)
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_1)
    node_7 = module_0.Node(var_6)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    node_9 = module_0.Node(none_type_3, node_7)

def test_case_703():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_704():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(float_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_1)
    var_3 = linked_list_2.display()
    assert var_3 == '(-2869.0)'
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.size()
    assert var_5 == 0
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    str_0 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.display()
    assert var_10 == ')'
    float_1 = -2869.0
    node_7 = module_0.Node(float_1)
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_11 = linked_list_13.push(linked_list_13)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_12 = linked_list_9.search(str_0)

def test_case_705():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    var_4 = linked_list_0.push(var_2)

def test_case_706():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.display()
    var_3 = linked_list_1.display()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_3)
    var_6 = linked_list_3.push(none_type_3)
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_7 = linked_list_4.push(int_0)
    var_8 = linked_list_4.size()
    assert var_8 == 1
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_5.remove(none_type_4)
    var_10 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_5 = module_0.Node(node_4, var_9)
    node_6 = module_0.Node(node_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_707():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(bytes_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    str_0 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.search(int_0)
    node_2 = module_0.Node(var_7)
    var_8 = linked_list_8.size()
    assert var_8 == 0

def test_case_708():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(linked_list_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_4 = module_0.Node(node_3, complex_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_3)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    node_8 = module_0.Node(node_6, dict_0)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    complex_1 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_1)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    var_11 = linked_list_8.display()
    assert var_11 == ')'
    var_12 = linked_list_8.search(none_type_5)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_13 = linked_list_9.size()
    assert var_13 == 0
    var_14 = linked_list_9.display()
    assert var_14 == ')'
    none_type_7 = None
    node_10 = module_0.Node(none_type_7)
    linked_list_10 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_10.remove(none_type_7)
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_16 = linked_list_10.display()
    node_11 = module_0.Node(linked_list_11)
    var_17 = linked_list_10.search(var_15)
    var_18 = linked_list_11.search(node_11)
    float_0 = -2869.0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_19 = linked_list_12.push(float_0)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None

def test_case_709():
    float_0 = -2122.54
    node_0 = module_0.Node(float_0)

def test_case_710():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    var_5 = linked_list_3.push(none_type_2)

def test_case_711():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_1 = linked_list_4.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_3)
    var_6 = linked_list_6.display()
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_8 = linked_list_8.display()
    var_9 = linked_list_8.pop()
    assert linked_list_8.head is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList4.Node'
    assert var_9.data is None
    assert var_9.next is None
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    var_10 = linked_list_10.search(int_0)
    node_2 = module_0.Node(var_10)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_11 = module_0.LinkedList()
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    str_2 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.display()
    assert var_11 == ')'
    bool_0 = False
    var_12 = linked_list_8.search(bool_0)

def test_case_712():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_0)
    var_2 = linked_list_2.search(node_3)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(var_4)
    assert linked_list_7.head is None
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_8.remove(none_type_3)
    var_6 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_7 = module_0.Node(node_6, var_5)
    node_8 = module_0.Node(node_6)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_7 = linked_list_10.push(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    none_type_6 = None
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_8 = linked_list_13.size()
    assert var_8 == 0
    var_9 = linked_list_13.display()
    assert var_9 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_10 = linked_list_6.push(complex_0)

def test_case_713():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    float_1 = -2869.0
    node_0 = module_0.Node(float_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    list_0 = []
    var_4 = linked_list_5.push(list_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(var_6)
    assert linked_list_9.head is None
    node_1 = module_0.Node(node_0)

def test_case_714():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_3.remove(linked_list_3)
    var_4 = linked_list_1.push(bytes_0)

def test_case_715():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_1.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(var_4)
    assert node_5.data == 0
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    node_7 = module_0.Node(linked_list_7)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    int_0 = 3548
    var_10 = linked_list_11.search(int_0)
    node_8 = module_0.Node(int_0, var_10)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.push(node_5)

def test_case_716():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_717():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_4 = module_0.Node(node_3, complex_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(bytes_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    float_0 = -2869.0
    node_6 = module_0.Node(float_0)
    int_1 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(int_1)
    var_6 = linked_list_7.size()
    assert var_6 == 1
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_8 = linked_list_8.display()
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    int_2 = 3548
    var_11 = linked_list_11.search(int_2)
    node_8 = module_0.Node(int_2, var_11)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_718():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_719():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    list_2 = []
    var_1 = linked_list_1.push(list_2)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(int_0)
    float_1 = 4618.447563
    var_4 = linked_list_4.remove(float_1)
    var_5 = linked_list_3.push(node_0)

def test_case_720():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_721():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 3548
    var_4 = linked_list_2.search(int_0)
    node_3 = module_0.Node(int_0, var_4)
    int_1 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.search(int_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_5 = module_0.Node(linked_list_4, linked_list_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(linked_list_7)
    var_8 = linked_list_6.size()
    assert var_8 == 0
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    node_7 = module_0.Node(linked_list_9)
    var_11 = linked_list_8.search(var_9)
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_12 = linked_list_10.size()
    assert var_12 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_8 = module_0.Node(var_12)
    assert node_8.data == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_13 = linked_list_12.display()
    assert var_13 == ')'
    node_9 = module_0.Node(var_13)
    assert node_9.data == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_8 = None
    node_10 = module_0.Node(none_type_8)
    var_14 = linked_list_13.size()
    assert var_14 == 0

def test_case_722():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_0)
    var_3 = linked_list_1.search(node_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_723():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.display()
    assert var_5 == ')'
    int_0 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_9.push(int_0)
    float_1 = 4618.447563
    var_7 = linked_list_9.remove(float_1)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.remove(none_type_4)
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_10 = linked_list_11.display()
    node_4 = module_0.Node(linked_list_12)
    node_5 = module_0.Node(linked_list_11)
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_11 = linked_list_13.size()
    assert var_11 == 0
    var_12 = linked_list_13.display()
    assert var_12 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    int_1 = 3548
    var_13 = linked_list_14.search(int_1)
    node_6 = module_0.Node(int_1, var_13)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_15 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_15.remove(none_type_6)
    none_type_7 = None
    linked_list_16 = module_0.LinkedList(none_type_7)
    assert linked_list_16.head is None
    var_15 = linked_list_16.size()
    assert var_15 == 0
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    var_16 = linked_list_17.push(var_15)
    node_8 = module_0.Node(none_type_2)

def test_case_724():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(var_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    node_2 = module_0.Node(linked_list_6)
    var_7 = linked_list_5.search(var_5)
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.search(int_0)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    node_4 = module_0.Node(linked_list_9)
    node_5 = module_0.Node(linked_list_8)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    str_0 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_10.remove(linked_list_10)
    bool_0 = True
    set_0 = {bool_0}
    none_type_7 = None
    node_6 = module_0.Node(set_0, none_type_7)
    none_type_8 = None
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_13 = linked_list_13.size()
    assert var_13 == 0
    var_14 = linked_list_13.display()
    assert var_14 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_15 = linked_list_14.display()
    assert var_15 == ')'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    node_7 = module_0.Node(linked_list_12)

def test_case_725():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_726():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(node_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.search(int_1)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_8 = module_0.Node(list_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.push(float_0)
    var_6 = linked_list_8.pop()
    assert var_6 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_8.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    complex_1 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_1)
    str_2 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    bytes_1 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_12 = module_0.LinkedList(none_type_2)
    assert linked_list_12.head is None
    var_8 = linked_list_12.push(bytes_1)
    var_9 = linked_list_2.display()
    assert var_9 == ')'

def test_case_727():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(float_0)
    var_2 = linked_list_3.pop()
    assert var_2 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_3.head is None
    bytes_0 = b'29'
    var_3 = linked_list_0.search(bytes_0)

def test_case_728():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_2)
    var_2 = linked_list_2.push(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    float_0 = -2869.0
    node_5 = module_0.Node(float_0)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.search(int_0)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_729():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    var_1 = linked_list_0.search(var_0)

def test_case_730():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_2.push(linked_list_3)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.search(int_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.remove(none_type_3)
    node_4 = module_0.Node(var_3, linked_list_2)

def test_case_731():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.display()
    assert var_0 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    var_3 = linked_list_3.search(var_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_6 = linked_list_10.size()
    assert var_6 == 0
    var_7 = linked_list_10.size()
    assert var_7 == 0
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(var_6)
    assert node_6.data == 0
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_8 = linked_list_11.push(linked_list_11)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_9 = linked_list_12.display()
    assert var_9 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_10 = linked_list_14.display()
    assert var_10 == ')'
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_1)
    var_11 = linked_list_12.size()
    assert var_11 == 0

def test_case_732():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_1.push(linked_list_2)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_1 = module_0.Node(none_type_2, linked_list_5)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_4.remove(var_4)

def test_case_733():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    linked_list_3 = module_0.LinkedList(linked_list_1)

def test_case_734():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.search(int_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.remove(none_type_2)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_3)
    var_8 = linked_list_8.display()
    var_9 = linked_list_8.display()
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_10 = linked_list_9.push(bytes_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    linked_list_13 = module_0.LinkedList(linked_list_11)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'

def test_case_735():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    var_1 = linked_list_0.remove(node_1)

def test_case_736():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    node_4 = module_0.Node(bool_2)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    var_6 = linked_list_5.search(var_5)
    int_0 = -731
    node_5 = module_0.Node(int_0, linked_list_2)

def test_case_737():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None

def test_case_738():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(var_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_4)
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    node_4 = module_0.Node(linked_list_5)
    var_7 = linked_list_4.search(var_5)
    var_8 = linked_list_5.search(node_4)
    var_9 = linked_list_3.push(node_4)

def test_case_739():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_740():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(none_type_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    var_4 = linked_list_1.remove(none_type_0)

def test_case_741():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_1 = False
    var_4 = linked_list_2.push(bool_1)

def test_case_742():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    node_1 = module_0.Node(none_type_0, linked_list_0)

def test_case_743():
    float_0 = -2122.54
    node_0 = module_0.Node(float_0)
    float_1 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.display()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(none_type_1)
    var_4 = linked_list_2.search(node_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_3)
    var_7 = linked_list_4.push(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.remove(none_type_4)
    var_9 = linked_list_3.display()
    assert var_9 == ')'

def test_case_744():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    node_1 = module_0.Node(linked_list_1)

def test_case_745():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(int_0)
    var_4 = linked_list_2.size()
    assert var_4 == 1
    node_0 = module_0.Node(var_4, var_4)
    assert node_0.data == 1
    assert node_0.next == 1
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(none_type_0, linked_list_5)

def test_case_746():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_1 = module_0.Node(var_6)
    assert node_1.data == 0
    var_7 = linked_list_7.push(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_2)
    var_9 = linked_list_8.display()
    var_10 = linked_list_7.pop()
    assert linked_list_7.head is None

def test_case_747():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    var_3 = linked_list_2.search(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_1)
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_6 = linked_list_2.remove(none_type_1)

def test_case_748():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    node_1 = module_0.Node(var_3)
    assert node_1.data == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList(var_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'

def test_case_749():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_1 = linked_list_4.size()
    assert var_1 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.display()
    assert var_2 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_5.remove(linked_list_5)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'

def test_case_750():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_4.display()
    var_4 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_4 = module_0.Node(list_1)
    linked_list_6 = module_0.LinkedList()
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_5)
    var_6 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    var_7 = linked_list_7.display()
    node_6 = module_0.Node(linked_list_8)
    var_8 = linked_list_7.search(var_6)
    var_9 = linked_list_8.search(node_6)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_7)
    var_10 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(none_type_4)
    linked_list_11 = module_0.LinkedList()
    var_11 = linked_list_11.remove(node_7)
    str_3 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    linked_list_13 = module_0.LinkedList()
    linked_list_14 = module_0.LinkedList()
    var_12 = linked_list_14.display()
    assert var_12 == ')'
    none_type_5 = None
    linked_list_15 = module_0.LinkedList(none_type_5)
    var_13 = linked_list_15.size()
    assert var_13 == 0
    linked_list_16 = module_0.LinkedList()
    node_8 = module_0.Node(var_13)
    assert node_8.data == 0
    var_14 = linked_list_16.push(none_type_5)
    var_15 = linked_list_14.push(linked_list_14)
    int_0 = -1061
    linked_list_17 = module_0.LinkedList()
    var_16 = linked_list_17.push(int_0)
    var_17 = linked_list_17.size()
    assert var_17 == 1
    node_9 = module_0.Node(var_17, var_17)
    assert node_9.data == 1
    assert node_9.next == 1
    linked_list_18 = module_0.LinkedList(linked_list_6)

def test_case_751():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    float_0 = -2869.0
    node_3 = module_0.Node(float_0)
    float_1 = -2122.54
    node_4 = module_0.Node(float_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(var_4)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_6 = module_0.Node(list_0)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_7 = linked_list_6.pop()
    assert var_7 == 0
    assert linked_list_6.head is None

def test_case_752():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_0)
    node_0 = module_0.Node(var_4)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.size()
    assert var_6 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_5)
    assert node_3.data == 0
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_4)
    var_8 = linked_list_5.display()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    node_6 = module_0.Node(var_8)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_7 = module_0.Node(tuple_1)
    node_8 = module_0.Node(int_0)

def test_case_753():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0

def test_case_754():
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)

def test_case_755():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_1.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.size()
    assert var_3 == 0
    str_0 = '8gF^Uhhbr$c}'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(str_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    float_1 = -2869.0
    node_4 = module_0.Node(float_1)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    str_2 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None

def test_case_756():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_0 = module_0.Node(var_3)
    assert node_0.data == 0
    var_4 = linked_list_6.push(none_type_2)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.search(int_0)
    var_6 = linked_list_7.search(var_5)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_3)
    node_4 = module_0.Node(none_type_3, linked_list_8)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_6 = module_0.Node(var_8)
    assert node_6.data == 0
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.display()
    assert var_10 == ')'
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_11 = linked_list_13.remove(none_type_6)
    var_12 = linked_list_13.search(node_8)
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(node_9)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    linked_list_15 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'

def test_case_757():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    var_2 = linked_list_2.push(none_type_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_3.display()
    assert var_6 == ')'

def test_case_758():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    var_5 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    node_4 = module_0.Node(var_6)
    assert node_4.data == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    linked_list_9 = module_0.LinkedList()
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_9 = linked_list_8.size()
    assert var_9 == 0

def test_case_759():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    node_3 = module_0.Node(node_1)

def test_case_760():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    var_5 = linked_list_1.search(var_4)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_2)
    var_7 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_3 = module_0.Node(var_10)
    assert node_3.data == 0
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_6 = module_0.Node(var_12)
    assert node_6.data == 0
    var_13 = linked_list_13.display()
    assert var_13 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None

def test_case_761():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_3.push(str_0)

def test_case_762():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.size()
    assert var_2 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_1)
    assert node_3.data == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(var_3)
    assert node_5.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_2)
    var_5 = linked_list_4.size()
    assert var_5 == 0

def test_case_763():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(none_type_0)

def test_case_764():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    var_2 = linked_list_1.search(var_0)
    var_3 = linked_list_2.search(node_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_1)
    var_5 = linked_list_3.search(node_2)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    node_5 = module_0.Node(var_6)
    assert node_5.data == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_2)
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    var_13 = linked_list_10.search(var_12)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None

def test_case_765():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_766():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    str_0 = '8gF^Uhhbr$c}'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(str_0)
    var_3 = linked_list_0.search(linked_list_0)

def test_case_767():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    float_0 = -2122.54
    node_1 = module_0.Node(float_0)
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(int_0)
    float_1 = 4618.447563
    var_5 = linked_list_5.remove(float_1)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(bytes_0)
    node_2 = module_0.Node(var_5)

def test_case_768():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    var_1 = linked_list_0.search(var_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    node_3 = module_0.Node(linked_list_2)
    var_4 = linked_list_1.search(var_2)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    node_4 = module_0.Node(bool_0)

def test_case_769():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(node_1, var_2)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    str_2 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(linked_list_5)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.search(int_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_6 = module_0.Node(linked_list_9, linked_list_8)
    var_8 = linked_list_5.size()
    assert var_8 == 0

def test_case_770():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    var_5 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_2)
    var_7 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(node_2, var_6)
    node_4 = module_0.Node(linked_list_6)
    float_1 = 2634.854
    dict_1 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_1]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_5 = module_0.Node(tuple_1)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    str_1 = '#p1jIXa}Q?(h'
    dict_2 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_3 = [dict_2, dict_2, str_1, dict_2]
    node_8 = module_0.Node(list_3)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(none_type_4)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    node_11 = module_0.Node(none_type_5)
    var_11 = linked_list_9.display()
    assert var_11 == ')'

def test_case_771():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_2 = [dict_1, dict_1, str_0, dict_1]
    node_1 = module_0.Node(list_2)
    node_2 = module_0.Node(node_1, list_2)
    node_3 = module_0.Node(node_1, dict_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_2 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_3 = [dict_2, dict_2, str_1, dict_2]
    node_4 = module_0.Node(list_3)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_1 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_1)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_4.remove(linked_list_4)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.remove(none_type_1)
    var_6 = linked_list_6.search(node_5)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_3 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_4 = [dict_3, dict_3, str_2, dict_3]
    node_8 = module_0.Node(list_4)
    node_9 = module_0.Node(node_8, list_4)
    str_3 = '$T\x0bL=O]w^NF\tP'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.remove(str_3)
    str_4 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 7

def test_case_772():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    str_2 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(linked_list_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_8.remove(none_type_2)
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_5 = linked_list_8.display()
    var_6 = linked_list_8.pop()
    assert linked_list_8.head is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList4.Node'
    assert var_6.data is None
    assert var_6.next is None
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList(node_1)
    var_7 = linked_list_10.remove(none_type_3)
    linked_list_11 = module_0.LinkedList(none_type_3)
    var_8 = linked_list_10.display()
    node_2 = module_0.Node(linked_list_11)
    var_9 = linked_list_10.search(var_7)
    int_0 = 1454
    linked_list_12 = module_0.LinkedList()
    var_10 = linked_list_12.search(int_0)
    node_3 = module_0.Node(var_10)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_13 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_13.display()
    assert var_11 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_4 = None
    linked_list_14 = module_0.LinkedList(none_type_4)
    linked_list_15 = module_0.LinkedList()
    none_type_5 = None
    linked_list_16 = module_0.LinkedList(none_type_5)
    var_12 = linked_list_16.size()
    assert var_12 == 0
    var_13 = linked_list_16.display()
    assert var_13 == ')'
    linked_list_17 = module_0.LinkedList()
    var_14 = linked_list_17.display()
    assert var_14 == ')'
    linked_list_18 = module_0.LinkedList()
    var_15 = linked_list_9.search(var_0)
    node_4 = module_0.Node(var_15)

def test_case_773():
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(str_0)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    node_2 = module_0.Node(dict_0, complex_0)

def test_case_774():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    str_2 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(linked_list_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_3 = linked_list_7.push(bytes_0)
    var_4 = linked_list_4.search(var_2)

def test_case_775():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(none_type_2, linked_list_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_0)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_4)
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    float_0 = -2869.0
    node_9 = module_0.Node(float_0)
    none_type_7 = None
    node_10 = module_0.Node(none_type_7)
    linked_list_10 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.remove(none_type_7)
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.remove(node_10)
    var_9 = linked_list_10.size()
    assert var_9 == 1

def test_case_776():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_2 = linked_list_6.push(linked_list_6)
    var_3 = linked_list_5.size()
    assert var_3 == 0
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_4 = linked_list_8.size()
    assert var_4 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_5 = linked_list_9.display()
    assert var_5 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_11.remove(none_type_5)
    var_7 = linked_list_11.display()
    none_type_6 = None
    node_2 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_3 = module_0.Node(none_type_5)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_7 = None
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_8 = linked_list_13.remove(none_type_7)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_9 = linked_list_15.display()
    assert var_9 == ')'
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    linked_list_16 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_16.remove(none_type_8)
    none_type_9 = None
    node_6 = module_0.Node(none_type_9)
    node_7 = module_0.Node(none_type_9)
    none_type_10 = None
    linked_list_17 = module_0.LinkedList(none_type_10)
    assert linked_list_17.head is None
    var_11 = linked_list_17.size()
    assert var_11 == 0
    var_12 = linked_list_17.display()
    assert var_12 == ')'
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None
    linked_list_19 = module_0.LinkedList()
    assert linked_list_19.head is None

def test_case_777():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(float_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(var_4)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(linked_list_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_4 = module_0.Node(none_type_5, linked_list_9)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_6)
    var_9 = linked_list_10.push(none_type_6)
    var_10 = linked_list_4.display()
    assert var_10 == '(0)'

def test_case_778():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    node_3 = module_0.Node(node_1)
    node_4 = module_0.Node(var_1, var_0)

def test_case_779():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(none_type_1, linked_list_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_2)
    var_3 = linked_list_3.search(node_3)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    node_7 = module_0.Node(node_6)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_8 = module_0.Node(tuple_1)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(none_type_3)
    var_5 = linked_list_2.size()
    assert var_5 == 0

def test_case_780():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    linked_list_3 = module_0.LinkedList(linked_list_1)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    var_3 = linked_list_4.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_1)
    var_4 = linked_list_5.remove(none_type_1)
    linked_list_6 = module_0.LinkedList()
    node_2 = module_0.Node(linked_list_5, linked_list_4)
    linked_list_7 = module_0.LinkedList()
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    node_3 = module_0.Node(var_6)
    assert node_3.data == 0
    var_7 = linked_list_9.push(none_type_2)
    var_8 = linked_list_7.push(linked_list_7)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.display()
    assert var_9 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    node_4 = module_0.Node(var_1, var_5)
    assert node_4.next == ')'

def test_case_781():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_4)
    var_4 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_6 = module_0.Node(node_5, var_3)
    node_7 = module_0.Node(linked_list_5)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.remove(none_type_5)
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    bool_0 = True
    node_9 = module_0.Node(bool_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_782():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(int_0)
    float_0 = 4618.447563
    var_2 = linked_list_2.remove(float_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_3 = module_0.Node(var_6)
    assert node_3.data == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    float_1 = -2122.54
    node_4 = module_0.Node(float_1)
    int_1 = 1454
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.search(int_1)
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(node_5)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_15 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_15.remove(none_type_4)
    var_10 = linked_list_15.remove(linked_list_15)
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    node_9 = module_0.Node(node_8, var_9)
    var_11 = linked_list_11.display()
    assert var_11 == ')'

def test_case_783():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.size()
    assert var_5 == 0
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.search(int_0)
    var_7 = linked_list_3.remove(var_1)

def test_case_784():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)

def test_case_785():
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)

def test_case_786():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(var_3)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_787():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 3548
    var_3 = linked_list_4.search(int_0)
    node_1 = module_0.Node(int_0, var_3)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.display()
    assert var_5 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_8.remove(linked_list_8)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    var_7 = linked_list_8.search(var_6)

def test_case_788():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(float_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    var_3 = linked_list_1.display()
    assert var_3 == '(-2869.0)'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(var_5)
    assert linked_list_5.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_2)
    var_7 = linked_list_6.remove(linked_list_6)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.remove(none_type_3)
    var_9 = linked_list_7.search(node_5)
    var_10 = linked_list_1.display()
    assert var_10 == '(-2869.0)'

def test_case_789():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_1 = module_0.Node(list_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    float_0 = 2634.854
    dict_2 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_2 = [dict_2]
    list_3 = [bool_0, float_0]
    tuple_0 = (list_3,)
    tuple_1 = (dict_2, bool_0, list_2, tuple_0)
    node_3 = module_0.Node(tuple_1)
    var_3 = linked_list_5.size()
    assert var_3 == 0

def test_case_790():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(node_1, var_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_6.display()
    assert var_3 == ')'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.display()
    assert var_4 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_6 = module_0.Node(var_5)
    assert node_6.data == 0
    var_6 = linked_list_9.push(none_type_3)
    var_7 = linked_list_1.size()
    assert var_7 == 0

def test_case_791():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(var_3)
    bytes_1 = b'\xa5[%<'
    node_1 = module_0.Node(bytes_1)
    var_5 = linked_list_3.display()
    assert var_5 == ')'

def test_case_792():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_1 = module_0.Node(list_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.push(float_0)
    var_1 = linked_list_2.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_2.head is None
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    var_3 = linked_list_3.display()
    var_4 = linked_list_3.display()
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    str_2 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    str_3 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(linked_list_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_2)
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_8 = linked_list_8.display()
    node_4 = module_0.Node(linked_list_9)
    var_9 = linked_list_8.search(var_7)
    var_10 = linked_list_9.search(node_4)
    node_5 = module_0.Node(none_type_0, none_type_1)

def test_case_793():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_4.remove(none_type_1)
    var_2 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(node_3, var_1)
    node_5 = module_0.Node(node_3)
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    var_5 = linked_list_6.search(none_type_2)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    str_0 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    str_1 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(linked_list_8)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.display()
    assert var_8 == ')'
    none_type_4 = None
    linked_list_13 = module_0.LinkedList(none_type_4)
    assert linked_list_13.head is None
    var_9 = linked_list_13.size()
    assert var_9 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    node_7 = module_0.Node(var_9)
    assert node_7.data == 0
    var_10 = linked_list_14.push(none_type_4)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(bool_1)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_16 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_16.display()
    assert var_11 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_2 = True
    set_0 = {bool_2}
    none_type_5 = None
    node_10 = module_0.Node(set_0, none_type_5)
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None

def test_case_794():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    set_0 = {bool_0, linked_list_0, node_0}
    var_0 = linked_list_0.remove(set_0)

def test_case_795():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.search(int_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(linked_list_4, linked_list_3)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(bytes_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_796():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_797():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    node_4 = module_0.Node(var_4)
    assert node_4.data == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_0 = False
    list_1 = [bool_0, bool_0]
    node_5 = module_0.Node(list_1)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(bool_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    set_0 = {bool_1, linked_list_5, node_6}
    var_5 = linked_list_5.remove(set_0)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_8 = module_0.Node(var_6)
    assert node_8.data == 0
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_1, dict_1, str_2, dict_1]
    node_9 = module_0.Node(list_2)
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    node_11 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_798():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bool_0 = False
    set_0 = {bool_0}
    node_2 = module_0.Node(set_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.remove(none_type_2)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_5 = linked_list_10.size()
    assert var_5 == 0
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    str_1 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None

def test_case_799():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_1.size()
    assert var_6 == 0

def test_case_800():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    node_1 = module_0.Node(none_type_0, linked_list_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    float_0 = -2869.0
    node_4 = module_0.Node(float_0)
    var_2 = linked_list_3.remove(none_type_1)

def test_case_801():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    node_4 = module_0.Node(var_8)
    assert node_4.data == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_5 = module_0.Node(node_3)

def test_case_802():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    var_1 = linked_list_2.remove(linked_list_0)

def test_case_803():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    var_2 = linked_list_1.push(none_type_0)

def test_case_804():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_2 = module_0.Node(list_1)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_805():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_1 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.search(var_2)
    var_5 = linked_list_3.search(node_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.remove(str_0)
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_8 = linked_list_6.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.display()
    assert var_9 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_11 = linked_list_9.display()
    node_4 = module_0.Node(linked_list_10)
    var_12 = linked_list_9.search(var_10)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_13 = linked_list_11.remove(none_type_4)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_14 = linked_list_13.remove(none_type_5)
    linked_list_14 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'

def test_case_806():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(var_0)
    assert node_3.data == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(linked_list_1)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_5 = module_0.Node(var_4)
    assert node_5.data == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(int_0)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_7.size()
    assert var_8 == 0
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    node_8 = module_0.Node(linked_list_9)
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.display()
    assert var_12 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_807():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    var_2 = linked_list_2.push(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.display()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    node_4 = module_0.Node(var_4)
    str_0 = '8gF^Uhhbr$c}'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.search(str_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    var_8 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList4.Node'
    assert var_8.data is None
    assert var_8.next is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    var_9 = linked_list_8.push(linked_list_8)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_1)
    complex_0 = -1265.460815 + 1056.434j
    node_9 = module_0.Node(node_8, complex_0)
    none_type_6 = None
    node_10 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_10)
    var_10 = linked_list_9.remove(none_type_6)
    none_type_7 = None
    node_11 = module_0.Node(none_type_7)
    node_12 = module_0.Node(none_type_7)
    none_type_8 = None
    node_13 = module_0.Node(none_type_8)
    linked_list_10 = module_0.LinkedList(node_13)
    var_11 = linked_list_10.remove(none_type_8)
    var_12 = linked_list_10.display()
    none_type_9 = None
    node_14 = module_0.Node(none_type_9)
    linked_list_11 = module_0.LinkedList()
    node_15 = module_0.Node(none_type_8)
    var_13 = linked_list_9.size()
    assert var_13 == 1

def test_case_808():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_2.push(linked_list_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_2)
    var_6 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    var_8 = linked_list_6.display()
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_9 = module_0.Node(none_type_3)
    complex_1 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_1)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.display()
    assert var_11 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_0 = True
    node_11 = module_0.Node(bool_0)
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_12 = module_0.Node(var_12)
    assert node_12.data == 0
    var_13 = linked_list_13.display()
    assert var_13 == ')'
    var_14 = linked_list_4.display()
    assert var_14 == ')'

def test_case_809():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_3.push(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_0 = b'\xa5[%<'
    node_3 = module_0.Node(bytes_0)
    int_0 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(int_0)
    var_6 = linked_list_7.size()
    assert var_6 == 1
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.remove(none_type_3)
    var_8 = linked_list_10.display()
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    list_0 = []
    var_9 = linked_list_11.push(list_0)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 0
    var_11 = linked_list_12.size()
    assert var_11 == 0
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(var_10)
    assert node_7.data == 0
    var_12 = linked_list_11.pop()
    assert linked_list_11.head is None

def test_case_810():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_0.push(linked_list_0)
    bool_0 = True
    set_0 = {bool_0}
    none_type_1 = None
    node_3 = module_0.Node(set_0, none_type_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_8 = module_0.Node(var_4)
    assert node_8.data == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_811():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(float_0)
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.search(int_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_4 = module_0.Node(linked_list_8, linked_list_7)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_7 = linked_list_10.push(linked_list_10)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_1)
    complex_1 = -1265.460815 + 1056.434j
    node_8 = module_0.Node(node_7, complex_1)
    var_8 = linked_list_1.push(bool_0)

def test_case_812():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    node_3 = module_0.Node(none_type_0, linked_list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.size()
    assert var_1 == 0
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(var_0)
    assert node_6.data == 0
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_813():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_1 = module_0.Node(list_1)
    node_2 = module_0.Node(node_1, list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_2)
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_5 = linked_list_7.display()
    node_4 = module_0.Node(linked_list_8)
    var_6 = linked_list_7.search(var_4)
    int_0 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(int_0)
    var_8 = linked_list_9.size()
    assert var_8 == 1
    node_5 = module_0.Node(var_8, var_8)
    assert node_5.data == 1
    assert node_5.next == 1
    var_9 = linked_list_4.search(var_2)

def test_case_814():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_2 = linked_list_6.search(int_0)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_7.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_2 = '$T\x0bL=O]w^NF\tP'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_4 = linked_list_8.remove(str_2)
    bool_0 = True
    set_0 = {bool_0}
    none_type_1 = None
    node_2 = module_0.Node(set_0, none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_9.remove(none_type_2)
    var_6 = linked_list_9.push(none_type_2)
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_7 = linked_list_5.push(none_type_3)

def test_case_815():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.size()
    assert var_5 == 0
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(var_4)
    assert node_4.data == 0
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    list_1 = []
    var_6 = linked_list_5.push(list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    var_9 = linked_list_7.pop()
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList4.Node'
    assert var_9.data is None
    assert var_9.next is None
    linked_list_9 = module_0.LinkedList(linked_list_7)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_8)
    var_11 = linked_list_12.remove(none_type_6)
    var_12 = linked_list_12.display()
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_13 = module_0.LinkedList()
    node_10 = module_0.Node(none_type_6)
    node_11 = module_0.Node(none_type_3)

def test_case_816():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 3548
    var_3 = linked_list_2.search(int_0)
    node_0 = module_0.Node(int_0, var_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_1 = module_0.Node(var_5)
    assert node_1.data == 0
    var_6 = linked_list_5.push(none_type_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    str_0 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_9 = linked_list_8.display()
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.display()
    assert var_11 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_12 = linked_list_12.remove(linked_list_12)
    int_1 = -1061
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_13 = linked_list_14.push(int_1)
    var_14 = linked_list_14.size()
    assert var_14 == 1
    node_4 = module_0.Node(var_14, var_14)
    assert node_4.data == 1
    assert node_4.next == 1
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_15 = linked_list_15.remove(none_type_6)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_16 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    none_type_7 = None
    linked_list_17 = module_0.LinkedList(none_type_7)
    assert linked_list_17.head is None
    var_16 = linked_list_17.size()
    assert var_16 == 0
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None
    var_17 = linked_list_18.display()
    assert var_17 == ')'
    linked_list_19 = module_0.LinkedList()
    assert linked_list_19.head is None
    linked_list_20 = module_0.LinkedList()
    assert linked_list_20.head is None

def test_case_817():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    node_3 = module_0.Node(linked_list_3)
    var_5 = linked_list_2.display()
    assert var_5 == '(0)'

def test_case_818():
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_1 = module_0.Node(var_0)
    assert node_1.data == ')'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(node_2)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_9 = linked_list_12.display()
    assert var_9 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_10 = linked_list_1.search(linked_list_13)

def test_case_819():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    var_4 = linked_list_4.display()
    var_5 = linked_list_4.display()
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.remove(none_type_3)
    var_7 = linked_list_5.search(node_5)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    node_9 = module_0.Node(node_8)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_10 = linked_list_11.display()
    assert var_10 == ')'
    bool_3 = False
    set_0 = {bool_3}
    node_11 = module_0.Node(set_0)
    complex_1 = -2363.678516 + 1356.37j
    node_12 = module_0.Node(complex_1)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    linked_list_13 = module_0.LinkedList(var_10)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'

def test_case_820():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_4.display()
    var_4 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    linked_list_6 = module_0.LinkedList(linked_list_4)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    var_5 = linked_list_7.remove(none_type_3)
    var_6 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    node_5 = module_0.Node(node_4, var_5)
    linked_list_9 = module_0.LinkedList()
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    node_6 = module_0.Node(var_7)
    assert node_6.data == ')'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_7)
    var_8 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(none_type_4)
    var_9 = linked_list_10.display()
    node_8 = module_0.Node(linked_list_11)
    var_10 = linked_list_10.search(var_8)
    linked_list_12 = module_0.LinkedList()

def test_case_821():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_4 = module_0.Node(linked_list_3, linked_list_2)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_3)
    var_7 = linked_list_6.display()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_7 = module_0.Node(none_type_3)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_8.push(linked_list_9)
    var_10 = linked_list_0.search(node_7)

def test_case_822():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    var_4 = linked_list_2.search(node_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_2)
    var_6 = linked_list_3.display()
    var_7 = linked_list_3.display()
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_8 = linked_list_4.size()
    assert var_8 == 0
    var_9 = linked_list_4.display()
    assert var_9 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = 3548
    var_10 = linked_list_5.search(int_0)
    node_3 = module_0.Node(int_0, var_10)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_11 = linked_list_6.display()
    assert var_11 == ')'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_12 = linked_list_7.size()
    assert var_12 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_4 = module_0.Node(var_12)
    assert node_4.data == 0
    var_13 = linked_list_8.push(none_type_4)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_14 = linked_list_9.size()
    assert var_14 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_6 = module_0.Node(var_14)
    assert node_6.data == 0
    var_15 = linked_list_10.display()
    assert var_15 == ')'
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_16 = linked_list_11.size()
    assert var_16 == 0
    var_17 = linked_list_11.display()
    assert var_17 == ')'
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(var_13, var_12)
    assert node_9.next == 0

def test_case_823():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.push(var_2)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    var_9 = linked_list_8.search(var_8)
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_824():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    var_4 = linked_list_3.search(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    list_0 = []
    var_5 = linked_list_4.push(list_0)
    linked_list_5 = module_0.LinkedList(linked_list_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'

def test_case_825():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    node_3 = module_0.Node(none_type_0, linked_list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    var_1 = linked_list_1.display()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    node_6 = module_0.Node(var_1)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_4)
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_8 = module_0.Node(tuple_1)
    node_9 = module_0.Node(none_type_1, bool_0)

def test_case_826():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_0.push(linked_list_0)

def test_case_827():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    node_1 = module_0.Node(var_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    var_3 = linked_list_2.push(none_type_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    node_2 = module_0.Node(var_7)
    assert node_2.data == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_6.search(linked_list_7)

def test_case_828():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    list_0 = []
    var_1 = linked_list_1.push(list_0)
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    bool_1 = False
    list_1 = [bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    var_7 = linked_list_5.display()
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_5 = module_0.Node(none_type_3)
    var_8 = linked_list_5.push(list_1)

def test_case_829():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    list_0 = []
    var_1 = linked_list_1.push(list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(var_3)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None

def test_case_830():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_0 = linked_list_2.display()
    assert var_0 == ')'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_4 = module_0.Node(var_1)
    assert node_4.data == 0
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_3 = linked_list_5.search(linked_list_0)

def test_case_831():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    node_4 = module_0.Node(linked_list_5)
    var_5 = linked_list_4.search(var_3)
    var_6 = linked_list_5.push(bool_0)

def test_case_832():
    list_0 = []
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(list_0)

def test_case_833():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(linked_list_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    node_3 = module_0.Node(var_4)
    assert node_3.data == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_834():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_1)
    var_3 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_1 = module_0.Node(node_0, var_2)
    node_2 = module_0.Node(node_0)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(linked_list_8)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_6 = module_0.Node(node_5, complex_0)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_8 = linked_list_2.search(linked_list_5)

def test_case_835():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_1)
    var_5 = linked_list_3.search(node_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.size()
    assert var_7 == 0
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    bool_1 = False
    list_0 = [bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_10.remove(none_type_6)
    var_13 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_8 = module_0.Node(node_7, var_12)
    node_9 = module_0.Node(linked_list_10)
    var_14 = linked_list_9.remove(linked_list_6)

def test_case_836():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.push(linked_list_1)
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(int_0)
    var_3 = linked_list_2.size()
    assert var_3 == 1
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_1 = 3548
    var_6 = linked_list_5.search(int_1)
    node_2 = module_0.Node(int_1, var_6)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_5.search(linked_list_4)

def test_case_837():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_1.display()
    assert var_5 == ')'
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.push(int_0)
    var_7 = linked_list_4.size()
    assert var_7 == 1
    node_1 = module_0.Node(var_7, var_7)
    assert node_1.data == 1
    assert node_1.next == 1
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.remove(none_type_3)
    var_9 = linked_list_5.display()
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(none_type_3)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_838():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    var_1 = linked_list_0.display()
    assert var_1 == ')'

def test_case_839():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.display()
    var_4 = linked_list_2.display()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_2)
    var_6 = linked_list_3.push(none_type_2)
    var_7 = linked_list_0.push(none_type_1)

def test_case_840():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(node_0, var_2)
    node_2 = module_0.Node(linked_list_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.display()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_5 = module_0.Node(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    var_6 = linked_list_0.remove(linked_list_3)

def test_case_841():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    set_0 = {bool_0, linked_list_2, node_0}
    var_1 = linked_list_2.remove(set_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    var_3 = linked_list_3.display()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    var_5 = linked_list_4.display()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(var_5)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_6 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    str_2 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    float_0 = -2869.0
    node_7 = module_0.Node(float_0)
    int_0 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.push(int_0)
    var_10 = linked_list_10.size()
    assert var_10 == 1
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_12 = linked_list_11.pop()
    assert linked_list_11.head is None
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList4.Node'
    assert var_12.data is None
    assert var_12.next is None

def test_case_842():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_3)
    var_4 = linked_list_3.search(node_4)
    var_5 = linked_list_1.remove(none_type_1)

def test_case_843():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_2 = module_0.Node(var_0)

def test_case_844():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2122.54
    node_2 = module_0.Node(float_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(bytes_0)
    bool_0 = False
    list_1 = [bool_0, bool_0]
    node_3 = module_0.Node(list_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_2 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_2)
    node_5 = module_0.Node(node_4, list_2)
    node_6 = module_0.Node(node_4, dict_0)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    node_7 = module_0.Node(bytes_0)

def test_case_845():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_3.display()
    node_3 = module_0.Node(linked_list_4)
    node_4 = module_0.Node(linked_list_3)
    var_3 = linked_list_0.remove(node_1)

def test_case_846():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_4 = module_0.Node(none_type_2, linked_list_1)
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_1)
    complex_0 = -1265.460815 + 1056.434j
    node_8 = module_0.Node(node_7, complex_0)
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(float_0)
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(bool_2)
    var_4 = linked_list_4.display()
    assert var_4 == '(-2869.0)'
    none_type_4 = None
    node_12 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_4)
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_13 = module_0.Node(node_12, var_5)
    bool_3 = True
    node_14 = module_0.Node(bool_3)
    node_15 = module_0.Node(bool_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    set_0 = {bool_3, linked_list_7, node_14}
    var_7 = linked_list_7.remove(set_0)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.search(int_0)
    node_16 = module_0.Node(var_8)
    bool_4 = True
    node_17 = module_0.Node(bool_4)
    node_18 = module_0.Node(node_17)
    linked_list_9 = module_0.LinkedList(linked_list_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'

def test_case_847():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_0.size()
    assert var_1 == 0
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    node_0 = module_0.Node(var_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_848():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_0 = linked_list_2.push(linked_list_2)
    var_1 = linked_list_1.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None

def test_case_849():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    var_3 = linked_list_2.display()
    assert var_3 == ')'

def test_case_850():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    int_1 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_851():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    var_2 = linked_list_1.push(none_type_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_1 = 3548
    var_5 = linked_list_3.search(int_1)
    node_1 = module_0.Node(int_1, var_5)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_7 = linked_list_4.display()
    node_3 = module_0.Node(linked_list_5)
    var_8 = linked_list_4.search(var_6)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(none_type_3)
    var_11 = linked_list_8.push(none_type_3)
    int_2 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_12 = linked_list_9.search(int_2)
    var_13 = linked_list_9.search(var_12)
    int_3 = 1547
    linked_list_10 = module_0.LinkedList(int_3)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'

def test_case_852():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_4 = module_0.Node(var_1)
    assert node_4.data == 0
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_3)
    var_4 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_6 = module_0.Node(node_5, var_3)
    node_7 = module_0.Node(linked_list_4)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList(linked_list_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'

def test_case_853():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(linked_list_5)
    var_5 = linked_list_4.size()
    assert var_5 == 0
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(int_0)
    var_7 = linked_list_6.size()
    assert var_7 == 1
    linked_list_7 = module_0.LinkedList(linked_list_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'

def test_case_854():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    var_1 = linked_list_0.remove(linked_list_0)

def test_case_855():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    int_1 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(int_1)
    var_6 = linked_list_4.size()
    assert var_6 == 1
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    var_9 = linked_list_5.display()
    assert var_9 == ')'
    var_10 = linked_list_5.search(var_9)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    var_12 = linked_list_2.search(var_8)

def test_case_856():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(node_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_2 = linked_list_6.push(int_0)
    float_0 = 4618.447563
    var_3 = linked_list_6.remove(float_0)
    float_1 = 2634.854
    dict_0 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_1]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_3)
    var_5 = linked_list_7.display()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_6 = module_0.Node(none_type_3)
    var_6 = linked_list_2.search(str_0)

def test_case_857():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_3 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.search(var_2)
    var_5 = linked_list_2.push(linked_list_2)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_4.remove(linked_list_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    str_2 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    float_0 = -2869.0
    node_4 = module_0.Node(float_0)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_10.size()
    assert var_10 == 0
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(var_9)
    assert node_7.data == 0
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_12 = linked_list_0.size()
    assert var_12 == 1

def test_case_858():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    var_6 = linked_list_2.search(var_5)
    list_0 = []
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.push(list_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(var_8)
    assert node_3.data == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_4)
    var_11 = linked_list_9.remove(linked_list_9)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_12 = linked_list_10.size()
    assert var_12 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_5 = module_0.Node(var_12)
    assert node_5.data == 0
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_12 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_12.display()
    assert var_13 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_14 = linked_list_8.push(var_5)

def test_case_859():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    float_0 = -2122.54
    node_3 = module_0.Node(float_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_3)
    var_6 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_5 = module_0.Node(node_4, var_5)
    node_6 = module_0.Node(node_4)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_5)
    var_11 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_9 = module_0.Node(node_8, var_10)
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    node_11 = module_0.Node(node_10)
    node_12 = module_0.Node(bool_2)
    none_type_6 = None
    node_13 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.remove(none_type_6)
    var_13 = linked_list_12.remove(linked_list_12)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_14 = module_0.Node(node_13, var_12)
    node_15 = module_0.Node(linked_list_12)
    linked_list_14 = module_0.LinkedList(linked_list_2)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'

def test_case_860():
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'

def test_case_861():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_3 = linked_list_5.push(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_5.push(linked_list_6)
    linked_list_7 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'

def test_case_862():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_1 = module_0.Node(int_0, var_2)
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    node_3 = module_0.Node(none_type_1)

def test_case_863():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    var_4 = linked_list_3.display()
    var_5 = linked_list_3.display()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.remove(none_type_2)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_9 = linked_list_13.size()
    assert var_9 == 0
    str_3 = '$T\x0bL=O]w^NF\tP'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_10 = linked_list_14.remove(str_3)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_15 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_15.remove(none_type_6)
    linked_list_16 = module_0.LinkedList(none_type_6)
    assert linked_list_16.head is None
    var_12 = linked_list_15.display()
    node_7 = module_0.Node(linked_list_16)
    node_8 = module_0.Node(linked_list_15)
    var_13 = linked_list_5.push(linked_list_16)

def test_case_864():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.display()
    assert var_3 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_4 = linked_list_9.display()
    assert var_4 == ')'
    node_5 = module_0.Node(var_4)
    assert node_5.data == ')'
    var_5 = linked_list_2.remove(none_type_1)

def test_case_865():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.size()
    assert var_2 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_1)
    assert node_3.data == 0
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_6.remove(linked_list_6)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    node_7 = module_0.Node(node_5, dict_0)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    linked_list_11 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(none_type_7)
    var_11 = linked_list_11.display()
    node_9 = module_0.Node(node_3)

def test_case_866():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(node_0)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    node_1 = module_0.Node(var_2)
    int_1 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(int_1)
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(linked_list_5)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_2)
    var_7 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_3 = module_0.Node(node_2, var_6)
    node_4 = module_0.Node(node_2)
    var_8 = linked_list_6.pop()
    assert var_8 == 'n'

def test_case_867():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_1 = module_0.Node(list_1)
    node_2 = module_0.Node(node_1, list_1)
    node_3 = module_0.Node(node_1, dict_1)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    str_2 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_2.remove(node_1)

def test_case_868():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.display()
    assert var_5 == ')'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_7 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'

def test_case_869():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_1 = module_0.Node(linked_list_3, linked_list_2)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_5.display()
    node_3 = module_0.Node(linked_list_6)
    var_6 = linked_list_5.search(var_4)
    var_7 = linked_list_6.search(node_3)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_9 = linked_list_7.display()
    node_5 = module_0.Node(linked_list_8)
    var_10 = linked_list_7.search(var_8)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_11 = linked_list_9.size()
    assert var_11 == 0
    var_12 = linked_list_9.display()
    assert var_12 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_6 = module_0.Node(var_5, none_type_4)

def test_case_870():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_1 = module_0.Node(var_3)
    assert node_1.data == 0
    var_4 = linked_list_6.push(none_type_1)
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.push(float_0)
    var_6 = linked_list_8.pop()
    assert var_6 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    node_3 = module_0.Node(var_7)
    assert node_3.data == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_2 = None
    linked_list_11 = module_0.LinkedList(none_type_2)
    assert linked_list_11.head is None
    var_8 = linked_list_11.push(linked_list_11)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    int_0 = -1061
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_9 = linked_list_13.push(int_0)
    float_1 = 4618.447563
    var_10 = linked_list_13.remove(float_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_14 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_14.remove(none_type_3)
    var_12 = linked_list_14.display()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    node_6 = module_0.Node(none_type_3)
    var_13 = linked_list_15.push(var_1)

def test_case_871():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(node_3)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.search(int_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_872():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    node_1 = module_0.Node(bool_0)

def test_case_873():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_3 = linked_list_8.size()
    assert var_3 == 0
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_2 = [dict_1, dict_1, str_1, dict_1]
    node_2 = module_0.Node(list_2)
    node_3 = module_0.Node(node_2, list_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_9.remove(none_type_4)
    var_5 = linked_list_9.display()
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_7 = module_0.Node(none_type_4)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_11.remove(none_type_6)
    var_7 = linked_list_11.display()
    var_8 = linked_list_11.display()
    node_9 = module_0.Node(list_1, none_type_2)

def test_case_874():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_3 = module_0.Node(linked_list_3)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    bytes_0 = b'\xa5[%<'
    node_4 = module_0.Node(bytes_0)
    var_5 = linked_list_3.push(none_type_0)

def test_case_875():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_1)

def test_case_876():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.remove(none_type_1)
    var_3 = linked_list_5.search(node_3)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_2)
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_5 = linked_list_7.display()
    node_7 = module_0.Node(linked_list_8)
    var_6 = linked_list_7.search(var_4)
    var_7 = linked_list_7.push(linked_list_7)
    float_0 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.push(float_0)
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_9 = module_0.Node(var_9)
    assert node_9.data == 0
    var_10 = linked_list_11.display()
    assert var_10 == ')'
    bytes_0 = b'\xa5[%<'
    node_10 = module_0.Node(bytes_0)
    none_type_4 = None
    node_11 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_4)
    var_12 = linked_list_12.push(none_type_4)
    node_12 = module_0.Node(var_4)

def test_case_877():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(bytes_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(var_5)
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_4 = module_0.Node(list_1)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_6 = linked_list_11.size()
    assert var_6 == 0
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_12.remove(none_type_6)
    var_8 = linked_list_12.remove(linked_list_12)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_6 = module_0.Node(node_5, var_7)
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    linked_list_14 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_14.remove(none_type_7)
    var_10 = linked_list_14.size()
    assert var_10 == 1

def test_case_878():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    var_2 = linked_list_0.size()
    assert var_2 == 1

def test_case_879():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_4 = module_0.Node(list_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_6 = module_0.Node(var_3)
    assert node_6.data == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_2, dict_2, str_2, dict_2]
    node_7 = module_0.Node(list_2)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    list_3 = []
    var_5 = linked_list_10.push(list_3)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_880():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    list_0 = []
    var_2 = linked_list_1.push(list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_881():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.size()
    assert var_6 == 0
    list_0 = []
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(list_0)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    var_9 = linked_list_7.size()
    assert var_9 == 0
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(var_8)
    assert node_6.data == 0
    node_7 = module_0.Node(var_6)
    assert node_7.data == 0

def test_case_882():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.push(linked_list_3)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.search(int_0)
    node_2 = module_0.Node(var_5)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(linked_list_7)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    complex_1 = -1265.460815 + 1056.434j
    node_6 = module_0.Node(node_5, complex_1)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.remove(none_type_4)
    var_8 = linked_list_8.search(node_7)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_10 = module_0.Node(list_0)
    node_11 = module_0.Node(node_10, list_0)
    none_type_5 = None
    node_12 = module_0.Node(none_type_5)
    none_type_6 = None
    node_13 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_6)
    node_14 = module_0.Node(none_type_6, linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_7 = None
    node_15 = module_0.Node(none_type_7)
    linked_list_12 = module_0.LinkedList(node_15)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.remove(none_type_7)
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_11 = linked_list_12.display()
    node_16 = module_0.Node(linked_list_13)
    var_12 = linked_list_12.search(var_10)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None

def test_case_883():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    str_2 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.display()
    assert var_3 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_9.remove(none_type_3)
    var_5 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_6 = module_0.Node(node_5, var_4)
    node_7 = module_0.Node(linked_list_9)
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_6 = linked_list_11.size()
    assert var_6 == 0
    var_7 = linked_list_11.display()
    assert var_7 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.display()
    assert var_8 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_9 = linked_list_13.size()
    assert var_9 == 0
    var_10 = linked_list_13.display()
    assert var_10 == ')'
    var_11 = linked_list_13.search(none_type_5)
    str_3 = '#p1jIXa}Q?(h'
    dict_1 = {str_3: str_3, str_3: str_3, str_3: str_3}
    list_1 = [dict_1, dict_1, str_3, dict_1]
    node_9 = module_0.Node(list_1)
    node_10 = module_0.Node(node_9, list_1)
    int_0 = 1454
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_12 = linked_list_14.search(int_0)
    node_11 = module_0.Node(var_12)
    none_type_6 = None
    linked_list_15 = module_0.LinkedList(none_type_6)
    assert linked_list_15.head is None
    var_13 = linked_list_15.push(linked_list_15)
    var_14 = linked_list_15.push(none_type_6)
    var_15 = linked_list_6.search(var_5)

def test_case_884():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None

def test_case_885():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_886():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_5 = linked_list_6.display()
    node_4 = module_0.Node(linked_list_7)
    var_6 = linked_list_6.search(var_4)
    var_7 = linked_list_7.search(node_4)
    linked_list_8 = module_0.LinkedList(linked_list_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'

def test_case_887():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(none_type_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_3)
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_888():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'

def test_case_889():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(node_0, var_1)
    node_2 = module_0.Node(linked_list_1)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_0.search(linked_list_0)

def test_case_890():
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.search(int_0)
    var_3 = linked_list_4.search(var_2)
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_0 = b'\xa5[%<'
    node_3 = module_0.Node(bytes_0)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    str_1 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    str_2 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(linked_list_7)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    list_0 = []
    var_7 = linked_list_11.push(list_0)
    var_8 = linked_list_1.remove(linked_list_11)

def test_case_891():
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)

def test_case_892():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    str_0 = '8gF^Uhhbr$c}'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.search(str_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    node_8 = module_0.Node(node_6, dict_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    var_8 = linked_list_6.display()
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_10 = linked_list_7.display()
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_9.display()
    assert var_11 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bytes_1 = b'\xa5[%<'
    node_11 = module_0.Node(bytes_1)
    var_12 = linked_list_2.remove(var_1)

def test_case_893():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    node_4 = module_0.Node(var_2)
    assert node_4.data == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_6 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    str_2 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    str_3 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(linked_list_6)
    int_0 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_9.push(int_0)
    var_7 = linked_list_9.size()
    assert var_7 == 1
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_9 = linked_list_10.display()
    node_8 = module_0.Node(linked_list_11)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.remove(none_type_5)
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    str_4 = '#p1jIXa}Q?(h'
    dict_1 = {str_4: str_4, str_4: str_4, str_4: str_4}
    list_1 = [dict_1, dict_1, str_4, dict_1]
    node_10 = module_0.Node(list_1)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    str_5 = '[eX\rN'
    var_11 = linked_list_13.search(str_5)

def test_case_894():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.push(none_type_1)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    bytes_0 = b'\xa5[%<'
    node_5 = module_0.Node(bytes_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_0)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_9 = module_0.Node(var_7)
    assert node_9.data == 0
    var_8 = linked_list_8.push(none_type_4)
    var_9 = linked_list_6.push(linked_list_6)
    int_1 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.search(int_1)
    var_11 = linked_list_9.search(var_10)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_895():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bytes_0 = b'\xa5[%<'
    node_3 = module_0.Node(bytes_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.size()
    assert var_3 == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(var_2)
    assert node_6.data == 0
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(bool_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    var_6 = linked_list_4.search(none_type_3)
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_4)
    var_8 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_11 = module_0.Node(node_10, var_7)
    node_12 = module_0.Node(node_10)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_9 = linked_list_8.push(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_8.push(linked_list_9)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_13 = linked_list_11.display()
    assert var_13 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_13 = module_0.Node(linked_list_8, bool_1)

def test_case_896():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.remove(linked_list_1)
    var_4 = linked_list_1.size()
    assert var_4 == 1
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_6 = linked_list_2.display()
    node_5 = module_0.Node(linked_list_3)
    var_7 = linked_list_2.search(var_5)
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_8 = linked_list_4.push(float_0)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_9 = linked_list_5.search(int_0)
    var_10 = linked_list_5.search(var_9)
    list_0 = []
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_11 = linked_list_6.push(list_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_12 = linked_list_7.size()
    assert var_12 == 0
    var_13 = linked_list_7.display()
    assert var_13 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_14 = linked_list_8.display()
    assert var_14 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_15 = linked_list_9.push(linked_list_8)
    var_16 = linked_list_5.search(var_15)

def test_case_897():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_3)
    var_4 = linked_list_2.display()
    bool_1 = True
    set_0 = {bool_1}
    none_type_4 = None
    node_5 = module_0.Node(set_0, none_type_4)
    node_6 = module_0.Node(bool_1)
    set_1 = {var_4, none_type_2, node_3}
    var_5 = linked_list_0.search(set_1)

def test_case_898():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_1)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    var_8 = linked_list_5.search(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_9 = linked_list_6.push(linked_list_6)
    var_10 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.LinkedList'
    assert var_10.head is None
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_12 = linked_list_8.display()
    assert var_12 == ')'
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_14 = linked_list_11.remove(node_4)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_5 = module_0.Node(tuple_1)
    node_6 = module_0.Node(set_0)

def test_case_899():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_4.push(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    var_5 = linked_list_0.display()

def test_case_900():
    bool_0 = False
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None

def test_case_901():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_0.search(int_0)

def test_case_902():
    float_0 = -2122.54
    node_0 = module_0.Node(float_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_2 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_0.push(linked_list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.search(int_0)
    node_3 = module_0.Node(var_5)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_6 = linked_list_4.push(linked_list_4)
    var_7 = linked_list_4.push(none_type_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    node_4 = module_0.Node(var_8)
    assert node_4.data == ')'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_9 = linked_list_7.push(linked_list_7)
    var_10 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.LinkedList'
    assert var_10.head is None
    node_5 = module_0.Node(var_1, linked_list_6)

def test_case_903():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    list_0 = []
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(none_type_0, linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    node_4 = module_0.Node(linked_list_5)
    var_5 = linked_list_4.search(var_3)
    var_6 = linked_list_5.search(node_4)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    node_7 = module_0.Node(none_type_4)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(bool_1)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_5)
    var_9 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_11 = module_0.Node(node_10, var_8)
    node_12 = module_0.Node(node_10)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_13 = module_0.Node(list_1)
    node_14 = module_0.Node(node_13, list_1)
    node_15 = module_0.Node(node_13, dict_0)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    var_11 = linked_list_0.search(var_8)

def test_case_904():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    var_2 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(node_1, var_1)
    node_3 = module_0.Node(node_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_2.remove(none_type_0)

def test_case_905():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(none_type_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    var_4 = linked_list_3.size()
    assert var_4 == 1
    node_6 = module_0.Node(var_4, var_4)
    assert node_6.data == 1
    assert node_6.next == 1
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_906():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_1 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    var_2 = linked_list_0.remove(bool_0)

def test_case_907():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    list_1 = [str_0, var_0, node_0]
    tuple_0 = (var_0, var_0, list_1)
    var_1 = linked_list_0.remove(tuple_0)

def test_case_908():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    set_0 = {bool_0, linked_list_0, node_0}
    var_0 = linked_list_0.remove(set_0)
    bool_1 = False
    linked_list_1 = module_0.LinkedList(bool_1)
    assert linked_list_1.head is None
    bool_2 = True
    linked_list_2 = module_0.LinkedList(bool_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    node_3 = module_0.Node(node_2)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(bytes_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_2 = linked_list_6.push(linked_list_6)
    var_3 = linked_list_5.size()
    assert var_3 == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_3)
    var_5 = linked_list_7.remove(linked_list_7)
    var_6 = linked_list_7.size()
    assert var_6 == 1
    bool_4 = True
    set_1 = {bool_4}
    none_type_4 = None
    node_5 = module_0.Node(set_1, none_type_4)
    node_6 = module_0.Node(bool_4)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.remove(node_7)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_909():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_1 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(none_type_0, linked_list_2)
    var_0 = linked_list_1.display()
    assert var_0 == ')'

def test_case_910():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_0.search(node_1)

def test_case_911():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    var_4 = linked_list_4.display()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(var_4)
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(int_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    str_0 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_5 = module_0.Node(none_type_4, linked_list_8)
    bool_0 = False
    linked_list_9 = module_0.LinkedList(bool_0)
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    var_8 = linked_list_8.size()
    assert var_8 == 0

def test_case_912():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_0.push(linked_list_0)

def test_case_913():
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(str_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(linked_list_2)
    var_2 = linked_list_1.size()
    assert var_2 == 0
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_2.display()

def test_case_914():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_3)
    assert node_3.data == 0
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    var_5 = linked_list_4.push(linked_list_4)
    bool_1 = False
    linked_list_5 = module_0.LinkedList(bool_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_6)
    var_6 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    var_7 = linked_list_7.display()
    node_7 = module_0.Node(linked_list_8)
    var_8 = linked_list_7.search(var_6)
    var_9 = linked_list_7.push(linked_list_7)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    linked_list_9 = module_0.LinkedList()
    var_10 = linked_list_9.size()
    assert var_10 == 0
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    var_11 = linked_list_10.size()
    assert var_11 == 0
    linked_list_11 = module_0.LinkedList()
    node_10 = module_0.Node(var_11)
    assert node_10.data == 0
    var_12 = linked_list_11.display()
    assert var_12 == ')'
    var_13 = linked_list_6.size()
    assert var_13 == 0

def test_case_915():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(node_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_0 = False
    set_0 = {bool_0}
    node_2 = module_0.Node(set_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(linked_list_5)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(linked_list_7)
    var_7 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.LinkedList'
    assert var_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_1 = [dict_1]
    list_2 = [bool_1, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_1, list_1, tuple_0)
    node_3 = module_0.Node(tuple_1)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    str_1 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    float_1 = -2869.0
    node_4 = module_0.Node(float_1)
    int_0 = -1061
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.push(int_0)
    var_12 = linked_list_0.push(none_type_0)

def test_case_916():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_4.remove(none_type_2)
    var_2 = linked_list_4.display()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    node_3 = module_0.Node(var_2)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    list_1 = []
    var_6 = linked_list_9.push(list_1)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_7 = linked_list_10.push(linked_list_10)
    node_5 = module_0.Node(linked_list_10)

def test_case_917():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_1 = [dict_0]
    list_2 = [bool_1, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_0, bool_1, list_1, tuple_0)
    node_2 = module_0.Node(tuple_1)
    var_2 = linked_list_0.size()
    assert var_2 == 0

def test_case_918():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_5 = module_0.Node(linked_list_2)
    node_6 = module_0.Node(linked_list_1)
    node_7 = module_0.Node(node_5)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(bool_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_1.push(node_3)

def test_case_919():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    node_2 = module_0.Node(none_type_2, linked_list_4)
    var_4 = linked_list_3.push(node_0)

def test_case_920():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    node_3 = module_0.Node(linked_list_2)
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(float_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_0)
    var_5 = linked_list_4.display()
    assert var_5 == '(-2869.0)'
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    node_8 = module_0.Node(linked_list_6)
    var_8 = linked_list_5.search(var_6)
    var_9 = linked_list_6.search(node_8)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'

def test_case_921():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    node_1 = module_0.Node(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    node_2 = module_0.Node(var_2)
    assert node_2.data == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_1.push(linked_list_1)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_4.push(linked_list_5)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(bytes_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bytes_1 = b'\xa5[%<'
    node_5 = module_0.Node(bytes_1)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    int_1 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.search(int_1)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(none_type_5)
    var_11 = linked_list_11.remove(linked_list_11)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_8 = module_0.Node(node_7, var_10)
    node_9 = module_0.Node(linked_list_11)
    node_10 = module_0.Node(var_8)

def test_case_922():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(bytes_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(int_0)
    var_5 = linked_list_6.size()
    assert var_5 == 1
    node_4 = module_0.Node(var_5, var_5)
    assert node_4.data == 1
    assert node_4.next == 1
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    list_0 = []
    var_6 = linked_list_7.push(list_0)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.push(var_8)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_6.search(node_5)

def test_case_923():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_924():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(node_1, var_1)
    node_3 = module_0.Node(node_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    str_2 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(linked_list_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.display()
    assert var_8 == ')'
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_11 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_12.remove(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    linked_list_14 = module_0.LinkedList(var_8)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'

def test_case_925():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_2)
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_6 = linked_list_7.display()
    node_4 = module_0.Node(linked_list_8)
    var_7 = linked_list_7.search(var_5)
    var_8 = linked_list_8.search(node_4)
    linked_list_9 = module_0.LinkedList(linked_list_8)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'

def test_case_926():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_1)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_1)
    var_5 = linked_list_3.remove(linked_list_3)
    var_6 = linked_list_3.size()
    assert var_6 == 1
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_927():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_0 = module_0.LinkedList(none_type_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(var_0)
    assert node_5.data == 0
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_1 = module_0.LinkedList(none_type_3)
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_3 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_4)
    var_4 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_9 = module_0.Node(node_8, var_3)
    var_5 = linked_list_4.push(linked_list_1)

def test_case_928():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_929():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    node_2 = module_0.Node(linked_list_1)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    var_4 = linked_list_3.size()
    assert var_4 == 1
    node_3 = module_0.Node(none_type_0)

def test_case_930():
    float_0 = -2122.54
    node_0 = module_0.Node(float_0)
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_1 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    var_2 = linked_list_2.search(var_0)
    var_3 = linked_list_2.push(linked_list_2)
    var_4 = linked_list_3.push(str_0)

def test_case_931():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    int_1 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(int_1)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(bytes_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_1)
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(linked_list_7)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_2)
    complex_1 = -1265.460815 + 1056.434j
    node_9 = module_0.Node(node_8, complex_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_932():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_1 = linked_list_0.size()
    assert var_1 == 1

def test_case_933():
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    node_4 = module_0.Node(none_type_1, linked_list_3)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(linked_list_5)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_3)
    var_7 = linked_list_7.display()
    var_8 = linked_list_7.display()
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    str_2 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(linked_list_8)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_12 = linked_list_13.display()
    assert var_12 == ')'
    none_type_6 = None
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    var_13 = linked_list_14.push(linked_list_14)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_14 = linked_list_14.push(linked_list_15)
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_16 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_16.remove(none_type_7)
    linked_list_17 = module_0.LinkedList(none_type_7)
    assert linked_list_17.head is None
    var_16 = linked_list_16.display()
    none_type_8 = None
    linked_list_18 = module_0.LinkedList(none_type_8)
    assert linked_list_18.head is None
    str_3 = '3$;;z6n'
    linked_list_19 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_19.head).__module__}.{type(linked_list_19.head).__qualname__}' == 'linkedList4.Node'
    var_17 = linked_list_18.display()
    assert var_17 == ')'
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    var_18 = linked_list_18.display()
    assert var_18 == ')'
    node_9 = module_0.Node(var_9, var_7)
    assert node_9.data == ')'

def test_case_934():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    var_3 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.LinkedList'
    assert var_3.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    node_1 = module_0.Node(none_type_2, linked_list_3)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_935():
    str_0 = 'EU%1@v\x0b'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'

def test_case_936():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(node_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    node_3 = module_0.Node(var_7)
    assert node_3.data == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.remove(none_type_4)
    str_2 = '8gF^Uhhbr$c}'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.search(str_2)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    str_3 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    float_0 = -2869.0
    node_10 = module_0.Node(float_0)
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_6)
    var_12 = linked_list_12.remove(linked_list_12)
    bool_2 = True
    set_0 = {bool_2}
    none_type_7 = None
    node_12 = module_0.Node(set_0, none_type_7)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None

def test_case_937():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_4.push(none_type_1)
    var_5 = linked_list_4.push(var_1)

def test_case_938():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(linked_list_0)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    int_1 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.search(int_1)
    node_4 = module_0.Node(var_4)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(linked_list_5)
    var_6 = linked_list_5.push(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    node_7 = module_0.Node(node_5, dict_0)
    str_1 = '$T\x0bL=O]w^NF\tP'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.remove(str_1)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_3)
    var_9 = linked_list_7.display()
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_10 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_939():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_4.display()
    node_6 = module_0.Node(linked_list_5)
    var_6 = linked_list_4.search(var_4)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.remove(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    var_9 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_8 = module_0.Node(node_7, var_8)
    node_9 = module_0.Node(linked_list_7)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(var_11)
    assert linked_list_12.head is None
    bytes_0 = b'\xa5[%<'
    node_10 = module_0.Node(bytes_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_11 = module_0.Node(list_0)
    node_12 = module_0.Node(node_11, list_0)
    node_13 = module_0.Node(node_11, dict_0)
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_12 = linked_list_13.display()
    assert var_12 == ')'
    bool_2 = True
    node_14 = module_0.Node(bool_2)
    node_15 = module_0.Node(node_14)
    bytes_1 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_8 = None
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    var_13 = linked_list_14.push(bytes_1)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    none_type_9 = None
    node_16 = module_0.Node(none_type_9)
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    var_14 = linked_list_16.remove(none_type_9)
    var_15 = linked_list_16.search(node_16)
    var_16 = linked_list_15.remove(var_10)

def test_case_940():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.display()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(var_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_941():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_0 = module_0.Node(var_4)
    assert node_0.data == 0
    var_5 = linked_list_4.push(none_type_1)
    var_6 = linked_list_2.push(linked_list_2)
    bool_0 = True
    linked_list_5 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    list_0 = []
    var_7 = linked_list_6.push(list_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    var_9 = linked_list_7.size()
    assert var_9 == 0
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.remove(str_0)
    var_11 = linked_list_1.push(linked_list_0)

def test_case_942():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_0.search(int_0)
    var_2 = linked_list_0.size()
    assert var_2 == 1

def test_case_943():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(var_4)
    assert linked_list_7.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_6 = linked_list_8.display()
    node_5 = module_0.Node(linked_list_9)
    var_7 = linked_list_8.search(var_5)
    var_8 = linked_list_9.search(node_5)
    bytes_0 = b'\xa5[%<'
    node_6 = module_0.Node(bytes_0)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_10.remove(linked_list_2)

def test_case_944():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    set_0 = {bool_0, linked_list_0, node_0}
    var_0 = linked_list_0.remove(set_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == 0
    var_3 = linked_list_3.push(none_type_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_4.push(linked_list_5)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    node_4 = module_0.Node(linked_list_7)
    var_8 = linked_list_6.search(var_6)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.search(int_0)
    node_5 = module_0.Node(var_9)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_10 = linked_list_9.push(linked_list_9)
    var_11 = linked_list_9.push(none_type_3)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_11.remove(none_type_4)
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_13 = linked_list_11.display()
    var_14 = linked_list_11.pop()
    assert linked_list_11.head is None
    assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList4.Node'
    assert var_14.data is None
    assert var_14.next is None
    linked_list_13 = module_0.LinkedList(linked_list_11)
    none_type_5 = None
    linked_list_14 = module_0.LinkedList(none_type_5)
    var_15 = linked_list_14.size()
    assert var_15 == 0
    linked_list_15 = module_0.LinkedList()
    none_type_6 = None
    linked_list_16 = module_0.LinkedList()
    var_16 = linked_list_16.remove(none_type_6)
    linked_list_17 = module_0.LinkedList(var_16)
    linked_list_18 = module_0.LinkedList()

def test_case_945():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_1 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(none_type_0, linked_list_2)
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(bool_1)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_1 = linked_list_4.size()
    assert var_1 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.display()
    assert var_2 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_3 = linked_list_7.size()
    assert var_3 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_4 = linked_list_8.display()
    assert var_4 == ')'
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_5 = linked_list_10.push(linked_list_10)
    var_6 = linked_list_9.size()
    assert var_6 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_7 = module_0.Node(list_1)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    float_0 = -2869.0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_7 = linked_list_12.push(float_0)
    var_8 = linked_list_12.pop()
    assert var_8 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_12.head is None
    bool_2 = False
    set_0 = {bool_2}
    node_8 = module_0.Node(set_0)
    complex_0 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_0)
    node_10 = module_0.Node(node_9)
    var_9 = linked_list_9.size()
    assert var_9 == 0

def test_case_946():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_0 = module_0.Node(var_5)
    assert node_0.data == 0
    var_6 = linked_list_7.push(none_type_2)
    var_7 = linked_list_5.push(linked_list_5)
    var_8 = linked_list_7.size()
    assert var_8 == 1

def test_case_947():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_2 = linked_list_4.display()
    var_3 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.Node'
    assert var_3.data is None
    assert var_3.next is None
    linked_list_6 = module_0.LinkedList()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_2)
    var_4 = linked_list_7.remove(none_type_2)
    linked_list_8 = module_0.LinkedList(none_type_2)
    var_5 = linked_list_7.display()
    var_6 = linked_list_7.pop()
    linked_list_9 = module_0.LinkedList(linked_list_7)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList()
    var_7 = linked_list_10.remove(none_type_3)
    var_8 = linked_list_10.search(node_3)
    var_9 = linked_list_5.size()
    assert var_9 == 0

def test_case_948():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(var_0)

def test_case_949():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_4 = module_0.Node(var_0)
    assert node_4.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_1.push(var_0)

def test_case_950():
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)
    float_0 = -2122.54
    node_0 = module_0.Node(float_0)
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(var_2)
    assert node_5.data == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    var_4 = linked_list_2.size()
    assert var_4 == 0

def test_case_951():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_4)
    var_3 = linked_list_3.remove(none_type_1)
    var_4 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    node_5 = module_0.Node(node_4, var_3)
    node_6 = module_0.Node(node_4)
    linked_list_5 = module_0.LinkedList()
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList()
    var_5 = linked_list_6.remove(none_type_2)
    var_6 = linked_list_1.display()
    assert var_6 == ')'

def test_case_952():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.display()
    var_3 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.Node'
    assert var_3.data is None
    assert var_3.next is None

def test_case_953():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.display()
    assert var_6 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    bool_0 = True
    linked_list_9 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_8 = linked_list_9.size()
    assert var_8 == 1
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    bool_1 = True
    set_0 = {bool_1}
    none_type_6 = None
    node_8 = module_0.Node(set_0, none_type_6)
    node_9 = module_0.Node(bool_1)
    float_0 = -2869.0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_10 = linked_list_13.push(float_0)
    bool_2 = False
    set_1 = {bool_2}
    node_10 = module_0.Node(set_1)
    int_1 = -2297
    var_11 = linked_list_13.search(int_1)
    var_12 = linked_list_13.size()
    assert var_12 == 1
    var_13 = linked_list_9.display()
    assert var_13 == '(True)'

def test_case_954():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(linked_list_3)
    var_4 = linked_list_4.push(var_1)

def test_case_955():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    node_7 = module_0.Node(node_5, dict_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    node_9 = module_0.Node(linked_list_7)
    var_7 = linked_list_6.search(var_5)
    var_8 = linked_list_6.push(linked_list_6)
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_10 = module_0.Node(list_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None

def test_case_956():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_1)
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_4.display()
    var_4 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    linked_list_6 = module_0.LinkedList(linked_list_4)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    var_5 = linked_list_7.size()
    assert var_5 == 0
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    linked_list_8 = module_0.LinkedList()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_5)
    var_7 = linked_list_9.remove(none_type_4)
    node_6 = module_0.Node(none_type_4, linked_list_9)
    float_0 = -2869.0
    linked_list_10 = module_0.LinkedList()
    var_8 = linked_list_10.push(float_0)
    bool_1 = False
    set_0 = {bool_1}
    node_7 = module_0.Node(set_0)
    int_0 = -2297
    var_9 = linked_list_10.search(int_0)
    var_10 = linked_list_10.size()
    assert var_10 == 1
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList()
    var_11 = linked_list_11.remove(none_type_5)
    node_9 = module_0.Node(var_9)
    assert node_9.data is None

def test_case_957():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    var_3 = linked_list_3.search(int_0)
    node_1 = module_0.Node(var_3)
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    var_4 = linked_list_4.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_2 = module_0.Node(set_0)
    int_1 = -2297
    var_5 = linked_list_4.search(int_1)
    var_6 = linked_list_4.size()
    assert var_6 == 1
    var_7 = linked_list_3.search(node_2)

def test_case_958():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(float_0)
    var_5 = linked_list_4.search(node_2)

def test_case_959():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.size()
    assert var_5 == 0
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    set_0 = {bool_0, linked_list_7, node_1}
    var_6 = linked_list_7.remove(set_0)
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(float_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_1)
    var_8 = linked_list_8.display()
    assert var_8 == '(-2869.0)'
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.search(int_0)
    node_6 = module_0.Node(var_9)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.push(linked_list_10)
    var_11 = linked_list_10.push(none_type_6)
    float_1 = -2869.0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.push(float_1)
    bool_2 = False
    set_1 = {bool_2}
    node_7 = module_0.Node(set_1)
    int_1 = -2297
    var_13 = linked_list_11.search(int_1)
    var_14 = linked_list_11.size()
    assert var_14 == 1
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_15 = linked_list_12.size()
    assert var_15 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_8 = None
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    var_16 = linked_list_14.size()
    assert var_16 == 0
    var_17 = linked_list_12.display()
    assert var_17 == ')'
    var_18 = linked_list_12.search(var_17)
    none_type_9 = None
    node_8 = module_0.Node(none_type_9)
    linked_list_15 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_19 = linked_list_15.remove(none_type_9)
    linked_list_16 = module_0.LinkedList(none_type_9)
    assert linked_list_16.head is None
    var_20 = linked_list_16.display()
    assert var_20 == ')'
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None

def test_case_960():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'

def test_case_961():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.remove(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_2 = module_0.Node(linked_list_6, linked_list_5)
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_4 = linked_list_8.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_3 = module_0.Node(set_0)
    int_1 = -2297
    var_5 = linked_list_8.search(int_1)
    var_6 = linked_list_8.size()
    assert var_6 == 1
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_9.push(linked_list_10)
    var_9 = linked_list_10.display()
    assert var_9 == ')'

def test_case_962():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_0.search(int_0)
    var_2 = linked_list_0.size()
    assert var_2 == 1
    int_1 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.search(int_1)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_6.push(linked_list_5)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_12 = linked_list_9.remove(linked_list_9)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_11 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_11.remove(none_type_3)
    var_14 = linked_list_11.remove(linked_list_11)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_2 = module_0.Node(node_1, var_13)
    node_3 = module_0.Node(node_1)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    set_1 = {bool_1, linked_list_14, node_4}
    var_15 = linked_list_14.remove(set_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    node_8 = module_0.Node(node_6, dict_0)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_15 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_16 = linked_list_15.remove(none_type_4)
    linked_list_16 = module_0.LinkedList(none_type_4)
    assert linked_list_16.head is None
    var_17 = linked_list_15.display()
    node_10 = module_0.Node(linked_list_16)
    none_type_5 = None
    linked_list_17 = module_0.LinkedList(none_type_5)
    assert linked_list_17.head is None
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None
    var_18 = linked_list_1.display()
    assert var_18 == ')'

def test_case_963():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_1 = module_0.Node(set_0, none_type_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    linked_list_4 = module_0.LinkedList(var_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'

def test_case_964():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    var_2 = linked_list_2.display()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(var_2)
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    node_7 = module_0.Node(node_6)
    float_0 = -2122.54
    node_8 = module_0.Node(float_0)
    bool_1 = True
    node_9 = module_0.Node(bool_1)
    node_10 = module_0.Node(bool_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_2 = True
    node_11 = module_0.Node(bool_2)
    node_12 = module_0.Node(node_11)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '8gF^Uhhbr$c}'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.search(str_0)
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.display()
    assert var_4 == ')'
    none_type_2 = None
    node_13 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_8.remove(none_type_2)
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    node_14 = module_0.Node(none_type_0)

def test_case_965():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(none_type_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_2 = linked_list_5.size()
    assert var_2 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_6.display()
    assert var_3 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_4 = linked_list_8.search(int_0)
    var_5 = linked_list_8.search(var_4)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_7 = linked_list_11.display()
    assert var_7 == ')'
    node_5 = module_0.Node(var_7)
    assert node_5.data == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_10.push(linked_list_10)
    none_type_4 = None
    linked_list_13 = module_0.LinkedList(none_type_4)
    assert linked_list_13.head is None
    str_0 = '3$;;z6n'
    linked_list_14 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_13.display()
    assert var_9 == ')'
    str_1 = '3$;;z6n'
    linked_list_15 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_13.remove(linked_list_13)
    var_11 = linked_list_3.display()
    assert var_11 == ')'

def test_case_966():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.search(int_0)
    var_1 = linked_list_1.search(var_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_3 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.search(var_2)
    var_5 = linked_list_3.search(node_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    node_4 = module_0.Node(var_6)
    assert node_4.data == ')'
    bool_1 = False
    list_0 = [bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    bytes_0 = b'[\xe1\xa9M\xf7I\xc3\xe2\xf6"\x0f\r\xc3\x02'
    node_6 = module_0.Node(none_type_0, bytes_0)

def test_case_967():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_2.remove(none_type_1)
    var_1 = linked_list_2.display()
    node_1 = module_0.Node(var_1)

def test_case_968():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_0.push(linked_list_0)
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    var_3 = linked_list_1.push(str_0)

def test_case_969():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_5 = linked_list_4.display()
    node_3 = module_0.Node(linked_list_5)
    node_4 = module_0.Node(linked_list_4)
    node_5 = module_0.Node(node_3)
    int_1 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(int_1)
    var_7 = linked_list_6.size()
    assert var_7 == 1
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_4)
    var_12 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_7 = module_0.Node(node_6, var_11)
    node_8 = module_0.Node(linked_list_10)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_12.remove(none_type_5)
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_14 = linked_list_12.display()
    node_10 = module_0.Node(linked_list_13)
    float_0 = -2869.0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_15 = linked_list_14.push(float_0)
    bool_1 = False
    set_0 = {bool_1}
    node_11 = module_0.Node(set_0)
    int_2 = -2297
    var_16 = linked_list_14.search(int_2)
    none_type_6 = None
    node_12 = module_0.Node(none_type_6)
    linked_list_15 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_17 = linked_list_15.remove(none_type_6)
    var_18 = linked_list_15.display()
    none_type_7 = None
    linked_list_16 = module_0.LinkedList(none_type_7)
    assert linked_list_16.head is None
    var_19 = linked_list_16.size()
    assert var_19 == 0
    var_20 = linked_list_16.display()
    assert var_20 == ')'
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    var_21 = linked_list_17.display()
    assert var_21 == ')'
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None
    var_22 = linked_list_18.push(linked_list_17)
    node_13 = module_0.Node(var_1)
    assert node_13.data == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_970():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bytes_0 = b'\xa5[%<'
    node_3 = module_0.Node(bytes_0)
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_2 = linked_list_6.size()
    assert var_2 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_3 = linked_list_8.size()
    assert var_3 == 0
    var_4 = linked_list_8.display()
    assert var_4 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_5 = linked_list_9.display()
    assert var_5 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_6 = linked_list_11.remove(none_type_3)
    var_7 = linked_list_11.search(node_7)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_5.display()
    assert var_8 == ')'

def test_case_971():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    var_4 = linked_list_4.remove(linked_list_4)
    var_5 = linked_list_4.size()
    assert var_5 == 1
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    var_8 = linked_list_6.pop()
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList4.Node'
    assert var_8.data is None
    assert var_8.next is None
    linked_list_8 = module_0.LinkedList(linked_list_6)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    var_9 = linked_list_9.push(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList()
    var_10 = linked_list_11.remove(none_type_4)
    var_11 = linked_list_11.search(node_5)
    var_12 = linked_list_5.search(var_11)

def test_case_972():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(float_0)
    var_3 = linked_list_4.pop()
    assert var_3 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_4.head is None
    bool_0 = True
    linked_list_5 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_5 = linked_list_5.size()
    assert var_5 == 1
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_2 = module_0.Node(var_7)
    assert node_2.data == 0
    var_8 = linked_list_9.push(none_type_2)
    var_9 = linked_list_7.push(linked_list_7)
    bool_1 = True
    set_0 = {bool_1}
    none_type_3 = None
    node_3 = module_0.Node(set_0, none_type_3)
    node_4 = module_0.Node(bool_1)
    bool_2 = True
    tuple_0 = (var_0, bool_2, var_1)
    node_5 = module_0.Node(tuple_0)
    assert node_5.data == (None, True, ')')

def test_case_973():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_1 = linked_list_4.push(linked_list_4)
    var_2 = linked_list_3.size()
    assert var_2 == 0
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_7.display()
    assert var_3 == ')'
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_4 = linked_list_9.push(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_5 = linked_list_9.push(linked_list_10)
    str_1 = '8gF^Uhhbr$c}'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_6 = linked_list_11.search(str_1)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_1)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_12.remove(none_type_6)
    var_8 = linked_list_12.remove(linked_list_12)
    var_9 = linked_list_12.size()
    assert var_9 == 1
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(none_type_6)

def test_case_974():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'

def test_case_975():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    node_3 = module_0.Node(var_0)
    assert node_3.data == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_0.push(linked_list_0)
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(bytes_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    float_0 = -2869.0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(float_0)
    bool_2 = False
    set_0 = {bool_2}
    node_6 = module_0.Node(set_0)
    int_0 = -2297
    var_6 = linked_list_6.search(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    var_9 = linked_list_7.search(none_type_2)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    bool_3 = False
    linked_list_9 = module_0.LinkedList(bool_3)
    assert linked_list_9.head is None
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_9 = module_0.Node(none_type_3, linked_list_10)
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_4)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_13 = linked_list_13.push(var_12)
    node_11 = module_0.Node(var_13)

def test_case_976():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    bool_0 = True
    set_0 = {bool_0}
    none_type_1 = None
    node_0 = module_0.Node(set_0, none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 3548
    var_3 = linked_list_2.search(int_0)
    node_1 = module_0.Node(int_0, var_3)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_3)
    var_5 = linked_list_3.remove(linked_list_3)
    var_6 = linked_list_3.size()
    assert var_6 == 1
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_4.remove(none_type_4)
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    int_1 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_6.push(int_1)
    var_10 = linked_list_6.size()
    assert var_10 == 1
    node_4 = module_0.Node(var_10, var_10)
    assert node_4.data == 1
    assert node_4.next == 1
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    set_1 = {bool_1, linked_list_7, node_5}
    var_11 = linked_list_7.remove(set_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_1)
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_12 = linked_list_8.push(float_0)
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    node_9 = module_0.Node(node_8)
    node_10 = module_0.Node(bool_2)
    var_13 = linked_list_8.display()
    assert var_13 == '(-2869.0)'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_9.display()
    assert var_14 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_15 = linked_list_3.remove(var_8)

def test_case_977():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    var_1 = linked_list_0.search(var_0)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_0)
    var_3 = linked_list_1.display()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(var_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(linked_list_3)
    var_5 = linked_list_2.size()
    assert var_5 == 0
    int_1 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.search(int_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(node_7, list_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_978():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.push(linked_list_0)

def test_case_979():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(node_2, var_2)
    node_4 = module_0.Node(node_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    node_5 = module_0.Node(var_4)
    assert node_5.data == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_5.push(linked_list_5)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_2)
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_7 = linked_list_8.display()
    node_9 = module_0.Node(linked_list_9)
    node_10 = module_0.Node(linked_list_8)
    node_11 = module_0.Node(node_9)
    bool_1 = True
    node_12 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_13 = module_0.Node(var_8)
    assert node_13.data == 0
    var_9 = linked_list_11.display()
    assert var_9 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_10 = linked_list_5.size()
    assert var_10 == 1

def test_case_980():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    bool_1 = False
    set_0 = {bool_1}
    node_2 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_1.search(int_0)
    var_2 = linked_list_1.size()
    assert var_2 == 1
    int_1 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.search(int_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_0)
    var_5 = linked_list_3.search(node_3)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(node_4)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_1)
    var_7 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(node_6, var_6)
    node_8 = module_0.Node(node_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bool_3 = False
    set_1 = {bool_3}
    node_9 = module_0.Node(set_1)
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_2)
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.remove(node_10)
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    list_0 = []
    var_10 = linked_list_11.push(list_0)
    var_11 = linked_list_11.display()
    assert var_11 == '([])'

def test_case_981():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_1 = module_0.LinkedList(none_type_3)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.size()
    assert var_3 == 0
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(var_2)
    assert node_5.data == 0
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_4)
    var_7 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_7 = module_0.Node(node_6, var_6)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_982():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(node_1, var_4)
    node_3 = module_0.Node(node_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.size()
    assert var_7 == 0
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_6.remove(var_6)

def test_case_983():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    str_1 = '$T\x0bL=O]w^NF\tP'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(str_1)
    float_0 = -2122.54
    node_3 = module_0.Node(float_0)
    str_2 = '8gF^Uhhbr$c}'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.search(str_2)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_1)
    linked_list_9 = module_0.LinkedList(none_type_1)
    assert linked_list_9.head is None
    var_7 = linked_list_8.display()
    node_5 = module_0.Node(linked_list_9)
    var_8 = linked_list_8.search(var_6)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    linked_list_10 = module_0.LinkedList(linked_list_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'

def test_case_984():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    var_4 = linked_list_2.size()
    assert var_4 == 0
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.remove(none_type_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_5 = module_0.Node(set_0)
    int_1 = -2297
    var_7 = linked_list_6.search(int_1)
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.push(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_6 = module_0.Node(var_10)
    assert node_6.data == 0
    var_11 = linked_list_10.push(none_type_4)
    var_12 = linked_list_8.push(linked_list_8)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_985():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_3.push(none_type_0)
    var_4 = linked_list_1.push(linked_list_1)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_5 = module_0.Node(none_type_1, linked_list_7)
    var_7 = linked_list_6.push(node_2)

def test_case_986():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_2 = module_0.Node(set_0)
    int_0 = -2297
    var_6 = linked_list_5.search(int_0)
    var_7 = linked_list_5.size()
    assert var_7 == 1
    node_3 = module_0.Node(bool_0)

def test_case_987():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_988():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(str_0)
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    bytes_1 = b'\xa5[%<'
    node_4 = module_0.Node(bytes_1)
    bytes_2 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_6.remove(linked_list_6)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.search(int_0)
    node_5 = module_0.Node(var_7)
    int_1 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.search(int_1)
    var_9 = linked_list_9.search(var_8)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_10 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_2)
    linked_list_11 = module_0.LinkedList(none_type_2)
    assert linked_list_11.head is None
    var_11 = linked_list_10.display()
    var_12 = linked_list_1.remove(none_type_1)

def test_case_989():
    tuple_0 = ()
    node_0 = module_0.Node(tuple_0)

def test_case_990():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    set_0 = {bool_0}
    none_type_1 = None
    node_0 = module_0.Node(set_0, none_type_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_5)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_9 = linked_list_11.push(var_8)
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_8 = None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_11 = linked_list_14.remove(none_type_8)
    linked_list_15 = module_0.LinkedList(var_11)
    assert linked_list_15.head is None
    none_type_9 = None
    linked_list_16 = module_0.LinkedList(none_type_9)
    assert linked_list_16.head is None
    var_12 = linked_list_16.size()
    assert var_12 == 0
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    none_type_10 = None
    linked_list_18 = module_0.LinkedList(none_type_10)
    assert linked_list_18.head is None
    var_13 = linked_list_18.size()
    assert var_13 == 0
    var_14 = linked_list_16.display()
    assert var_14 == ')'
    var_15 = linked_list_16.search(var_14)
    node_2 = module_0.Node(var_9)

def test_case_991():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.display()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(none_type_1)
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(int_0)
    var_4 = linked_list_4.size()
    assert var_4 == 1
    var_5 = linked_list_2.display()

def test_case_992():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.search(int_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_993():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_3)
    str_1 = '8gF^Uhhbr$c}'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(str_1)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_6 = linked_list_1.push(none_type_0)

def test_case_994():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(linked_list_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    node_0 = module_0.Node(var_6)
    assert node_0.data == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    node_1 = module_0.Node(var_7)
    assert node_1.data == ')'
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0

def test_case_995():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(int_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    var_3 = linked_list_3.pop()
    assert linked_list_3.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.LinkedList'
    assert var_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    var_6 = linked_list_5.push(var_4)

def test_case_996():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    bool_0 = False
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.remove(none_type_0)
    var_1 = linked_list_1.display()
    assert var_1 == ')'

def test_case_997():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    dict_0 = {node_0: linked_list_0, var_0: node_0, var_1: linked_list_0, var_1: node_0}
    node_1 = module_0.Node(dict_0, node_0)

def test_case_998():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    bytes_0 = b'\xa5[%<'
    node_3 = module_0.Node(bytes_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(float_0)
    var_2 = linked_list_3.display()
    assert var_2 == '(-2869.0)'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    set_0 = {bool_1, linked_list_4, node_5}
    var_3 = linked_list_4.remove(set_0)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_999():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(node_2, var_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_3)
    var_4 = linked_list_4.display()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    node_7 = module_0.Node(var_4)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_5 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_5)
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_9 = module_0.Node(node_8, var_5)
    node_10 = module_0.Node(linked_list_5)
    bytes_1 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(bytes_1)
    none_type_7 = None
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_0 = 3548
    var_10 = linked_list_9.search(int_0)
    node_11 = module_0.Node(int_0, var_10)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    node_12 = module_0.Node(var_11)
    assert node_12.data == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_10.push(linked_list_10)
    var_13 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList4.Node'
    assert var_13.data is None
    assert var_13.next is None

def test_case_1000():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.push(none_type_1)
    var_3 = linked_list_1.push(var_0)

def test_case_1001():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    list_1 = []
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(list_1)
    var_2 = linked_list_1.remove(var_1)

def test_case_1002():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(int_0)
    var_2 = linked_list_1.size()
    assert var_2 == 1
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(str_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    var_7 = linked_list_3.search(var_6)
    str_1 = 'EU%1@v\x0b'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_4.size()
    assert var_8 == 0

def test_case_1003():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_1 = linked_list_4.push(linked_list_4)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    complex_1 = -1265.460815 + 1056.434j
    node_4 = module_0.Node(node_3, complex_1)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_5.remove(none_type_3)
    var_3 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_6 = module_0.Node(node_5, var_2)
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.push(float_0)
    bool_1 = False
    set_0 = {bool_1}
    node_7 = module_0.Node(set_0)
    int_0 = -2297
    var_5 = linked_list_7.search(int_0)
    var_6 = linked_list_7.size()
    assert var_6 == 1
    complex_2 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_2)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    var_9 = linked_list_8.search(none_type_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_9 = module_0.Node(list_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_11 = linked_list_13.push(linked_list_13)
    var_12 = linked_list_12.size()
    assert var_12 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None

def test_case_1004():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.size()
    assert var_3 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    var_5 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_5 = module_0.Node(node_4, var_4)
    node_6 = module_0.Node(node_4)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_4)
    var_7 = linked_list_7.remove(linked_list_7)
    int_0 = -1061
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(int_0)
    var_9 = linked_list_8.size()
    assert var_9 == 1
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.remove(none_type_5)
    var_11 = linked_list_9.search(node_8)
    bool_1 = False
    set_0 = {bool_1}
    node_9 = module_0.Node(set_0)
    float_0 = -2122.54
    node_10 = module_0.Node(float_0)
    var_12 = linked_list_6.push(var_10)

def test_case_1005():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_2 = module_0.Node(var_5)
    assert node_2.data == 0
    var_6 = linked_list_9.push(none_type_2)
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    var_8 = linked_list_10.display()
    assert var_8 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_9 = linked_list_11.display()
    assert var_9 == ')'
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.remove(none_type_4)
    var_11 = linked_list_12.display()
    var_12 = linked_list_12.display()
    var_13 = linked_list_7.size()
    assert var_13 == 0

def test_case_1006():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    node_2 = module_0.Node(none_type_2, float_0)

def test_case_1007():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    set_0 = {bool_0, linked_list_4, node_0}
    var_2 = linked_list_4.remove(set_0)
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.remove(none_type_2)
    linked_list_8 = module_0.LinkedList(var_4)
    assert linked_list_8.head is None
    tuple_0 = ()
    node_2 = module_0.Node(tuple_0)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_9.display()
    assert var_5 == ')'
    str_1 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(linked_list_9)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_7 = linked_list_12.size()
    assert var_7 == 0
    var_8 = linked_list_12.size()
    assert var_8 == 0
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_13.remove(none_type_6)
    var_10 = linked_list_13.display()
    none_type_7 = None
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    var_11 = linked_list_14.push(linked_list_14)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_1)
    complex_0 = -1265.460815 + 1056.434j
    node_8 = module_0.Node(node_7, complex_0)
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    linked_list_15 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_15.remove(none_type_8)
    linked_list_16 = module_0.LinkedList(none_type_8)
    assert linked_list_16.head is None
    var_13 = linked_list_15.display()
    node_10 = module_0.Node(linked_list_16)
    var_14 = linked_list_15.search(var_12)
    var_15 = linked_list_15.push(linked_list_15)
    none_type_9 = None
    node_11 = module_0.Node(none_type_9)
    linked_list_17 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_17.head).__module__}.{type(linked_list_17.head).__qualname__}' == 'linkedList4.Node'
    var_16 = linked_list_17.remove(none_type_9)
    linked_list_18 = module_0.LinkedList(none_type_9)
    assert linked_list_18.head is None
    var_17 = linked_list_17.display()
    node_12 = module_0.Node(linked_list_18)
    node_13 = module_0.Node(none_type_2)

def test_case_1008():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_2)
    var_4 = linked_list_4.search(node_3)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0

def test_case_1009():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(var_0)
    assert node_3.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.remove(node_4)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    node_6 = module_0.Node(none_type_2, linked_list_6)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    bool_2 = False
    linked_list_8 = module_0.LinkedList(bool_2)
    assert linked_list_8.head is None
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_8 = module_0.Node(none_type_3, linked_list_9)
    var_5 = linked_list_8.display()
    assert var_5 == ')'
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_6 = linked_list_10.push(linked_list_10)
    bool_3 = True
    node_9 = module_0.Node(bool_3)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(bool_3)
    complex_0 = -1265.460815 + 1056.434j
    node_12 = module_0.Node(node_11, complex_0)
    none_type_5 = None
    node_13 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_11.remove(none_type_5)
    var_8 = linked_list_11.remove(linked_list_11)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_14 = module_0.Node(node_13, var_7)
    node_15 = module_0.Node(linked_list_11)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_16 = module_0.Node(list_0)
    node_17 = module_0.Node(node_16, list_0)
    bool_4 = True
    node_18 = module_0.Node(bool_4)
    node_19 = module_0.Node(bool_4)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_6 = None
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    str_1 = '3$;;z6n'
    linked_list_15 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_14.display()
    assert var_9 == ')'
    var_10 = linked_list_2.search(node_19)

def test_case_1010():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    node_1 = module_0.Node(none_type_0, linked_list_1)
    int_1 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_1)
    node_2 = module_0.Node(var_2)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    var_4 = linked_list_3.push(none_type_1)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(bytes_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_2 = 3548
    var_8 = linked_list_7.search(int_2)
    node_5 = module_0.Node(int_2, var_8)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_10.size()
    assert var_11 == 0
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    int_3 = 1454
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_12.search(int_3)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    complex_0 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_0)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_14 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_14.display()
    assert var_13 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_14 = linked_list_7.display()
    assert var_14 == ')'

def test_case_1011():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    var_5 = linked_list_2.search(var_3)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_3)
    var_9 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(node_3, var_8)
    node_5 = module_0.Node(node_3)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_10 = linked_list_9.push(linked_list_9)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_9 = module_0.Node(node_8, complex_0)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_5)
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_13 = linked_list_11.display()
    node_12 = module_0.Node(linked_list_12)
    var_14 = linked_list_11.search(var_12)
    var_15 = linked_list_12.search(node_12)
    node_13 = module_0.Node(bool_0)

def test_case_1012():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    var_4 = linked_list_3.size()
    assert var_4 == 1
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_6 = linked_list_4.display()
    assert var_6 == '(-2869.0)'
    float_1 = -2122.54
    node_3 = module_0.Node(float_1)
    var_7 = linked_list_4.size()
    assert var_7 == 1

def test_case_1013():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    bool_1 = False
    set_1 = {bool_1}
    node_1 = module_0.Node(set_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    var_1 = linked_list_0.display()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(var_1)
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(float_0)
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.search(int_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    var_5 = linked_list_2.push(node_3)

def test_case_1014():
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'

def test_case_1015():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(float_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    var_5 = linked_list_5.display()
    assert var_5 == '(-2869.0)'
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_8 = module_0.Node(list_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    var_8 = linked_list_6.search(linked_list_3)

def test_case_1016():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_1 = linked_list_0.size()
    assert var_1 == 1
    linked_list_2 = module_0.LinkedList(var_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'

def test_case_1017():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    tuple_0 = ()
    node_1 = module_0.Node(tuple_0)
    node_2 = module_0.Node(var_1)

def test_case_1018():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    var_3 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.LinkedList'
    assert var_3.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_4 = None
    node_0 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.remove(none_type_4)
    var_8 = linked_list_7.search(node_0)
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    str_0 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    node_4 = module_0.Node(none_type_7)
    linked_list_11 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(none_type_7)
    var_11 = linked_list_11.remove(linked_list_11)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_5 = module_0.Node(node_4, var_10)
    node_6 = module_0.Node(linked_list_11)
    none_type_8 = None
    node_7 = module_0.Node(none_type_8)
    linked_list_13 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_13.remove(none_type_8)
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    var_13 = linked_list_13.display()
    var_14 = linked_list_8.push(var_10)

def test_case_1019():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_0.search(linked_list_1)

def test_case_1020():
    list_0 = []
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(list_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_1)
    node_1 = module_0.Node(node_0, list_1)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_6 = module_0.Node(node_5, complex_0)
    bool_1 = False
    list_2 = [bool_1, bool_1]
    node_7 = module_0.Node(list_2)
    linked_list_3 = module_0.LinkedList(var_2)
    assert linked_list_3.head is None

def test_case_1021():
    str_0 = 'EU%1@v\x0b'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    str_2 = '$T\x0bL=O]w^NF\tP'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_1 = linked_list_4.remove(str_2)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_5 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_5.remove(none_type_0)
    var_3 = linked_list_5.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_2 = module_0.Node(none_type_0)
    var_4 = linked_list_6.search(node_2)

def test_case_1022():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_1)
    var_1 = linked_list_0.search(node_3)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    var_3 = linked_list_1.display()
    var_4 = linked_list_1.display()
    list_1 = []
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_5 = linked_list_2.push(list_1)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_3.remove(none_type_3)
    var_7 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_6 = module_0.Node(node_5, var_6)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_9 = linked_list_6.display()
    var_10 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.Node'
    assert var_10.data is None
    assert var_10.next is None
    linked_list_8 = module_0.LinkedList(linked_list_6)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList()
    var_11 = linked_list_9.remove(none_type_5)
    bool_0 = True
    node_9 = module_0.Node(bool_0)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    var_12 = linked_list_10.size()
    assert var_12 == 0
    linked_list_11 = module_0.LinkedList()
    node_10 = module_0.Node(var_12)
    assert node_10.data == 0
    var_13 = linked_list_11.display()
    assert var_13 == ')'
    linked_list_12 = module_0.LinkedList()
    var_14 = linked_list_11.display()
    assert var_14 == ')'

def test_case_1023():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_4.push(linked_list_5)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    var_7 = linked_list_6.search(none_type_2)
    bytes_1 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_8 = linked_list_7.push(bytes_1)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.remove(node_1)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_11 = linked_list_13.size()
    assert var_11 == 0
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_14 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_14.remove(none_type_6)
    linked_list_15 = module_0.LinkedList(none_type_6)
    assert linked_list_15.head is None
    var_13 = linked_list_14.display()
    node_4 = module_0.Node(linked_list_15)
    node_5 = module_0.Node(linked_list_14)
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_16 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_16.remove(none_type_7)
    node_7 = module_0.Node(none_type_7, linked_list_16)
    var_15 = linked_list_16.remove(var_9)

def test_case_1024():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    str_0 = '8gF^Uhhbr$c}'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(str_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(node_3, var_5)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_0)
    assert linked_list_8.head is None
    var_8 = linked_list_5.search(linked_list_8)

def test_case_1025():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.push(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    bytes_0 = b'\xa5[%<'
    node_3 = module_0.Node(bytes_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    var_8 = linked_list_6.display()
    dict_0 = {node_4: linked_list_6, var_7: node_4, var_8: linked_list_6, var_8: node_4}
    node_5 = module_0.Node(dict_0, node_4)
    var_9 = linked_list_2.display()
    assert var_9 == ')'

def test_case_1026():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_0.search(linked_list_1)

def test_case_1027():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_1 = linked_list_4.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_6 = module_0.LinkedList(bool_0)
    assert linked_list_6.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_2 = module_0.Node(none_type_1, linked_list_7)
    var_2 = linked_list_6.display()
    assert var_2 == ')'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_3 = linked_list_8.remove(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_9.remove(none_type_3)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_5 = linked_list_10.size()
    assert var_5 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_6 = linked_list_11.push(var_5)
    var_7 = linked_list_4.remove(none_type_2)

def test_case_1028():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_4 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.search(var_2)
    var_5 = linked_list_3.search(node_4)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    node_7 = module_0.Node(node_5, dict_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    var_8 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList4.Node'
    assert var_8.data is None
    assert var_8.next is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    none_type_4 = None
    linked_list_9 = module_0.LinkedList()
    var_10 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(var_10)
    str_1 = 'EU%1@v\x0b'
    linked_list_11 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    str_2 = '8gF^Uhhbr$c}'
    linked_list_12 = module_0.LinkedList()
    var_11 = linked_list_12.search(str_2)
    bool_0 = True
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    var_12 = linked_list_13.push(linked_list_13)
    var_13 = linked_list_13.pop()
    none_type_6 = None
    linked_list_14 = module_0.LinkedList(none_type_6)
    var_14 = linked_list_14.size()
    assert var_14 == 0
    var_15 = linked_list_14.display()
    assert var_15 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_15 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_16 = linked_list_13.size()
    assert var_16 == 0

def test_case_1029():
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.search(int_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(float_0)
    bool_1 = False
    set_0 = {bool_1}
    node_4 = module_0.Node(set_0)
    int_1 = -2297
    var_2 = linked_list_3.search(int_1)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_0)
    var_4 = linked_list_4.display()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_7 = module_0.Node(none_type_0)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_2)
    var_6 = linked_list_6.display()
    float_1 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(float_1)
    bool_2 = False
    set_1 = {bool_2}
    node_9 = module_0.Node(set_1)
    int_2 = -2297
    var_8 = linked_list_7.search(int_2)
    var_9 = linked_list_7.size()
    assert var_9 == 1
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_10 = linked_list_8.push(linked_list_8)
    bool_3 = True
    node_10 = module_0.Node(bool_3)
    node_11 = module_0.Node(node_10)
    node_12 = module_0.Node(bool_3)
    complex_1 = -1265.460815 + 1056.434j
    node_13 = module_0.Node(node_12, complex_1)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_11 = linked_list_9.push(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_12 = linked_list_9.push(linked_list_10)
    none_type_5 = None
    node_14 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_14)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_11.remove(none_type_5)
    var_14 = linked_list_11.display()
    dict_0 = {node_14: linked_list_11, var_13: node_14, var_14: linked_list_11, var_14: node_14}
    node_15 = module_0.Node(dict_0, node_14)
    none_type_6 = None
    node_16 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_15 = linked_list_12.remove(none_type_6)
    var_16 = linked_list_12.search(node_16)
    bool_4 = True
    node_17 = module_0.Node(bool_4)
    node_18 = module_0.Node(node_17)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_17 = linked_list_13.size()
    assert var_17 == 0

def test_case_1030():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(node_5, list_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_1)
    complex_0 = -1265.460815 + 1056.434j
    node_10 = module_0.Node(node_9, complex_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(linked_list_5)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_9 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(var_9)
    assert linked_list_12.head is None
    var_10 = linked_list_0.size()
    assert var_10 == 0

def test_case_1031():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(float_0)
    var_2 = linked_list_3.pop()
    assert var_2 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_3.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    var_4 = linked_list_4.display()
    var_5 = linked_list_4.display()
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(node_2, list_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_2)
    var_7 = linked_list_5.display()
    var_8 = linked_list_5.display()
    tuple_0 = ()
    node_5 = module_0.Node(tuple_0)
    node_6 = module_0.Node(var_7)
    var_9 = linked_list_1.size()
    assert var_9 == 7

def test_case_1032():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    linked_list_3 = module_0.LinkedList(linked_list_1)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    none_type_2 = None
    linked_list_6 = module_0.LinkedList()
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(var_4)
    linked_list_8 = module_0.LinkedList()
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_1)
    var_5 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList(none_type_3)
    var_6 = linked_list_9.display()
    var_7 = linked_list_9.pop()
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_2)
    var_8 = linked_list_12.remove(none_type_4)
    var_9 = linked_list_12.remove(linked_list_12)
    linked_list_13 = module_0.LinkedList()
    node_3 = module_0.Node(node_2, var_8)
    node_4 = module_0.Node(linked_list_12)
    none_type_5 = None
    linked_list_14 = module_0.LinkedList(none_type_5)
    str_0 = '3$;;z6n'
    linked_list_15 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_14.display()
    assert var_10 == ')'
    float_0 = -2869.0
    node_5 = module_0.Node(float_0)
    linked_list_16 = module_0.LinkedList()
    var_11 = linked_list_16.display()
    assert var_11 == ')'
    linked_list_17 = module_0.LinkedList()
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_18 = module_0.LinkedList(node_6)
    var_12 = linked_list_18.remove(none_type_6)
    var_13 = linked_list_18.display()
    str_1 = '8gF^Uhhbr$c}'
    linked_list_19 = module_0.LinkedList()
    var_14 = linked_list_19.search(str_1)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_0)
    bool_1 = True
    set_0 = {bool_1}
    none_type_7 = None
    node_10 = module_0.Node(set_0, none_type_7)
    linked_list_20 = module_0.LinkedList()

def test_case_1033():
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_0 = module_0.Node(bytes_0, bytes_0)

def test_case_1034():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1035():
    float_0 = -2122.54
    node_0 = module_0.Node(float_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_0.size()
    assert var_1 == 0
    str_0 = '8gF^Uhhbr$c}'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(str_0)
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.size()
    assert var_4 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_3)
    assert node_3.data == 0
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_5)
    var_9 = linked_list_7.display()
    dict_0 = {node_4: linked_list_7, var_8: node_4, var_9: linked_list_7, var_9: node_4}
    node_5 = module_0.Node(dict_0, node_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_1036():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    var_3 = linked_list_2.search(var_2)
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    float_1 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(float_1)
    none_type_0 = None
    linked_list_5 = module_0.LinkedList(none_type_0)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_1 = None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.remove(none_type_1)
    linked_list_8 = module_0.LinkedList(var_6)
    assert linked_list_8.head is None
    tuple_0 = ()
    node_1 = module_0.Node(tuple_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_2)
    node_3 = module_0.Node(none_type_2, linked_list_9)
    int_1 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.search(int_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_11 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.remove(none_type_3)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_5 = module_0.Node(linked_list_11, linked_list_10)
    str_1 = 'EU%1@v\x0b'
    linked_list_13 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_0.size()
    assert var_10 == 0

def test_case_1037():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    list_0 = []
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(list_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_0.size()
    assert var_3 == 1

def test_case_1038():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_1 = module_0.Node(set_0)
    int_0 = -2297
    var_4 = linked_list_3.search(int_0)
    var_5 = linked_list_3.size()
    assert var_5 == 1
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_1)
    var_7 = linked_list_4.display()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(none_type_1)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_8.display()
    assert var_11 == ')'
    var_12 = linked_list_8.search(var_11)
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_11.display()
    assert var_13 == ')'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    var_14 = linked_list_11.display()
    assert var_14 == ')'
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(bool_2)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_15 = linked_list_3.size()
    assert var_15 == 1

def test_case_1039():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(var_1, linked_list_0)

def test_case_1040():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_1 = module_0.Node(linked_list_4)
    var_4 = linked_list_3.search(var_2)
    var_5 = linked_list_4.search(node_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_2 = module_0.Node(var_7)
    assert node_2.data == 0
    var_8 = linked_list_7.push(none_type_2)
    var_9 = linked_list_5.push(linked_list_5)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_4)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    var_13 = linked_list_5.push(linked_list_2)

def test_case_1041():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(node_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    node_1 = module_0.Node(var_2)
    assert node_1.data == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_3.push(linked_list_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_5 = module_0.Node(list_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_5 = linked_list_9.size()
    assert var_5 == 0
    var_6 = linked_list_5.search(var_4)

def test_case_1042():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(int_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.push(linked_list_3)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_1)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.push(var_8)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    float_1 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.push(float_1)
    var_11 = linked_list_9.pop()
    assert var_11 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_9.head is None
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_12 = linked_list_10.remove(none_type_3)
    var_13 = linked_list_10.search(node_5)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_1043():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    var_3 = linked_list_2.display()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(none_type_0)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.search(int_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_7 = module_0.Node(tuple_1)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.size()
    assert var_6 == 0
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(var_5)
    assert node_10.data == 0
    bool_3 = True
    linked_list_7 = module_0.LinkedList(bool_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    node_11 = module_0.Node(none_type_2)

def test_case_1044():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(linked_list_4)
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(linked_list_6)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_2)
    var_7 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_5 = module_0.Node(node_4, var_6)
    node_6 = module_0.Node(node_4)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    str_1 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.display()
    assert var_8 == ')'
    var_9 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList4.LinkedList'
    assert var_9.head is None

def test_case_1045():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.size()
    assert var_0 == 10

def test_case_1046():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_1 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(none_type_0, linked_list_2)
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    node_2 = module_0.Node(var_1)
    assert node_2.data == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_5.remove(none_type_1)
    var_3 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(node_3, var_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.display()
    assert var_4 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_9.remove(none_type_2)
    linked_list_10 = module_0.LinkedList(none_type_2)
    assert linked_list_10.head is None
    var_6 = linked_list_9.display()
    var_7 = linked_list_9.pop()
    assert linked_list_9.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.Node'
    assert var_7.data is None
    assert var_7.next is None
    linked_list_11 = module_0.LinkedList(linked_list_9)
    none_type_3 = None
    linked_list_12 = module_0.LinkedList(none_type_3)
    list_1 = []
    var_8 = linked_list_12.push(list_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_2 = [dict_1, dict_1, str_1, dict_1]
    node_7 = module_0.Node(list_2)
    node_8 = module_0.Node(node_7, list_2)
    node_9 = module_0.Node(node_7, dict_1)
    none_type_4 = None
    linked_list_13 = module_0.LinkedList(none_type_4)
    var_9 = linked_list_13.display()
    assert var_9 == ')'
    none_type_5 = None
    linked_list_14 = module_0.LinkedList(none_type_5)
    var_10 = linked_list_14.size()
    assert var_10 == 0
    linked_list_15 = module_0.LinkedList()
    linked_list_16 = module_0.LinkedList()

def test_case_1047():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    var_2 = linked_list_0.push(node_1)

def test_case_1048():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_2 = module_0.Node(linked_list_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_10 = module_0.Node(none_type_4, linked_list_9)
    str_1 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_5 = linked_list_11.display()
    assert var_5 == ')'
    node_11 = module_0.Node(linked_list_4)

def test_case_1049():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(linked_list_4)
    var_3 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.LinkedList'
    assert var_3.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_1 = module_0.Node(list_1)
    node_2 = module_0.Node(node_1, list_1)
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_2, dict_2, str_2, dict_2]
    node_3 = module_0.Node(list_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_3 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.push(linked_list_6)
    var_5 = linked_list_0.remove(dict_2)

def test_case_1050():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.size()
    assert var_2 == 10
    bytes_1 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_2 = module_0.Node(bytes_1, bytes_1)
    var_3 = linked_list_2.remove(bytes_1)

def test_case_1051():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == 0
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.remove(node_0)

def test_case_1052():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    node_0 = module_0.Node(var_1)
    assert node_0.data == ')'
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(int_0)
    float_0 = 4618.447563
    var_3 = linked_list_3.remove(float_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.size()
    assert var_5 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(bytes_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(linked_list_8)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_2)
    complex_0 = -1265.460815 + 1056.434j
    node_9 = module_0.Node(node_8, complex_0)
    float_1 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(float_1)
    bool_3 = False
    set_0 = {bool_3}
    node_10 = module_0.Node(set_0)
    int_1 = -2297
    var_10 = linked_list_9.search(int_1)
    none_type_5 = None
    node_11 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_5)
    var_12 = linked_list_10.remove(linked_list_10)
    var_13 = linked_list_10.size()
    assert var_13 == 1
    var_14 = linked_list_6.display()
    assert var_14 == "(b'\\x19\\x9dq\\xf4\\x18=<\\xfc\\xf2')"

def test_case_1053():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    var_3 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(float_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    var_5 = linked_list_3.display()
    assert var_5 == '(-2869.0)'
    var_6 = linked_list_3.push(node_3)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_7 = linked_list_4.size()
    assert var_7 == 0
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.remove(none_type_4)
    var_9 = linked_list_5.search(node_5)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_0 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_10 = linked_list_7.push(int_0)
    float_1 = 4618.447563
    var_11 = linked_list_7.remove(float_1)
    float_2 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_12 = linked_list_8.push(float_2)
    var_13 = linked_list_8.display()
    assert var_13 == '(-2869.0)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(node_8, list_0)
    node_10 = module_0.Node(node_8, dict_0)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_14 = linked_list_9.display()
    assert var_14 == ')'
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_10.remove(none_type_6)
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_16 = linked_list_3.push(var_3)

def test_case_1054():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    var_2 = linked_list_3.display()
    var_3 = linked_list_3.display()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(node_2, var_4)
    node_4 = module_0.Node(node_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_5 = module_0.Node(var_6)
    assert node_5.data == 0
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    int_0 = 3548
    var_10 = linked_list_11.search(int_0)
    node_7 = module_0.Node(int_0, var_10)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_6)
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_12 = linked_list_14.remove(node_8)
    float_0 = -2122.54
    node_9 = module_0.Node(float_0)
    node_10 = module_0.Node(none_type_1, node_3)

def test_case_1055():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    tuple_0 = ()
    node_1 = module_0.Node(tuple_0)
    node_2 = module_0.Node(var_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    var_7 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.Node'
    assert var_7.data is None
    assert var_7.next is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    var_8 = linked_list_7.push(linked_list_7)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_9 = module_0.LinkedList(bool_0)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList()
    node_7 = module_0.Node(none_type_4, linked_list_10)
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    var_10 = linked_list_12.size()
    assert var_10 == 0
    linked_list_13 = module_0.LinkedList()
    var_11 = linked_list_13.display()
    assert var_11 == ')'
    linked_list_14 = module_0.LinkedList()
    var_12 = linked_list_8.size()
    assert var_12 == 10

def test_case_1056():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    list_0 = []
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    node_2 = module_0.Node(none_type_0, linked_list_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(node_3, list_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_6 = module_0.Node(var_2)
    assert node_6.data == 0
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_3)
    var_4 = linked_list_4.remove(linked_list_4)
    var_5 = linked_list_4.size()
    assert var_5 == 1
    bool_1 = True
    linked_list_5 = module_0.LinkedList(bool_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.display()
    assert var_6 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_7 = linked_list_5.size()
    assert var_7 == 1
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    var_9 = linked_list_7.display()
    dict_1 = {node_8: linked_list_7, var_8: node_8, var_9: linked_list_7, var_9: node_8}
    node_9 = module_0.Node(dict_1, node_8)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.search(int_0)
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    node_11 = module_0.Node(node_10)
    complex_0 = -2363.678516 + 1356.37j
    node_12 = module_0.Node(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    node_13 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_12 = linked_list_10.display()
    node_14 = module_0.Node(linked_list_11)
    var_13 = linked_list_10.search(var_11)
    var_14 = linked_list_4.push(linked_list_11)

def test_case_1057():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    var_2 = linked_list_0.size()
    assert var_2 == 0

def test_case_1058():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 3548
    var_4 = linked_list_2.search(int_0)
    node_0 = module_0.Node(int_0, var_4)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_3.display()
    assert var_7 == ')'
    node_1 = module_0.Node(linked_list_1, linked_list_1)

def test_case_1059():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    bool_1 = True
    linked_list_4 = module_0.LinkedList(bool_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_5 = linked_list_4.size()
    assert var_5 == 1
    linked_list_6 = module_0.LinkedList(var_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(var_8)
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_1060():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    str_1 = '8gF^Uhhbr$c}'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(str_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    list_1 = []
    var_3 = linked_list_3.push(list_1)
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_1, dict_1, str_2, dict_1]
    node_4 = module_0.Node(list_2)
    node_5 = module_0.Node(node_4, list_2)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_7 = module_0.Node(var_4)
    assert node_7.data == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    str_3 = '#p1jIXa}Q?(h'
    dict_2 = {str_3: str_3, str_3: str_3, str_3: str_3}
    list_3 = [dict_2, dict_2, str_3, dict_2]
    node_8 = module_0.Node(list_3)
    node_9 = module_0.Node(node_8, list_3)
    node_10 = module_0.Node(node_8, dict_2)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    str_4 = '8gF^Uhhbr$c}'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.search(str_4)
    bool_2 = True
    node_11 = module_0.Node(bool_2)
    node_12 = module_0.Node(bool_2)
    none_type_4 = None
    node_13 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_11 = linked_list_10.display()
    node_14 = module_0.Node(linked_list_11)
    node_15 = module_0.Node(linked_list_10)
    node_16 = module_0.Node(node_14)
    var_12 = linked_list_3.remove(node_6)

def test_case_1061():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(float_0)
    var_2 = linked_list_2.pop()
    assert var_2 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_2.head is None
    float_1 = 2634.854
    dict_1 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_1]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_2 = module_0.Node(tuple_1)
    var_3 = linked_list_0.display()

def test_case_1062():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(var_4)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_6 = module_0.Node(none_type_3, linked_list_6)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    int_1 = 3548
    var_8 = linked_list_8.search(int_1)
    node_7 = module_0.Node(int_1, var_8)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_8 = module_0.Node(var_9)
    assert node_8.data == 0
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_9 = module_0.Node(list_0)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_10 = linked_list_13.size()
    assert var_10 == 0
    int_2 = 1454
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_11 = linked_list_14.search(int_2)
    none_type_7 = None
    node_10 = module_0.Node(none_type_7)
    linked_list_15 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_15.remove(none_type_7)
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    node_11 = module_0.Node(linked_list_15, linked_list_14)
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None

def test_case_1063():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    node_0 = module_0.Node(none_type_0, var_0)

def test_case_1064():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    node_1 = module_0.Node(none_type_0, linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(var_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(linked_list_5)
    var_5 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList4.LinkedList'
    assert var_5.head is None
    node_2 = module_0.Node(none_type_3, var_4)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    bool_0 = True
    linked_list_7 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_8 = linked_list_7.size()
    assert var_8 == 1
    linked_list_9 = module_0.LinkedList(var_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    bool_1 = False
    list_1 = [bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    bool_2 = False
    linked_list_10 = module_0.LinkedList(bool_2)
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.display()
    assert var_9 == ')'
    float_0 = -2869.0
    node_7 = module_0.Node(float_0)
    linked_list_13 = module_0.LinkedList(var_3)
    assert linked_list_13.head is None

def test_case_1065():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(bytes_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(linked_list_4)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    var_3 = linked_list_1.push(node_0)

def test_case_1066():
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'

def test_case_1067():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_4.push(linked_list_5)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_8.remove(linked_list_8)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    node_0 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_6)
    var_12 = linked_list_12.remove(linked_list_12)
    none_type_7 = None
    node_1 = module_0.Node(none_type_7)
    linked_list_13 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_13.remove(none_type_7)
    var_14 = linked_list_13.remove(linked_list_13)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    node_2 = module_0.Node(node_1, var_13)
    str_0 = '8gF^Uhhbr$c}'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_15 = linked_list_15.search(str_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    none_type_8 = None
    linked_list_16 = module_0.LinkedList(none_type_8)
    assert linked_list_16.head is None
    var_16 = linked_list_16.push(linked_list_16)
    var_17 = linked_list_0.search(linked_list_3)

def test_case_1068():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_2 = module_0.Node(set_0, none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    var_3 = linked_list_3.push(float_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    var_4 = linked_list_3.display()
    assert var_4 == '(-2869.0)'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    bool_2 = False
    linked_list_5 = module_0.LinkedList(bool_2)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_7)
    var_7 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    complex_1 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_1)
    linked_list_8 = module_0.LinkedList()
    var_8 = linked_list_8.size()
    assert var_8 == 0
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    var_10 = linked_list_11.size()
    assert var_10 == 0
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    var_12 = linked_list_9.search(var_11)
    var_13 = linked_list_10.display()
    assert var_13 == ')'

def test_case_1069():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_4 = linked_list_7.push(linked_list_7)
    var_5 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList4.LinkedList'
    assert var_5.head is None
    node_6 = module_0.Node(none_type_1, var_4)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_3)
    bool_1 = True
    set_0 = {bool_1}
    none_type_4 = None
    node_8 = module_0.Node(set_0, none_type_4)
    node_9 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(linked_list_9)
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.search(int_0)
    none_type_6 = None
    node_10 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_11 = module_0.Node(linked_list_11, linked_list_10)
    var_10 = var_5.display()
    assert var_10 == ')'

def test_case_1070():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    dict_0 = {node_0: linked_list_0, var_0: node_0, var_1: linked_list_0, var_1: node_0}
    node_1 = module_0.Node(dict_0, node_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_1 = True
    set_0 = {bool_1}
    none_type_2 = None
    node_4 = module_0.Node(set_0, none_type_2)
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(float_0)
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_2)
    var_4 = linked_list_4.display()
    assert var_4 == '(-2869.0)'
    var_5 = linked_list_0.size()
    assert var_5 == 1

def test_case_1071():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(int_0)
    float_0 = 4618.447563
    var_2 = linked_list_3.remove(float_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    node_1 = module_0.Node(var_3)
    assert node_1.data == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.remove(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_2)
    var_6 = linked_list_6.display()
    node_4 = module_0.Node(var_6, linked_list_6)
    node_5 = module_0.Node(int_0, none_type_2)

def test_case_1072():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    linked_list_3 = module_0.LinkedList(linked_list_1)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    var_3 = linked_list_4.remove(none_type_1)
    var_4 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    node_2 = module_0.Node(node_1, var_3)
    node_3 = module_0.Node(node_1)
    linked_list_6 = module_0.LinkedList()
    bool_0 = True
    linked_list_7 = module_0.LinkedList(bool_0)
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    var_5 = linked_list_8.push(float_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    var_6 = linked_list_8.display()
    assert var_6 == '(-2869.0)'
    var_7 = linked_list_8.push(node_5)
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList(node_7)
    var_8 = linked_list_10.remove(none_type_3)
    linked_list_11 = module_0.LinkedList(none_type_3)
    var_9 = linked_list_10.display()
    node_8 = module_0.Node(linked_list_11)
    var_10 = linked_list_8.size()
    assert var_10 == 2

def test_case_1073():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.size()
    assert var_0 == 10
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_4 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    var_4 = linked_list_2.search(node_4)
    var_5 = linked_list_0.push(var_0)

def test_case_1074():
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(linked_list_2)
    var_2 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.LinkedList'
    assert var_2.head is None
    node_0 = module_0.Node(none_type_0, var_1)
    node_1 = module_0.Node(none_type_0)

def test_case_1075():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_2 = linked_list_7.size()
    assert var_2 == 0
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_4 = linked_list_8.display()
    node_3 = module_0.Node(linked_list_9)
    var_5 = linked_list_8.search(var_3)
    bool_0 = True
    linked_list_10 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_11.display()
    assert var_6 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_7 = linked_list_10.size()
    assert var_7 == 1
    int_0 = -1061
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.push(int_0)
    float_1 = 4618.447563
    var_9 = linked_list_12.remove(float_1)
    float_2 = -2869.0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_10 = linked_list_13.push(float_2)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    var_11 = linked_list_13.display()
    assert var_11 == '(-2869.0)'
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_7 = module_0.Node(list_1)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_12 = linked_list_14.display()
    assert var_12 == ')'
    none_type_5 = None
    linked_list_15 = module_0.LinkedList(none_type_5)
    assert linked_list_15.head is None
    var_13 = linked_list_15.size()
    assert var_13 == 0
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    var_14 = linked_list_16.display()
    assert var_14 == ')'
    node_8 = module_0.Node(linked_list_4)

def test_case_1076():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_1 = linked_list_0.size()
    assert var_1 == 1
    linked_list_2 = module_0.LinkedList(var_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_5.remove(linked_list_5)
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    node_1 = module_0.Node(bool_1)
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(float_0)
    bool_2 = False
    set_0 = {bool_2}
    node_2 = module_0.Node(set_0)
    int_0 = -2297
    var_6 = linked_list_7.search(int_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_1)
    linked_list_10 = module_0.LinkedList(none_type_1)
    assert linked_list_10.head is None
    var_8 = linked_list_9.display()
    var_9 = linked_list_9.pop()
    assert linked_list_9.head is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList4.Node'
    assert var_9.data is None
    assert var_9.next is None
    linked_list_11 = module_0.LinkedList(linked_list_9)
    var_10 = linked_list_4.push(linked_list_2)

def test_case_1077():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_0.push(linked_list_0)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.search(int_0)
    node_2 = module_0.Node(var_4)
    var_5 = linked_list_1.size()
    assert var_5 == 0

def test_case_1078():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(bytes_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_1 = 3548
    var_5 = linked_list_6.search(int_1)
    node_4 = module_0.Node(int_1, var_5)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_1079():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.push(linked_list_1)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(linked_list_3, linked_list_2)
    node_4 = module_0.Node(linked_list_1, none_type_1)

def test_case_1080():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(linked_list_8)
    var_7 = linked_list_8.pop()
    assert linked_list_8.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.LinkedList'
    assert var_7.head is None
    node_5 = module_0.Node(none_type_3, var_6)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_9.size()
    assert var_9 == 0
    bool_2 = False
    linked_list_10 = module_0.LinkedList(bool_2)
    assert linked_list_10.head is None
    node_7 = module_0.Node(var_7)

def test_case_1081():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_1.remove(none_type_0)

def test_case_1082():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(linked_list_3, linked_list_2)
    bool_0 = True
    linked_list_5 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_4 = linked_list_5.size()
    assert var_4 == 1
    linked_list_7 = module_0.LinkedList(var_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_8 = module_0.LinkedList(none_type_1)
    assert linked_list_8.head is None
    var_5 = linked_list_8.push(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_8.push(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_7 = linked_list_10.display()
    assert var_7 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_2 = None
    linked_list_12 = module_0.LinkedList(none_type_2)
    assert linked_list_12.head is None
    str_1 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_12.display()
    assert var_8 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    set_0 = {bool_1, linked_list_14, node_4}
    var_9 = linked_list_14.remove(set_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_15 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_15.remove(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    node_8 = module_0.Node(none_type_4)
    int_1 = -1061
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    var_11 = linked_list_16.push(int_1)
    var_12 = linked_list_16.size()
    assert var_12 == 1
    var_13 = linked_list_9.display()
    assert var_13 == ')'

def test_case_1083():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(none_type_2)
    var_4 = linked_list_2.search(node_3)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_4.search(linked_list_5)
    bytes_0 = b'\xa5[%<'
    node_6 = module_0.Node(bytes_0)
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.search(int_0)
    node_7 = module_0.Node(var_6)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    str_1 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_8 = linked_list_9.push(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_8 = module_0.Node(var_5, var_8)
    assert node_8.data is None

def test_case_1084():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_2.pop()
    assert linked_list_2.head is None

def test_case_1085():
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_1.display()
    assert var_1 == '(-2869.0)'
    var_2 = linked_list_1.push(node_1)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0

def test_case_1086():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_0.search(linked_list_1)
    float_0 = -2122.54
    node_0 = module_0.Node(float_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_1087():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    node_1 = module_0.Node(linked_list_4)
    var_6 = linked_list_3.search(var_4)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_6.remove(none_type_4)
    var_10 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(node_2, var_9)
    node_4 = module_0.Node(node_2)
    bytes_0 = b'\xa5[%<'
    node_5 = module_0.Node(bytes_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    node_8 = module_0.Node(node_6, dict_0)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_11 = linked_list_8.size()
    assert var_11 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_12 = linked_list_8.display()
    assert var_12 == ')'
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    str_1 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_10.display()
    assert var_13 == ')'
    str_2 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_10.remove(linked_list_10)
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_13 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_13.remove(none_type_7)
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    var_16 = linked_list_13.display()
    node_10 = module_0.Node(linked_list_14)
    node_11 = module_0.Node(linked_list_13)
    node_12 = module_0.Node(node_10)
    var_17 = linked_list_4.search(linked_list_14)

def test_case_1088():
    tuple_0 = ()
    node_0 = module_0.Node(tuple_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_4 = module_0.Node(node_3, complex_0)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    node_8 = module_0.Node(linked_list_3)
    node_9 = module_0.Node(linked_list_2)
    node_10 = module_0.Node(var_1)

def test_case_1089():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_0.search(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    node_0 = module_0.Node(var_1)
    assert node_0.data == ')'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    var_3 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(node_1, var_2)
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_1)
    var_7 = linked_list_9.display()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_5 = module_0.Node(none_type_1)
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    var_9 = linked_list_11.display()
    assert var_9 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_10 = linked_list_12.display()
    assert var_10 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    linked_list_14 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'

def test_case_1090():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    var_4 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    list_0 = []
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(list_0)
    var_6 = linked_list_4.search(none_type_1)

def test_case_1091():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_0)
    var_3 = linked_list_1.display()
    node_1 = module_0.Node(var_3, linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_3.search(linked_list_4)
    float_1 = -2122.54
    node_2 = module_0.Node(float_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_1)
    linked_list_7 = module_0.LinkedList(none_type_1)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.remove(node_3)
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_2.size()
    assert var_11 == 0

def test_case_1092():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_0 = linked_list_3.size()
    assert var_0 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_1 = linked_list_4.display()
    assert var_1 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_2 = linked_list_5.size()
    assert var_2 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    var_3 = linked_list_6.push(none_type_2)
    var_4 = linked_list_4.push(linked_list_4)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.remove(none_type_3)
    var_6 = linked_list_7.search(node_4)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    node_9 = module_0.Node(none_type_1, node_2)

def test_case_1093():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_1)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    var_2 = linked_list_0.push(node_3)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    float_1 = -2122.54
    node_7 = module_0.Node(float_1)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.search(int_0)
    node_8 = module_0.Node(var_4)
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_5 = linked_list_3.push(linked_list_3)
    var_6 = linked_list_3.push(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_1094():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.search(node_2)
    node_3 = module_0.Node(float_0)

def test_case_1095():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    var_4 = linked_list_0.remove(node_0)

def test_case_1096():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_1 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(none_type_0, linked_list_2)
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    node_2 = module_0.Node(node_0, none_type_0)

def test_case_1097():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(linked_list_4)
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.search(int_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_4 = module_0.Node(linked_list_8, linked_list_7)
    str_2 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.push(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_8 = linked_list_11.display()
    assert var_8 == ')'
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_9 = linked_list_12.size()
    assert var_9 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_5 = module_0.Node(var_9)
    assert node_5.data == 0
    var_10 = linked_list_13.push(none_type_4)
    none_type_5 = None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_11 = linked_list_14.remove(none_type_5)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None

def test_case_1098():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_3)
    var_7 = linked_list_8.display()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_6 = module_0.Node(none_type_3)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_11 = linked_list_13.size()
    assert var_11 == 0
    var_12 = linked_list_11.display()
    assert var_12 == ')'
    var_13 = linked_list_11.search(var_12)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None

def test_case_1099():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    linked_list_3 = module_0.LinkedList(linked_list_1)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    var_3 = linked_list_4.remove(none_type_1)
    var_4 = linked_list_4.push(none_type_1)
    var_5 = linked_list_4.search(none_type_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList4.Node'
    assert var_5.data is None
    assert f'{type(var_5.next).__module__}.{type(var_5.next).__qualname__}' == 'linkedList4.Node'

def test_case_1100():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.size()
    assert var_0 == 10
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(none_type_1)
    str_0 = '8gF^Uhhbr$c}'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(str_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(node_4, var_3)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.display()
    var_7 = linked_list_5.display()
    tuple_2 = ()
    node_7 = module_0.Node(tuple_2)
    node_8 = module_0.Node(var_6)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_4)
    var_9 = linked_list_6.display()
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    node_11 = module_0.Node(var_9)
    linked_list_7 = module_0.LinkedList(linked_list_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'

def test_case_1101():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    var_1 = linked_list_0.search(var_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(linked_list_1)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    var_5 = linked_list_4.display()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(none_type_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_3)
    var_7 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(node_3, var_6)
    node_5 = module_0.Node(linked_list_6)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    str_2 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_5)
    var_10 = linked_list_10.push(none_type_5)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_6)
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_12 = linked_list_12.display()
    var_13 = linked_list_12.pop()
    assert linked_list_12.head is None
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList4.Node'
    assert var_13.data is None
    assert var_13.next is None
    linked_list_14 = module_0.LinkedList(linked_list_12)
    int_1 = 1454
    linked_list_15 = module_0.LinkedList()
    var_14 = linked_list_15.search(int_1)
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    linked_list_16 = module_0.LinkedList(node_8)
    var_15 = linked_list_16.remove(none_type_7)
    linked_list_17 = module_0.LinkedList()
    node_9 = module_0.Node(linked_list_16, linked_list_15)
    none_type_8 = None
    node_10 = module_0.Node(none_type_8)
    linked_list_18 = module_0.LinkedList(node_10)
    var_16 = linked_list_18.remove(none_type_8)
    var_17 = linked_list_18.display()
    none_type_9 = None
    node_11 = module_0.Node(none_type_9)
    node_12 = module_0.Node(var_17)
    node_13 = module_0.Node(int_1)

def test_case_1102():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    var_3 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.Node'
    assert var_3.data is None
    assert var_3.next is None
    linked_list_4 = module_0.LinkedList(linked_list_2)
    linked_list_5 = module_0.LinkedList()
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    node_1 = module_0.Node(var_5)
    assert node_1.data == 0
    var_6 = linked_list_7.push(none_type_2)
    var_7 = linked_list_5.push(linked_list_5)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_2)
    var_8 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    linked_list_10 = module_0.LinkedList()
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    var_9 = linked_list_11.size()
    assert var_9 == 0
    linked_list_12 = module_0.LinkedList()
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    var_10 = linked_list_13.size()
    assert var_10 == 0
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_14 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_15 = module_0.LinkedList(bool_0)
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_16 = module_0.LinkedList()
    node_4 = module_0.Node(none_type_6, linked_list_16)
    var_12 = linked_list_15.display()
    assert var_12 == ')'
    none_type_7 = None
    linked_list_17 = module_0.LinkedList(none_type_7)
    var_13 = linked_list_17.size()
    assert var_13 == 0
    var_14 = linked_list_17.display()
    assert var_14 == ')'
    linked_list_18 = module_0.LinkedList()
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_8 = None
    linked_list_19 = module_0.LinkedList(none_type_8)
    var_15 = linked_list_19.size()
    assert var_15 == 0
    var_16 = linked_list_19.display()
    assert var_16 == ')'
    var_17 = linked_list_19.search(none_type_8)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_20 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_20.head).__module__}.{type(linked_list_20.head).__qualname__}' == 'linkedList4.Node'
    none_type_9 = None
    linked_list_21 = module_0.LinkedList(none_type_9)
    var_18 = linked_list_21.size()
    assert var_18 == 0
    linked_list_22 = module_0.LinkedList()
    var_19 = linked_list_22.display()
    assert var_19 == ')'
    linked_list_23 = module_0.LinkedList()
    none_type_10 = None
    linked_list_24 = module_0.LinkedList(none_type_10)
    var_20 = linked_list_24.size()
    assert var_20 == 0
    var_21 = linked_list_3.push(var_3)

def test_case_1103():
    tuple_0 = ()
    node_0 = module_0.Node(tuple_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_0.display()
    assert var_2 == ')'

def test_case_1104():
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_1 = linked_list_5.search(linked_list_6)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_2 = linked_list_7.remove(none_type_1)
    var_3 = linked_list_7.search(node_2)
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    list_1 = []
    var_4 = linked_list_8.push(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_9.remove(none_type_3)
    var_6 = linked_list_9.remove(linked_list_9)
    var_7 = linked_list_9.size()
    assert var_7 == 1
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_12.remove(none_type_5)
    var_9 = linked_list_12.remove(linked_list_12)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_5 = module_0.Node(node_4, var_8)
    var_10 = linked_list_2.push(linked_list_12)

def test_case_1105():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_1106():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_0.search(linked_list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    var_3 = linked_list_3.display()
    dict_0 = {node_1: linked_list_3, var_2: node_1, var_3: linked_list_3, var_3: node_1}
    node_2 = module_0.Node(dict_0, node_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    var_5 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(node_3, var_4)
    node_5 = module_0.Node(node_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(node_7)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_1, dict_1, str_1, dict_1]
    node_9 = module_0.Node(list_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    bool_1 = True
    node_10 = module_0.Node(bool_1)
    node_11 = module_0.Node(node_10)
    var_8 = linked_list_9.size()
    assert var_8 == 0

def test_case_1107():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_3)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_5 = module_0.Node(node_4, var_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    node_8 = module_0.Node(node_6, dict_0)
    var_4 = linked_list_0.size()
    assert var_4 == 1

def test_case_1108():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(linked_list_2)
    var_2 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.LinkedList'
    assert var_2.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.push(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    node_2 = module_0.Node(linked_list_5)
    node_3 = module_0.Node(linked_list_4)
    node_4 = module_0.Node(node_2)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.remove(none_type_4)
    var_8 = linked_list_6.search(node_5)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    list_0 = []
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.push(list_0)
    var_12 = linked_list_4.size()
    assert var_12 == 1

def test_case_1109():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.remove(node_1)
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_6.search(linked_list_7)
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_2)
    var_8 = linked_list_9.display()
    dict_0 = {node_2: linked_list_9, var_7: node_2, var_8: linked_list_9, var_8: node_2}
    node_3 = module_0.Node(dict_0, node_2)
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.search(int_0)
    var_10 = linked_list_10.search(var_9)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_5 = module_0.Node(var_11)
    assert node_5.data == 0
    var_12 = linked_list_12.display()
    assert var_12 == ')'
    var_13 = linked_list_12.remove(none_type_3)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_13 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_13.remove(none_type_4)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    node_8 = module_0.Node(none_type_5)
    node_9 = module_0.Node(node_1)

def test_case_1110():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    set_0 = {bool_1, linked_list_4, node_4}
    var_4 = linked_list_4.remove(set_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(node_6, var_5)
    node_8 = module_0.Node(node_6)
    var_7 = linked_list_4.size()
    assert var_7 == 0

def test_case_1111():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    int_1 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_1)
    node_0 = module_0.Node(var_1)
    bool_0 = False
    set_0 = {bool_0}
    node_1 = module_0.Node(set_0)
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_2 = module_0.Node(bytes_0, bytes_0)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    bool_2 = True
    set_1 = {bool_2}
    none_type_0 = None
    node_5 = module_0.Node(set_1, none_type_0)
    node_6 = module_0.Node(bool_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    node_7 = module_0.Node(var_4)
    assert node_7.data == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_4.push(linked_list_4)
    var_6 = linked_list_4.size()
    assert var_6 == 1

def test_case_1112():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_1)
    var_4 = linked_list_2.display()

def test_case_1113():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    var_2 = linked_list_1.push(none_type_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    bool_1 = True
    linked_list_4 = module_0.LinkedList(bool_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_6 = linked_list_4.size()
    assert var_6 == 1
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.remove(node_2)
    str_0 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    int_1 = -1061
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.push(int_1)
    float_0 = 4618.447563
    var_12 = linked_list_12.remove(float_0)
    none_type_3 = None
    linked_list_13 = module_0.LinkedList(none_type_3)
    assert linked_list_13.head is None
    var_13 = linked_list_13.size()
    assert var_13 == 0
    var_14 = linked_list_13.display()
    assert var_14 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    int_2 = 3548
    var_15 = linked_list_14.search(int_2)
    node_4 = module_0.Node(int_2, var_15)
    node_5 = module_0.Node(linked_list_1)

def test_case_1114():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_3.display()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_5.display()
    node_6 = module_0.Node(linked_list_6)
    var_5 = linked_list_5.search(var_3)
    var_6 = linked_list_5.push(linked_list_5)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    node_8 = module_0.Node(none_type_4, linked_list_7)
    var_8 = linked_list_3.display()

def test_case_1115():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    node_1 = module_0.Node(bool_0)
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_2 = module_0.Node(bytes_0, bytes_0)
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    var_2 = linked_list_0.size()
    assert var_2 == 1

def test_case_1116():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.display()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.remove(node_1)
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.size()
    assert var_6 == 10
    bytes_1 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_9 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_4 = module_0.Node(var_7)
    assert node_4.data == 0
    var_8 = linked_list_11.display()
    assert var_8 == ')'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_12.remove(none_type_4)
    linked_list_13 = module_0.LinkedList(none_type_4)
    assert linked_list_13.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 1

def test_case_1117():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_0.push(linked_list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    node_2 = module_0.Node(var_4)
    assert node_2.data == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_2.push(linked_list_2)
    bool_0 = True
    set_0 = {bool_0}
    none_type_1 = None
    node_3 = module_0.Node(set_0, none_type_1)
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    var_7 = linked_list_4.search(none_type_1)

def test_case_1118():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_1 = module_0.Node(var_5)
    assert node_1.data == 0
    var_6 = linked_list_6.push(none_type_1)
    var_7 = linked_list_6.pop()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    str_1 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    str_2 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(linked_list_9)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_4 = None
    linked_list_13 = module_0.LinkedList(none_type_4)
    assert linked_list_13.head is None
    var_11 = linked_list_13.size()
    assert var_11 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_12 = linked_list_5.push(var_10)

def test_case_1119():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_1.remove(var_0)

def test_case_1120():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_1)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    var_6 = linked_list_3.search(var_4)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    node_5 = module_0.Node(none_type_4)
    bool_0 = True
    linked_list_6 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_9 = linked_list_6.size()
    assert var_9 == 1
    var_10 = linked_list_4.size()
    assert var_10 == 0

def test_case_1121():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    node_3 = module_0.Node(linked_list_3)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.display()
    dict_0 = {node_4: linked_list_5, var_5: node_4, var_6: linked_list_5, var_6: node_4}
    node_5 = module_0.Node(dict_0, node_4)
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    bool_0 = True
    linked_list_9 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_1122():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(int_0)
    var_2 = linked_list_1.size()
    assert var_2 == 1
    node_2 = module_0.Node(var_2, var_2)
    assert node_2.data == 1
    assert node_2.next == 1
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_0 = b'\xa5[%<'
    node_3 = module_0.Node(bytes_0)
    var_3 = linked_list_2.push(var_0)

def test_case_1123():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_0)
    var_4 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(var_6)
    node_3 = module_0.Node(node_0, linked_list_3)

def test_case_1124():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(node_3)
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(int_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_1125():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    node_5 = module_0.Node(none_type_0, linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(var_3)
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(linked_list_6)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_2)
    complex_0 = -1265.460815 + 1056.434j
    node_9 = module_0.Node(node_8, complex_0)
    list_1 = []
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(list_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_1126():
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(str_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList(var_0)
    assert linked_list_2.head is None

def test_case_1127():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.size()
    assert var_2 == 1

def test_case_1128():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    str_1 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.search(node_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_4 = linked_list_8.size()
    assert var_4 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_5 = linked_list_9.display()
    assert var_5 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_6 = linked_list_9.remove(linked_list_9)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_7 = linked_list_11.display()
    assert var_7 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_3 = None
    linked_list_13 = module_0.LinkedList(none_type_3)
    assert linked_list_13.head is None
    var_8 = linked_list_13.size()
    assert var_8 == 0
    var_9 = linked_list_13.display()
    assert var_9 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_15 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_15.remove(none_type_4)
    linked_list_16 = module_0.LinkedList(none_type_4)
    assert linked_list_16.head is None
    var_11 = linked_list_15.display()
    node_6 = module_0.Node(linked_list_16)
    var_12 = linked_list_15.search(var_10)
    var_13 = linked_list_15.push(linked_list_15)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    var_14 = linked_list_17.size()
    assert var_14 == 0
    var_15 = linked_list_11.push(node_5)

def test_case_1129():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    bytes_1 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    var_3 = linked_list_2.search(none_type_1)
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    bytes_2 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_2 = module_0.Node(bytes_2, bytes_2)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    node_5 = module_0.Node(linked_list_7)
    node_6 = module_0.Node(linked_list_6)
    node_7 = module_0.Node(node_5)
    var_7 = linked_list_2.size()
    assert var_7 == 0

def test_case_1130():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bool_1 = True
    set_0 = {bool_1}
    none_type_0 = None
    node_2 = module_0.Node(set_0, none_type_0)
    str_0 = '/*vq&'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'

def test_case_1131():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(linked_list_2)
    var_2 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.LinkedList'
    assert var_2.head is None
    node_1 = module_0.Node(none_type_0, var_1)
    var_3 = linked_list_1.search(var_0)

def test_case_1132():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_2.push(linked_list_3)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_7 = linked_list_8.display()
    node_1 = module_0.Node(linked_list_9)
    var_8 = linked_list_8.search(var_6)
    var_9 = linked_list_8.push(linked_list_8)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    var_10 = linked_list_9.search(var_4)

def test_case_1133():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3, node_3)

def test_case_1134():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_1 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_2.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    node_2 = module_0.Node(linked_list_1, bytes_1)

def test_case_1135():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.size()
    assert var_3 == 10
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(linked_list_6)
    var_8 = linked_list_7.display()
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_9 = linked_list_8.push(linked_list_8)
    var_10 = linked_list_8.pop()
    assert linked_list_8.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.LinkedList'
    assert var_10.head is None
    var_11 = linked_list_8.size()
    assert var_11 == 0
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_13 = var_10.size()
    assert var_13 == 0

def test_case_1136():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_1 = module_0.Node(set_0)
    int_1 = -2297
    var_4 = linked_list_3.search(int_1)
    str_0 = '8gF^Uhhbr$c}'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.search(str_0)
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_2.push(none_type_0)

def test_case_1137():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)

def test_case_1138():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.push(linked_list_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_6.search(linked_list_7)
    float_0 = -2122.54
    node_3 = module_0.Node(float_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList(var_10)
    assert linked_list_12.head is None
    float_1 = -2869.0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_11 = linked_list_13.push(float_1)
    none_type_6 = None
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    none_type_7 = None
    linked_list_15 = module_0.LinkedList(none_type_7)
    assert linked_list_15.head is None
    str_1 = '3$;;z6n'
    linked_list_16 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_15.display()
    assert var_12 == ')'
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    var_13 = linked_list_15.display()
    assert var_13 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    node_7 = module_0.Node(node_6)
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None

def test_case_1139():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.size()
    assert var_0 == 10
    bytes_1 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    bytes_2 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(bytes_2)
    bool_0 = False
    linked_list_3 = module_0.LinkedList(bool_0)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_1140():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 3548
    var_4 = linked_list_3.search(int_0)
    node_3 = module_0.Node(int_0, var_4)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(node_4)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    var_6 = linked_list_4.push(none_type_3)
    tuple_0 = ()
    node_7 = module_0.Node(tuple_0)
    bytes_0 = b'\xa5[%<'
    node_8 = module_0.Node(bytes_0)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_1141():
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(linked_list_2, linked_list_1)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    var_5 = linked_list_6.search(none_type_2)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(linked_list_7)
    var_7 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.LinkedList'
    assert var_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_11 = linked_list_11.push(linked_list_11)
    var_12 = linked_list_10.size()
    assert var_12 == 0
    var_13 = var_7.push(node_1)

def test_case_1142():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_5 = module_0.Node(linked_list_4)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(bool_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    set_0 = {bool_1, linked_list_5, node_6}
    var_4 = linked_list_5.remove(set_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(bytes_0)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_3)
    var_7 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_9 = module_0.Node(node_8, var_6)
    node_10 = module_0.Node(node_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_1.search(var_5)

def test_case_1143():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.push(linked_list_4)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_4 = linked_list_8.size()
    assert var_4 == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    var_6 = linked_list_6.search(var_5)
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0

def test_case_1144():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.search(int_0)
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    str_2 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    int_1 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.search(int_1)
    node_2 = module_0.Node(var_5)
    int_2 = -1061
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(int_2)
    float_0 = 4618.447563
    var_7 = linked_list_8.remove(float_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    var_11 = linked_list_11.size()
    assert var_11 == 0
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.remove(none_type_4)
    var_13 = linked_list_12.display()
    var_14 = linked_list_12.display()
    tuple_0 = ()
    node_8 = module_0.Node(tuple_0)
    node_9 = module_0.Node(var_13)
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    str_3 = '3$;;z6n'
    linked_list_14 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_13.display()
    assert var_15 == ')'
    linked_list_15 = module_0.LinkedList(var_7)
    assert linked_list_15.head is None

def test_case_1145():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    set_0 = {bool_0, linked_list_3, node_3}
    var_2 = linked_list_3.remove(set_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_1)
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_1146():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    node_0 = module_0.Node(none_type_0, var_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    var_3 = linked_list_2.remove(linked_list_2)
    var_4 = linked_list_2.size()
    assert var_4 == 1
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_2 = module_0.Node(set_0)
    int_0 = -2297
    var_6 = linked_list_3.search(int_0)
    tuple_0 = ()
    node_3 = module_0.Node(tuple_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    list_1 = []
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_7 = linked_list_4.push(list_1)
    var_8 = linked_list_2.display()

def test_case_1147():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    var_3 = linked_list_3.pop()
    assert linked_list_3.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.LinkedList'
    assert var_3.head is None
    node_2 = module_0.Node(none_type_1, var_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(linked_list_7)
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    node_5 = module_0.Node(var_8)
    assert node_5.data == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_6 = module_0.Node(linked_list_0, none_type_1)

def test_case_1148():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    list_0 = []
    var_1 = linked_list_1.push(list_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_3 = module_0.LinkedList(bool_0)
    assert linked_list_3.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(none_type_1, linked_list_4)
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(bool_2)
    list_1 = []
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(list_1)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_4)
    var_9 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_8 = module_0.Node(node_7, var_8)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_12 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    node_9 = module_0.Node(linked_list_0, node_7)

def test_case_1149():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(node_1, var_1)
    node_3 = module_0.Node(linked_list_2)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_9.search(int_0)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_12.remove(none_type_5)
    var_9 = linked_list_12.push(none_type_5)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None

def test_case_1150():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_2 = module_0.Node(var_5)
    assert node_2.data == 0
    var_6 = linked_list_6.push(none_type_2)
    bool_0 = False
    set_0 = {bool_0}
    node_3 = module_0.Node(set_0)
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(float_0)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    tuple_0 = ()
    node_4 = module_0.Node(tuple_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_1151():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.size()
    assert var_3 == 0
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_2.search(linked_list_3)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xa5[%<'
    node_2 = module_0.Node(bytes_1)
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(int_0)
    var_6 = linked_list_5.size()
    assert var_6 == 1
    node_3 = module_0.Node(var_6, var_6)
    assert node_3.data == 1
    assert node_3.next == 1
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    int_1 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(int_1)
    bytes_2 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.size()
    assert var_10 == 10
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_1152():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_2.pop()
    assert linked_list_2.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    bool_2 = True
    set_0 = {bool_2}
    none_type_1 = None
    node_4 = module_0.Node(set_0, none_type_1)
    str_0 = '/*vq&'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    list_2 = []
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(list_2)
    float_1 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(float_1)
    var_7 = linked_list_8.display()
    assert var_7 == '(-2869.0)'
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_11.push(linked_list_10)
    var_12 = linked_list_11.display()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_12.remove(none_type_4)
    var_14 = linked_list_12.remove(linked_list_12)
    node_6 = module_0.Node(var_11)

def test_case_1153():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    tuple_0 = ()
    node_3 = module_0.Node(tuple_0)
    var_5 = linked_list_1.search(bool_0)

def test_case_1154():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_0.push(linked_list_0)
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_3.search(linked_list_4)
    float_0 = -2122.54
    node_1 = module_0.Node(float_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_1)
    var_6 = linked_list_6.remove(linked_list_6)
    var_7 = linked_list_6.size()
    assert var_7 == 1
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    int_0 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.push(int_0)
    var_11 = linked_list_9.size()
    assert var_11 == 1
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_10.remove(none_type_4)
    var_13 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_4 = module_0.Node(node_3, var_12)
    node_5 = module_0.Node(linked_list_2)

def test_case_1155():
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)
    str_1 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_1.search(linked_list_2)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(node_2, var_2)
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    str_2 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    str_3 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_8.push(linked_list_8)
    int_0 = 1436
    var_6 = linked_list_3.remove(int_0)

def test_case_1156():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(int_0)
    var_2 = linked_list_1.size()
    assert var_2 == 1
    node_0 = module_0.Node(var_2, var_2)
    assert node_0.data == 1
    assert node_0.next == 1
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(none_type_2)
    int_1 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_1)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(linked_list_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    float_0 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(float_0)
    var_8 = linked_list_9.pop()
    assert var_8 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_9.head is None
    str_3 = '#p1jIXa}Q?(h'
    dict_1 = {str_3: str_3, str_3: str_3, str_3: str_3}
    list_1 = [dict_1, dict_1, str_3, dict_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(node_5, list_1)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    bool_0 = True
    set_0 = {bool_0}
    none_type_5 = None
    node_8 = module_0.Node(set_0, none_type_5)
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(list_0, linked_list_4)

def test_case_1157():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_1 = linked_list_0.size()
    assert var_1 == 1
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(float_0)
    var_3 = linked_list_2.display()
    assert var_3 == '(-2869.0)'
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_2)
    var_7 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_4 = module_0.Node(node_3, var_6)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_8 = linked_list_11.remove(none_type_3)
    var_9 = linked_list_11.search(node_5)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    bool_3 = True
    set_0 = {bool_3}
    none_type_4 = None
    node_8 = module_0.Node(set_0, none_type_4)
    node_9 = module_0.Node(bool_3)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_10 = linked_list_13.remove(none_type_5)
    var_11 = linked_list_13.search(node_10)
    none_type_6 = None
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    var_12 = linked_list_14.push(linked_list_14)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_13 = linked_list_14.push(linked_list_15)
    none_type_7 = None
    linked_list_16 = module_0.LinkedList(none_type_7)
    assert linked_list_16.head is None
    var_14 = linked_list_16.size()
    assert var_14 == 0
    var_15 = linked_list_16.display()
    assert var_15 == ')'
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    int_0 = 3548
    var_16 = linked_list_17.search(int_0)
    node_11 = module_0.Node(int_0, var_16)
    node_12 = module_0.Node(var_6)

def test_case_1158():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0
    var_5 = linked_list_6.push(none_type_2)
    var_6 = linked_list_4.push(linked_list_4)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    bool_0 = True
    set_0 = {bool_0}
    none_type_4 = None
    node_5 = module_0.Node(set_0, none_type_4)
    node_6 = module_0.Node(bool_0)
    bool_1 = True
    linked_list_9 = module_0.LinkedList(bool_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.display()
    assert var_9 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_10 = linked_list_9.size()
    assert var_10 == 1
    linked_list_11 = module_0.LinkedList(var_9)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.remove(linked_list_7)

def test_case_1159():
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_0 = module_0.Node(bytes_0, bytes_0)
    bool_0 = False
    set_0 = {bool_0}
    node_1 = module_0.Node(set_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.size()
    assert var_4 == 0
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(var_3)
    assert node_6.data == 0
    float_0 = -2122.54
    node_7 = module_0.Node(float_0)
    bool_3 = True
    set_1 = {bool_3}
    none_type_4 = None
    node_8 = module_0.Node(set_1, none_type_4)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    linked_list_3 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_5)
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_6 = linked_list_3.display()
    node_10 = module_0.Node(linked_list_4)
    node_11 = module_0.Node(linked_list_3)
    node_12 = module_0.Node(node_10)
    var_7 = linked_list_1.display()
    assert var_7 == ')'

def test_case_1160():
    str_0 = 'EU%1@v\x0b'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3).__module__}.{type(linked_list_3).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_3.remove(none_type_0)
    var_1 = linked_list_0.size()
    assert var_1 == 7

def test_case_1161():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_0.push(linked_list_0)
    node_2 = module_0.Node(str_0)

def test_case_1162():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(linked_list_4)
    var_3 = linked_list_3.size()
    assert var_3 == 0
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2122.54
    node_3 = module_0.Node(float_0)
    bool_0 = True
    linked_list_6 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_5 = linked_list_6.size()
    assert var_5 == 1
    linked_list_8 = module_0.LinkedList(var_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_9.display()
    assert var_6 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_7 = linked_list_7.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_1163():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_1.size()
    assert var_2 == 7

def test_case_1164():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_0.push(linked_list_0)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_6 = linked_list_3.pop()
    assert var_6 == 243

def test_case_1165():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(int_0)
    float_0 = 4618.447563
    var_2 = linked_list_3.remove(float_0)
    float_1 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(float_1)
    var_4 = linked_list_4.display()
    assert var_4 == '(-2869.0)'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_6 = module_0.LinkedList(bool_0)
    assert linked_list_6.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_2 = module_0.Node(none_type_1, linked_list_7)
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(linked_list_8)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_1)
    complex_0 = -1265.460815 + 1056.434j
    node_6 = module_0.Node(node_5, complex_0)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.push(linked_list_10)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_1166():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(linked_list_0)

def test_case_1167():
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_1 = linked_list_2.display()
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_2 = module_0.Node(set_0)
    int_0 = -2297
    var_3 = linked_list_4.search(int_0)
    var_4 = linked_list_4.size()
    assert var_4 == 1
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    node_7 = module_0.Node(var_5)
    assert node_7.data == ')'
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_1)
    var_7 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_9 = module_0.Node(node_8, var_6)
    str_1 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_1 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.search(int_1)
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    linked_list_11 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.remove(none_type_2)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_11 = module_0.Node(linked_list_11, linked_list_10)
    var_10 = linked_list_9.push(var_7)

def test_case_1168():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList(linked_list_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'

def test_case_1169():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.search(linked_list_2)

def test_case_1170():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_1 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(none_type_0, linked_list_2)
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(bool_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_2 = linked_list_4.display()
    node_5 = module_0.Node(linked_list_5)
    var_3 = linked_list_4.search(var_1)
    var_4 = linked_list_5.search(node_5)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_7 = module_0.Node(var_5)
    assert node_7.data == 0
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_3)
    var_8 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_9 = module_0.Node(list_0)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_10 = linked_list_12.display()
    assert var_10 == ')'
    str_1 = '8gF^Uhhbr$c}'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_11 = linked_list_13.search(str_1)
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_14 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_14.remove(none_type_4)
    var_13 = linked_list_14.remove(linked_list_14)
    int_0 = 1454
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_14 = linked_list_15.search(int_0)
    node_11 = module_0.Node(var_14)
    var_15 = linked_list_5.size()
    assert var_15 == 0

def test_case_1171():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_0.search(int_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_1 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.search(int_1)
    node_1 = module_0.Node(var_3)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    var_5 = linked_list_4.push(none_type_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    node_7 = module_0.Node(none_type_4)
    node_8 = module_0.Node(var_4, var_6)
    assert node_8.next == ')'

def test_case_1172():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(linked_list_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    float_0 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_5 = linked_list_9.push(float_0)
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    str_2 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_10.display()
    assert var_6 == ')'
    str_3 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.remove(linked_list_10)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_13 = module_0.LinkedList(none_type_4)
    assert linked_list_13.head is None
    var_8 = linked_list_13.size()
    assert var_8 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    node_7 = module_0.Node(var_8)
    assert node_7.data == 0
    var_9 = linked_list_14.display()
    assert var_9 == ')'
    var_10 = linked_list_14.remove(none_type_4)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    linked_list_16 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_16.remove(none_type_6)
    linked_list_17 = module_0.LinkedList(none_type_6)
    assert linked_list_17.head is None
    var_12 = linked_list_16.display()
    node_10 = module_0.Node(linked_list_17)
    var_13 = linked_list_16.search(var_11)
    var_14 = linked_list_17.search(node_10)
    none_type_7 = None
    node_11 = module_0.Node(none_type_7)
    linked_list_18 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_18.head).__module__}.{type(linked_list_18.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_18.remove(none_type_7)
    var_16 = linked_list_18.remove(linked_list_18)
    var_17 = linked_list_18.size()
    assert var_17 == 1
    var_18 = linked_list_4.display()
    assert var_18 == ')'

def test_case_1173():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(float_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    var_2 = linked_list_1.display()
    assert var_2 == '(-2869.0)'
    var_3 = linked_list_1.push(node_2)
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_2.search(linked_list_3)
    float_1 = -2122.54
    node_4 = module_0.Node(float_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_0)
    var_6 = linked_list_5.display()
    var_7 = linked_list_3.search(var_5)

def test_case_1174():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bytes_1 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_4 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    bytes_2 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_5.display()
    assert var_2 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    list_0 = []
    var_3 = linked_list_6.push(list_0)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_4 = linked_list_7.push(linked_list_7)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_6 = linked_list_8.display()
    var_7 = linked_list_6.display()
    assert var_7 == '([])'

def test_case_1175():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    set_0 = {bool_0, linked_list_0, node_0}
    var_0 = linked_list_0.remove(set_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.size()
    assert var_2 == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(var_1)
    assert node_4.data == 0
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(node_5)
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    var_7 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.Node'
    assert var_7.data is None
    assert var_7.next is None
    linked_list_7 = module_0.LinkedList(linked_list_5)
    int_0 = -1061
    linked_list_8 = module_0.LinkedList()
    var_8 = linked_list_8.push(int_0)
    float_0 = 4618.447563
    var_9 = linked_list_8.remove(float_0)
    linked_list_9 = module_0.LinkedList()
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(node_8, list_0)
    node_10 = module_0.Node(node_8, dict_0)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    bool_3 = False
    linked_list_12 = module_0.LinkedList(bool_3)
    none_type_5 = None
    node_11 = module_0.Node(none_type_5)
    linked_list_13 = module_0.LinkedList()
    node_12 = module_0.Node(none_type_5, linked_list_13)
    var_11 = linked_list_12.display()
    assert var_11 == ')'
    linked_list_14 = module_0.LinkedList(var_6)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'

def test_case_1176():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    var_1 = linked_list_0.search(var_0)
    var_2 = linked_list_0.push(var_0)

def test_case_1177():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(var_3)
    assert linked_list_5.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.display()
    assert var_5 == ')'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_6 = linked_list_9.push(linked_list_9)
    var_7 = linked_list_9.pop()
    assert linked_list_9.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.LinkedList'
    assert var_7.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.search(int_0)
    var_10 = linked_list_10.search(var_9)
    var_11 = linked_list_10.push(var_9)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_12 = linked_list_11.size()
    assert var_12 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_6 = module_0.Node(var_12)
    assert node_6.data == 0
    var_13 = linked_list_12.display()
    assert var_13 == ')'
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_13.remove(none_type_6)
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    var_15 = linked_list_13.display()
    node_8 = module_0.Node(linked_list_14)
    var_16 = linked_list_13.search(var_14)
    var_17 = linked_list_13.push(linked_list_13)
    float_0 = -2869.0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_18 = linked_list_15.push(float_0)
    bool_1 = False
    set_0 = {bool_1}
    node_9 = module_0.Node(set_0)
    int_1 = -2297
    var_19 = linked_list_15.search(int_1)
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None

def test_case_1178():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    var_2 = linked_list_0.size()
    assert var_2 == 0
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_0 = module_0.Node(bytes_0, bytes_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    var_5 = linked_list_1.size()
    assert var_5 == 1
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_6 = linked_list_4.push(linked_list_4)
    var_7 = linked_list_3.size()
    assert var_7 == 0
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_8 = linked_list_5.size()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(var_9)
    assert linked_list_8.head is None
    str_0 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    bool_1 = True
    set_0 = {bool_1}
    none_type_7 = None
    node_5 = module_0.Node(set_0, none_type_7)
    node_6 = module_0.Node(bool_1)
    var_12 = linked_list_1.search(linked_list_12)

def test_case_1179():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    var_3 = linked_list_3.push(int_0)
    var_4 = linked_list_3.size()
    assert var_4 == 1
    node_1 = module_0.Node(var_4, var_4)
    assert node_1.data == 1
    assert node_1.next == 1
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.size()
    assert var_5 == 10
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    var_6 = linked_list_5.search(linked_list_6)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    bytes_1 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_7 = module_0.LinkedList(none_type_1)
    var_7 = linked_list_7.push(bytes_1)
    linked_list_8 = module_0.LinkedList()
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    var_9 = linked_list_11.size()
    assert var_9 == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    var_11 = linked_list_7.pop()

def test_case_1180():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_0.push(linked_list_0)
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_1 = module_0.Node(bytes_0, bytes_0)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    var_3 = linked_list_3.search(var_2)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_0)
    linked_list_5 = module_0.LinkedList(none_type_0)
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_7 = module_0.LinkedList(bool_0)
    assert linked_list_7.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_4 = module_0.Node(none_type_1, linked_list_8)
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    str_0 = 'EU%1@v\x0b'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_7 = linked_list_10.display()
    assert var_7 == ')'
    node_5 = module_0.Node(var_7)
    assert node_5.data == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    float_0 = -2869.0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.push(float_0)
    var_9 = linked_list_2.push(node_1)

def test_case_1181():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(linked_list_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    linked_list_8 = module_0.LinkedList(var_4)
    assert linked_list_8.head is None

def test_case_1182():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    float_0 = -2122.54
    node_2 = module_0.Node(float_0)
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_0.search(linked_list_1)
    var_1 = linked_list_0.pop()
    assert var_1 == 'n'

def test_case_1183():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_6 = module_0.Node(var_4)
    assert node_6.data == 0
    var_5 = linked_list_7.push(none_type_3)
    var_6 = linked_list_5.push(linked_list_5)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_7 = module_0.Node(bytes_0, bytes_0)
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_8 = module_0.Node(list_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    float_0 = -2869.0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_8 = linked_list_11.push(float_0)
    var_9 = linked_list_11.pop()
    assert var_9 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_11.head is None
    str_3 = '8gF^Uhhbr$c}'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_10 = linked_list_12.search(str_3)
    node_9 = module_0.Node(linked_list_8)

def test_case_1184():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    bool_1 = False
    set_0 = {bool_1}
    node_1 = module_0.Node(set_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(linked_list_3)
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_2)
    complex_0 = -1265.460815 + 1056.434j
    node_5 = module_0.Node(node_4, complex_0)
    float_0 = -2122.54
    node_6 = module_0.Node(float_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    node_10 = module_0.Node(node_9)

def test_case_1185():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_0 = module_0.Node(bytes_0, bytes_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(node_1, var_1)
    node_3 = module_0.Node(linked_list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    node_5 = module_0.Node(node_4)
    bytes_1 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(bytes_1)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    node_8 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    bool_0 = True
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(node_9)
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    bytes_2 = b'\xa5[%<'
    node_11 = module_0.Node(bytes_2)
    none_type_6 = None
    node_12 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.search(int_0)
    bool_1 = True
    node_13 = module_0.Node(bool_1)
    node_14 = module_0.Node(node_13)
    complex_1 = -2363.678516 + 1356.37j
    node_15 = module_0.Node(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_1 = 'GCP3E1;@a'
    node_16 = module_0.Node(str_1, var_1)

def test_case_1186():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.LinkedList'
    assert var_2.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_1)
    var_5 = linked_list_2.remove(linked_list_2)
    bytes_1 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_6 = linked_list_3.push(bytes_1)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_7 = linked_list_4.remove(none_type_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.remove(none_type_4)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_10 = linked_list_7.size()
    assert var_10 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_4 = module_0.Node(var_10)
    assert node_4.data == 0
    var_11 = linked_list_8.push(none_type_5)
    var_12 = linked_list_6.push(linked_list_6)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_14 = linked_list_9.display()
    node_6 = module_0.Node(linked_list_10)
    var_15 = linked_list_9.search(var_13)
    var_16 = linked_list_9.push(linked_list_9)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_17 = linked_list_11.display()
    assert var_17 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_18 = linked_list_10.size()
    assert var_18 == 0

def test_case_1187():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_4 = linked_list_4.display()
    assert var_4 == '(-2869.0)'
    var_5 = linked_list_4.push(node_1)
    bool_1 = True
    set_0 = {bool_1}
    none_type_1 = None
    node_3 = module_0.Node(set_0, none_type_1)
    var_6 = var_1.remove(linked_list_1)

def test_case_1188():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    node_3 = module_0.Node(none_type_0, var_0)
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(float_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    var_3 = linked_list_2.display()
    assert var_3 == '(-2869.0)'
    var_4 = linked_list_2.push(node_5)
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_7 = module_0.Node(bytes_0, bytes_0)
    node_8 = module_0.Node(node_1)

def test_case_1189():
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(str_0)
    var_1 = linked_list_0.size()
    assert var_1 == 0

def test_case_1190():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_0 = True
    linked_list_2 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.display()
    assert var_2 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_3 = linked_list_2.size()
    assert var_3 == 1
    bool_1 = True
    set_0 = {bool_1}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    bytes_2 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(bytes_2)
    int_1 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(int_1)
    var_6 = linked_list_5.size()
    assert var_6 == 1
    node_1 = module_0.Node(var_6, var_6)
    assert node_1.data == 1
    assert node_1.next == 1
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_2 = module_0.Node(var_8)
    assert node_2.data == 0
    var_9 = linked_list_8.push(none_type_2)
    var_10 = linked_list_6.push(linked_list_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_1191():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    node_2 = module_0.Node(none_type_0)

def test_case_1192():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    node_1 = module_0.Node(node_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.remove(str_0)
    var_3 = linked_list_4.size()
    assert var_3 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_1)
    var_5 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(node_2, var_4)
    node_4 = module_0.Node(node_2)
    bytes_2 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.size()
    assert var_6 == 10
    bytes_3 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_5 = module_0.Node(bytes_3, bytes_3)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(bool_2)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    int_0 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(int_0)
    float_0 = 4618.447563
    var_8 = linked_list_9.remove(float_0)
    node_8 = module_0.Node(linked_list_1, var_6)
    assert node_8.next == 10

def test_case_1193():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_2)
    var_4 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.LinkedList'
    assert var_4.head is None
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.remove(none_type_4)
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.push(float_0)
    var_10 = linked_list_8.display()
    assert var_10 == '(-2869.0)'
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.search(int_0)
    var_12 = linked_list_9.search(var_11)
    var_13 = linked_list_9.push(var_11)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_10.remove(none_type_6)
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_15 = linked_list_11.size()
    assert var_15 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_16 = linked_list_12.push(var_15)
    var_17 = linked_list_12.search(linked_list_3)

def test_case_1194():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bool_1 = True
    set_0 = {bool_1}
    none_type_0 = None
    node_2 = module_0.Node(set_0, none_type_0)
    str_0 = '/*vq&'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_2 = True
    set_1 = {bool_2}
    none_type_2 = None
    node_3 = module_0.Node(set_1, none_type_2)
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(float_0)
    bool_3 = False
    set_2 = {bool_3}
    node_4 = module_0.Node(set_2)
    int_0 = -2297
    var_3 = linked_list_3.search(int_0)
    var_4 = linked_list_3.size()
    assert var_4 == 1
    bool_4 = False
    var_5 = linked_list_0.search(bool_4)

def test_case_1195():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(node_1, var_0)
    node_3 = module_0.Node(node_1)
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_4 = module_0.Node(bytes_0, bytes_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.push(int_0)
    float_0 = 4618.447563
    var_3 = linked_list_5.remove(float_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_5 = linked_list_9.size()
    assert var_5 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_7 = module_0.Node(var_5)
    assert node_7.data == 0
    var_6 = linked_list_10.display()
    assert var_6 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_4 = None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_7 = linked_list_12.remove(none_type_4)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_13 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_13.remove(none_type_5)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None

def test_case_1196():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    node_1 = module_0.Node(none_type_0, linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_5 = module_0.Node(node_4, complex_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_7 = module_0.Node(linked_list_4)
    node_8 = module_0.Node(linked_list_3)
    node_9 = module_0.Node(node_7)
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(int_0)
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    var_9 = linked_list_6.search(linked_list_6)
    bool_1 = True
    linked_list_8 = module_0.LinkedList(bool_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_11 = linked_list_8.size()
    assert var_11 == 1
    var_12 = linked_list_5.pop()
    assert var_12 == -1061
    assert linked_list_5.head is None

def test_case_1197():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(var_3)
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.remove(none_type_3)
    var_6 = linked_list_3.push(none_type_3)

def test_case_1198():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    var_8 = linked_list_1.size()
    assert var_8 == 0

def test_case_1199():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_4 = module_0.LinkedList(bool_0)
    assert linked_list_4.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(none_type_0, linked_list_5)
    var_1 = linked_list_4.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_2 = linked_list_8.size()
    assert var_2 == 0
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_3 = linked_list_9.size()
    assert var_3 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_1200():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(float_0)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_2)
    var_4 = linked_list_4.display()
    assert var_4 == '(-2869.0)'
    var_5 = linked_list_4.push(node_8)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_0)
    bool_3 = True
    node_10 = module_0.Node(bool_3)
    node_11 = module_0.Node(node_10)
    complex_0 = -2363.678516 + 1356.37j
    node_12 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.size()
    assert var_7 == 10
    none_type_1 = None
    node_13 = module_0.Node(none_type_1)
    linked_list_8 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_1)
    linked_list_9 = module_0.LinkedList(none_type_1)
    assert linked_list_9.head is None
    var_9 = linked_list_8.display()
    node_14 = module_0.Node(linked_list_9)
    var_10 = linked_list_8.search(var_8)
    var_11 = linked_list_8.push(linked_list_8)
    none_type_2 = None
    linked_list_10 = module_0.LinkedList(none_type_2)
    assert linked_list_10.head is None
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_12 = linked_list_11.push(linked_list_11)
    var_13 = linked_list_11.pop()
    assert linked_list_11.head is None
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList4.LinkedList'
    assert var_13.head is None
    node_15 = module_0.Node(none_type_2, var_12)
    var_14 = linked_list_2.display()
    assert var_14 == ')'

def test_case_1201():
    float_0 = -2122.54
    node_0 = module_0.Node(float_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_2 = linked_list_4.display()
    node_2 = module_0.Node(linked_list_5)
    var_3 = linked_list_4.search(var_1)
    var_4 = linked_list_5.search(node_2)
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(int_0)
    float_1 = 4618.447563
    var_6 = linked_list_6.remove(float_1)
    int_1 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.search(int_1)
    var_8 = linked_list_7.search(var_7)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    node_4 = module_0.Node(linked_list_9)
    var_11 = linked_list_8.size()
    assert var_11 == 1
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_6 = module_0.Node(none_type_4, linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_1202():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    tuple_0 = ()
    node_2 = module_0.Node(tuple_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    set_0 = {bool_0, linked_list_3, node_3}
    var_3 = linked_list_3.remove(set_0)
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(str_0)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    str_1 = '$T\x0bL=O]w^NF\tP'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.remove(str_1)
    var_7 = linked_list_6.size()
    assert var_7 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_2 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.search(linked_list_9)
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.search(int_0)
    node_8 = module_0.Node(var_9)
    none_type_2 = None
    linked_list_11 = module_0.LinkedList(none_type_2)
    assert linked_list_11.head is None
    var_10 = linked_list_11.push(linked_list_11)
    var_11 = linked_list_11.push(none_type_2)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_1203():
    float_0 = -2122.54
    node_0 = module_0.Node(float_0)
    tuple_0 = ()
    node_1 = module_0.Node(tuple_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    var_4 = linked_list_2.size()
    assert var_4 == 1
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_5 = linked_list_3.push(linked_list_3)
    var_6 = linked_list_3.pop()
    assert linked_list_3.head is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList4.LinkedList'
    assert var_6.head is None
    float_1 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_7 = linked_list_4.push(float_1)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    var_9 = linked_list_0.display()

def test_case_1204():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_0)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_9 = module_0.Node(var_2)
    assert node_9.data == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0

def test_case_1205():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    linked_list_3 = module_0.LinkedList(linked_list_1)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    linked_list_6 = module_0.LinkedList()
    var_4 = linked_list_6.remove(node_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_2)
    var_5 = linked_list_7.remove(none_type_2)
    linked_list_8 = module_0.LinkedList(none_type_2)
    linked_list_9 = module_0.LinkedList()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    var_6 = linked_list_10.size()
    assert var_6 == 0
    var_7 = linked_list_10.size()
    assert var_7 == 0
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    var_8 = linked_list_11.push(linked_list_11)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_7 = module_0.Node(node_6, complex_0)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_8)
    var_9 = linked_list_12.remove(none_type_6)
    var_10 = linked_list_12.remove(linked_list_12)
    linked_list_13 = module_0.LinkedList()
    node_9 = module_0.Node(node_8, var_9)
    node_10 = module_0.Node(node_8)
    linked_list_14 = module_0.LinkedList()
    linked_list_15 = module_0.LinkedList()
    none_type_7 = None
    node_11 = module_0.Node(none_type_7)
    linked_list_16 = module_0.LinkedList(node_11)
    var_11 = linked_list_16.remove(none_type_7)
    linked_list_17 = module_0.LinkedList(none_type_7)
    var_12 = linked_list_16.display()
    var_13 = linked_list_16.pop()
    linked_list_18 = module_0.LinkedList()
    var_14 = linked_list_18.display()
    assert var_14 == ')'
    node_12 = module_0.Node(var_14)
    assert node_12.data == ')'
    linked_list_19 = module_0.LinkedList()
    var_15 = linked_list_2.display()
    assert var_15 == ')'

def test_case_1206():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    var_2 = linked_list_0.size()
    assert var_2 == 1
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_1.display()
    node_3 = module_0.Node(linked_list_2)
    var_5 = linked_list_1.size()
    assert var_5 == 1
    bytes_0 = b'\xa5[%<'
    node_4 = module_0.Node(bytes_0)
    var_6 = linked_list_0.display()

def test_case_1207():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(linked_list_4)
    var_3 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.LinkedList'
    assert var_3.head is None
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_1208():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    complex_1 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(bytes_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_1209():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    node_1 = module_0.Node(none_type_0, linked_list_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    var_1 = linked_list_1.display()
    node_5 = module_0.Node(var_1, linked_list_1)
    float_0 = -2122.54
    node_6 = module_0.Node(float_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    float_1 = -2869.0
    node_7 = module_0.Node(float_1)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(bytes_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_4)
    var_5 = linked_list_6.display()
    none_type_5 = None
    node_11 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_12 = module_0.Node(none_type_4)
    int_0 = -1061
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(int_0)
    var_7 = linked_list_8.size()
    assert var_7 == 1
    var_8 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList4.Node'
    assert var_8.data is None
    assert var_8.next is None

def test_case_1210():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    var_2 = linked_list_0.search(var_0)

def test_case_1211():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    linked_list_3 = module_0.LinkedList(linked_list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    var_3 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    linked_list_6 = module_0.LinkedList()
    var_4 = linked_list_6.remove(node_3)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_5)
    var_5 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.size()
    assert var_7 == 10
    var_8 = linked_list_9.remove(set_0)

def test_case_1212():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_1 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(none_type_0, linked_list_2)
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_3.display()
    node_3 = module_0.Node(linked_list_4)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_5 = module_0.Node(var_3)
    assert node_5.data == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    var_5 = linked_list_6.remove(none_type_2)
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.search(int_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_7 = module_0.Node(linked_list_8, linked_list_7)
    var_8 = linked_list_8.size()
    assert var_8 == 1

def test_case_1213():
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_1.search(linked_list_2)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    none_type_0 = None
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    str_2 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.search(int_0)
    node_2 = module_0.Node(var_5)
    none_type_1 = None
    linked_list_8 = module_0.LinkedList(none_type_1)
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(linked_list_8)
    var_7 = linked_list_8.push(none_type_1)
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    str_3 = '#p1jIXa}Q?(h'
    dict_1 = {str_3: str_3, str_3: str_3, str_3: str_3}
    list_1 = [dict_1, dict_1, str_3, dict_1]
    node_3 = module_0.Node(list_1)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_12 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_12.remove(none_type_3)
    linked_list_13 = module_0.LinkedList(none_type_3)
    assert linked_list_13.head is None
    var_10 = linked_list_12.display()
    node_5 = module_0.Node(linked_list_13)
    var_11 = linked_list_11.size()
    assert var_11 == 0

def test_case_1214():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(bytes_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(linked_list_7)
    var_7 = linked_list_8.display()
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_9 = linked_list_10.display()
    var_10 = linked_list_10.pop()
    assert linked_list_10.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.Node'
    assert var_10.data is None
    assert var_10.next is None
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList(node_3)
    var_11 = linked_list_12.remove(none_type_5)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    node_5 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList()

def test_case_1215():
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_0 = module_0.Node(bytes_0, bytes_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_4 = module_0.Node(node_3, complex_0)
    var_1 = linked_list_0.remove(linked_list_0)
    assert linked_list_0.head is None

def test_case_1216():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    var_2 = linked_list_2.display()
    node_4 = module_0.Node(dict_0)
    var_3 = linked_list_0.remove(node_4)

def test_case_1217():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_2)
    var_2 = linked_list_3.remove(linked_list_3)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    node_2 = module_0.Node(var_5)
    assert node_2.data == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_6.push(linked_list_6)
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_7 = linked_list_11.search(linked_list_11)
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    linked_list_13 = module_0.LinkedList(linked_list_12)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    node_5 = module_0.Node(str_1)

def test_case_1218():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_6.size()
    assert var_5 == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(var_4)
    assert node_4.data == 0
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    str_1 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    str_2 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(linked_list_9)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    str_3 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.display()
    assert var_10 == ')'
    float_0 = -2869.0
    node_6 = module_0.Node(float_0)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    var_11 = linked_list_3.size()
    assert var_11 == 0

def test_case_1219():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = True
    linked_list_2 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.display()
    assert var_2 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_3 = linked_list_2.size()
    assert var_3 == 1
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList(linked_list_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    list_0 = []
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_1220():
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(node_3)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_6 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_8.remove(none_type_2)
    var_6 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_8 = module_0.Node(node_7, var_5)
    node_9 = module_0.Node(linked_list_8)
    str_2 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.push(linked_list_10)
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    var_9 = linked_list_11.display()
    assert var_9 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_10 = linked_list_12.display()
    assert var_10 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_11 = linked_list_13.push(linked_list_12)
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_14 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_14.remove(none_type_4)
    var_13 = linked_list_14.display()
    none_type_5 = None
    node_11 = module_0.Node(none_type_5)
    node_12 = module_0.Node(var_13)
    node_13 = module_0.Node(str_2)

def test_case_1221():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_0)
    var_4 = linked_list_2.remove(linked_list_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    var_5 = linked_list_2.display()

def test_case_1222():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0

def test_case_1223():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_1 = module_0.Node(var_5)
    assert node_1.data == 0
    var_6 = linked_list_7.push(none_type_2)
    var_7 = linked_list_7.pop()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    var_11 = linked_list_8.search(var_10)
    var_12 = linked_list_9.search(linked_list_0)

def test_case_1224():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    linked_list_5 = module_0.LinkedList()
    var_4 = linked_list_5.remove(node_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.size()
    assert var_6 == 0
    str_0 = '8gF^Uhhbr$c}'
    linked_list_7 = module_0.LinkedList()
    var_7 = linked_list_7.search(str_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    linked_list_10 = module_0.LinkedList()
    var_8 = linked_list_10.search(linked_list_10)
    linked_list_11 = module_0.LinkedList()

def test_case_1225():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    bytes_0 = b'\xa5[%<'
    node_1 = module_0.Node(bytes_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == 0
    var_3 = linked_list_3.push(none_type_0)
    var_4 = linked_list_3.pop()
    assert linked_list_3.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    node_4 = module_0.Node(linked_list_5)
    var_7 = linked_list_4.search(var_5)
    var_8 = linked_list_5.search(node_4)
    var_9 = linked_list_4.size()
    assert var_9 == 1

def test_case_1226():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    list_0 = []
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(list_0)
    str_0 = 'EU%1@v\x0b'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(float_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    var_4 = linked_list_3.display()
    assert var_4 == '(-2869.0)'
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_0 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.push(int_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_1227():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.search(node_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_4 = module_0.LinkedList(bool_0)
    assert linked_list_4.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(none_type_2, linked_list_5)
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    float_0 = -2869.0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(float_0)
    bool_1 = False
    set_0 = {bool_1}
    node_5 = module_0.Node(set_0)
    int_0 = -2297
    var_5 = linked_list_6.search(int_0)
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    linked_list_8 = module_0.LinkedList(linked_list_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    str_2 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.display()
    assert var_6 == ')'
    str_3 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(linked_list_9)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    none_type_4 = None
    linked_list_13 = module_0.LinkedList(none_type_4)
    assert linked_list_13.head is None
    var_8 = linked_list_13.push(linked_list_13)
    var_9 = linked_list_13.pop()
    assert linked_list_13.head is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList4.LinkedList'
    assert var_9.head is None
    var_10 = linked_list_3.push(linked_list_2)

def test_case_1228():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_5.push(none_type_1)
    var_4 = linked_list_3.push(linked_list_3)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(linked_list_7)
    var_6 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList4.LinkedList'
    assert var_6.head is None
    node_2 = module_0.Node(none_type_2, var_5)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_5 = module_0.Node(var_8)
    assert node_5.data == 0
    var_9 = linked_list_12.display()
    assert var_9 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_14 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_14.remove(none_type_6)
    none_type_7 = None
    linked_list_15 = module_0.LinkedList(none_type_7)
    assert linked_list_15.head is None
    var_11 = linked_list_15.size()
    assert var_11 == 0
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    var_12 = linked_list_16.push(var_11)
    none_type_8 = None
    linked_list_17 = module_0.LinkedList(none_type_8)
    assert linked_list_17.head is None
    str_1 = '3$;;z6n'
    linked_list_18 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_18.head).__module__}.{type(linked_list_18.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_17.display()
    assert var_13 == ')'
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    var_14 = linked_list_17.display()
    assert var_14 == ')'
    var_15 = linked_list_4.remove(linked_list_4)

def test_case_1229():
    list_0 = []
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(list_0)
    var_1 = linked_list_0.push(linked_list_0)

def test_case_1230():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_1 = module_0.Node(linked_list_4)
    var_5 = linked_list_3.size()
    assert var_5 == 1
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_2)
    var_7 = linked_list_5.display()
    var_8 = linked_list_5.display()
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_6.display()
    assert var_9 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    node_5 = module_0.Node(none_type_0)

def test_case_1231():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    var_4 = linked_list_3.size()
    assert var_4 == 1
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_1)
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    var_7 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.Node'
    assert var_7.data is None
    assert var_7.next is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_1)
    var_8 = linked_list_7.remove(none_type_2)
    var_9 = linked_list_7.display()
    node_2 = module_0.Node(var_9, linked_list_7)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    var_10 = linked_list_8.size()
    assert var_10 == 0
    linked_list_9 = module_0.LinkedList()
    none_type_4 = None
    linked_list_10 = module_0.LinkedList()
    var_11 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(var_11)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList(node_3)
    var_12 = linked_list_12.remove(none_type_5)
    linked_list_13 = module_0.LinkedList(none_type_5)
    var_13 = linked_list_12.display()
    node_4 = module_0.Node(linked_list_13)
    node_5 = module_0.Node(linked_list_12)
    node_6 = module_0.Node(node_4)
    float_0 = -2869.0
    linked_list_14 = module_0.LinkedList()
    var_14 = linked_list_14.push(float_0)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_15 = module_0.LinkedList(node_7)
    var_15 = linked_list_15.remove(none_type_6)
    var_16 = linked_list_15.push(none_type_6)
    linked_list_16 = module_0.LinkedList()

def test_case_1232():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    list_0 = []
    var_2 = linked_list_2.push(list_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    list_1 = []
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(list_1)
    var_4 = linked_list_3.push(linked_list_3)
    var_5 = linked_list_3.push(linked_list_0)

def test_case_1233():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(node_0)

def test_case_1234():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(int_0)
    var_3 = linked_list_1.size()
    assert var_3 == 1
    node_1 = module_0.Node(var_3, var_3)
    assert node_1.data == 1
    assert node_1.next == 1
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_2.push(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_2.push(linked_list_3)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_4)
    node_4 = module_0.Node(none_type_4, linked_list_10)
    float_1 = -2122.54
    node_5 = module_0.Node(float_1)
    float_2 = -2869.0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.push(float_2)
    bool_0 = False
    set_0 = {bool_0}
    node_6 = module_0.Node(set_0)
    int_1 = -2297
    var_11 = linked_list_11.search(int_1)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_1235():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(bool_0)

def test_case_1236():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_0 = module_0.LinkedList(none_type_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0

def test_case_1237():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(var_4)

def test_case_1238():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.size()
    assert var_2 == 0
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    var_7 = linked_list_4.search(var_6)
    none_type_7 = None
    node_2 = module_0.Node(none_type_7)
    linked_list_7 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_7)
    none_type_8 = None
    linked_list_8 = module_0.LinkedList(none_type_8)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_9 = None
    linked_list_10 = module_0.LinkedList(none_type_9)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_8.display()
    assert var_11 == ')'

def test_case_1239():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(var_3)

def test_case_1240():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'

def test_case_1241():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    var_5 = linked_list_1.search(var_4)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_4.display()
    assert var_8 == ')'
    none_type_6 = None
    node_1 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_6)
    none_type_7 = None
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_1242():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    var_5 = linked_list_1.search(var_4)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_4)
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_7 = None
    node_2 = module_0.Node(none_type_7)
    none_type_8 = None
    node_3 = module_0.Node(none_type_8)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_8)
    none_type_9 = None
    linked_list_10 = module_0.LinkedList(none_type_9)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_10 = None
    linked_list_12 = module_0.LinkedList(none_type_10)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    var_12 = linked_list_10.display()
    assert var_12 == ')'

def test_case_1243():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.size()
    assert var_5 == 0

def test_case_1244():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    var_7 = linked_list_4.search(var_6)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    none_type_8 = None
    linked_list_10 = module_0.LinkedList(none_type_8)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_9 = None
    linked_list_12 = module_0.LinkedList(none_type_9)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    none_type_10 = None
    node_3 = module_0.Node(none_type_10)
    var_13 = linked_list_8.display()
    assert var_13 == ')'

def test_case_1245():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.size()
    assert var_2 == 0
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_4)
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(linked_list_3)

def test_case_1246():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_4.search(var_3)

def test_case_1247():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    var_5 = linked_list_2.search(var_4)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_5)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)

def test_case_1248():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_9 = linked_list_11.size()
    assert var_9 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_8 = None
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_10 = linked_list_13.size()
    assert var_10 == 0
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    var_12 = linked_list_11.search(var_11)
    none_type_9 = None
    node_4 = module_0.Node(none_type_9)
    none_type_10 = None
    linked_list_14 = module_0.LinkedList(none_type_10)
    assert linked_list_14.head is None
    var_13 = linked_list_14.size()
    assert var_13 == 0
    var_14 = linked_list_14.size()
    assert var_14 == 0
    none_type_11 = None
    node_5 = module_0.Node(none_type_11)

def test_case_1249():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'

def test_case_1250():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.size()
    assert var_5 == 0
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_6 = None
    node_2 = module_0.Node(none_type_6)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_6)
    none_type_7 = None
    linked_list_7 = module_0.LinkedList(none_type_7)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    none_type_8 = None
    linked_list_8 = module_0.LinkedList(none_type_8)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_9 = None
    linked_list_10 = module_0.LinkedList(none_type_9)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_8.display()
    assert var_11 == ')'
    none_type_10 = None
    node_3 = module_0.Node(none_type_10)
    linked_list_11 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_11.remove(none_type_10)
    linked_list_12 = module_0.LinkedList(none_type_10)
    assert linked_list_12.head is None
    bool_0 = True
    node_4 = module_0.Node(bool_0)

def test_case_1251():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_5)
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    var_10 = linked_list_7.search(var_9)
    none_type_8 = None
    node_3 = module_0.Node(none_type_8)
    linked_list_10 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_8)
    none_type_9 = None
    linked_list_11 = module_0.LinkedList(none_type_9)
    assert linked_list_11.head is None
    var_12 = linked_list_11.size()
    assert var_12 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_1252():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_5)
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_7 = None
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    none_type_8 = None
    linked_list_9 = module_0.LinkedList(none_type_8)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    none_type_9 = None
    linked_list_10 = module_0.LinkedList(none_type_9)
    assert linked_list_10.head is None
    var_12 = linked_list_10.size()
    assert var_12 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_10 = None
    linked_list_12 = module_0.LinkedList(none_type_10)
    assert linked_list_12.head is None
    var_13 = linked_list_12.size()
    assert var_13 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_11 = None
    linked_list_14 = module_0.LinkedList(none_type_11)
    assert linked_list_14.head is None
    var_14 = linked_list_14.size()
    assert var_14 == 0
    var_15 = linked_list_12.display()
    assert var_15 == ')'
    var_16 = linked_list_12.search(var_15)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_12 = None
    node_5 = module_0.Node(none_type_12)
    linked_list_15 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_17 = linked_list_15.remove(none_type_12)

def test_case_1253():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0

def test_case_1254():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(var_5)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    none_type_8 = None
    node_3 = module_0.Node(none_type_8)
    linked_list_13 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_13.remove(none_type_8)
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    var_14 = linked_list_13.display()
    none_type_9 = None
    node_4 = module_0.Node(none_type_9)
    none_type_10 = None
    linked_list_15 = module_0.LinkedList(none_type_10)
    assert linked_list_15.head is None
    var_15 = linked_list_15.size()
    assert var_15 == 0
    var_16 = linked_list_15.size()
    assert var_16 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)

def test_case_1255():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(var_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    node_6 = module_0.Node(node_5)

def test_case_1256():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    var_9 = linked_list_7.search(var_8)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    none_type_7 = None
    node_4 = module_0.Node(none_type_7)
    linked_list_11 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_11.remove(none_type_7)
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_13 = linked_list_11.display()

def test_case_1257():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_9 = linked_list_11.size()
    assert var_9 == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    var_11 = linked_list_9.search(var_10)
    none_type_8 = None
    node_4 = module_0.Node(none_type_8)
    linked_list_12 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.remove(none_type_8)
    none_type_9 = None
    linked_list_13 = module_0.LinkedList(none_type_9)
    assert linked_list_13.head is None
    var_13 = linked_list_13.size()
    assert var_13 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_14 = linked_list_14.push(var_13)

def test_case_1258():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0

def test_case_1259():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)

def test_case_1260():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.size()
    assert var_4 == 0
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_3.display()
    assert var_7 == ')'
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_6)
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)

def test_case_1261():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_6)
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    none_type_9 = None
    node_5 = module_0.Node(none_type_9)
    linked_list_12 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_9)
    none_type_10 = None
    linked_list_13 = module_0.LinkedList(none_type_10)
    assert linked_list_13.head is None
    var_12 = linked_list_13.size()
    assert var_12 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_13 = linked_list_14.push(var_12)

def test_case_1262():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0

def test_case_1263():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    int_0 = -1440

def test_case_1264():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    var_7 = linked_list_5.search(var_6)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    none_type_7 = None
    node_3 = module_0.Node(none_type_7)
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    var_12 = linked_list_11.size()
    assert var_12 == 0
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_9 = None
    node_5 = module_0.Node(none_type_9)
    linked_list_12 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_12.remove(none_type_9)
    linked_list_13 = module_0.LinkedList(none_type_9)
    assert linked_list_13.head is None
    var_14 = linked_list_13.display()
    assert var_14 == ')'
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_10 = None
    linked_list_14 = module_0.LinkedList(none_type_10)
    assert linked_list_14.head is None
    var_15 = linked_list_14.size()
    assert var_15 == 0
    var_16 = linked_list_14.display()
    assert var_16 == ')'
    var_17 = linked_list_14.search(none_type_10)

def test_case_1265():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'

def test_case_1266():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_0 = module_0.LinkedList(none_type_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_1 = module_0.LinkedList(none_type_3)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_2.remove(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_3.remove(none_type_5)
    none_type_6 = None
    linked_list_4 = module_0.LinkedList(none_type_6)
    assert linked_list_4.head is None
    var_7 = linked_list_4.size()
    assert var_7 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.push(var_7)
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_6.remove(none_type_7)
    linked_list_7 = module_0.LinkedList(none_type_7)
    assert linked_list_7.head is None
    none_type_8 = None
    node_7 = module_0.Node(none_type_8)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(none_type_8)
    linked_list_9 = module_0.LinkedList(none_type_8)
    assert linked_list_9.head is None
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    with pytest.raises(IndexError):
        linked_list_4.pop()

def test_case_1267():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    var_8 = linked_list_5.search(var_7)
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    node_4 = module_0.Node(node_3)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    none_type_7 = None
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    var_10 = linked_list_8.size()
    assert var_10 == 0
    none_type_8 = None
    node_6 = module_0.Node(none_type_8)

def test_case_1268():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_3)
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_5)

def test_case_1269():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(complex_0)

def test_case_1270():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'

def test_case_1271():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_6.display()
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    with pytest.raises(IndexError):
        linked_list_5.pop()

def test_case_1272():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'

def test_case_1273():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_7.display()
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 0
    var_11 = linked_list_12.display()
    assert var_11 == ')'
    var_12 = linked_list_12.search(none_type_7)
    none_type_8 = None
    node_6 = module_0.Node(none_type_8)
    linked_list_13 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_13.remove(none_type_8)
    none_type_9 = None
    linked_list_14 = module_0.LinkedList(none_type_9)
    assert linked_list_14.head is None
    var_14 = linked_list_14.size()
    assert var_14 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_15 = linked_list_15.push(var_14)
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)

def test_case_1274():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    object_0 = module_1.object()
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)

def test_case_1275():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_1 = module_0.Node(var_4)
    assert node_1.data == 0
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_9 = linked_list_11.display()
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_10 = linked_list_13.size()
    assert var_10 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    none_type_8 = None
    linked_list_15 = module_0.LinkedList(none_type_8)
    assert linked_list_15.head is None
    var_11 = linked_list_15.size()
    assert var_11 == 0
    var_12 = linked_list_13.display()
    assert var_12 == ')'
    var_13 = linked_list_13.search(var_12)
    none_type_9 = None
    node_5 = module_0.Node(none_type_9)
    linked_list_16 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_16.remove(none_type_9)
    none_type_10 = None
    linked_list_17 = module_0.LinkedList(none_type_10)
    assert linked_list_17.head is None
    var_15 = linked_list_17.size()
    assert var_15 == 0
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None
    none_type_11 = None
    linked_list_19 = module_0.LinkedList(none_type_11)
    assert linked_list_19.head is None
    var_16 = linked_list_19.size()
    assert var_16 == 0
    var_17 = linked_list_17.display()
    assert var_17 == ')'

def test_case_1276():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    var_8 = linked_list_5.search(var_7)
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    str_0 = 'JLcd4+\n\\'

def test_case_1277():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1278():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'

def test_case_1279():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_4)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.push(var_7)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    var_12 = linked_list_10.search(var_11)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_8 = None
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_13 = linked_list_13.size()
    assert var_13 == 0
    var_14 = linked_list_13.display()
    assert var_14 == ')'
    var_15 = linked_list_13.search(none_type_8)
    none_type_9 = None
    linked_list_14 = module_0.LinkedList(none_type_9)
    assert linked_list_14.head is None
    var_16 = linked_list_14.size()
    assert var_16 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    none_type_10 = None
    node_6 = module_0.Node(none_type_10)
    none_type_11 = None
    linked_list_16 = module_0.LinkedList(none_type_11)
    assert linked_list_16.head is None
    var_17 = linked_list_16.size()
    assert var_17 == 0
    var_18 = linked_list_16.size()
    assert var_18 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    node_8 = module_0.Node(node_7)
    with pytest.raises(IndexError):
        linked_list_15.pop()

def test_case_1280():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.size()
    assert var_3 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_7 = linked_list_4.size()
    assert var_7 == 0

def test_case_1281():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    var_4 = linked_list_3.search(none_type_3)
    set_0 = set()
    var_5 = linked_list_2.display()
    assert var_5 == ')'

def test_case_1282():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.size()
    assert var_6 == 0

def test_case_1283():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_1284():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    var_6 = linked_list_5.search(var_5)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    var_9 = linked_list_8.search(none_type_6)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(bool_0)
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_7)
    none_type_8 = None
    linked_list_10 = module_0.LinkedList(none_type_8)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.push(var_11)

def test_case_1285():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList4.Node'
    assert var_0.data is True
    assert var_0.next is None

def test_case_1286():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0

def test_case_1287():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(var_3)
    assert node_3.data == 0
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    node_5 = module_0.Node(node_4)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'

def test_case_1288():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    var_8 = linked_list_4.search(var_7)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_7 = None
    linked_list_7 = module_0.LinkedList(none_type_7)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_5 = module_0.Node(var_9)
    assert node_5.data == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    none_type_8 = None
    node_6 = module_0.Node(none_type_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.remove(none_type_8)
    none_type_9 = None
    node_7 = module_0.Node(none_type_9)
    linked_list_10 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_10.remove(none_type_9)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    none_type_10 = None
    linked_list_11 = module_0.LinkedList(none_type_10)
    assert linked_list_11.head is None
    var_13 = linked_list_11.size()
    assert var_13 == 0
    var_14 = linked_list_11.display()
    assert var_14 == ')'
    var_15 = linked_list_11.search(none_type_10)
    bool_1 = True
    node_9 = module_0.Node(bool_1)

def test_case_1289():
    float_0 = 993.73
    int_0 = 2167
    tuple_0 = (float_0, int_0, int_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(tuple_0)

def test_case_1290():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    var_10 = linked_list_8.search(var_9)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_8 = None
    node_3 = module_0.Node(none_type_8)
    linked_list_11 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_8)
    linked_list_12 = module_0.LinkedList(none_type_8)
    assert linked_list_12.head is None
    var_12 = linked_list_11.display()
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    node_5 = module_0.Node(node_4)

def test_case_1291():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(var_5)
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    node_6 = module_0.Node(node_5)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.remove(none_type_7)

def test_case_1292():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    var_5 = linked_list_2.search(var_4)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'

def test_case_1293():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    node_7 = module_0.Node(node_6)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.remove(none_type_5)
    complex_1 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_1)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    var_10 = linked_list_9.search(none_type_6)

def test_case_1294():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_1295():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.size()
    assert var_7 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_1)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_5)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.push(var_9)
    complex_2 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_2)
    node_7 = module_0.Node(node_6)

def test_case_1296():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)

def test_case_1297():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_4 = module_0.Node(linked_list_4)
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_6 = module_0.Node(var_4)
    assert node_6.data == 0
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(var_6)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_11 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.remove(none_type_7)
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_9 = linked_list_12.display()
    assert var_9 == ')'

def test_case_1298():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    var_3 = linked_list_2.search(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_2)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_5)
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()

def test_case_1299():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    var_8 = linked_list_6.search(none_type_4)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    list_0 = [none_type_4, var_9, linked_list_1]

def test_case_1300():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(var_5)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_7)
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    node_6 = module_0.Node(linked_list_9)

def test_case_1301():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)

def test_case_1302():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_4.display()
    assert var_8 == ')'
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    var_10 = linked_list_7.size()
    assert var_10 == 0
    none_type_7 = None
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    var_11 = linked_list_8.size()
    assert var_11 == 0
    var_12 = linked_list_8.display()
    assert var_12 == ')'
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_9.remove(none_type_8)
    linked_list_10 = module_0.LinkedList(none_type_8)
    assert linked_list_10.head is None
    var_14 = linked_list_10.display()
    assert var_14 == ')'
    with pytest.raises(IndexError):
        linked_list_3.pop()

def test_case_1303():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_2 = module_0.Node(var_4)
    assert node_2.data == 0
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_5 = module_0.Node(var_7)
    assert node_5.data == 0
    var_8 = linked_list_10.display()
    assert var_8 == ')'
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_9 = linked_list_11.size()
    assert var_9 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_8 = None
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_10 = linked_list_13.size()
    assert var_10 == 0
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    var_12 = linked_list_11.search(var_11)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    none_type_9 = None
    linked_list_14 = module_0.LinkedList(none_type_9)
    assert linked_list_14.head is None
    var_13 = linked_list_14.size()
    assert var_13 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    node_8 = module_0.Node(var_13)
    assert node_8.data == 0
    var_14 = linked_list_15.display()
    assert var_14 == ')'
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None

def test_case_1304():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(none_type_2)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_4 = module_0.Node(list_1)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_6 = module_0.Node(var_6)
    assert node_6.data == 0
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_8 = module_0.Node(var_7)
    assert node_8.data == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    none_type_7 = None
    node_10 = module_0.Node(none_type_7)
    var_11 = linked_list_8.push(none_type_4)

def test_case_1305():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)

def test_case_1306():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)

def test_case_1307():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0

def test_case_1308():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_1309():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(var_3)
    assert node_3.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_3)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    var_8 = linked_list_7.search(none_type_4)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(bool_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_0)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_9 = module_0.Node(list_1)
    node_10 = module_0.Node(node_9, list_1)

def test_case_1310():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(var_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    node_4 = module_0.Node(linked_list_7)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    none_type_8 = None
    node_6 = module_0.Node(none_type_8)
    linked_list_12 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.remove(none_type_8)
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_11 = linked_list_13.display()
    assert var_11 == ')'
    none_type_9 = None
    linked_list_14 = module_0.LinkedList(none_type_9)
    assert linked_list_14.head is None
    var_12 = linked_list_14.size()
    assert var_12 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    node_7 = module_0.Node(var_12)
    assert node_7.data == 0
    bool_0 = True
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(bool_0)

def test_case_1311():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1312():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)

def test_case_1313():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_3 = module_0.Node(var_1)
    assert node_3.data == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(var_5)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_7 = module_0.Node(list_1)
    var_7 = linked_list_2.size()
    assert var_7 == 0

def test_case_1314():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    var_7 = linked_list_5.search(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(var_8)
    assert node_4.data == 0
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.search(int_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_1315():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'

def test_case_1316():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(var_5)
    assert node_2.data == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(var_7)
    assert node_4.data == 0
    int_1 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.search(int_1)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_6 = module_0.Node(linked_list_9, linked_list_8)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None

def test_case_1317():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1318():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_0)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_1 = module_0.Node(linked_list_4, linked_list_3)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.remove(none_type_4)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(node_8, list_0)

def test_case_1319():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_4 = module_0.Node(var_9)
    assert node_4.data == 0

def test_case_1320():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    var_5 = linked_list_4.search(var_4)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.size()
    assert var_7 == 0
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'

def test_case_1321():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_4 = module_0.Node(var_0)
    assert node_4.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1322():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(var_4)
    assert node_2.data == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    linked_list_12 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_8)
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_12 = linked_list_12.display()

def test_case_1323():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_3)
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_6)
    var_7 = linked_list_8.display()

def test_case_1324():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)

def test_case_1325():
    pass

def test_case_1326():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(var_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1327():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1328():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    var_5 = linked_list_2.search(var_4)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    var_11 = linked_list_8.search(none_type_5)

def test_case_1329():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    node_5 = module_0.Node(linked_list_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'

def test_case_1330():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(linked_list_2, linked_list_1)

def test_case_1331():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    var_5 = linked_list_4.search(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    var_7 = linked_list_5.display()

def test_case_1332():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.search(int_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.size()
    assert var_8 == 0

def test_case_1333():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.display()

def test_case_1334():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)

def test_case_1335():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(var_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    int_1 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(int_1)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.size()
    assert var_7 == 0
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    var_11 = linked_list_8.search(var_10)
    none_type_8 = None
    node_8 = module_0.Node(none_type_8)
    linked_list_11 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_11.remove(none_type_8)
    linked_list_12 = module_0.LinkedList(none_type_8)
    assert linked_list_12.head is None
    var_13 = linked_list_11.display()
    node_9 = module_0.Node(linked_list_12)
    none_type_9 = None
    linked_list_13 = module_0.LinkedList(none_type_9)
    assert linked_list_13.head is None
    var_14 = linked_list_13.size()
    assert var_14 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_0)
    node_11 = module_0.Node(node_10)

def test_case_1336():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)

def test_case_1337():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(var_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_6)
    var_8 = linked_list_7.remove(linked_list_7)

def test_case_1338():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)

def test_case_1339():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.remove(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_8 = linked_list_5.size()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(var_8)
    assert node_3.data == 0
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_6)
    var_10 = linked_list_7.remove(linked_list_7)
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    none_type_8 = None
    linked_list_8 = module_0.LinkedList(none_type_8)
    assert linked_list_8.head is None
    var_11 = linked_list_8.size()
    assert var_11 == 0
    var_12 = linked_list_8.size()
    assert var_12 == 0
    none_type_9 = None
    node_6 = module_0.Node(none_type_9)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_9.remove(none_type_9)

def test_case_1340():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()

def test_case_1341():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.search(int_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_1)
    node_7 = module_0.Node(node_6, list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(var_3)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'

def test_case_1342():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_7 = module_0.Node(var_7)
    assert node_7.data == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_9 = module_0.Node(var_9)
    assert node_9.data == 0
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_11.display()
    assert var_11 == ')'

def test_case_1343():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.push(var_4)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_7 = linked_list_4.display()
    node_7 = module_0.Node(linked_list_5)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_4)
    var_9 = linked_list_6.remove(linked_list_6)

def test_case_1344():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(var_4)
    assert node_4.data == 0
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_7 = module_0.Node(var_6)
    assert node_7.data == 0
    var_7 = linked_list_10.display()
    assert var_7 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_8 = linked_list_12.size()
    assert var_8 == 0
    var_9 = linked_list_12.display()
    assert var_9 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    str_1 = ')'

def test_case_1345():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(var_2)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    var_6 = linked_list_5.search(none_type_3)

def test_case_1346():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1347():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_4 = module_0.Node(linked_list_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(node_7, list_1)
    bool_0 = True
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(bool_0)
    none_type_4 = None
    node_11 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_7 = linked_list_9.display()
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_2, dict_2, str_2, dict_2]
    node_12 = module_0.Node(list_2)
    with pytest.raises(IndexError):
        linked_list_5.pop()

def test_case_1348():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'

def test_case_1349():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_11 = linked_list_10.display()
    assert var_11 == ')'

def test_case_1350():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    var_6 = linked_list_2.search(var_5)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_3 = module_0.Node(var_9)
    assert node_3.data == 0
    var_10 = linked_list_10.display()
    assert var_10 == ')'

def test_case_1351():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.search(int_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)

def test_case_1352():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(var_0)
    assert node_3.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    node_8 = module_0.Node(node_6, dict_0)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_1353():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    var_2 = linked_list_0.remove(var_0)

def test_case_1354():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_4)
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    var_9 = linked_list_6.search(var_8)
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_8 = None
    node_3 = module_0.Node(none_type_8)
    linked_list_11 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_11.remove(none_type_8)
    var_13 = linked_list_11.remove(linked_list_11)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_14 = linked_list_12.display()
    assert var_14 == ')'
    none_type_9 = None
    linked_list_13 = module_0.LinkedList(none_type_9)
    assert linked_list_13.head is None
    var_15 = linked_list_13.size()
    assert var_15 == 0
    var_16 = linked_list_13.display()
    assert var_16 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_17 = linked_list_14.display()
    assert var_17 == ')'
    none_type_10 = None
    node_4 = module_0.Node(none_type_10)
    linked_list_15 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_18 = linked_list_15.remove(none_type_10)
    linked_list_16 = module_0.LinkedList(none_type_10)
    assert linked_list_16.head is None
    var_19 = linked_list_15.display()

def test_case_1355():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.search(int_0)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_1 = module_0.Node(linked_list_3, linked_list_2)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_1356():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(var_3)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(var_6)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.remove(none_type_5)
    var_11 = linked_list_9.search(node_7)
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_2, dict_2, str_2, dict_2]
    node_8 = module_0.Node(list_2)
    node_9 = module_0.Node(node_8, list_2)
    node_10 = module_0.Node(node_8, dict_2)

def test_case_1357():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    var_6 = linked_list_2.search(var_5)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    var_8 = linked_list_5.size()
    assert var_8 == 0
    none_type_6 = None
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_9 = linked_list_6.size()
    assert var_9 == 0
    var_10 = linked_list_6.display()
    assert var_10 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_8.remove(none_type_7)
    var_12 = linked_list_8.display()
    none_type_8 = None
    node_7 = module_0.Node(none_type_8)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_9.remove(none_type_8)
    linked_list_10 = module_0.LinkedList(none_type_8)
    assert linked_list_10.head is None
    var_14 = linked_list_10.display()
    assert var_14 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    list_1 = [linked_list_8, linked_list_11, linked_list_8, none_type_1]

def test_case_1358():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_4 = module_0.Node(var_2)
    assert node_4.data == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_3)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.remove(none_type_4)
    var_6 = linked_list_5.search(node_8)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_5)
    var_8 = linked_list_6.display()
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_11 = module_0.Node(var_9)
    assert node_11.data == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    with pytest.raises(IndexError):
        linked_list_7.pop()

def test_case_1359():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(linked_list_2, linked_list_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    int_1 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(int_1)

def test_case_1360():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(node_2, list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    var_7 = linked_list_4.search(none_type_3)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.search(int_0)

def test_case_1361():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(var_0)
    assert node_3.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_6.search(int_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_2)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_5 = module_0.Node(linked_list_7, linked_list_6)
    int_1 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_5 = linked_list_9.search(int_1)
    int_2 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_6 = linked_list_10.push(int_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_11 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_11.remove(none_type_3)
    linked_list_12 = module_0.LinkedList(none_type_3)
    assert linked_list_12.head is None
    var_8 = linked_list_11.display()

def test_case_1362():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_5 = linked_list_2.size()
    assert var_5 == 0
    var_6 = linked_list_2.display()
    assert var_6 == ')'
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_7 = linked_list_3.size()
    assert var_7 == 0
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_4.remove(none_type_6)
    linked_list_5 = module_0.LinkedList(none_type_6)
    assert linked_list_5.head is None
    var_9 = linked_list_4.display()

def test_case_1363():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.size()
    assert var_3 == 0
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(var_5)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_5)
    var_8 = linked_list_6.remove(linked_list_6)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    none_type_7 = None
    linked_list_7 = module_0.LinkedList(none_type_7)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    node_7 = module_0.Node(node_5, dict_0)

def test_case_1364():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    none_type_3 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_7 = module_0.Node(list_1)

def test_case_1365():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(int_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.remove(none_type_2)

def test_case_1366():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_1367():
    complex_0 = -2363.678516 + 1356.37j
    none_type_0 = None
    bytes_0 = b'\xe2\xbd\x96f\x91\xa7\xad\xc3j\x98\xd9&\x1b\xbd'
    int_0 = -4929
    bytes_1 = b'\x11[\x98\t"\xbf'
    tuple_0 = (bytes_0, int_0, bytes_1)
    list_0 = [tuple_0, tuple_0]
    linked_list_0 = module_0.LinkedList(list_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)

def test_case_1368():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.size()
    assert var_3 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.search(int_0)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_6 = module_0.Node(linked_list_9, linked_list_8)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.remove(none_type_6)
    var_9 = linked_list_11.remove(linked_list_11)
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_8 = module_0.Node(list_1)
    node_9 = module_0.Node(node_8, list_1)
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_2, dict_2, str_2, dict_2]
    node_10 = module_0.Node(list_2)
    node_11 = module_0.Node(node_10, list_2)
    node_12 = module_0.Node(node_10, dict_2)

def test_case_1369():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    var_8 = linked_list_4.search(var_7)
    with pytest.raises(IndexError):
        linked_list_3.pop()

def test_case_1370():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_5 = linked_list_2.remove(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_3.remove(none_type_3)
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_7 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_8 = linked_list_5.size()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    var_10 = linked_list_5.display()
    assert var_10 == ')'
    var_11 = linked_list_5.search(var_10)

def test_case_1371():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_2)
    var_2 = linked_list_1.push(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_3)
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_4)
    var_6 = linked_list_4.display()
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.remove(none_type_5)
    var_8 = linked_list_5.search(node_6)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_6.remove(none_type_6)
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_10 = linked_list_6.display()
    node_8 = module_0.Node(linked_list_7)
    bool_0 = True
    node_9 = module_0.Node(bool_0)
    none_type_7 = None
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    var_11 = linked_list_8.size()
    assert var_11 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_10 = module_0.Node(var_11)
    assert node_10.data == 0
    var_12 = linked_list_9.display()
    assert var_12 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    var_13 = linked_list_11.size()
    assert var_13 == 0
    var_14 = linked_list_11.display()
    assert var_14 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_1372():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'

def test_case_1373():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(var_5)
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.search(int_0)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_9 = linked_list_7.display()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_3 = module_0.Node(var_10)
    assert node_3.data == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_13.remove(none_type_6)
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    var_13 = linked_list_14.display()
    assert var_13 == ')'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_7 = None
    linked_list_15 = module_0.LinkedList(none_type_7)
    assert linked_list_15.head is None
    var_14 = linked_list_15.size()
    assert var_14 == 0
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    node_6 = module_0.Node(var_14)
    assert node_6.data == 0
    var_15 = linked_list_16.display()
    assert var_15 == ')'
    none_type_8 = None
    node_7 = module_0.Node(none_type_8)
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None

def test_case_1374():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)

def test_case_1375():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    node_1 = module_0.Node(linked_list_4)
    var_6 = linked_list_3.search(var_4)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_3)
    var_8 = linked_list_5.display()
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_6.remove(none_type_4)
    var_10 = linked_list_6.search(node_3)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_11 = linked_list_7.size()
    assert var_11 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_5 = module_0.Node(var_11)
    assert node_5.data == 0
    var_12 = linked_list_8.display()
    assert var_12 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_13 = linked_list_10.size()
    assert var_13 == 0

def test_case_1376():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = 1907.2144
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0

def test_case_1377():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.size()
    assert var_3 == 0
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_2.display()
    assert var_6 == ')'
    var_7 = linked_list_2.search(var_6)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    assert linked_list_5.head is None
    var_8 = linked_list_5.size()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_6 = module_0.Node(var_8)
    assert node_6.data == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    node_8 = module_0.Node(node_7)
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_10 = linked_list_7.size()
    assert var_10 == 0
    var_11 = linked_list_7.display()
    assert var_11 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_12 = linked_list_9.display()
    assert var_12 == ')'

def test_case_1378():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_4)
    assert node_2.data == 0
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    node_4 = module_0.Node(linked_list_5)
    var_7 = linked_list_4.search(var_5)
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_8 = linked_list_6.remove(none_type_4)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_1379():
    bool_0 = False
    node_0 = module_0.Node(bool_0, bool_0)
    bytes_0 = b'\xbai2I\xcc'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0

def test_case_1380():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_2)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.search(int_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(linked_list_5, linked_list_4)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_5)
    var_6 = linked_list_7.remove(linked_list_7)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    linked_list_10 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_7)
    var_9 = linked_list_10.push(none_type_7)

def test_case_1381():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_1)
    var_1 = linked_list_0.search(node_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.display()
    assert var_6 == ')'

def test_case_1382():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_3)
    var_3 = linked_list_2.display()
    var_4 = linked_list_2.display()
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_4)
    var_6 = linked_list_3.display()
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_7 = linked_list_4.size()
    assert var_7 == 0
    var_8 = linked_list_4.display()
    assert var_8 == ')'
    var_9 = linked_list_4.search(none_type_5)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_5.remove(none_type_6)
    linked_list_6 = module_0.LinkedList(none_type_6)
    assert linked_list_6.head is None
    var_11 = linked_list_5.display()
    node_6 = module_0.Node(linked_list_6)

def test_case_1383():
    bytes_0 = b'\xa9(Q6\x9c\x05\xac>\x13*\x07'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1384():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'

def test_case_1385():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)

def test_case_1386():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)

def test_case_1387():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_4 = module_0.Node(var_2)
    assert node_4.data == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.search(int_0)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_7 = module_0.Node(linked_list_9, linked_list_8)
    var_8 = linked_list_10.size()
    assert var_8 == 0

def test_case_1388():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)

def test_case_1389():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(none_type_0)

def test_case_1390():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    node_4 = module_0.Node(linked_list_3)
    var_5 = linked_list_2.search(var_3)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_6 = module_0.Node(var_6)
    assert node_6.data == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)
    node_9 = module_0.Node(node_7, dict_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.search(int_0)

def test_case_1391():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == 0
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.search(int_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(linked_list_5, linked_list_4)

def test_case_1392():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(int_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.remove(none_type_4)
    var_10 = linked_list_8.search(node_5)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_1)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_1393():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.size()
    assert var_5 == 0
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(var_6)
    assert node_7.data == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.remove(none_type_5)

def test_case_1394():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1395():
    str_0 = ',O$'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '($, O, ,)'

def test_case_1396():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_6 = linked_list_3.size()
    assert var_6 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    var_8 = linked_list_3.display()
    assert var_8 == ')'
    var_9 = linked_list_3.search(var_8)

def test_case_1397():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.search(int_0)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_4 = linked_list_8.size()
    assert var_4 == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    var_6 = linked_list_6.search(var_5)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    var_9 = linked_list_9.search(none_type_4)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.display()
    assert var_12 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_13 = linked_list_12.size()
    assert var_13 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_5 = module_0.Node(var_13)
    assert node_5.data == 0
    var_14 = linked_list_13.display()
    assert var_14 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None

def test_case_1398():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.remove(linked_list_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.remove(none_type_2)

def test_case_1399():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(var_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)

def test_case_1400():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(var_4)
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_5)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.remove(none_type_6)
    var_10 = linked_list_11.display()

def test_case_1401():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_1 = module_0.LinkedList(none_type_3)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.size()
    assert var_2 == 0
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(int_0)
    var_4 = linked_list_1.search(var_0)

def test_case_1402():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    node_5 = module_0.Node(linked_list_4)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_5)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_11.push(var_10)
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_12 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.remove(none_type_7)
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_13 = linked_list_13.display()
    assert var_13 == ')'

def test_case_1403():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.remove(none_type_2)
    var_8 = linked_list_5.search(node_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_9 = linked_list_6.size()
    assert var_9 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_5 = module_0.Node(var_10)
    assert node_5.data == 0
    var_11 = linked_list_7.size()
    assert var_11 == 0

def test_case_1404():
    bytes_0 = b'\xa2`"_?dC'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(bytes_0)

def test_case_1405():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    var_10 = linked_list_6.search(var_9)
    float_0 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.push(float_0)
    int_0 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_12 = linked_list_10.push(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)

def test_case_1406():
    float_0 = -269.0
    node_0 = module_0.Node(float_0, float_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1407():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_5 = module_0.Node(list_1)
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(float_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1408():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(var_4)
    assert linked_list_7.head is None
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_2 = module_0.Node(tuple_1)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.remove(none_type_3)
    bytes_0 = b'_\xf3\x9a\xed\x94\xbc\xd3\\\xabP+\x97\xf4'
    var_6 = linked_list_5.push(bytes_0)

def test_case_1409():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_5 = module_0.Node(list_1)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None

def test_case_1410():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1411():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(var_0)
    assert node_3.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_2 = True
    list_0 = [dict_0]
    list_1 = [bool_2, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_2, list_0, tuple_0)
    node_5 = module_0.Node(tuple_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_6.display()
    node_7 = module_0.Node(linked_list_7)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    none_type_5 = None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.remove(none_type_5)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)

def test_case_1412():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_4 = module_0.Node(var_2)
    assert node_4.data == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)

def test_case_1413():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(linked_list_3, linked_list_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.remove(none_type_2)
    var_4 = linked_list_5.search(node_3)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(bool_0)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_7 = module_0.Node(var_5)
    assert node_7.data == 0
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_4)
    var_8 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_9 = linked_list_11.size()
    assert var_9 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_10 = module_0.Node(var_9)
    assert node_10.data == 0
    var_10 = linked_list_12.display()
    assert var_10 == ')'
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_13.remove(none_type_6)
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    var_12 = linked_list_13.display()
    none_type_7 = None
    node_12 = module_0.Node(none_type_7)
    linked_list_15 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_15.remove(none_type_7)

def test_case_1414():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_0)
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    var_4 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_1415():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    var_4 = linked_list_4.remove(linked_list_4)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.display()
    var_7 = linked_list_5.display()
    float_0 = -2869.0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_8 = linked_list_6.push(float_0)
    int_0 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.push(int_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(node_8, list_0)
    node_10 = module_0.Node(node_8, dict_0)
    int_1 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.search(int_1)

def test_case_1416():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)

def test_case_1417():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(linked_list_6, linked_list_5)

def test_case_1418():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(float_0)
    float_1 = 2634.854
    dict_0 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_1]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_5.display()
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_4)
    var_8 = linked_list_9.remove(linked_list_9)
    with pytest.raises(IndexError):
        linked_list_4.pop()

def test_case_1419():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_3)
    with pytest.raises(IndexError):
        linked_list_3.pop()

def test_case_1420():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(none_type_1)

def test_case_1421():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(var_2)
    assert linked_list_4.head is None
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_3)
    var_4 = linked_list_5.remove(linked_list_5)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_7 = linked_list_11.size()
    assert var_7 == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    var_9 = linked_list_9.search(var_8)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(node_5, list_1)

def test_case_1422():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(var_4)
    assert linked_list_4.head is None

def test_case_1423():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_2 = True
    list_1 = [dict_1]
    list_2 = [bool_2, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_2, list_1, tuple_0)
    node_7 = module_0.Node(tuple_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_7.display()
    assert var_10 == ')'

def test_case_1424():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_5)
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    node_4 = module_0.Node(none_type_6)
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_1425():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    node_7 = module_0.Node(node_5, dict_0)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.search(int_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_9 = module_0.Node(var_4)
    assert node_9.data == 0
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.push(var_7)

def test_case_1426():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_1.display()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.remove(none_type_2)
    var_6 = linked_list_3.search(node_2)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_7 = linked_list_4.size()
    assert var_7 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(var_7)
    assert node_4.data == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    var_9 = linked_list_2.size()
    assert var_9 == 0

def test_case_1427():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None

def test_case_1428():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(var_3)
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.search(node_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_4)
    var_8 = linked_list_6.display()
    var_9 = linked_list_6.display()
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_1 = [dict_1]
    list_2 = [bool_1, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_1, list_1, tuple_0)
    node_5 = module_0.Node(tuple_1)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_7.remove(none_type_5)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    node_8 = module_0.Node(none_type_6)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_11 = linked_list_8.search(int_0)
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_9.remove(none_type_7)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_10 = module_0.Node(linked_list_9, linked_list_8)
    with pytest.raises(IndexError):
        linked_list_5.pop()

def test_case_1429():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(float_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_1430():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    float_1 = 2634.854
    dict_0 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_1]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_2 = [dict_1, dict_1, str_0, dict_1]
    node_1 = module_0.Node(list_2)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(int_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_2)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.remove(none_type_3)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'

def test_case_1431():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_2)
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_4)
    var_4 = linked_list_4.remove(linked_list_4)

def test_case_1432():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(float_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_3 = module_0.LinkedList(none_type_5)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.remove(none_type_6)
    none_type_7 = None
    linked_list_5 = module_0.LinkedList(none_type_7)
    assert linked_list_5.head is None
    none_type_8 = None
    linked_list_6 = module_0.LinkedList(none_type_8)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_6 = module_0.Node(var_6)
    assert node_6.data == 0
    none_type_9 = None
    linked_list_8 = module_0.LinkedList(none_type_9)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_10 = None
    linked_list_10 = module_0.LinkedList(none_type_10)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    var_9 = linked_list_8.display()
    assert var_9 == ')'

def test_case_1433():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.remove(linked_list_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_2.display()
    assert var_6 == ')'
    var_7 = linked_list_2.search(var_6)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)

def test_case_1434():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.search(int_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.remove(none_type_2)
    linked_list_8 = module_0.LinkedList(var_4)
    assert linked_list_8.head is None
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_6 = linked_list_10.display()
    assert var_6 == ')'
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_7 = linked_list_11.size()
    assert var_7 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_7 = module_0.Node(var_7)
    assert node_7.data == 0
    var_8 = linked_list_12.display()
    assert var_8 == ')'

def test_case_1435():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(linked_list_3, linked_list_2)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(var_4)
    assert node_7.data == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_1436():
    int_0 = 3947
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)

def test_case_1437():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    var_1 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    var_6 = linked_list_5.search(var_5)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_5)
    var_8 = linked_list_8.push(none_type_5)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_1438():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_1.search(none_type_0)

def test_case_1439():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_2 = True
    list_0 = [dict_0]
    list_1 = [bool_2, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_2, list_0, tuple_0)
    node_5 = module_0.Node(tuple_1)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.size()
    assert var_4 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_2 = [dict_1, dict_1, str_0, dict_1]
    node_7 = module_0.Node(list_2)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'

def test_case_1440():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(linked_list_2, linked_list_1)
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1441():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1442():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(none_type_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)

def test_case_1443():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None

def test_case_1444():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None

def test_case_1445():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(var_3)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    with pytest.raises(IndexError):
        linked_list_7.pop()

def test_case_1446():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)

def test_case_1447():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.remove(none_type_2)
    var_4 = linked_list_5.search(node_2)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    var_7 = linked_list_6.search(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.display()
    assert var_11 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_1448():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    var_8 = linked_list_5.search(var_7)
    int_0 = -1061
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.push(int_0)
    int_1 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.search(int_1)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_4 = module_0.Node(var_11)
    assert node_4.data == 0

def test_case_1449():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'

def test_case_1450():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_1451():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_1452():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'

def test_case_1453():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    var_2 = linked_list_2.remove(linked_list_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_1454():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.remove(none_type_3)
    with pytest.raises(IndexError):
        linked_list_5.pop()

def test_case_1455():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    node_1 = module_0.Node(linked_list_4)
    var_6 = linked_list_3.search(var_4)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_3)
    var_8 = linked_list_5.display()
    none_type_4 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_6.remove(none_type_4)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_7.remove(none_type_5)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    node_5 = module_0.Node(none_type_6)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_11 = linked_list_8.search(int_0)
    int_1 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_12 = linked_list_9.search(int_1)
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_10 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_10.remove(none_type_7)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_7 = module_0.Node(linked_list_10, linked_list_9)
    bool_0 = True
    node_8 = module_0.Node(bool_0)
    var_14 = linked_list_0.remove(linked_list_0)

def test_case_1456():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(none_type_1)

def test_case_1457():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)

def test_case_1458():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    with pytest.raises(IndexError):
        linked_list_5.pop()

def test_case_1459():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)

def test_case_1460():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    var_4 = linked_list_4.search(none_type_1)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    var_6 = linked_list_5.display()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.remove(none_type_4)
    var_10 = linked_list_8.search(node_9)
    bool_1 = True
    node_10 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_11 = linked_list_9.size()
    assert var_11 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_11 = module_0.Node(var_11)
    assert node_11.data == 0
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_13 = linked_list_12.size()
    assert var_13 == 0
    var_14 = linked_list_12.display()
    assert var_14 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    bool_2 = True
    node_12 = module_0.Node(bool_2)
    node_13 = module_0.Node(node_12)
    none_type_7 = None
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    str_1 = '3$;;z6n'
    linked_list_15 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_14.display()
    assert var_15 == ')'
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None

def test_case_1461():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.display()
    var_4 = linked_list_3.display()
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'

def test_case_1462():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(bool_1)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(node_5)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_9 = module_0.Node(list_0)
    node_10 = module_0.Node(node_9, list_0)
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.search(int_1)
    none_type_2 = None
    node_12 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_13 = module_0.Node(linked_list_6, linked_list_5)
    bool_3 = True
    node_14 = module_0.Node(bool_3)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_15 = module_0.Node(var_5)
    assert node_15.data == 0
    var_6 = linked_list_9.display()
    assert var_6 == ')'
    none_type_4 = None
    node_16 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_16)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_8 = linked_list_10.display()
    node_17 = module_0.Node(linked_list_11)
    var_9 = linked_list_10.search(var_7)
    var_10 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.Node'
    assert var_10.data is None
    assert var_10.next is None

def test_case_1463():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    node_4 = module_0.Node(node_3)

def test_case_1464():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_3 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(float_0)

def test_case_1465():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    var_5 = linked_list_4.search(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.remove(none_type_4)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_4 = module_0.Node(list_1)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    list_2 = []
    var_8 = linked_list_7.push(list_2)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_9.display()
    var_11 = linked_list_9.pop()
    assert linked_list_9.head is None
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'linkedList4.Node'
    assert var_11.data is None
    assert var_11.next is None

def test_case_1466():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(int_0)
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.search(var_2)

def test_case_1467():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    var_2 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_6 = module_0.Node(var_3)
    assert node_6.data == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_3)
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    node_11 = module_0.Node(none_type_4)
    none_type_5 = None
    node_12 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.remove(none_type_5)
    var_7 = linked_list_8.search(node_12)
    complex_0 = -2363.678516 + 1356.37j
    node_13 = module_0.Node(complex_0)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    var_10 = linked_list_9.search(none_type_6)

def test_case_1468():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(int_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(float_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.remove(none_type_5)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_6)
    var_10 = linked_list_10.push(none_type_6)

def test_case_1469():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1470():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList(linked_list_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.size()
    assert var_0 == 1
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_1471():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.remove(linked_list_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.remove(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.display()
    assert var_6 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    tuple_0 = (var_5, var_3)

def test_case_1472():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(int_0)
    int_1 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_1)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    none_type_0 = None
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(none_type_1)

def test_case_1473():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'

def test_case_1474():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    var_5 = linked_list_4.search(none_type_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    node_7 = module_0.Node(linked_list_6)
    var_8 = linked_list_5.search(var_6)
    complex_2 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_2)
    node_9 = module_0.Node(node_8)

def test_case_1475():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1476():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)

def test_case_1477():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_3)
    var_4 = linked_list_5.remove(linked_list_5)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    var_6 = linked_list_6.display()
    var_7 = linked_list_6.display()
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.remove(none_type_6)
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    linked_list_10 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_7)
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_11 = linked_list_10.display()
    none_type_8 = None
    node_6 = module_0.Node(none_type_8)
    linked_list_12 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.remove(none_type_8)
    none_type_9 = None
    linked_list_13 = module_0.LinkedList(none_type_9)
    assert linked_list_13.head is None
    var_13 = linked_list_13.size()
    assert var_13 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_14 = linked_list_14.push(var_13)

def test_case_1478():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_3 = module_0.Node(linked_list_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_5)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    node_6 = module_0.Node(none_type_6)

def test_case_1479():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(list_0)

def test_case_1480():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.search(int_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.search(node_2)

def test_case_1481():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 3548
    var_2 = linked_list_2.search(int_0)
    node_2 = module_0.Node(int_0, var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(var_5)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    str_1 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    float_0 = -2869.0
    node_4 = module_0.Node(float_0)
    int_1 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.search(int_1)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_6 = module_0.Node(linked_list_10, linked_list_9)
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    str_2 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.display()
    assert var_11 == ')'

def test_case_1482():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(var_6)
    assert linked_list_6.head is None
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_7.size()
    assert var_8 == 0
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    int_0 = 3548
    var_11 = linked_list_10.search(int_0)
    node_2 = module_0.Node(int_0, var_11)
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    var_12 = linked_list_11.size()
    assert var_12 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_9 = None
    linked_list_13 = module_0.LinkedList(none_type_9)
    assert linked_list_13.head is None
    var_13 = linked_list_13.size()
    assert var_13 == 0
    var_14 = linked_list_11.display()
    assert var_14 == ')'
    var_15 = linked_list_11.search(var_14)
    str_0 = '3$;;z6n'
    linked_list_14 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    none_type_10 = None
    linked_list_16 = module_0.LinkedList(none_type_10)
    assert linked_list_16.head is None
    var_16 = linked_list_16.size()
    assert var_16 == 0
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    var_17 = linked_list_16.display()
    assert var_17 == ')'
    none_type_11 = None
    linked_list_18 = module_0.LinkedList(none_type_11)
    assert linked_list_18.head is None
    var_18 = linked_list_18.size()
    assert var_18 == 0
    linked_list_19 = module_0.LinkedList()
    assert linked_list_19.head is None
    none_type_12 = None
    linked_list_20 = module_0.LinkedList(none_type_12)
    assert linked_list_20.head is None
    var_19 = linked_list_20.size()
    assert var_19 == 0
    var_20 = linked_list_18.display()
    assert var_20 == ')'

def test_case_1483():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_1)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.push(none_type_1)

def test_case_1484():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(int_0)
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    var_8 = linked_list_7.search(none_type_2)
    int_2 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.search(int_2)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    str_0 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.remove(none_type_4)
    var_12 = linked_list_12.search(node_6)
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_13 = linked_list_13.size()
    assert var_13 == 0
    var_14 = linked_list_13.display()
    assert var_14 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_15 = linked_list_14.display()
    assert var_15 == ')'

def test_case_1485():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'

def test_case_1486():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 3548
    var_4 = linked_list_2.search(int_0)
    node_1 = module_0.Node(int_0, var_4)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_2)
    var_6 = linked_list_3.remove(linked_list_3)

def test_case_1487():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.remove(linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)

def test_case_1488():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(var_4)

def test_case_1489():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1490():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    var_3 = linked_list_1.display()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    node_3 = module_0.Node(var_3)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_0)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.remove(none_type_4)
    var_5 = linked_list_2.search(node_7)

def test_case_1491():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.display()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(var_3)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_3)
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_4.display()
    assert var_8 == ')'
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.search(int_0)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_8 = module_0.Node(linked_list_8, linked_list_7)
    int_1 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.search(int_1)
    bool_0 = True
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(node_9)
    complex_0 = -2363.678516 + 1356.37j
    node_11 = module_0.Node(complex_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_12 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_1 = [dict_1]
    list_2 = [bool_1, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_1, list_1, tuple_0)
    node_12 = module_0.Node(tuple_1)

def test_case_1492():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_1)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.search(int_0)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_9 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_5 = linked_list_9.size()
    assert var_5 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_6 = linked_list_11.size()
    assert var_6 == 0
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.display()
    assert var_8 == ')'

def test_case_1493():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    var_4 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_1494():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(linked_list_3, linked_list_2)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    node_5 = module_0.Node(node_4)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    float_0 = -2869.0
    node_9 = module_0.Node(float_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)

def test_case_1495():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'

def test_case_1496():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1497():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    var_3 = linked_list_0.display()
    assert var_3 == ')'

def test_case_1498():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(none_type_0)

def test_case_1499():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    var_4 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    node_7 = module_0.Node(var_5)
    assert node_7.data == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'

def test_case_1500():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_5.remove(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 3548
    var_5 = linked_list_7.search(int_0)
    node_5 = module_0.Node(int_0, var_5)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_4)
    var_7 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    bool_0 = True
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(node_8)

def test_case_1501():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'

def test_case_1502():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_2.display()
    var_2 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_3)
    var_5 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    var_6 = linked_list_7.display()
    with pytest.raises(IndexError):
        linked_list_3.pop()

def test_case_1503():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_1 = module_0.Node(list_1)
    node_2 = module_0.Node(node_1, list_1)
    node_3 = module_0.Node(node_1, dict_1)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(var_2)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(var_4)
    assert node_4.data == 0
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_6 = module_0.Node(var_7)
    assert node_6.data == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(bool_1)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_10 = linked_list_10.display()
    node_10 = module_0.Node(linked_list_11)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_12 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None

def test_case_1504():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    var_3 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    float_0 = -2869.0
    node_5 = module_0.Node(float_0)

def test_case_1505():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1506():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(var_4)
    assert linked_list_6.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_2 = module_0.Node(tuple_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_6 = linked_list_10.size()
    assert var_6 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_6 = module_0.Node(var_6)
    assert node_6.data == 0
    var_7 = linked_list_11.display()
    assert var_7 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_1507():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    var_3 = linked_list_2.remove(linked_list_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_3)
    var_5 = linked_list_3.push(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_4.display()
    assert var_8 == ')'
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_6)
    var_10 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    var_11 = linked_list_9.size()
    assert var_11 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_1508():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(int_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    list_0 = []
    var_2 = linked_list_3.push(list_0)

def test_case_1509():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    complex_1 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_1)
    node_2 = module_0.Node(node_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_4 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)

def test_case_1510():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    list_0 = []
    var_2 = linked_list_3.push(list_0)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_3)
    var_4 = linked_list_4.remove(linked_list_4)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_2 = True
    list_1 = [dict_0]
    list_2 = [bool_2, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_0, bool_2, list_1, tuple_0)
    node_10 = module_0.Node(tuple_1)
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1511():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)
    var_3 = linked_list_2.push(linked_list_2)

def test_case_1512():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(bool_2)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.size()
    assert var_4 == 0
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_7)
    var_5 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    var_6 = linked_list_5.display()
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_8)
    var_8 = linked_list_9.remove(none_type_6)
    var_9 = linked_list_9.display()
    var_10 = linked_list_9.display()
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    str_0 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_10.remove(linked_list_10)

def test_case_1513():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_1514():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    var_5 = linked_list_4.search(none_type_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    node_6 = module_0.Node(linked_list_6)

def test_case_1515():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    var_3 = linked_list_0.search(var_1)

def test_case_1516():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    int_1 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.push(int_1)
    bool_0 = True
    node_4 = module_0.Node(bool_0)

def test_case_1517():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_1518():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    var_3 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.Node'
    assert var_3.data is None
    assert var_3.next is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_5 = module_0.Node(tuple_1)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_6)
    var_4 = linked_list_4.remove(none_type_3)
    var_5 = linked_list_4.push(none_type_3)
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_7)
    var_6 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    var_7 = linked_list_9.search(int_0)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    var_8 = linked_list_10.size()
    assert var_8 == 0
    linked_list_11 = module_0.LinkedList()
    node_8 = module_0.Node(var_8)
    assert node_8.data == 0
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_9)
    var_9 = linked_list_12.remove(none_type_6)
    var_10 = linked_list_12.remove(linked_list_12)

def test_case_1519():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'

def test_case_1520():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(int_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_4 = module_0.Node(list_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_7 = linked_list_9.display()
    node_6 = module_0.Node(linked_list_10)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_9 = linked_list_12.display()
    assert var_9 == ')'
    none_type_6 = None
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_10 = linked_list_13.size()
    assert var_10 == 0
    var_11 = linked_list_13.display()
    assert var_11 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    with pytest.raises(IndexError):
        linked_list_3.pop()

def test_case_1521():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(var_5)
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    str_0 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.remove(none_type_5)
    var_8 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_3 = module_0.Node(node_2, var_7)
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    str_1 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_12.display()
    assert var_9 == ')'
    none_type_7 = None
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    var_10 = linked_list_14.size()
    assert var_10 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    node_4 = module_0.Node(var_10)
    assert node_4.data == 0
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    linked_list_16 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_16.remove(none_type_8)
    var_12 = linked_list_16.display()

def test_case_1522():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_3)
    var_4 = linked_list_3.remove(linked_list_3)

def test_case_1523():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(var_2)

def test_case_1524():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    list_1 = []
    var_0 = linked_list_1.push(list_1)
    var_1 = linked_list_0.push(linked_list_0)

def test_case_1525():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.remove(none_type_1)
    var_5 = linked_list_2.search(node_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_3.remove(none_type_2)
    var_7 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_6.remove(none_type_4)
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_10 = linked_list_7.push(float_0)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_0)
    var_11 = linked_list_7.display()
    assert var_11 == '(-2869.0)'
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_8.remove(none_type_5)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_13 = linked_list_9.size()
    assert var_13 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_14 = linked_list_10.push(var_13)
    str_0 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_13 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_13.remove(none_type_7)
    var_16 = linked_list_13.display()

def test_case_1526():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)

def test_case_1527():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(float_0)

def test_case_1528():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_0 = None
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.remove(none_type_2)
    var_6 = linked_list_7.search(node_2)

def test_case_1529():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'

def test_case_1530():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_1)
    int_1 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.search(int_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    float_0 = -2869.0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(float_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    var_7 = linked_list_6.display()
    assert var_7 == '(-2869.0)'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    list_0 = []
    var_10 = linked_list_9.push(list_0)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0

def test_case_1531():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(node_0)
    set_0 = {node_0, node_0, bool_0}
    linked_list_1 = module_0.LinkedList(set_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(var_0)

def test_case_1532():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    float_1 = -2869.0
    node_3 = module_0.Node(float_1)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_5 = linked_list_4.display()
    node_5 = module_0.Node(linked_list_5)
    var_6 = linked_list_4.search(var_4)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    str_2 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(linked_list_6)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_7 = module_0.Node(var_9)
    assert node_7.data == 0
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    node_9 = module_0.Node(node_8)
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_4)
    var_12 = linked_list_12.remove(linked_list_12)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_11 = module_0.Node(node_10, var_11)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_13 = linked_list_14.display()
    assert var_13 == ')'
    none_type_5 = None
    node_12 = module_0.Node(none_type_5)
    linked_list_15 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_15.remove(none_type_5)
    linked_list_16 = module_0.LinkedList(none_type_5)
    assert linked_list_16.head is None
    var_15 = linked_list_16.display()
    assert var_15 == ')'

def test_case_1533():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1534():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0

def test_case_1535():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_3 = module_0.Node(linked_list_4)
    var_4 = linked_list_3.search(var_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_0)
    complex_0 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_0)

def test_case_1536():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.display()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(var_2)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_7 = module_0.Node(var_3)
    assert node_7.data == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_2 = [dict_1, dict_1, str_1, dict_1]
    node_9 = module_0.Node(list_2)
    node_10 = module_0.Node(node_9, list_2)

def test_case_1537():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_1538():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_7 = linked_list_4.size()
    assert var_7 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    var_9 = linked_list_4.display()
    assert var_9 == ')'
    var_10 = linked_list_4.search(var_9)

def test_case_1539():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    node_4 = module_0.Node(none_type_3)
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_5 = module_0.Node(tuple_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_2 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_3 = [dict_2, dict_2, str_1, dict_2]
    node_6 = module_0.Node(list_3)
    node_7 = module_0.Node(node_6, list_3)
    node_8 = module_0.Node(node_6, dict_2)
    complex_1 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.search(int_0)
    bool_1 = True
    node_10 = module_0.Node(bool_1)
    node_11 = module_0.Node(node_10)
    complex_2 = -2363.678516 + 1356.37j
    node_12 = module_0.Node(complex_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_1540():
    set_0 = set()
    str_0 = '*<Za9+Kuu}8T=|I~s'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(str_0)

def test_case_1541():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.display()
    var_3 = linked_list_1.display()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_5 = module_0.Node(var_4)
    assert node_5.data == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.remove(none_type_2)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_2)

def test_case_1542():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.search(node_5)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    var_5 = linked_list_2.size()
    assert var_5 == 0
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_3 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_3.remove(none_type_4)
    var_7 = linked_list_3.remove(linked_list_3)

def test_case_1543():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0

def test_case_1544():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)

def test_case_1545():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    var_4 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(node_1, var_3)
    int_1 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(int_1)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_4 = module_0.Node(var_8)
    assert node_4.data == 0
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_1546():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.search(int_0)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_8 = module_0.Node(linked_list_5, linked_list_4)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    node_11 = module_0.Node(node_10)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_1547():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    linked_list_6 = module_0.LinkedList(linked_list_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'

def test_case_1548():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    list_0 = []
    var_2 = linked_list_3.push(list_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.push(int_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'

def test_case_1549():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(float_0)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_1 = module_0.Node(var_6)
    assert node_1.data == 0
    var_7 = linked_list_9.push(none_type_3)
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.search(int_0)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.remove(none_type_4)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_3 = module_0.Node(linked_list_11, linked_list_10)

def test_case_1550():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_2 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    node_5 = module_0.Node(linked_list_6)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_8 = linked_list_8.display()
    node_8 = module_0.Node(linked_list_9)
    node_9 = module_0.Node(linked_list_8)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    str_1 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    float_1 = -2869.0
    node_10 = module_0.Node(float_1)

def test_case_1551():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)

def test_case_1552():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_3.display()
    node_3 = module_0.Node(linked_list_4)
    var_3 = linked_list_3.search(var_1)
    var_4 = linked_list_4.search(node_3)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    node_5 = module_0.Node(linked_list_6)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    float_0 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(float_0)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_1)
    var_10 = linked_list_9.display()
    assert var_10 == '(-2869.0)'
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_12 = linked_list_10.display()
    node_11 = module_0.Node(linked_list_11)
    var_13 = linked_list_10.search(var_11)

def test_case_1553():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_1)
    var_5 = linked_list_3.push(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_5 = module_0.Node(linked_list_6, linked_list_5)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_1554():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.remove(linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    var_5 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    var_7 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(node_2, var_6)

def test_case_1555():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)

def test_case_1556():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_1557():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(var_2)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(node_5, list_1)
    node_7 = module_0.Node(node_5, dict_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    node_8 = module_0.Node(var_4)
    assert node_8.data == ')'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    float_0 = 2634.854
    dict_2 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_2 = [dict_2]
    list_3 = [bool_0, float_0]
    tuple_0 = (list_3,)
    tuple_1 = (dict_2, bool_0, list_2, tuple_0)
    node_9 = module_0.Node(tuple_1)

def test_case_1558():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_4.push(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    node_4 = module_0.Node(linked_list_6)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_7 = linked_list_10.search(int_0)
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_8 = module_0.Node(var_8)
    assert node_8.data == 0
    with pytest.raises(IndexError):
        linked_list_10.pop()

def test_case_1559():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    var_5 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList4.Node'
    assert var_5.data is None
    assert var_5.next is None
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    list_0 = []
    var_6 = linked_list_6.push(list_0)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_9)
    var_7 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    linked_list_11 = module_0.LinkedList()
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    var_10 = linked_list_2.display()

def test_case_1560():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(node_2, var_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(var_5)
    assert node_4.data == 0
    var_6 = linked_list_7.push(none_type_2)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)

def test_case_1561():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    var_2 = linked_list_2.display()
    var_3 = linked_list_2.display()

def test_case_1562():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(none_type_1)

def test_case_1563():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None

def test_case_1564():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.push(float_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    var_4 = linked_list_1.display()
    assert var_4 == '(-2869.0)'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_5 = linked_list_2.size()
    assert var_5 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(var_6)
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 3548
    var_9 = linked_list_7.search(int_0)
    node_4 = module_0.Node(int_0, var_9)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_11 = linked_list_8.display()
    node_6 = module_0.Node(linked_list_9)
    var_12 = linked_list_8.search(var_10)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_13 = linked_list_10.size()
    assert var_13 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_7 = module_0.Node(var_13)
    assert node_7.data == 0
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_14 = linked_list_12.size()
    assert var_14 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_8 = None
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    var_15 = linked_list_14.size()
    assert var_15 == 0
    var_16 = linked_list_12.display()
    assert var_16 == ')'
    int_1 = -1061
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_17 = linked_list_15.push(int_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_16 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_18 = linked_list_16.display()
    assert var_18 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_1565():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    str_2 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(linked_list_3)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_3 = module_0.Node(var_6)
    assert node_3.data == 0
    var_7 = linked_list_10.display()
    assert var_7 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_1566():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.display()
    var_4 = linked_list_3.display()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    var_6 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(node_1, var_5)

def test_case_1567():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1568():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 3548
    var_4 = linked_list_2.search(int_0)
    node_3 = module_0.Node(int_0, var_4)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.remove(none_type_1)
    var_6 = linked_list_3.search(node_4)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)

def test_case_1569():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.display()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(var_3)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_3)
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    var_6 = linked_list_3.pop()
    assert linked_list_3.head is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList4.Node'
    assert var_6.data is None
    assert var_6.next is None
    linked_list_5 = module_0.LinkedList()
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_5)
    var_8 = linked_list_6.remove(none_type_4)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    var_10 = linked_list_8.push(var_9)
    int_0 = -1061
    linked_list_9 = module_0.LinkedList()
    var_11 = linked_list_9.push(int_0)
    int_1 = 1454
    linked_list_10 = module_0.LinkedList()
    var_12 = linked_list_10.search(int_1)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_6)
    var_13 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList()
    node_7 = module_0.Node(linked_list_11, linked_list_10)
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    var_14 = linked_list_13.size()
    assert var_14 == 0
    linked_list_14 = module_0.LinkedList()
    var_15 = linked_list_13.display()
    assert var_15 == ')'

def test_case_1570():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    node_1 = module_0.Node(linked_list_6)
    var_8 = linked_list_5.search(var_6)
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_1571():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.remove(linked_list_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    node_5 = module_0.Node(linked_list_6)
    var_7 = linked_list_5.search(var_5)
    var_8 = linked_list_6.search(node_5)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_10 = linked_list_7.display()
    node_7 = module_0.Node(linked_list_8)
    node_8 = module_0.Node(linked_list_7)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    dict_0 = {linked_list_5: linked_list_4}
    var_11 = linked_list_1.search(dict_0)

def test_case_1572():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_1)
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_4 = linked_list_5.display()
    node_6 = module_0.Node(linked_list_6)
    var_5 = linked_list_5.search(var_3)
    float_1 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(float_1)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(bool_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_9 = module_0.Node(var_8)
    assert node_9.data == 0
    var_9 = linked_list_10.push(none_type_2)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_7.size()
    assert var_10 == 1

def test_case_1573():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_1)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'

def test_case_1574():
    int_0 = 331
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(int_0)

def test_case_1575():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    var_2 = linked_list_2.push(none_type_0)
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(float_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    var_4 = linked_list_3.display()
    assert var_4 == '(-2869.0)'
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(int_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_1)
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    node_6 = module_0.Node(linked_list_6)
    var_8 = linked_list_5.search(var_6)
    var_9 = linked_list_6.search(node_6)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_10 = linked_list_7.size()
    assert var_10 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_11 = linked_list_7.display()
    assert var_11 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(node_7, list_1)

def test_case_1576():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)

def test_case_1577():
    int_0 = -530
    linked_list_0 = module_0.LinkedList(int_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(-530)'

def test_case_1578():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'

def test_case_1579():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'

def test_case_1580():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(var_4)

def test_case_1581():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    var_5 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList4.Node'
    assert var_5.data is None
    assert var_5.next is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    var_6 = linked_list_4.size()
    assert var_6 == 0
    var_7 = linked_list_4.size()
    assert var_7 == 0
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(var_6)
    assert node_5.data == 0
    none_type_5 = None
    linked_list_5 = module_0.LinkedList(none_type_5)
    var_8 = linked_list_5.size()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    node_6 = module_0.Node(var_8)
    assert node_6.data == 0
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_7)
    var_9 = linked_list_7.remove(none_type_6)
    linked_list_8 = module_0.LinkedList(none_type_6)
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    var_11 = linked_list_9.size()
    assert var_11 == 0
    linked_list_10 = module_0.LinkedList()
    var_12 = linked_list_9.display()
    assert var_12 == ')'

def test_case_1582():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.display()
    var_4 = linked_list_1.display()
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_5 = linked_list_2.size()
    assert var_5 == 0
    var_6 = linked_list_2.display()
    assert var_6 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 3548
    var_7 = linked_list_3.search(int_0)
    node_3 = module_0.Node(int_0, var_7)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_4.remove(none_type_3)
    var_9 = linked_list_4.display()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(var_9)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)

def test_case_1583():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.display()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(var_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    node_6 = module_0.Node(linked_list_5)
    var_7 = linked_list_4.search(var_5)
    var_8 = linked_list_5.search(node_6)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_6.remove(none_type_4)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_10 = linked_list_7.size()
    assert var_10 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_11 = linked_list_8.push(var_10)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_9.remove(none_type_6)
    var_13 = linked_list_9.push(none_type_6)
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_14 = linked_list_10.size()
    assert var_14 == 0
    var_15 = linked_list_10.display()
    assert var_15 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_16 = linked_list_11.display()
    assert var_16 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_9 = module_0.Node(list_0)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    float_0 = -2869.0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_17 = linked_list_13.push(float_0)
    var_18 = linked_list_13.pop()
    assert var_18 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_13.head is None
    none_type_8 = None
    linked_list_14 = module_0.LinkedList(none_type_8)
    assert linked_list_14.head is None
    var_19 = linked_list_14.size()
    assert var_19 == 0
    var_20 = linked_list_14.display()
    assert var_20 == ')'

def test_case_1584():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_1 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_4 = module_0.Node(linked_list_3, linked_list_2)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.remove(none_type_1)
    var_4 = linked_list_5.search(node_5)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    with pytest.raises(IndexError):
        linked_list_5.pop()

def test_case_1585():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    node_2 = module_0.Node(var_2)
    assert node_2.data == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(var_3)
    assert node_3.data == 0
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    list_0 = []
    var_4 = linked_list_5.push(list_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.size()
    assert var_6 == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(var_5)
    assert node_6.data == 0
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_5)
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(linked_list_8)
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_7)
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    int_0 = 1454
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.search(int_0)
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(node_9)
    complex_0 = -2363.678516 + 1356.37j
    node_11 = module_0.Node(complex_0)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_1586():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_1587():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.size()
    assert var_3 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_3)
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    node_5 = module_0.Node(linked_list_4)
    node_6 = module_0.Node(linked_list_3)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    node_10 = module_0.Node(none_type_5)
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_11 = module_0.Node(list_0)

def test_case_1588():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1589():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_2)
    assert node_2.data == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_2)
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_5 = linked_list_7.display()
    var_6 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList4.Node'
    assert var_6.data is None
    assert var_6.next is None
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    linked_list_10 = module_0.LinkedList()
    int_0 = 3548
    var_9 = linked_list_10.search(int_0)
    node_4 = module_0.Node(int_0, var_9)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_5)
    var_10 = linked_list_11.remove(none_type_4)
    linked_list_12 = module_0.LinkedList(none_type_4)
    var_11 = linked_list_11.display()
    node_6 = module_0.Node(linked_list_12)
    node_7 = module_0.Node(linked_list_11)
    object_0 = module_1.object()

def test_case_1590():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_3.push(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(none_type_2)

def test_case_1591():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1592():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'

def test_case_1593():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(float_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    var_6 = linked_list_4.display()
    assert var_6 == '(-2869.0)'

def test_case_1594():
    float_0 = -2452.605107
    node_0 = module_0.Node(float_0, float_0)
    int_0 = 341
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    linked_list_0 = module_0.LinkedList(dict_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.size()
    assert var_0 == 1

def test_case_1595():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(node_2, var_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_2)

def test_case_1596():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    node_4 = module_0.Node(var_2)
    assert node_4.data == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.remove(none_type_1)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.push(var_4)
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    var_8 = linked_list_9.search(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_10 = linked_list_10.display()
    node_8 = module_0.Node(linked_list_11)
    node_9 = module_0.Node(linked_list_10)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_5)
    var_12 = linked_list_12.remove(linked_list_12)
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_13.remove(none_type_6)
    var_14 = linked_list_13.display()
    str_0 = '3$;;z6n'
    linked_list_14 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None

def test_case_1597():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_5)
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    node_4 = module_0.Node(none_type_6)
    float_0 = -2869.0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.push(float_0)
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_12 = linked_list_11.size()
    assert var_12 == 0
    var_13 = linked_list_11.display()
    assert var_13 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    linked_list_13 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_13.remove(none_type_8)
    var_15 = linked_list_13.remove(linked_list_13)
    none_type_9 = None
    linked_list_14 = module_0.LinkedList(none_type_9)
    assert linked_list_14.head is None
    var_16 = linked_list_14.size()
    assert var_16 == 0
    var_17 = linked_list_14.display()
    assert var_17 == ')'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_18 = linked_list_15.display()
    assert var_18 == ')'

def test_case_1598():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(var_3)

def test_case_1599():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'

def test_case_1600():
    bool_0 = True
    str_0 = "0O U7z'ziR@f\x0b@"
    list_0 = [bool_0, str_0]
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(list_0)

def test_case_1601():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(none_type_2)

def test_case_1602():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(node_3, list_1)
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(float_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_2)
    var_4 = linked_list_5.display()
    var_5 = linked_list_5.display()
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    node_6 = module_0.Node(var_8)
    assert node_6.data == ')'
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_4)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_13 = linked_list_13.push(var_12)

def test_case_1603():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.push(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(linked_list_3)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None

def test_case_1604():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.display()
    var_4 = linked_list_3.display()
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    node_4 = module_0.Node(linked_list_8)
    var_9 = linked_list_7.search(var_7)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    int_0 = -1061
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_12.push(int_0)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None

def test_case_1605():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    var_4 = linked_list_4.display()
    var_5 = linked_list_4.display()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_6 = module_0.Node(var_7)
    assert node_6.data == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None

def test_case_1606():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.push(float_0)
    var_3 = linked_list_5.pop()
    assert var_3 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_5.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    with pytest.raises(IndexError):
        linked_list_5.pop()

def test_case_1607():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0

def test_case_1608():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(var_0)
    assert node_3.data == 0
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)

def test_case_1609():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    list_0 = []
    var_3 = linked_list_5.push(list_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None

def test_case_1610():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.remove(none_type_2)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_4 = linked_list_7.push(linked_list_7)
    var_5 = linked_list_6.size()
    assert var_5 == 0
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_5)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    node_8 = module_0.Node(none_type_6)
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_7)
    var_8 = linked_list_9.display()
    none_type_8 = None
    linked_list_10 = module_0.LinkedList(none_type_8)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    int_1 = 3548
    var_11 = linked_list_11.search(int_1)
    node_10 = module_0.Node(int_1, var_11)
    bool_1 = True
    node_11 = module_0.Node(bool_1)
    none_type_9 = None
    linked_list_12 = module_0.LinkedList(none_type_9)
    assert linked_list_12.head is None
    var_12 = linked_list_12.push(linked_list_12)

def test_case_1611():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.push(int_0)
    var_1 = linked_list_2.size()
    assert var_1 == 1
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.display()
    assert var_2 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.remove(none_type_1)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(linked_list_7)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_8 = linked_list_9.display()
    node_4 = module_0.Node(linked_list_10)
    var_9 = linked_list_9.search(var_7)
    var_10 = linked_list_10.search(node_4)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_6 = None
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_12 = linked_list_13.size()
    assert var_12 == 0
    var_13 = linked_list_11.display()
    assert var_13 == ')'

def test_case_1612():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.push(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    node_2 = module_0.Node(var_3)
    assert node_2.data == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    str_2 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_7 = linked_list_12.size()
    assert var_7 == 0

def test_case_1613():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_1 = module_0.Node(int_0, var_2)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    node_4 = module_0.Node(linked_list_7)
    node_5 = module_0.Node(linked_list_6)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_5)
    var_9 = linked_list_8.remove(linked_list_8)

def test_case_1614():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    var_3 = linked_list_1.push(none_type_2)

def test_case_1615():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_1)
    var_5 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    tuple_0 = (var_8,)

def test_case_1616():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.push(float_0)
    var_3 = linked_list_5.pop()
    assert var_3 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_5.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    var_5 = linked_list_6.display()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_3)
    var_7 = linked_list_7.display()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(var_7)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    int_0 = -1061
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_12 = linked_list_13.push(int_0)
    var_13 = linked_list_13.size()
    assert var_13 == 1

def test_case_1617():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    float_1 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(float_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    var_2 = linked_list_1.display()
    assert var_2 == '(-2869.0)'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    str_2 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_8 = linked_list_10.display()
    with pytest.raises(IndexError):
        linked_list_4.pop()

def test_case_1618():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    list_1 = []
    var_3 = linked_list_2.push(list_1)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_3)
    var_5 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_1619():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(var_5)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    var_8 = linked_list_6.push(none_type_3)
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.push(float_0)
    int_1 = -1061
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.push(int_1)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_1 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_1620():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    var_4 = linked_list_3.search(var_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.size()
    assert var_6 == 0
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.search(int_0)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_5)
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.push(var_9)
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    linked_list_10 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_7)
    var_12 = linked_list_10.display()
    var_13 = linked_list_10.display()
    none_type_8 = None
    node_6 = module_0.Node(none_type_8)
    linked_list_11 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_11.remove(none_type_8)
    linked_list_12 = module_0.LinkedList(none_type_8)
    assert linked_list_12.head is None
    var_15 = linked_list_11.display()
    node_7 = module_0.Node(linked_list_12)
    node_8 = module_0.Node(linked_list_11)
    none_type_9 = None
    node_9 = module_0.Node(none_type_9)
    linked_list_13 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_16 = linked_list_13.remove(none_type_9)
    var_17 = linked_list_13.remove(linked_list_13)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_18 = linked_list_15.remove(none_type_0)

def test_case_1621():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_1.push(var_1)

def test_case_1622():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(none_type_2)
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_5 = linked_list_2.push(int_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_3.remove(none_type_3)
    var_7 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_9 = linked_list_5.display()
    node_4 = module_0.Node(linked_list_6)
    node_5 = module_0.Node(linked_list_5)

def test_case_1623():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    var_3 = linked_list_3.display()
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(none_type_3)
    var_5 = linked_list_4.search(node_5)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_0)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_7 = module_0.Node(linked_list_6, linked_list_5)

def test_case_1624():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_2)
    var_2 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_1625():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1626():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_2 = linked_list_1.display()
    assert var_2 == '(-2869.0)'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    var_8 = linked_list_4.search(var_7)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_4 = module_0.Node(var_9)
    assert node_4.data == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_5)
    var_11 = linked_list_9.display()
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    node_9 = module_0.Node(var_11)
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    str_0 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_8 = None
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_12 = linked_list_13.size()
    assert var_12 == 0
    var_13 = linked_list_13.display()
    assert var_13 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None

def test_case_1627():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_4 = module_0.Node(linked_list_1, linked_list_0)
    int_1 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_1)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_3 = linked_list_5.push(linked_list_5)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    node_10 = module_0.Node(bool_1)
    complex_1 = -1265.460815 + 1056.434j
    node_11 = module_0.Node(node_10, complex_1)
    bool_2 = True
    node_12 = module_0.Node(bool_2)
    node_13 = module_0.Node(node_12)
    node_14 = module_0.Node(bool_2)
    int_2 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.search(int_2)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    node_15 = module_0.Node(var_6)
    assert node_15.data == ')'
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_9 = linked_list_11.size()
    assert var_9 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    float_0 = -2869.0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_10 = linked_list_13.push(float_0)
    bool_3 = True
    node_16 = module_0.Node(bool_3)
    node_17 = module_0.Node(node_16)
    node_18 = module_0.Node(bool_3)
    var_11 = linked_list_13.display()
    assert var_11 == '(-2869.0)'

def test_case_1628():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(var_3)
    assert node_3.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.remove(none_type_4)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_10 = linked_list_9.display()
    node_5 = module_0.Node(linked_list_10)
    var_11 = linked_list_9.search(var_9)
    var_12 = linked_list_10.search(node_5)
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_13 = linked_list_11.size()
    assert var_13 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_14 = linked_list_13.size()
    assert var_14 == 0
    var_15 = linked_list_11.display()
    assert var_15 == ')'
    var_16 = linked_list_11.search(var_15)

def test_case_1629():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    float_0 = -2869.0
    node_3 = module_0.Node(float_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_2)

def test_case_1630():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.search(node_1)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_8 = linked_list_7.push(linked_list_7)
    var_9 = linked_list_6.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    node_2 = module_0.Node(var_10)
    assert node_2.data == ')'
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    str_1 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    float_0 = -2869.0
    node_3 = module_0.Node(float_0)

def test_case_1631():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_2 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_2)

def test_case_1632():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.remove(linked_list_1)

def test_case_1633():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_1 = []
    var_0 = linked_list_0.push(list_1)

def test_case_1634():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    node_3 = module_0.Node(var_2)
    assert node_3.data == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_5)
    var_8 = linked_list_6.display()
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    node_6 = module_0.Node(var_8)
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_8 = None
    linked_list_8 = module_0.LinkedList(none_type_8)
    assert linked_list_8.head is None
    str_0 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)

def test_case_1635():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    var_4 = linked_list_1.display()
    var_5 = linked_list_1.display()
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_1636():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(float_0)
    var_5 = linked_list_4.pop()
    assert var_5 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_4.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    str_2 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    str_3 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(linked_list_8)
    str_4 = '#p1jIXa}Q?(h'
    dict_1 = {str_4: str_4, str_4: str_4, str_4: str_4}
    list_1 = [dict_1, dict_1, str_4, dict_1]
    node_9 = module_0.Node(list_1)
    node_10 = module_0.Node(node_9, list_1)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    int_0 = -1061
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_9 = linked_list_12.push(int_0)
    var_10 = linked_list_12.size()
    assert var_10 == 1
    with pytest.raises(IndexError):
        linked_list_4.pop()

def test_case_1637():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    node_4 = module_0.Node(var_3)
    assert node_4.data == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_0 = 3548
    var_7 = linked_list_6.search(int_0)
    node_6 = module_0.Node(int_0, var_7)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_7 = module_0.Node(var_9)
    assert node_7.data == 0
    var_10 = linked_list_9.push(none_type_4)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_12 = linked_list_10.display()
    node_9 = module_0.Node(linked_list_11)
    node_10 = module_0.Node(linked_list_10)
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_12.remove(none_type_6)
    var_14 = linked_list_12.remove(linked_list_12)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None

def test_case_1638():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_1)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(var_4)
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_1639():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(float_0)
    var_2 = linked_list_2.pop()
    assert var_2 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_2 = module_0.Node(linked_list_6, linked_list_5)

def test_case_1640():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    node_4 = module_0.Node(linked_list_4)
    var_6 = linked_list_3.search(var_4)
    var_7 = linked_list_4.search(node_4)

def test_case_1641():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.remove(none_type_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    var_5 = linked_list_5.search(none_type_3)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_4)
    var_7 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_5)
    var_9 = linked_list_8.remove(linked_list_8)

def test_case_1642():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.push(float_0)
    var_1 = linked_list_2.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0

def test_case_1643():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(float_0)
    var_4 = linked_list_4.pop()
    assert var_4 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_4.head is None
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    str_2 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'

def test_case_1644():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'

def test_case_1645():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(float_0)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_2)
    var_3 = linked_list_1.display()
    assert var_3 == '(-2869.0)'
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(linked_list_3)
    var_5 = linked_list_2.size()
    assert var_5 == 0
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.search(int_0)
    node_9 = module_0.Node(var_6)
    set_0 = {node_6, none_type_3, linked_list_3}

def test_case_1646():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)

def test_case_1647():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    var_2 = linked_list_2.display()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_5 = module_0.Node(linked_list_4)
    var_5 = linked_list_3.search(var_3)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_7 = module_0.Node(var_7)
    assert node_7.data == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    node_9 = module_0.Node(node_8)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_1648():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_4 = module_0.Node(list_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_3 = linked_list_4.display()
    node_6 = module_0.Node(linked_list_5)
    var_4 = linked_list_4.search(var_2)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    node_8 = module_0.Node(linked_list_7)
    float_1 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(float_1)
    bool_1 = True
    node_9 = module_0.Node(bool_1)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(bool_1)
    var_8 = linked_list_8.display()
    assert var_8 == '(-2869.0)'
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_4 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.remove(none_type_4)
    linked_list_12 = module_0.LinkedList(var_10)
    assert linked_list_12.head is None
    str_2 = ''

def test_case_1649():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    node_2 = module_0.Node(var_2)
    assert node_2.data == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    complex_1 = -1265.460815 + 1056.434j
    node_6 = module_0.Node(node_5, complex_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(var_5)
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    var_9 = linked_list_8.search(var_8)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.remove(none_type_6)
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_11 = linked_list_12.display()
    var_12 = linked_list_12.pop()
    assert linked_list_12.head is None
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList4.Node'
    assert var_12.data is None
    assert var_12.next is None
    int_0 = -1061
    linked_list_14 = module_0.LinkedList()
    var_13 = linked_list_14.push(int_0)
    none_type_7 = None
    linked_list_15 = module_0.LinkedList(none_type_7)
    var_14 = linked_list_15.size()
    assert var_14 == 0
    var_15 = linked_list_15.display()
    assert var_15 == ')'
    linked_list_16 = module_0.LinkedList()
    int_1 = 3548
    var_16 = linked_list_16.search(int_1)
    node_8 = module_0.Node(int_1, var_16)
    int_2 = 1454
    linked_list_17 = module_0.LinkedList()
    var_17 = linked_list_17.search(int_2)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_18 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_18.head).__module__}.{type(linked_list_18.head).__qualname__}' == 'linkedList4.Node'
    var_18 = linked_list_18.display()
    assert var_18 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_1650():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.size()
    assert var_4 == 0
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.remove(none_type_4)
    var_6 = linked_list_4.search(node_9)
    str_1 = 'zd,F(|4$'
    var_7 = linked_list_3.push(str_1)

def test_case_1651():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(float_0)
    var_3 = linked_list_3.pop()
    assert var_3 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_3.head is None

def test_case_1652():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_2 = linked_list_2.display()
    assert var_2 == '(-2869.0)'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.search(int_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    node_6 = module_0.Node(var_5)
    assert node_6.data == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_7 = linked_list_11.size()
    assert var_7 == 0
    var_8 = linked_list_11.display()
    assert var_8 == ')'
    int_1 = -1061
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_9 = linked_list_12.push(int_1)
    var_10 = linked_list_12.size()
    assert var_10 == 1
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)
    node_9 = module_0.Node(node_7, dict_0)
    none_type_4 = None
    linked_list_13 = module_0.LinkedList(none_type_4)
    assert linked_list_13.head is None
    var_11 = linked_list_13.display()
    assert var_11 == ')'

def test_case_1653():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(float_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    node_1 = module_0.Node(linked_list_5)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    str_2 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_9.size()
    assert var_8 == 0

def test_case_1654():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()

def test_case_1655():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)

def test_case_1656():
    none_type_0 = None
    str_0 = 'd%[@lEu2'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.search(none_type_0)

def test_case_1657():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_1)
    var_5 = linked_list_3.display()
    var_6 = linked_list_3.display()
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_7 = linked_list_4.search(int_0)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_1658():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1659():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_1)
    var_3 = linked_list_4.display()
    var_4 = linked_list_4.display()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_2 = module_0.Node(var_5)
    assert node_2.data == 0
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.search(int_0)
    str_0 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_8 = linked_list_11.push(linked_list_11)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_1)
    complex_0 = -1265.460815 + 1056.434j
    node_6 = module_0.Node(node_5, complex_0)
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_9 = linked_list_12.size()
    assert var_9 == 0
    var_10 = linked_list_12.display()
    assert var_10 == ')'
    var_11 = linked_list_12.search(none_type_4)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)

def test_case_1660():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.remove(linked_list_1)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_1 = [dict_1]
    list_2 = [bool_0, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_0, list_1, tuple_0)
    node_2 = module_0.Node(tuple_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.remove(none_type_2)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_1661():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    var_3 = linked_list_4.remove(linked_list_4)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    var_5 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_2 = module_0.Node(node_1, var_4)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_9 = linked_list_10.display()
    assert var_9 == ')'

def test_case_1662():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(int_0)
    var_4 = linked_list_2.size()
    assert var_4 == 1
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    list_0 = []
    var_5 = linked_list_3.push(list_0)
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_1)
    node_2 = module_0.Node(node_1, list_1)
    node_3 = module_0.Node(node_1, dict_0)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_1 = 3548
    var_8 = linked_list_6.search(int_1)
    node_4 = module_0.Node(int_1, var_8)

def test_case_1663():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.size()
    assert var_2 == 0
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    none_type_4 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_4)
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(float_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    var_5 = linked_list_4.display()
    assert var_5 == '(-2869.0)'
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_0)
    node_5 = module_0.Node(var_6)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_6 = module_0.Node(var_9)
    assert node_6.data == 0

def test_case_1664():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1665():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    var_7 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.Node'
    assert var_7.data is None
    assert var_7.next is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    var_8 = linked_list_6.push(linked_list_6)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_0)
    complex_1 = -1265.460815 + 1056.434j
    node_8 = module_0.Node(node_7, complex_1)
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    var_9 = linked_list_7.search(int_0)
    bool_1 = True
    node_9 = module_0.Node(bool_1)
    node_10 = module_0.Node(node_9)
    complex_2 = -2363.678516 + 1356.37j
    node_11 = module_0.Node(complex_2)
    linked_list_8 = module_0.LinkedList()
    bool_2 = True
    node_12 = module_0.Node(bool_2)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    node_13 = module_0.Node(var_10)
    assert node_13.data == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    node_14 = module_0.Node(none_type_4)
    linked_list_13 = module_0.LinkedList(node_14)
    var_12 = linked_list_13.remove(none_type_4)
    linked_list_14 = module_0.LinkedList(none_type_4)
    var_13 = linked_list_14.display()
    assert var_13 == ')'
    with pytest.raises(IndexError):
        linked_list_14.pop()

def test_case_1666():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.display()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(var_3)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_3)
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_5 = linked_list_2.display()
    node_8 = module_0.Node(linked_list_3)
    var_6 = linked_list_2.search(var_4)
    var_7 = linked_list_3.search(node_8)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_4.remove(none_type_4)
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_9 = linked_list_6.size()
    assert var_9 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_6 = None
    node_10 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_11 = linked_list_11.push(linked_list_11)
    bool_1 = True
    node_11 = module_0.Node(bool_1)
    node_12 = module_0.Node(node_11)
    node_13 = module_0.Node(bool_1)
    complex_0 = -1265.460815 + 1056.434j
    node_14 = module_0.Node(node_13, complex_0)
    none_type_8 = None
    node_15 = module_0.Node(none_type_8)
    linked_list_12 = module_0.LinkedList(node_15)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.remove(none_type_8)
    none_type_9 = None
    node_16 = module_0.Node(none_type_9)
    node_17 = module_0.Node(none_type_9)

def test_case_1667():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(linked_list_0)

def test_case_1668():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_2)
    var_3 = linked_list_2.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.search(int_0)

def test_case_1669():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_2 = linked_list_2.display()
    assert var_2 == '(-2869.0)'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_1)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_7 = module_0.Node(var_4)
    assert node_7.data == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(node_8, list_0)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()

def test_case_1670():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    node_3 = module_0.Node(var_5)
    assert node_3.data == ')'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.search(int_0)
    node_5 = module_0.Node(var_8)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    var_12 = linked_list_10.search(var_11)

def test_case_1671():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_6.display()
    node_1 = module_0.Node(linked_list_7)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    list_0 = []
    var_7 = linked_list_10.push(list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_12.remove(none_type_6)
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_9 = linked_list_12.display()
    var_10 = linked_list_12.pop()
    assert linked_list_12.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.Node'
    assert var_10.data is None
    assert var_10.next is None
    linked_list_14 = module_0.LinkedList()
    var_11 = linked_list_14.display()
    assert var_11 == ')'
    none_type_7 = None
    linked_list_15 = module_0.LinkedList(none_type_7)
    var_12 = linked_list_15.size()
    assert var_12 == 0
    linked_list_16 = module_0.LinkedList()
    node_6 = module_0.Node(var_12)
    assert node_6.data == 0
    var_13 = linked_list_16.push(none_type_7)
    linked_list_17 = module_0.LinkedList()
    with pytest.raises(IndexError):
        linked_list_17.pop()

def test_case_1672():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1673():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    var_3 = linked_list_3.push(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.search(int_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    var_8 = linked_list_8.search(none_type_4)

def test_case_1674():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(node_4, list_1)
    node_6 = module_0.Node(node_4, dict_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_3)
    var_5 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_8 = module_0.Node(node_7, var_4)
    node_9 = module_0.Node(linked_list_3)
    complex_0 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_0)
    node_11 = module_0.Node(node_10)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_12 = module_0.Node(var_7)
    assert node_12.data == 0
    var_8 = linked_list_7.push(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    node_13 = module_0.Node(var_9)
    assert node_13.data == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    node_14 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.remove(none_type_5)
    var_11 = linked_list_10.search(node_14)
    bool_0 = True
    node_15 = module_0.Node(bool_0)
    node_16 = module_0.Node(node_15)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1675():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'

def test_case_1676():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    assert var_3 == ')'

def test_case_1677():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    var_5 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(node_4, var_4)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.remove(linked_list_5)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    list_0 = []
    var_8 = linked_list_8.push(list_0)

def test_case_1678():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(node_1, var_2)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_1679():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()

def test_case_1680():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_5 = module_0.Node(linked_list_4)
    node_6 = module_0.Node(linked_list_3)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.search(int_0)
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(node_9)
    complex_0 = -2363.678516 + 1356.37j
    node_11 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'

def test_case_1681():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(int_0)
    var_3 = linked_list_2.size()
    assert var_3 == 1

def test_case_1682():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_4 = module_0.Node(linked_list_4)
    var_4 = linked_list_3.search(var_2)
    var_5 = linked_list_4.search(node_4)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_2)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_8 = linked_list_7.push(linked_list_7)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_0)
    complex_1 = -1265.460815 + 1056.434j
    node_10 = module_0.Node(node_9, complex_1)

def test_case_1683():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(linked_list_3)

def test_case_1684():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(node_2, var_3)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_8.size()
    assert var_9 == 0
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_7)
    var_11 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)

def test_case_1685():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = 3548
    var_5 = linked_list_5.search(int_0)
    node_1 = module_0.Node(int_0, var_5)
    var_6 = linked_list_4.size()
    assert var_6 == 0

def test_case_1686():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)

def test_case_1687():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(float_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    none_type_0 = None
    linked_list_5 = module_0.LinkedList(none_type_0)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_1 = module_0.Node(var_3)
    assert node_1.data == 0
    var_4 = linked_list_6.push(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_1 = None
    linked_list_8 = module_0.LinkedList(none_type_1)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(node_3, list_1)
    node_5 = module_0.Node(node_3, dict_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_10 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.remove(none_type_2)

def test_case_1688():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_5 = module_0.Node(var_3)
    assert node_5.data == 0
    var_4 = linked_list_7.push(none_type_2)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.display()
    assert var_5 == ')'

def test_case_1689():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_3.remove(linked_list_3)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.search(int_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_1 = module_0.Node(linked_list_6, linked_list_5)
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_5 = linked_list_8.push(linked_list_8)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_7 = linked_list_9.display()
    node_3 = module_0.Node(linked_list_10)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_4 = module_0.Node(tuple_1)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_9 = linked_list_12.size()
    assert var_9 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_6 = None
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    var_10 = linked_list_14.size()
    assert var_10 == 0
    var_11 = linked_list_12.display()
    assert var_11 == ')'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_12 = linked_list_15.display()
    assert var_12 == ')'

def test_case_1690():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)

def test_case_1691():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_2)
    var_5 = linked_list_2.display()
    var_6 = linked_list_2.display()
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_3.remove(none_type_3)
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_8 = linked_list_3.display()
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_5.display()
    assert var_9 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_1692():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_4 = module_0.Node(node_3, complex_0)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(var_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    float_0 = -2869.0
    node_5 = module_0.Node(float_0)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(int_0)
    var_7 = linked_list_6.size()
    assert var_7 == 1
    node_7 = module_0.Node(var_7, var_7)
    assert node_7.data == 1
    assert node_7.next == 1
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_5)
    var_9 = linked_list_7.display()
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    node_10 = module_0.Node(var_9)
    int_1 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.search(int_1)
    bool_2 = True
    node_11 = module_0.Node(bool_2)
    node_12 = module_0.Node(node_11)
    complex_1 = -2363.678516 + 1356.37j
    node_13 = module_0.Node(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_1693():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    int_1 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(int_1)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    node_3 = module_0.Node(linked_list_3)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_2 = 3548
    var_7 = linked_list_6.search(int_2)
    node_4 = module_0.Node(int_2, var_7)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.remove(none_type_3)
    var_9 = linked_list_7.search(node_5)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(none_type_4)
    var_11 = linked_list_8.display()
    var_12 = linked_list_8.display()
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_13 = linked_list_9.size()
    assert var_13 == 0
    var_14 = linked_list_9.display()
    assert var_14 == ')'
    var_15 = linked_list_9.search(none_type_5)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(node_8, list_0)
    node_10 = module_0.Node(node_8, dict_0)

def test_case_1694():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(float_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    var_3 = linked_list_2.display()
    assert var_3 == '(-2869.0)'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_5 = module_0.Node(var_5)
    assert node_5.data == 0
    var_6 = linked_list_5.push(none_type_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.search(int_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_7 = module_0.Node(linked_list_9, linked_list_8)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    var_12 = linked_list_11.size()
    assert var_12 == 0

def test_case_1695():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    list_0 = []
    var_1 = linked_list_2.push(list_0)
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(str_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.size()
    assert var_4 == 0
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    none_type_6 = None
    node_2 = module_0.Node(none_type_6)

def test_case_1696():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(int_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.search(int_1)
    node_1 = module_0.Node(var_3)
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_1697():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    var_4 = linked_list_2.search(node_2)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_3.display()
    assert var_7 == ')'
    var_8 = linked_list_3.search(var_7)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_6.display()
    assert var_9 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_10 = linked_list_7.size()
    assert var_10 == 0
    var_11 = linked_list_7.size()
    assert var_11 == 0
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    str_0 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_8.display()
    assert var_12 == ')'
    str_1 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_8.remove(linked_list_8)

def test_case_1698():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_3 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_3)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_1)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_6 = module_0.Node(var_5)
    assert node_6.data == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_3)
    var_9 = linked_list_7.display()
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    node_10 = module_0.Node(var_9)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.remove(none_type_5)
    str_0 = 'mf|7{^GR(@+K1Gg\nO-k'

def test_case_1699():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(linked_list_3)
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.remove(none_type_3)
    var_6 = linked_list_4.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    str_0 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.display()
    assert var_11 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_7 = None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_12 = linked_list_14.remove(none_type_7)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    linked_list_15 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_15.remove(none_type_8)
    linked_list_16 = module_0.LinkedList(none_type_8)
    assert linked_list_16.head is None
    var_14 = linked_list_15.display()
    node_6 = module_0.Node(linked_list_16)
    var_15 = linked_list_15.search(var_13)

def test_case_1700():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    var_6 = linked_list_4.search(var_5)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_9 = linked_list_9.display()
    node_3 = module_0.Node(linked_list_10)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)

def test_case_1701():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)

def test_case_1702():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(linked_list_5)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_3 = module_0.Node(var_6)
    assert node_3.data == 0
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    float_0 = -2869.0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.push(float_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    var_9 = linked_list_10.display()
    assert var_9 == '(-2869.0)'
    with pytest.raises(IndexError):
        linked_list_5.pop()

def test_case_1703():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(str_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    var_4 = linked_list_3.pop()
    assert linked_list_3.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    int_0 = 3548
    var_7 = linked_list_6.search(int_0)
    node_1 = module_0.Node(int_0, var_7)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    str_1 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    str_2 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(linked_list_7)
    str_3 = '#p1jIXa}Q?(h'
    dict_0 = {str_3: str_3, str_3: str_3, str_3: str_3}
    list_0 = [dict_0, dict_0, str_3, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_10.size()
    assert var_11 == 0
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_6)
    var_12 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList(none_type_5)
    linked_list_13 = module_0.LinkedList()
    with pytest.raises(IndexError):
        linked_list_10.pop()

def test_case_1704():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(var_2)
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    none_type_4 = None
    node_0 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_6.remove(none_type_4)

def test_case_1705():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1706():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_4.remove(linked_list_4)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_0 = module_0.Node(var_6)
    assert node_0.data == 0
    var_7 = linked_list_8.push(none_type_3)

def test_case_1707():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.search(int_0)
    node_1 = module_0.Node(var_3)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_2.display()
    assert var_6 == ')'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.remove(linked_list_5)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_3 = module_0.Node(var_9)
    assert node_3.data == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_13 = linked_list_11.display()
    assert var_13 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_14 = linked_list_12.display()
    assert var_14 == ')'
    none_type_6 = None
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_15 = linked_list_13.size()
    assert var_15 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    node_4 = module_0.Node(var_15)
    assert node_4.data == 0
    var_16 = linked_list_14.push(none_type_6)
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    linked_list_15 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_17 = linked_list_15.remove(none_type_7)
    none_type_8 = None
    linked_list_16 = module_0.LinkedList(none_type_8)
    assert linked_list_16.head is None
    none_type_9 = None
    node_6 = module_0.Node(none_type_9)
    linked_list_17 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_17.head).__module__}.{type(linked_list_17.head).__qualname__}' == 'linkedList4.Node'
    var_18 = linked_list_17.remove(none_type_9)
    linked_list_18 = module_0.LinkedList(none_type_9)
    assert linked_list_18.head is None
    var_19 = linked_list_17.display()
    node_7 = module_0.Node(linked_list_18)
    node_8 = module_0.Node(linked_list_17)

def test_case_1708():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    str_2 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(linked_list_2)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xa5[%<'
    node_1 = module_0.Node(bytes_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_6.search(int_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_3 = '#p1jIXa}Q?(h'
    dict_0 = {str_3: str_3, str_3: str_3, str_3: str_3}
    list_0 = [dict_0, dict_0, str_3, dict_0]
    node_7 = module_0.Node(list_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    linked_list_9 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_9.remove(none_type_2)
    linked_list_10 = module_0.LinkedList(none_type_2)
    assert linked_list_10.head is None
    var_5 = linked_list_9.display()
    node_9 = module_0.Node(linked_list_10)
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    linked_list_11 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_11.remove(none_type_3)
    linked_list_12 = module_0.LinkedList(none_type_3)
    assert linked_list_12.head is None
    none_type_4 = None
    linked_list_13 = module_0.LinkedList(none_type_4)
    assert linked_list_13.head is None
    var_7 = linked_list_13.size()
    assert var_7 == 0
    var_8 = linked_list_13.display()
    assert var_8 == ')'

def test_case_1709():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'

def test_case_1710():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(float_0)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    node_1 = module_0.Node(linked_list_6)
    var_7 = linked_list_5.search(var_5)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'

def test_case_1711():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_1)
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.remove(none_type_2)
    var_5 = linked_list_7.search(node_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    int_0 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_9.push(int_0)
    var_7 = linked_list_9.size()
    assert var_7 == 1
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_3)
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_9 = linked_list_9.pop()
    assert var_9 == -1061
    assert linked_list_9.head is None

def test_case_1712():
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_0)
    assert node_3.data == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_2)
    var_3 = linked_list_1.search(node_4)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)
    node_9 = module_0.Node(node_7, dict_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_10 = module_0.Node(list_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_2 = True
    node_11 = module_0.Node(bool_2)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_12 = module_0.Node(var_6)
    assert node_12.data == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_5 = None
    node_13 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_1713():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.remove(linked_list_1)

def test_case_1714():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    node_7 = module_0.Node(none_type_2)
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_1 = [dict_1]
    list_2 = [bool_1, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_1, list_1, tuple_0)
    node_8 = module_0.Node(tuple_1)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(bool_2)
    complex_0 = -1265.460815 + 1056.434j
    node_12 = module_0.Node(node_11, complex_0)

def test_case_1715():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(node_2)

def test_case_1716():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.search(int_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(linked_list_4, linked_list_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_7.display()
    var_7 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.Node'
    assert var_7.data is None
    assert var_7.next is None

def test_case_1717():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(linked_list_2, linked_list_1)
    int_1 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(int_1)
    var_4 = linked_list_4.size()
    assert var_4 == 1
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(var_5)
    assert node_3.data == 0

def test_case_1718():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(var_3)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_4 = module_0.Node(linked_list_6, linked_list_5)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.remove(none_type_6)
    var_11 = linked_list_12.remove(linked_list_12)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_12 = linked_list_13.display()
    assert var_12 == ')'
    node_8 = module_0.Node(var_12)
    assert node_8.data == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_0)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_13 = linked_list_15.size()
    assert var_13 == 0

def test_case_1719():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_2 = module_0.Node(var_0)
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(float_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_1)
    var_2 = linked_list_1.display()
    assert var_2 == '(-2869.0)'
    float_1 = 2634.854
    dict_1 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_2 = True
    list_1 = [dict_1]
    list_2 = [bool_2, float_1]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_2, list_1, tuple_0)
    node_6 = module_0.Node(tuple_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    node_7 = module_0.Node(var_3)
    assert node_7.data == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_0 = None
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_8 = module_0.Node(var_5)
    assert node_8.data == 0
    var_6 = linked_list_5.push(none_type_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    linked_list_7 = module_0.LinkedList(none_type_1)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'

def test_case_1720():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    var_5 = linked_list_2.size()
    assert var_5 == 0
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(var_4)
    assert node_4.data == 0
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_6 = linked_list_3.size()
    assert var_6 == 0
    var_7 = linked_list_3.display()
    assert var_7 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_8 = linked_list_4.display()
    assert var_8 == ')'
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1721():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_1 = module_0.Node(linked_list_4)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_6)
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_10 = linked_list_10.display()
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_5 = module_0.Node(var_11)
    assert node_5.data == 0

def test_case_1722():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(float_0)
    var_2 = linked_list_2.pop()
    assert var_2 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_2.head is None

def test_case_1723():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_2 = module_0.Node(var_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    var_3 = linked_list_2.size()
    assert var_3 == 0
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1724():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_0 = linked_list_2.push(linked_list_2)
    var_1 = linked_list_1.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_1)
    complex_0 = -1265.460815 + 1056.434j
    node_5 = module_0.Node(node_4, complex_0)
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_3)
    var_4 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(node_6, var_3)
    node_8 = module_0.Node(linked_list_5)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(bytes_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_9 = module_0.Node(list_0)
    node_10 = module_0.Node(node_9, list_0)

def test_case_1725():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_1.search(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.size()
    assert var_4 == 0
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_5)
    var_6 = linked_list_5.remove(linked_list_5)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_6)
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    none_type_7 = None
    linked_list_8 = module_0.LinkedList(none_type_7)
    assert linked_list_8.head is None
    str_0 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    float_1 = -2869.0
    node_7 = module_0.Node(float_1)
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.search(int_0)
    none_type_8 = None
    node_8 = module_0.Node(none_type_8)
    linked_list_11 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(none_type_8)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_9 = module_0.Node(linked_list_11, linked_list_10)

def test_case_1726():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.Node'
    assert var_2.data is None
    assert var_2.next is None
    linked_list_3 = module_0.LinkedList()
    var_3 = linked_list_3.push(linked_list_2)

def test_case_1727():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1728():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bytes_1 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_1)

def test_case_1729():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_1730():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    node_5 = module_0.Node(var_3)
    assert node_5.data == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_6 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_4 = linked_list_8.push(float_0)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_2)
    var_5 = linked_list_8.display()
    assert var_5 == '(-2869.0)'
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_1731():
    int_0 = -578
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)

def test_case_1732():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(linked_list_3)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(bytes_0)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_6)
    var_10 = linked_list_9.display()
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    node_6 = module_0.Node(var_10)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_12.display()
    assert var_12 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None

def test_case_1733():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_1734():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    var_5 = linked_list_5.display()
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    node_3 = module_0.Node(var_5)
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    str_0 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    str_1 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(linked_list_6)

def test_case_1735():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    node_3 = module_0.Node(linked_list_2)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    list_0 = []
    var_5 = linked_list_4.push(list_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    float_0 = -2869.0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(float_0)
    var_7 = linked_list_6.pop()
    assert var_7 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(linked_list_8)
    var_9 = linked_list_7.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_5 = module_0.Node(var_11)
    assert node_5.data == 0
    var_12 = linked_list_11.push(none_type_5)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_2 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_2)
    node_7 = module_0.Node(node_6, list_2)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_13 = linked_list_12.display()
    assert var_13 == ')'
    node_9 = module_0.Node(var_13)
    assert node_9.data == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    with pytest.raises(IndexError):
        linked_list_7.pop()

def test_case_1736():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_0 = linked_list_3.display()
    assert var_0 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_1 = linked_list_4.size()
    assert var_1 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_5.push(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.remove(none_type_2)
    var_4 = linked_list_6.remove(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_7 = linked_list_10.remove(str_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    str_2 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.display()
    assert var_8 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_5 = None
    linked_list_14 = module_0.LinkedList(none_type_5)
    assert linked_list_14.head is None
    var_9 = linked_list_14.size()
    assert var_9 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    node_5 = module_0.Node(var_9)
    assert node_5.data == 0
    with pytest.raises(IndexError):
        linked_list_7.pop()

def test_case_1737():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)

def test_case_1738():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bytes_0 = b'\xa5[%<'
    node_1 = module_0.Node(bytes_0)

def test_case_1739():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'

def test_case_1740():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.push(none_type_0)

def test_case_1741():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_1.display()
    assert var_1 == '(-2869.0)'
    float_1 = 2634.854
    dict_0 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_1]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_6 = module_0.Node(var_2)
    assert node_6.data == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.display()
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.display()
    assert var_6 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_1742():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)

def test_case_1743():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    var_3 = linked_list_2.display()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    node_5 = module_0.Node(var_3)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_1 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(int_1)

def test_case_1744():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)

def test_case_1745():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.search(int_0)
    node_3 = module_0.Node(var_4)
    int_1 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(int_1)
    bool_0 = True
    set_0 = {bool_0}
    none_type_3 = None
    node_4 = module_0.Node(set_0, none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.remove(none_type_4)

def test_case_1746():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.display()
    assert var_1 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_3.remove(linked_list_3)
    none_type_1 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_5 = linked_list_8.push(linked_list_8)
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_9.search(int_0)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_3 = module_0.Node(linked_list_10, linked_list_9)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_8 = linked_list_12.size()
    assert var_8 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_4 = module_0.Node(var_8)
    assert node_4.data == 0
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_14 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_14.remove(none_type_6)
    var_10 = linked_list_14.display()
    var_11 = linked_list_14.display()
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(bool_0)
    none_type_7 = None
    linked_list_15 = module_0.LinkedList(none_type_7)
    assert linked_list_15.head is None

def test_case_1747():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    var_3 = linked_list_3.remove(linked_list_3)
    bytes_1 = b'\xa5[%<'
    node_8 = module_0.Node(bytes_1)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_3)
    var_5 = linked_list_4.display()
    var_6 = linked_list_4.display()
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.push(float_0)
    bool_1 = True
    node_10 = module_0.Node(bool_1)
    node_11 = module_0.Node(node_10)
    node_12 = module_0.Node(bool_1)
    var_8 = linked_list_5.display()
    assert var_8 == '(-2869.0)'
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_9 = linked_list_6.size()
    assert var_9 == 0

def test_case_1748():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(var_3)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_8 = module_0.Node(var_5)
    assert node_8.data == 0
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(node_9)
    var_7 = linked_list_3.display()

def test_case_1749():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    var_1 = linked_list_0.display()
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_3)
    linked_list_4 = module_0.LinkedList(var_3)
    assert linked_list_4.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(node_4, list_1)
    node_6 = module_0.Node(node_4, dict_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    node_7 = module_0.Node(var_4)
    assert node_7.data == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.search(int_0)
    bool_0 = True
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(node_8)
    complex_0 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_1750():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    node_1 = module_0.Node(none_type_0, linked_list_0)
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1751():
    str_0 = ''
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1752():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(var_4)
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_6 = linked_list_10.size()
    assert var_6 == 0
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    str_0 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.display()
    assert var_8 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    float_1 = 2634.854
    dict_0 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_1]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_3 = module_0.Node(tuple_1)
    str_1 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_1, dict_1, str_2, dict_1]
    node_4 = module_0.Node(list_2)
    node_5 = module_0.Node(node_4, list_2)
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    int_0 = -1061
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_9 = linked_list_15.push(int_0)
    var_10 = linked_list_15.size()
    assert var_10 == 1
    node_7 = module_0.Node(var_10, var_10)
    assert node_7.data == 1
    assert node_7.next == 1
    with pytest.raises(IndexError):
        linked_list_6.pop()

def test_case_1753():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    float_1 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(float_1)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_3 = linked_list_1.display()
    assert var_3 == '(-2869.0)'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_5 = linked_list_2.display()
    node_4 = module_0.Node(linked_list_3)
    var_6 = linked_list_2.search(var_4)
    var_7 = linked_list_3.search(node_4)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_8 = linked_list_5.size()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_2)
    linked_list_10 = module_0.LinkedList(none_type_2)
    assert linked_list_10.head is None
    var_11 = linked_list_9.display()
    var_12 = linked_list_9.pop()
    assert linked_list_9.head is None
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList4.Node'
    assert var_12.data is None
    assert var_12.next is None
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    var_13 = linked_list_11.size()
    assert var_13 == 0
    linked_list_12 = module_0.LinkedList()
    none_type_4 = None
    linked_list_13 = module_0.LinkedList(none_type_4)
    var_14 = linked_list_13.size()
    assert var_14 == 0
    var_15 = linked_list_11.display()
    assert var_15 == ')'
    var_16 = linked_list_11.search(var_15)
    none_type_5 = None
    linked_list_14 = module_0.LinkedList(none_type_5)
    none_type_6 = None
    linked_list_15 = module_0.LinkedList(none_type_6)
    var_17 = linked_list_15.push(linked_list_15)
    var_18 = linked_list_14.size()
    assert var_18 == 0
    linked_list_16 = module_0.LinkedList()
    var_19 = linked_list_16.display()
    assert var_19 == ')'
    node_8 = module_0.Node(var_19)
    assert node_8.data == ')'
    linked_list_17 = module_0.LinkedList()

def test_case_1754():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(none_type_1, linked_list_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_3)
    var_4 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(linked_list_6)
    var_6 = linked_list_5.size()
    assert var_6 == 0

def test_case_1755():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_1)
    assert node_1.data == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(bool_2)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)

def test_case_1756():
    bool_0 = False
    bool_1 = True
    linked_list_0 = module_0.LinkedList(bool_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(True)'

def test_case_1757():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    var_1 = linked_list_0.display()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_1 = module_0.LinkedList(none_type_3)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.size()
    assert var_3 == 0
    complex_0 = -1140.8205 + 683.2j

def test_case_1758():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)
    int_1 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(int_1)
    float_0 = 4618.447563
    var_4 = linked_list_2.remove(float_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    bytes_0 = b'\xa5[%<'
    node_4 = module_0.Node(bytes_0)
    int_2 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_2)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    str_2 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(linked_list_8)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_4)
    var_12 = linked_list_11.remove(linked_list_11)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_6 = module_0.Node(node_5, var_11)
    node_7 = module_0.Node(linked_list_11)

def test_case_1759():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.push(int_0)
    float_0 = 4618.447563
    var_4 = linked_list_1.remove(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_6 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)

def test_case_1760():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    complex_0 = -2363.678516 + 1356.37j
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(complex_0)

def test_case_1761():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_1762():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1763():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_4 = module_0.Node(linked_list_4)
    var_4 = linked_list_3.search(var_2)
    var_5 = linked_list_4.search(node_4)
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.search(int_0)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(bool_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_8.push(linked_list_9)

def test_case_1764():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    var_3 = linked_list_2.display()
    assert var_3 == ')'

def test_case_1765():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    var_5 = linked_list_4.search(none_type_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'

def test_case_1766():
    str_0 = '*b"|k~zy\x0b#Bw*ZfU5O\'Y'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)

def test_case_1767():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    int_1 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(int_1)
    float_0 = 4618.447563
    var_3 = linked_list_1.remove(float_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_2.display()
    assert var_6 == ')'
    var_7 = linked_list_2.search(var_6)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.remove(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)

def test_case_1768():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_3 = linked_list_7.size()
    assert var_3 == 0
    var_4 = linked_list_7.display()
    assert var_4 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.display()
    assert var_5 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_9.display()
    assert var_6 == ')'
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_1 = module_0.Node(var_7)
    assert node_1.data == 0
    var_8 = linked_list_11.push(none_type_4)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1769():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    bytes_0 = b'\xa5[%<'
    node_1 = module_0.Node(bytes_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    node_2 = module_0.Node(var_1)
    assert node_2.data == ')'
    int_1 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(int_1)
    var_3 = linked_list_2.size()
    assert var_3 == 1
    node_3 = module_0.Node(var_3, var_3)
    assert node_3.data == 1
    assert node_3.next == 1
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(none_type_0)
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1770():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(none_type_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_8 = linked_list_11.remove(node_7)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_9 = linked_list_12.size()
    assert var_9 == 0
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_13.remove(none_type_6)
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    bool_0 = True
    node_10 = module_0.Node(bool_0)
    node_11 = module_0.Node(node_10)
    node_12 = module_0.Node(bool_0)
    none_type_7 = None
    node_13 = module_0.Node(none_type_7)
    none_type_8 = None
    linked_list_15 = module_0.LinkedList(none_type_8)
    assert linked_list_15.head is None
    var_11 = linked_list_15.size()
    assert var_11 == 0
    var_12 = linked_list_15.size()
    assert var_12 == 0
    var_13 = linked_list_10.display()
    assert var_13 == ')'

def test_case_1771():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_0)
    var_3 = linked_list_1.remove(linked_list_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_5 = linked_list_2.display()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_2)
    var_7 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_6 = module_0.Node(node_5, var_6)
    node_7 = module_0.Node(node_5)
    with pytest.raises(IndexError):
        linked_list_3.pop()

def test_case_1772():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    node_1 = module_0.Node(none_type_0, linked_list_0)
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    var_1 = linked_list_1.display()
    assert var_1 == '(-2869.0)'
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    node_8 = module_0.Node(var_3)
    assert node_8.data == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    node_9 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_1)
    linked_list_7 = module_0.LinkedList(none_type_1)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_5 = linked_list_9.size()
    assert var_5 == 0
    float_1 = 2634.854
    dict_0 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_2 = True
    list_0 = [dict_0]
    list_1 = [bool_2, float_1]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_2, list_0, tuple_0)
    node_11 = module_0.Node(tuple_1)

def test_case_1773():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.size()
    assert var_2 == 0
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_1774():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_1 = '$T\x0bL=O]w^NF\tP'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(str_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    var_3 = linked_list_3.display()
    bytes_0 = b'\xd1\xda\x06$WW,\x7f7'

def test_case_1775():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_5.remove(none_type_1)
    var_2 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(node_2, var_1)
    node_4 = module_0.Node(node_2)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_4 = linked_list_9.display()
    node_6 = module_0.Node(linked_list_10)
    var_5 = linked_list_9.search(var_3)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_6 = linked_list_12.size()
    assert var_6 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_7 = linked_list_13.display()
    assert var_7 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_8 = linked_list_13.remove(linked_list_13)
    none_type_5 = None
    linked_list_15 = module_0.LinkedList(none_type_5)
    assert linked_list_15.head is None
    var_9 = linked_list_15.size()
    assert var_9 == 0
    var_10 = linked_list_15.display()
    assert var_10 == ')'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_16 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'

def test_case_1776():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(list_0)

def test_case_1777():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.push(linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    var_6 = linked_list_3.search(var_5)
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(int_0)
    var_8 = linked_list_6.size()
    assert var_8 == 1
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    int_1 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.search(int_1)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_10 = linked_list_8.push(bytes_0)
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_2 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.push(int_2)
    var_12 = linked_list_10.size()
    assert var_12 == 1
    node_2 = module_0.Node(var_12, var_12)
    assert node_2.data == 1
    assert node_2.next == 1

def test_case_1778():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(float_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.search(int_0)

def test_case_1779():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xa5[%<'
    node_6 = module_0.Node(bytes_0)
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_1 = linked_list_4.push(float_0)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.search(int_0)

def test_case_1780():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None

def test_case_1781():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_0.display()
    assert var_4 == '(-1061)'

def test_case_1782():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_2 = module_0.Node(node_1, var_5)
    node_3 = module_0.Node(linked_list_5)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_4 = module_0.Node(var_7)
    assert node_4.data == 0
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_4)
    var_9 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_6 = module_0.Node(node_5, var_8)
    str_0 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_1783():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    bytes_0 = b'|QQl\x00\xed\xdf\xb7\x9d\xba#'

def test_case_1784():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'

def test_case_1785():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    complex_1 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    node_3 = module_0.Node(var_4)
    assert node_3.data == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'

def test_case_1786():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(int_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    node_4 = module_0.Node(linked_list_5)
    var_5 = linked_list_4.search(var_3)
    var_6 = linked_list_5.search(node_4)

def test_case_1787():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)

def test_case_1788():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    int_1 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(linked_list_5)
    var_6 = linked_list_4.size()
    assert var_6 == 0
    bytes_2 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    int_2 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.search(int_2)
    node_1 = module_0.Node(var_7)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_2)
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    bytes_3 = b'\xa5[%<'
    node_3 = module_0.Node(bytes_3)

def test_case_1789():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'

def test_case_1790():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    var_1 = linked_list_1.display()
    var_2 = linked_list_1.display()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(node_1)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    node_6 = module_0.Node(linked_list_8)
    var_9 = linked_list_7.search(var_7)
    var_10 = linked_list_8.search(node_6)
    float_0 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.push(float_0)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_10.remove(none_type_5)
    var_13 = linked_list_10.remove(linked_list_10)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_14 = linked_list_12.size()
    assert var_14 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_15 = linked_list_13.display()
    assert var_15 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    bool_0 = True
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(node_8)
    dict_0 = {linked_list_5: bytes_0}

def test_case_1791():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(var_4)
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_5 = linked_list_8.push(linked_list_8)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_6 = module_0.Node(none_type_6, linked_list_9)
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1792():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(linked_list_3, linked_list_2)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.remove(none_type_3)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_2 = True
    list_0 = [dict_0]
    list_1 = [bool_2, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_2, list_0, tuple_0)
    node_7 = module_0.Node(tuple_1)

def test_case_1793():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(none_type_0)

def test_case_1794():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_1 = module_0.Node(var_3)
    assert node_1.data == 0
    var_4 = linked_list_4.push(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    bool_0 = True
    set_0 = {bool_0}
    none_type_3 = None
    node_3 = module_0.Node(set_0, none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.remove(node_4)
    bytes_0 = b'\xa5[%<'
    node_5 = module_0.Node(bytes_0)

def test_case_1795():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_2)
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_4 = module_0.Node(linked_list_2)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    node_6 = module_0.Node(node_5)

def test_case_1796():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(node_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_1 = module_0.Node(var_3)
    assert node_1.data == 0
    var_4 = linked_list_5.push(none_type_1)

def test_case_1797():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    var_1 = linked_list_0.push(var_0)

def test_case_1798():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_6.size()
    assert var_5 == 0
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(var_4)
    assert node_5.data == 0
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_4)
    var_7 = linked_list_7.display()
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    node_8 = module_0.Node(var_7)
    complex_0 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    bool_1 = True
    node_10 = module_0.Node(bool_1)
    node_11 = module_0.Node(node_10)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    complex_1 = -2363.678516 + 1356.37j
    node_12 = module_0.Node(complex_1)

def test_case_1799():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'

def test_case_1800():
    str_0 = '[b'
    set_0 = {str_0, str_0}
    complex_0 = 480.54151 - 1315.704j
    linked_list_0 = module_0.LinkedList(complex_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '((480.54151-1315.704j))'

def test_case_1801():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.size()
    assert var_3 == 0

def test_case_1802():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1803():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.size()
    assert var_3 == 0
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(var_2)
    assert node_6.data == 0
    complex_0 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_0)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    str_2 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(linked_list_4)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    node_9 = module_0.Node(linked_list_8)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    int_1 = -1061
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.push(int_1)

def test_case_1804():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.size()
    assert var_3 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_2.display()
    assert var_6 == ')'
    var_7 = linked_list_2.search(var_6)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    var_10 = linked_list_6.display()
    assert var_10 == ')'
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    node_9 = module_0.Node(bool_2)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_10 = module_0.Node(var_11)
    assert node_10.data == 0
    none_type_8 = None
    linked_list_12 = module_0.LinkedList(none_type_8)
    assert linked_list_12.head is None
    str_0 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.display()
    assert var_12 == ')'

def test_case_1805():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    var_5 = linked_list_4.push(none_type_1)

def test_case_1806():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(none_type_1, linked_list_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_3.display()
    node_4 = module_0.Node(linked_list_4)

def test_case_1807():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_5 = linked_list_6.display()
    node_5 = module_0.Node(linked_list_7)
    var_6 = linked_list_6.search(var_4)
    var_7 = linked_list_7.search(node_5)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_8 = linked_list_9.push(linked_list_9)
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_11 = linked_list_11.display()
    var_12 = linked_list_11.pop()
    assert linked_list_11.head is None
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList4.Node'
    assert var_12.data is None
    assert var_12.next is None
    int_0 = 1454
    linked_list_13 = module_0.LinkedList()
    var_13 = linked_list_13.search(int_0)

def test_case_1808():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(bytes_0)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.search(int_0)
    node_3 = module_0.Node(var_3)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_1809():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_6 = linked_list_10.size()
    assert var_6 == 0
    var_7 = linked_list_10.display()
    assert var_7 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_8 = linked_list_11.display()
    assert var_8 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_1810():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_3)
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.remove(node_4)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)

def test_case_1811():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_6.remove(linked_list_6)
    int_0 = -1061
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(int_0)
    var_8 = linked_list_8.size()
    assert var_8 == 1
    node_0 = module_0.Node(var_8, var_8)
    assert node_0.data == 1
    assert node_0.next == 1
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    node_3 = module_0.Node(node_1, dict_0)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.display()
    assert var_12 == ')'

def test_case_1812():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    str_1 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_0)
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    var_2 = linked_list_3.display()
    var_3 = linked_list_3.pop()
    assert linked_list_3.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.Node'
    assert var_3.data is None
    assert var_3.next is None
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    var_6 = linked_list_6.display()
    assert var_6 == ')'

def test_case_1813():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.display()
    assert var_3 == ')'

def test_case_1814():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.display()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    node_6 = module_0.Node(var_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(none_type_3)
    none_type_4 = None
    linked_list_3 = module_0.LinkedList(none_type_4)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_4.remove(linked_list_4)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_6)
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_9 = linked_list_7.display()
    node_8 = module_0.Node(linked_list_8)
    node_9 = module_0.Node(linked_list_7)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_10.display()
    assert var_12 == ')'
    none_type_8 = None
    linked_list_12 = module_0.LinkedList(none_type_8)
    assert linked_list_12.head is None
    var_13 = linked_list_12.size()
    assert var_13 == 0
    var_14 = linked_list_12.display()
    assert var_14 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    int_0 = 3548
    var_15 = linked_list_13.search(int_0)
    node_10 = module_0.Node(int_0, var_15)

def test_case_1815():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'

def test_case_1816():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_1)
    node_1 = module_0.Node(node_0, list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_3 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    var_4 = linked_list_2.search(node_3)

def test_case_1817():
    pass

def test_case_1818():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.push(linked_list_1)

def test_case_1819():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_1 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_0 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_6 = linked_list_10.push(int_0)
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_7 = linked_list_11.push(linked_list_11)
    float_0 = -2869.0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.push(float_0)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_1)
    var_9 = linked_list_12.display()
    assert var_9 == '(-2869.0)'
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_13 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_13.remove(none_type_5)
    linked_list_14 = module_0.LinkedList(none_type_5)
    assert linked_list_14.head is None

def test_case_1820():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(node_0, var_1)
    node_2 = module_0.Node(linked_list_1)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = 3548
    var_6 = linked_list_5.search(int_0)
    node_4 = module_0.Node(int_0, var_6)

def test_case_1821():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_1822():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.remove(none_type_0)
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(float_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)

def test_case_1823():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0

def test_case_1824():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_1825():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    bytes_0 = b'\xa5[%<'
    node_5 = module_0.Node(bytes_0)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_7 = None
    linked_list_10 = module_0.LinkedList(none_type_7)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    var_9 = linked_list_8.search(var_8)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)

def test_case_1826():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = -1061
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(int_0)
    float_0 = 4618.447563
    var_6 = linked_list_5.remove(float_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)

def test_case_1827():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(int_0)
    var_3 = linked_list_2.size()
    assert var_3 == 1
    node_3 = module_0.Node(var_3, var_3)
    assert node_3.data == 1
    assert node_3.next == 1
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    float_0 = -2122.54
    node_4 = module_0.Node(float_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.remove(none_type_3)
    var_8 = linked_list_6.search(node_5)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.remove(str_0)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_11 = linked_list_9.display()
    node_11 = module_0.Node(linked_list_10)
    node_12 = module_0.Node(linked_list_9)
    complex_0 = -2363.678516 + 1356.37j
    node_13 = module_0.Node(complex_0)

def test_case_1828():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.search(int_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_5.remove(none_type_2)
    var_3 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_9 = module_0.Node(node_8, var_2)
    node_10 = module_0.Node(node_8)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_11 = module_0.Node(list_0)
    node_12 = module_0.Node(node_11, list_0)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    list_1 = []
    var_4 = linked_list_7.push(list_1)
    none_type_4 = None
    node_13 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_8.remove(none_type_4)
    var_6 = linked_list_8.push(none_type_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_8 = None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_11 = linked_list_14.remove(none_type_8)
    linked_list_15 = module_0.LinkedList(var_11)
    assert linked_list_15.head is None

def test_case_1829():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    var_3 = linked_list_4.push(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(str_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_7.display()
    node_5 = module_0.Node(linked_list_8)
    var_7 = linked_list_7.search(var_5)
    bool_0 = True
    set_0 = {bool_0}
    none_type_4 = None
    node_6 = module_0.Node(set_0, none_type_4)

def test_case_1830():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(float_0)
    var_9 = linked_list_8.pop()
    assert var_9 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_8.head is None
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_11 = linked_list_9.display()
    node_3 = module_0.Node(linked_list_10)
    node_4 = module_0.Node(linked_list_9)
    bool_0 = True
    set_0 = {bool_0}
    none_type_5 = None
    node_5 = module_0.Node(set_0, none_type_5)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_13 = linked_list_11.display()
    int_0 = 1454
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_14 = linked_list_13.search(int_0)
    none_type_7 = None
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    var_15 = linked_list_14.size()
    assert var_15 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    none_type_8 = None
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    var_16 = linked_list_16.remove(none_type_8)
    linked_list_17 = module_0.LinkedList(var_16)
    assert linked_list_17.head is None
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(bool_1)

def test_case_1831():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1832():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_5.display()
    node_3 = module_0.Node(linked_list_6)
    var_6 = linked_list_5.search(var_4)
    var_7 = linked_list_6.search(node_3)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(bool_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    var_9 = linked_list_7.size()
    assert var_9 == 0
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(var_8)
    assert node_8.data == 0
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    var_11 = linked_list_8.size()
    assert var_11 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_7 = None
    node_10 = module_0.Node(none_type_7)
    linked_list_10 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_10.remove(none_type_7)
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    var_13 = linked_list_10.display()
    var_14 = linked_list_10.pop()
    assert linked_list_10.head is None
    assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'linkedList4.Node'
    assert var_14.data is None
    assert var_14.next is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_11 = module_0.Node(list_1)
    linked_list_12 = module_0.LinkedList()
    var_15 = linked_list_12.display()
    assert var_15 == ')'
    bool_2 = True
    node_12 = module_0.Node(bool_2)
    none_type_8 = None
    linked_list_13 = module_0.LinkedList(none_type_8)
    var_16 = linked_list_13.size()
    assert var_16 == 0
    linked_list_14 = module_0.LinkedList()
    node_13 = module_0.Node(var_16)
    assert node_13.data == 0
    var_17 = linked_list_14.display()
    assert var_17 == ')'
    linked_list_15 = module_0.LinkedList()

def test_case_1833():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_1834():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(var_6)
    assert node_4.data == 0
    var_7 = linked_list_6.push(none_type_3)

def test_case_1835():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    node_2 = module_0.Node(linked_list_1)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(int_0)
    var_3 = linked_list_3.size()
    assert var_3 == 1
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    var_5 = linked_list_4.display()
    var_6 = linked_list_4.display()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_9.remove(none_type_5)
    var_12 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_13 = linked_list_11.display()
    assert var_13 == ')'
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_14 = linked_list_12.size()
    assert var_14 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_6 = module_0.Node(var_14)
    assert node_6.data == 0
    var_15 = linked_list_13.push(none_type_6)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None

def test_case_1836():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_4.push(linked_list_5)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_6.size()
    assert var_6 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    var_9 = linked_list_7.search(none_type_5)
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.search(int_0)
    node_4 = module_0.Node(var_10)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(node_5, list_1)

def test_case_1837():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(none_type_0, linked_list_2)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_1)
    node_4 = module_0.Node(node_3, list_1)
    node_5 = module_0.Node(node_3, dict_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_3 = linked_list_5.push(bytes_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_4 = linked_list_8.size()
    assert var_4 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_9 = module_0.Node(var_4)
    assert node_9.data == 0
    var_5 = linked_list_9.display()
    assert var_5 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    float_1 = 2634.854
    dict_2 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_2 = True
    list_2 = [dict_2]
    list_3 = [bool_2, float_1]
    tuple_0 = (list_3,)
    tuple_1 = (dict_2, bool_2, list_2, tuple_0)
    node_10 = module_0.Node(tuple_1)
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_1838():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 3548
    var_5 = linked_list_7.search(int_0)
    node_3 = module_0.Node(int_0, var_5)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_2)
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    int_1 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_7 = linked_list_10.search(int_1)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(bool_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    int_2 = -1061
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.push(int_2)
    bool_1 = False

def test_case_1839():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == 0
    bool_0 = True
    set_0 = {bool_0}
    none_type_2 = None
    node_1 = module_0.Node(set_0, none_type_2)

def test_case_1840():
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(str_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(int_0)
    float_0 = 4618.447563
    var_3 = linked_list_2.remove(float_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(bool_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_1)
    linked_list_7 = module_0.LinkedList(none_type_1)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    var_7 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.Node'
    assert var_7.data is None
    assert var_7.next is None
    linked_list_8 = module_0.LinkedList(linked_list_6)
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    var_8 = linked_list_9.push(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(bool_2)
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.display()
    assert var_9 == ')'
    float_1 = -2869.0
    node_9 = module_0.Node(float_1)

def test_case_1841():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_0.search(node_0)

def test_case_1842():
    int_0 = 2366
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)

def test_case_1843():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    var_4 = linked_list_3.size()
    assert var_4 == 0

def test_case_1844():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_0.push(linked_list_0)
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(str_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_1 = module_0.Node(var_6)
    assert node_1.data == 0
    var_7 = linked_list_6.push(none_type_1)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(linked_list_8)
    var_9 = linked_list_7.size()
    assert var_9 == 0
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0

def test_case_1845():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    node_0 = module_0.Node(var_3)
    assert node_0.data == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.push(float_0)
    var_6 = linked_list_8.pop()
    assert var_6 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_8.head is None

def test_case_1846():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(float_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    node_2 = module_0.Node(linked_list_7)
    var_8 = linked_list_6.search(var_6)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_3 = module_0.Node(var_9)
    assert node_3.data == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_11 = linked_list_11.size()
    assert var_11 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_4 = module_0.Node(var_11)
    assert node_4.data == 0
    var_12 = linked_list_12.push(none_type_5)
    var_13 = linked_list_10.push(linked_list_10)

def test_case_1847():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(none_type_3, linked_list_7)
    float_1 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(float_1)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_0)
    var_7 = linked_list_8.display()
    assert var_7 == '(-2869.0)'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_4)
    var_9 = linked_list_9.display()
    var_10 = linked_list_9.display()
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.remove(none_type_5)
    var_12 = linked_list_10.search(node_8)

def test_case_1848():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1849():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    node_4 = module_0.Node(linked_list_5)
    var_5 = linked_list_4.search(var_3)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    var_8 = linked_list_6.search(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_6 = module_0.Node(var_10)
    assert node_6.data == 0
    var_11 = linked_list_9.push(none_type_4)
    var_12 = linked_list_7.push(linked_list_7)
    int_0 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_13 = linked_list_10.push(int_0)
    var_14 = linked_list_10.size()
    assert var_14 == 1
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(node_7)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_11.display()
    assert var_15 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    int_1 = -1061
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_16 = linked_list_14.push(int_1)
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_9 = module_0.Node(list_0)
    none_type_6 = None
    node_10 = module_0.Node(none_type_6)
    linked_list_15 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_17 = linked_list_15.remove(none_type_6)
    linked_list_16 = module_0.LinkedList(none_type_6)
    assert linked_list_16.head is None
    var_18 = linked_list_15.display()
    node_11 = module_0.Node(linked_list_16)
    node_12 = module_0.Node(linked_list_15)

def test_case_1850():
    float_0 = -2122.54
    node_0 = module_0.Node(float_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)

def test_case_1851():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_1.display()
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.search(int_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(linked_list_6, linked_list_5)
    int_1 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.search(int_1)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_6 = linked_list_10.size()
    assert var_6 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_5 = None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_7 = linked_list_12.remove(none_type_5)
    linked_list_13 = module_0.LinkedList(var_7)
    assert linked_list_13.head is None
    bool_1 = True
    set_0 = {bool_1}
    none_type_6 = None
    node_7 = module_0.Node(set_0, none_type_6)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    int_2 = -1061
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_8 = linked_list_15.push(int_2)
    var_9 = linked_list_15.size()
    assert var_9 == 1
    node_8 = module_0.Node(var_9, var_9)
    assert node_8.data == 1
    assert node_8.next == 1
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_9 = module_0.Node(list_0)
    node_10 = module_0.Node(node_9, list_0)
    node_11 = module_0.Node(node_9, dict_0)
    none_type_7 = None
    linked_list_16 = module_0.LinkedList(none_type_7)
    assert linked_list_16.head is None
    var_10 = linked_list_16.display()
    assert var_10 == ')'

def test_case_1852():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_1 = module_0.Node(list_1)
    node_2 = module_0.Node(node_1, list_1)

def test_case_1853():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    var_5 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList4.Node'
    assert var_5.data is None
    assert var_5.next is None
    linked_list_4 = module_0.LinkedList(linked_list_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_3)
    var_6 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    var_7 = linked_list_5.display()
    node_4 = module_0.Node(linked_list_6)
    var_8 = linked_list_5.search(var_6)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_5)
    var_9 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    linked_list_9 = module_0.LinkedList()
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    var_12 = linked_list_10.size()
    assert var_12 == 0
    linked_list_11 = module_0.LinkedList()
    node_6 = module_0.Node(var_12)
    assert node_6.data == 0
    var_13 = linked_list_11.push(none_type_4)
    var_14 = linked_list_9.push(linked_list_9)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    var_15 = linked_list_12.size()
    assert var_15 == 0
    linked_list_13 = module_0.LinkedList()
    node_8 = module_0.Node(var_15)
    assert node_8.data == 0
    var_16 = linked_list_13.display()
    assert var_16 == ')'
    linked_list_14 = module_0.LinkedList()
    none_type_6 = None
    linked_list_15 = module_0.LinkedList(none_type_6)
    var_17 = linked_list_15.size()
    assert var_17 == 0
    var_18 = linked_list_15.display()
    assert var_18 == ')'
    linked_list_16 = module_0.LinkedList()
    none_type_7 = None
    linked_list_17 = module_0.LinkedList(none_type_7)
    var_19 = linked_list_17.size()
    assert var_19 == 0
    linked_list_18 = module_0.LinkedList()
    var_20 = linked_list_17.display()
    assert var_20 == ')'
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    linked_list_19 = module_0.LinkedList()
    var_21 = linked_list_19.remove(none_type_8)
    var_22 = linked_list_19.search(node_9)

def test_case_1854():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = 3548
    var_2 = linked_list_1.search(int_0)
    node_0 = module_0.Node(int_0, var_2)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_2.remove(linked_list_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_1 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(int_1)
    var_6 = linked_list_6.size()
    assert var_6 == 1
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_8 = linked_list_10.size()
    assert var_8 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_1855():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_1)
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_5 = linked_list_5.display()
    var_6 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList4.Node'
    assert var_6.data is None
    assert var_6.next is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    linked_list_8 = module_0.LinkedList()
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_9 = module_0.LinkedList()
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    with pytest.raises(IndexError):
        linked_list_5.pop()

def test_case_1856():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_4.display()
    node_4 = module_0.Node(linked_list_5)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_1 = -1061
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(int_1)
    float_0 = 4618.447563
    var_8 = linked_list_8.remove(float_0)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_5)
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1857():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    node_4 = module_0.Node(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    node_6 = module_0.Node(none_type_4, linked_list_6)

def test_case_1858():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.remove(linked_list_2)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    var_8 = linked_list_7.search(none_type_2)

def test_case_1859():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    node_1 = module_0.Node(none_type_0, linked_list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    var_2 = linked_list_1.display()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(var_2)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(bytes_0)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_4)
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(int_0)
    var_7 = linked_list_6.size()
    assert var_7 == 1
    none_type_6 = None
    linked_list_7 = module_0.LinkedList(none_type_6)
    assert linked_list_7.head is None
    list_0 = []
    var_8 = linked_list_7.push(list_0)
    bytes_1 = b'\xa5[%<'
    node_6 = module_0.Node(bytes_1)

def test_case_1860():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(node_3)
    int_1 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.search(int_1)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_1861():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None

def test_case_1862():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_1863():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(node_0)

def test_case_1864():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    var_1 = linked_list_0.display()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    var_3 = linked_list_1.push(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    list_0 = []
    var_4 = linked_list_2.push(list_0)
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.search(int_0)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(linked_list_4, linked_list_3)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.remove(none_type_5)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_6)
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    none_type_7 = None
    linked_list_9 = module_0.LinkedList(none_type_7)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_1)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0

def test_case_1865():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.size()
    assert var_5 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_4)
    assert node_2.data == 0

def test_case_1866():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_4.display()
    var_5 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList4.Node'
    assert var_5.data is None
    assert var_5.next is None
    linked_list_6 = module_0.LinkedList(linked_list_4)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    var_6 = linked_list_7.push(linked_list_7)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_4 = module_0.Node(node_3, complex_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    var_8 = linked_list_10.display()
    assert var_8 == ')'
    linked_list_11 = module_0.LinkedList()
    var_9 = linked_list_10.remove(linked_list_10)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_5)
    var_10 = linked_list_12.remove(none_type_4)
    var_11 = linked_list_12.remove(linked_list_12)
    linked_list_13 = module_0.LinkedList()
    node_6 = module_0.Node(node_5, var_10)
    node_7 = module_0.Node(node_5)

def test_case_1867():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_2)
    none_type_3 = None
    linked_list_2 = module_0.LinkedList(none_type_3)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(var_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_7.display()
    node_6 = module_0.Node(linked_list_8)
    node_7 = module_0.Node(linked_list_7)
    node_8 = module_0.Node(node_6)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    none_type_8 = None
    linked_list_11 = module_0.LinkedList(none_type_8)
    assert linked_list_11.head is None
    var_9 = linked_list_11.size()
    assert var_9 == 0
    var_10 = linked_list_11.size()
    assert var_10 == 0
    bool_0 = True
    node_10 = module_0.Node(bool_0)
    node_11 = module_0.Node(var_9)
    assert node_11.data == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.display()
    assert var_11 == ')'
    none_type_9 = None
    linked_list_13 = module_0.LinkedList(none_type_9)
    assert linked_list_13.head is None
    var_12 = linked_list_13.size()
    assert var_12 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    node_12 = module_0.Node(var_12)
    assert node_12.data == 0
    var_13 = linked_list_14.push(none_type_9)

def test_case_1868():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    float_0 = 2634.854
    dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_1 = [dict_1]
    list_2 = [bool_1, float_0]
    tuple_0 = (list_2,)
    tuple_1 = (dict_1, bool_1, list_1, tuple_0)
    node_3 = module_0.Node(tuple_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_6.display()
    assert var_3 == ')'
    var_4 = linked_list_5.push(dict_1)

def test_case_1869():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_0 = '8gF^Uhhbr$c}'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(str_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)

def test_case_1870():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)

def test_case_1871():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.search(int_0)
    node_0 = module_0.Node(var_0)

def test_case_1872():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    var_4 = linked_list_3.pop()
    assert linked_list_3.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    linked_list_5 = module_0.LinkedList()
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    var_8 = linked_list_6.search(none_type_2)
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    var_9 = linked_list_7.push(float_0)
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1873():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(bool_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    float_0 = -2869.0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(float_0)
    bool_2 = True
    set_0 = {bool_2}
    none_type_3 = None
    node_5 = module_0.Node(set_0, none_type_3)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.remove(none_type_4)
    var_7 = linked_list_8.search(node_6)
    bytes_1 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_8 = linked_list_9.push(bytes_1)

def test_case_1874():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    float_0 = -2869.0
    node_1 = module_0.Node(float_0)

def test_case_1875():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)

def test_case_1876():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.display()
    assert var_0 == ')'
    node_1 = module_0.Node(var_0)
    assert node_1.data == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    var_4 = linked_list_4.search(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    node_5 = module_0.Node(linked_list_6)
    node_6 = module_0.Node(linked_list_5)

def test_case_1877():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    var_1 = linked_list_0.search(var_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    node_3 = module_0.Node(linked_list_2)
    var_4 = linked_list_1.search(var_2)
    var_5 = linked_list_2.search(node_3)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_6 = linked_list_3.size()
    assert var_6 == 0
    var_7 = linked_list_3.size()
    assert var_7 == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(var_6)
    assert node_6.data == 0
    int_1 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_8 = linked_list_4.push(int_1)
    var_9 = linked_list_4.size()
    assert var_9 == 1
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_11 = linked_list_6.display()
    var_12 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'linkedList4.Node'
    assert var_12.data is None
    assert var_12.next is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_0)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    var_13 = linked_list_8.size()
    assert var_13 == 0
    linked_list_9 = module_0.LinkedList()
    none_type_5 = None
    linked_list_10 = module_0.LinkedList()
    var_14 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(var_14)

def test_case_1878():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    node_1 = module_0.Node(var_1)
    bool_0 = True
    set_0 = {bool_0}
    none_type_1 = None
    node_2 = module_0.Node(set_0, none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(var_6)
    assert linked_list_7.head is None
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_5)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    node_5 = module_0.Node(none_type_6)
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_7)
    var_9 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_8 = None
    node_7 = module_0.Node(none_type_8)
    linked_list_11 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(none_type_8)
    linked_list_12 = module_0.LinkedList(none_type_8)
    assert linked_list_12.head is None
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_9 = None
    linked_list_14 = module_0.LinkedList(none_type_9)
    assert linked_list_14.head is None
    none_type_10 = None
    linked_list_15 = module_0.LinkedList(none_type_10)
    assert linked_list_15.head is None
    var_11 = linked_list_15.push(linked_list_15)
    var_12 = linked_list_14.size()
    assert var_12 == 0
    float_0 = -2122.54
    node_8 = module_0.Node(float_0)

def test_case_1879():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(bytes_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(var_4)
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(linked_list_7)
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    var_8 = linked_list_10.display()
    assert var_8 == ')'
    var_9 = linked_list_10.search(none_type_5)
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_12.display()
    assert var_12 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    float_0 = -2869.0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_13 = linked_list_14.push(float_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_0)
    var_14 = linked_list_14.display()
    assert var_14 == '(-2869.0)'
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_7 = module_0.Node(list_0)
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    linked_list_15 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_15.remove(none_type_7)
    none_type_8 = None
    linked_list_16 = module_0.LinkedList(none_type_8)
    assert linked_list_16.head is None
    var_16 = linked_list_16.size()
    assert var_16 == 0
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    var_17 = linked_list_17.push(var_16)

def test_case_1880():
    bool_0 = False
    bytes_0 = b'\xfd$'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(bool_0)

def test_case_1881():
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_0 = module_0.Node(tuple_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_2 = [dict_1, dict_1, str_0, dict_1]
    node_1 = module_0.Node(list_2)
    node_2 = module_0.Node(node_1, list_2)
    node_3 = module_0.Node(node_1, dict_1)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'

def test_case_1882():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    tuple_0 = (var_0, var_0)

def test_case_1883():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(node_0, var_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_2 = module_0.Node(var_4)
    assert node_2.data == 0
    var_5 = linked_list_6.push(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_3)
    var_7 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_4 = module_0.Node(node_3, var_6)
    node_5 = module_0.Node(node_3)

def test_case_1884():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    float_0 = 4618.447563
    var_4 = linked_list_3.remove(float_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.remove(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    node_4 = module_0.Node(linked_list_6)
    node_5 = module_0.Node(linked_list_5)
    int_1 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.push(int_1)
    var_9 = linked_list_7.size()
    assert var_9 == 1
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_6 = module_0.Node(list_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_1885():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    var_4 = linked_list_4.push(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    node_3 = module_0.Node(linked_list_6)
    var_7 = linked_list_5.search(var_5)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_1886():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    node_0 = module_0.Node(var_2)
    assert node_0.data == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(int_0)
    float_0 = 4618.447563
    var_5 = linked_list_6.remove(float_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_1 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.search(int_1)
    node_4 = module_0.Node(var_6)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_1887():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(var_1)
    assert linked_list_3.head is None
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_4.display()
    node_1 = module_0.Node(linked_list_5)
    node_2 = module_0.Node(linked_list_4)
    node_3 = module_0.Node(node_1)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(bytes_0)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(bool_1)
    int_0 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.push(int_0)
    float_0 = 4618.447563
    var_6 = linked_list_7.remove(float_0)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    node_8 = module_0.Node(var_7)
    assert node_8.data == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None

def test_case_1888():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.push(none_type_0)
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(int_0)
    var_3 = linked_list_1.size()
    assert var_3 == 1
    node_1 = module_0.Node(var_3, var_3)
    assert node_1.data == 1
    assert node_1.next == 1
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(float_0)
    var_5 = linked_list_3.pop()
    assert var_5 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_3.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    var_7 = linked_list_4.size()
    assert var_7 == 0
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bool_0 = True
    set_0 = {bool_0}
    none_type_3 = None
    node_4 = module_0.Node(set_0, none_type_3)

def test_case_1889():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_1 = module_0.Node(tuple_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_1 = linked_list_4.size()
    assert var_1 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.display()
    assert var_2 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    with pytest.raises(IndexError):
        linked_list_5.pop()

def test_case_1890():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    var_4 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_4)
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    var_6 = linked_list_4.display()
    node_5 = module_0.Node(linked_list_5)
    node_6 = module_0.Node(linked_list_4)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(node_7)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    var_7 = linked_list_6.size()
    assert var_7 == 0
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    linked_list_8 = module_0.LinkedList()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_9 = module_0.Node(list_0)
    linked_list_9 = module_0.LinkedList()
    var_8 = linked_list_9.size()
    assert var_8 == 0
    float_0 = -2122.54
    node_10 = module_0.Node(float_0)
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_11)
    var_9 = linked_list_10.remove(none_type_6)
    linked_list_11 = module_0.LinkedList(none_type_6)
    var_10 = linked_list_10.display()
    int_0 = 1454
    linked_list_12 = module_0.LinkedList()
    var_11 = linked_list_12.search(int_0)
    node_12 = module_0.Node(var_11)
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)

def test_case_1891():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    var_3 = linked_list_2.size()
    assert var_3 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(bytes_0)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.search(int_0)
    node_3 = module_0.Node(var_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    str_0 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.display()
    assert var_10 == ')'
    str_1 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(linked_list_11)

def test_case_1892():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(bool_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.display()
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_6 = module_0.Node(none_type_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_10 = module_0.Node(none_type_4, linked_list_5)

def test_case_1893():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1894():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(str_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'

def test_case_1895():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    node_0 = module_0.Node(var_2)
    assert node_0.data == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_1896():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    node_1 = module_0.Node(none_type_1, linked_list_3)

def test_case_1897():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    node_1 = module_0.Node(linked_list_3)
    var_3 = linked_list_2.search(var_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    var_5 = linked_list_4.display()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(var_5)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    node_6 = module_0.Node(linked_list_6)
    node_7 = module_0.Node(linked_list_5)
    node_8 = module_0.Node(node_6)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)

def test_case_1898():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_1.push(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_0 = module_0.Node(var_3)
    assert node_0.data == 0
    var_4 = linked_list_5.push(none_type_2)
    var_5 = linked_list_3.push(linked_list_3)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_4)
    str_0 = '8gF^Uhhbr$c}'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.search(str_0)

def test_case_1899():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_1.push(linked_list_2)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(node_7, list_1)
    node_9 = module_0.Node(node_7, dict_1)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.search(int_0)
    str_2 = '#p1jIXa}Q?(h'
    dict_2 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_2 = [dict_2, dict_2, str_2, dict_2]
    node_10 = module_0.Node(list_2)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    none_type_4 = None
    node_11 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_4)
    var_9 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    node_12 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_11 = linked_list_11.display()
    node_13 = module_0.Node(linked_list_12)
    var_12 = linked_list_11.search(var_10)
    var_13 = linked_list_12.search(node_13)

def test_case_1900():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_4 = module_0.Node(var_6)
    assert node_4.data == 0
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_7 = linked_list_10.size()
    assert var_7 == 0
    var_8 = linked_list_10.size()
    assert var_8 == 0
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(var_7)
    assert node_7.data == 0
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    none_type_7 = None
    linked_list_11 = module_0.LinkedList(none_type_7)
    assert linked_list_11.head is None
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_11.display()
    assert var_9 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None

def test_case_1901():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None

def test_case_1902():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(node_0, var_2)
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(int_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_1903():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)

def test_case_1904():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1905():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    node_2 = module_0.Node(var_2)
    assert node_2.data == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.push(float_0)

def test_case_1906():
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    var_4 = linked_list_1.search(var_3)

def test_case_1907():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    set_0 = {bool_0, linked_list_2, node_0}
    var_2 = linked_list_2.remove(set_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_1908():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_0)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    complex_1 = -2363.678516 + 1356.37j
    node_7 = module_0.Node(complex_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_1 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.search(int_1)
    node_8 = module_0.Node(var_7)
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(linked_list_8)
    var_9 = linked_list_8.push(none_type_2)

def test_case_1909():
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1910():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_1911():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1912():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    bool_1 = True
    set_0 = {bool_1}
    none_type_2 = None
    node_1 = module_0.Node(set_0, none_type_2)
    node_2 = module_0.Node(bool_1)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_2)
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.search(node_5)

def test_case_1913():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    list_0 = []
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(list_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(var_4)
    assert linked_list_6.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_5 = linked_list_7.size()
    assert var_5 == 0
    var_6 = linked_list_7.size()
    assert var_6 == 0
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(var_5)
    assert node_5.data == 0

def test_case_1914():
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(str_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None

def test_case_1915():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_4 = linked_list_7.size()
    assert var_4 == 0
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_7 = linked_list_10.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_2 = '$T\x0bL=O]w^NF\tP'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_9 = linked_list_12.remove(str_2)
    with pytest.raises(IndexError):
        linked_list_9.pop()

def test_case_1916():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(none_type_2)
    var_5 = linked_list_6.search(node_2)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_6 = module_0.Node(none_type_3, linked_list_8)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_4)
    var_7 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.remove(none_type_5)
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    node_10 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_7 = None
    node_11 = module_0.Node(none_type_7)
    linked_list_13 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_13.remove(none_type_7)
    var_10 = linked_list_13.display()
    none_type_8 = None
    node_12 = module_0.Node(none_type_8)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    node_13 = module_0.Node(none_type_7)
    none_type_9 = None
    node_14 = module_0.Node(none_type_9)
    none_type_10 = None
    linked_list_15 = module_0.LinkedList(none_type_10)
    assert linked_list_15.head is None
    var_11 = linked_list_15.size()
    assert var_11 == 0
    var_12 = linked_list_15.size()
    assert var_12 == 0

def test_case_1917():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_4.remove(none_type_1)
    var_2 = linked_list_4.remove(linked_list_4)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(linked_list_6)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_11.display()
    assert var_8 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_13 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_13.remove(none_type_5)
    var_10 = linked_list_13.push(none_type_5)
    str_2 = '3$;;z6n'
    linked_list_14 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'

def test_case_1918():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_3)
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_5 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_5)
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_7.remove(node_7)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_1919():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    var_4 = linked_list_2.search(var_3)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_0)
    var_6 = linked_list_5.search(var_5)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_3 = module_0.Node(var_7)
    assert node_3.data == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_1920():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(int_0)
    var_1 = linked_list_1.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_5 = module_0.Node(linked_list_3)
    node_6 = module_0.Node(linked_list_2)
    node_7 = module_0.Node(node_5)
    int_1 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.search(int_1)
    var_5 = linked_list_4.search(var_4)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_5.push(linked_list_6)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    str_1 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(linked_list_7)
    str_2 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_10 = linked_list_12.display()
    assert var_10 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    int_2 = 1454
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_11 = linked_list_14.search(int_2)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    complex_0 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_0)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None

def test_case_1921():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(bytes_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_5.remove(linked_list_5)
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.search(int_0)
    var_7 = linked_list_7.search(var_6)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_4)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    node_5 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_7 = None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.remove(none_type_7)
    linked_list_12 = module_0.LinkedList(var_10)
    assert linked_list_12.head is None
    none_type_8 = None
    linked_list_13 = module_0.LinkedList(none_type_8)
    assert linked_list_13.head is None
    var_11 = linked_list_13.size()
    assert var_11 == 0
    var_12 = linked_list_13.display()
    assert var_12 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_13 = linked_list_14.display()
    assert var_13 == ')'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_14 = linked_list_15.push(linked_list_14)
    none_type_9 = None
    node_6 = module_0.Node(none_type_9)
    linked_list_16 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_16.remove(none_type_9)
    var_16 = linked_list_16.remove(linked_list_16)
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    node_7 = module_0.Node(node_6, var_15)
    node_8 = module_0.Node(node_6)

def test_case_1922():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    str_2 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(linked_list_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bool_1 = True
    linked_list_10 = module_0.LinkedList(bool_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_6 = linked_list_11.size()
    assert var_6 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_7 = linked_list_13.size()
    assert var_7 == 0
    var_8 = linked_list_11.display()
    assert var_8 == ')'
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    none_type_7 = None
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    var_9 = linked_list_14.size()
    assert var_9 == 0
    var_10 = linked_list_14.size()
    assert var_10 == 0
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(var_9)
    assert node_6.data == 0
    str_3 = '8gF^Uhhbr$c}'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_11 = linked_list_15.search(str_3)
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    node_8 = module_0.Node(node_7)
    node_9 = module_0.Node(bool_3)
    none_type_8 = None
    linked_list_16 = module_0.LinkedList(none_type_8)
    assert linked_list_16.head is None

def test_case_1923():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(bytes_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_1)
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_4 = linked_list_5.display()
    var_5 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList4.Node'
    assert var_5.data is None
    assert var_5.next is None
    linked_list_7 = module_0.LinkedList(linked_list_5)
    bytes_1 = b'\xa5[%<'
    node_6 = module_0.Node(bytes_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)

def test_case_1924():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(bytes_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.remove(none_type_1)
    var_4 = linked_list_5.search(node_3)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    node_5 = module_0.Node(linked_list_7)
    node_6 = module_0.Node(linked_list_6)
    node_7 = module_0.Node(node_5)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    float_0 = -2869.0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.push(float_0)

def test_case_1925():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    node_3 = module_0.Node(none_type_3)
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_4)
    var_4 = linked_list_3.remove(linked_list_3)
    none_type_5 = None
    linked_list_4 = module_0.LinkedList(none_type_5)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.display()
    assert var_7 == ')'

def test_case_1926():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(int_0)
    var_4 = linked_list_2.size()
    assert var_4 == 1
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_2)
    var_7 = linked_list_5.display()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_4 = module_0.Node(none_type_2)
    bool_0 = False
    list_1 = [bool_0, bool_0]
    node_5 = module_0.Node(list_1)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.push(linked_list_8)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_13 = linked_list_13.remove(node_6)

def test_case_1927():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.search(int_0)
    var_1 = linked_list_1.search(var_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_1928():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1929():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_0.search(int_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_0)
    var_3 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(node_1, var_2)
    node_3 = module_0.Node(linked_list_1)
    int_1 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_1)
    node_4 = module_0.Node(var_4)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(linked_list_4)
    var_6 = linked_list_4.push(none_type_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.remove(none_type_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    node_8 = module_0.Node(none_type_4)
    var_9 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList4.Node'
    assert var_9.data is None
    assert var_9.next is None

def test_case_1930():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    node_1 = module_0.Node(none_type_0, linked_list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    var_4 = linked_list_3.size()
    assert var_4 == 1
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_9 = linked_list_8.push(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bool_0 = True
    set_0 = {bool_0}
    none_type_6 = None
    node_6 = module_0.Node(set_0, none_type_6)
    node_7 = module_0.Node(bool_0)

def test_case_1931():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    bool_0 = True
    linked_list_1 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    var_6 = linked_list_2.search(var_5)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.display()
    assert var_7 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_8.remove(linked_list_8)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_4)
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_12 = linked_list_10.display()
    node_2 = module_0.Node(linked_list_11)
    var_13 = linked_list_10.search(var_11)
    var_14 = linked_list_11.search(node_2)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(bool_1)

def test_case_1932():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    set_0 = {bool_0, linked_list_0, node_0}
    var_0 = linked_list_0.remove(set_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(bool_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(var_2)
    assert node_5.data == 0
    var_3 = linked_list_4.push(none_type_0)
    var_4 = linked_list_2.push(linked_list_2)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_1)
    var_6 = linked_list_5.remove(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(node_6, var_5)
    node_8 = module_0.Node(linked_list_5)
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_7.display()
    assert var_8 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.display()
    assert var_12 == ')'

def test_case_1933():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = True
    set_0 = {bool_1}
    none_type_0 = None
    node_1 = module_0.Node(set_0, none_type_0)
    node_2 = module_0.Node(bool_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_4 = module_0.Node(none_type_1, linked_list_2)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_6 = module_0.Node(linked_list_4)
    var_4 = linked_list_3.search(var_2)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.display()
    var_7 = linked_list_5.display()
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_8 = linked_list_6.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_10 = linked_list_7.display()
    assert var_10 == ')'

def test_case_1934():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    str_2 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(linked_list_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    str_3 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_10.display()
    assert var_7 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_8 = linked_list_13.size()
    assert var_8 == 0
    var_9 = linked_list_13.display()
    assert var_9 == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    int_0 = 3548
    var_10 = linked_list_14.search(int_0)
    node_9 = module_0.Node(int_0, var_10)
    int_1 = -1061
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_11 = linked_list_15.push(int_1)
    var_12 = linked_list_15.size()
    assert var_12 == 1
    node_10 = module_0.Node(var_12, var_12)
    assert node_10.data == 1
    assert node_10.next == 1
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    linked_list_16 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_16.head).__module__}.{type(linked_list_16.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_16.remove(none_type_6)
    linked_list_17 = module_0.LinkedList(none_type_6)
    assert linked_list_17.head is None
    var_14 = linked_list_16.display()
    node_12 = module_0.Node(linked_list_17)
    var_15 = linked_list_16.search(var_13)
    var_16 = linked_list_16.push(linked_list_16)
    with pytest.raises(IndexError):
        linked_list_13.pop()

def test_case_1935():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    linked_list_0 = module_0.LinkedList(bool_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(var_2)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(linked_list_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_0.search(node_0)

def test_case_1936():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    node_3 = module_0.Node(node_1)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    bytes_0 = b'\xa5[%<'
    node_6 = module_0.Node(bytes_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'

def test_case_1937():
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.remove(linked_list_3)
    var_4 = linked_list_3.size()
    assert var_4 == 1
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_3)
    var_8 = linked_list_6.remove(linked_list_6)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_1)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_8 = module_0.Node(list_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_9 = linked_list_10.remove(none_type_5)
    var_10 = linked_list_10.search(node_9)
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    node_11 = module_0.Node(node_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    int_0 = -1061
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_12.push(int_0)
    float_0 = 4618.447563
    var_12 = linked_list_12.remove(float_0)

def test_case_1938():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    node_3 = module_0.Node(none_type_1, linked_list_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_6 = module_0.Node(var_6)
    assert node_6.data == 0
    var_7 = linked_list_8.push(none_type_4)
    var_8 = linked_list_6.push(linked_list_6)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.display()
    assert var_10 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_11 = linked_list_11.remove(linked_list_11)
    int_0 = 1454
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_12 = linked_list_13.search(int_0)
    node_7 = module_0.Node(var_12)
    none_type_6 = None
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    var_13 = linked_list_14.size()
    assert var_13 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_14 = linked_list_15.display()
    assert var_14 == ')'

def test_case_1939():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(bytes_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None

def test_case_1940():
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(node_1, var_2)
    node_3 = module_0.Node(linked_list_3)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    node_4 = module_0.Node(var_4)
    assert node_4.data == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_2)
    var_6 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_6 = module_0.Node(node_5, var_5)
    node_7 = module_0.Node(node_5)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bool_0 = False
    linked_list_10 = module_0.LinkedList(bool_0)
    assert linked_list_10.head is None
    int_0 = 1454
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_7 = linked_list_11.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_12 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_12.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_13 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_13.remove(none_type_3)
    var_10 = linked_list_13.push(none_type_3)
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_14 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_14.remove(none_type_4)
    var_12 = linked_list_14.remove(linked_list_14)
    none_type_5 = None
    linked_list_15 = module_0.LinkedList(none_type_5)
    assert linked_list_15.head is None
    var_13 = linked_list_15.size()
    assert var_13 == 0
    var_14 = linked_list_15.display()
    assert var_14 == ')'
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    var_15 = linked_list_16.display()
    assert var_15 == ')'
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None

def test_case_1941():
    list_0 = []
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(list_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    node_2 = module_0.Node(linked_list_1)
    node_3 = module_0.Node(node_1)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    var_4 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(node_4, var_3)
    node_6 = module_0.Node(node_4)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    list_1 = []
    var_5 = linked_list_5.push(list_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_7 = linked_list_7.display()
    var_8 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList4.Node'
    assert var_8.data is None
    assert var_8.next is None
    linked_list_9 = module_0.LinkedList(linked_list_7)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    str_0 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.display()
    assert var_9 == ')'
    float_0 = -2869.0
    node_8 = module_0.Node(float_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_2 = [dict_0, dict_0, str_1, dict_0]
    node_9 = module_0.Node(list_2)
    linked_list_12 = module_0.LinkedList()
    float_1 = -2869.0
    linked_list_13 = module_0.LinkedList()
    var_10 = linked_list_13.push(float_1)
    var_11 = linked_list_13.pop()

def test_case_1942():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    node_2 = module_0.Node(var_2)
    assert node_2.data == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_3.push(linked_list_3)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_1943():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1944():
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    list_0 = []
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    node_1 = module_0.Node(var_1)
    assert node_1.data == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_1)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    str_1 = '8gF^Uhhbr$c}'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(str_1)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    none_type_0 = None
    node_8 = module_0.Node(none_type_0)
    linked_list_5 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_0)
    var_5 = linked_list_5.display()
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    str_2 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    str_3 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(linked_list_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_1945():
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(bool_1)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    var_5 = linked_list_3.search(none_type_2)
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.push(int_0)
    float_0 = 4618.447563
    var_7 = linked_list_4.remove(float_0)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_8 = linked_list_5.size()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    var_10 = linked_list_5.display()
    assert var_10 == ')'
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_11 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    list_0 = []
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_12 = linked_list_10.push(list_0)

def test_case_1946():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.push(linked_list_2)
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    node_2 = module_0.Node(node_1, list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(bool_0)

def test_case_1947():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(bool_1)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(int_0)
    var_1 = linked_list_1.size()
    assert var_1 == 1
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    var_5 = linked_list_4.remove(linked_list_4)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.size()
    assert var_6 == 0
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    none_type_3 = None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.remove(none_type_3)

def test_case_1948():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.size()
    assert var_0 == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(none_type_2)
    bool_0 = False
    list_1 = [bool_0, bool_0]
    node_4 = module_0.Node(list_1)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = 3548
    var_4 = linked_list_5.search(int_0)
    node_5 = module_0.Node(int_0, var_4)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.remove(node_6)

def test_case_1949():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.push(linked_list_1)

def test_case_1950():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    list_0 = []
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.push(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(none_type_1)
    var_4 = linked_list_2.search(node_2)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_2)
    var_7 = linked_list_6.remove(linked_list_6)
    var_8 = linked_list_6.size()
    assert var_8 == 1
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_11 = linked_list_8.display()
    assert var_11 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_12 = linked_list_9.push(linked_list_8)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_13 = linked_list_10.size()
    assert var_13 == 0
    var_14 = linked_list_10.size()
    assert var_14 == 0
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(var_13)
    assert node_8.data == 0
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_11 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_12.remove(none_type_6)
    none_type_7 = None
    node_10 = module_0.Node(none_type_7)
    node_11 = module_0.Node(none_type_7)

def test_case_1951():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    list_0 = []
    var_0 = linked_list_0.push(list_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_1)
    node_1 = module_0.Node(node_0, list_1)
    node_2 = module_0.Node(node_0, dict_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_2 = [dict_1, dict_1, str_1, dict_1]
    node_3 = module_0.Node(list_2)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(linked_list_3)
    var_3 = linked_list_2.size()
    assert var_3 == 0
    str_2 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    int_0 = -1061
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.push(int_0)
    var_5 = linked_list_6.size()
    assert var_5 == 1
    node_4 = module_0.Node(var_5, var_5)
    assert node_4.data == 1
    assert node_4.next == 1
    str_3 = '#p1jIXa}Q?(h'
    dict_2 = {str_3: str_3, str_3: str_3, str_3: str_3}
    list_3 = [dict_2, dict_2, str_3, dict_2]
    node_5 = module_0.Node(list_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    float_0 = -2869.0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(float_0)
    var_7 = linked_list_8.pop()
    assert var_7 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_8.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    node_7 = module_0.Node(node_6)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_9 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_10 = module_0.LinkedList(bool_0)
    assert linked_list_10.head is None
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_9 = module_0.Node(none_type_4, linked_list_11)
    var_8 = linked_list_10.display()
    assert var_8 == ')'

def test_case_1952():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_0 = linked_list_2.push(float_0)
    bool_1 = False
    set_0 = {bool_1}
    node_3 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_2.search(int_0)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_0)
    var_3 = linked_list_3.display()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_6 = module_0.Node(none_type_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_9 = module_0.Node(list_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(linked_list_9)
    var_8 = linked_list_9.pop()
    assert linked_list_9.head is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList4.LinkedList'
    assert var_8.head is None

def test_case_1953():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None

def test_case_1954():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.display()
    assert var_2 == ')'
    node_0 = module_0.Node(var_2)
    assert node_0.data == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_3 = linked_list_4.push(linked_list_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.display()
    assert var_4 == ')'
    node_1 = module_0.Node(var_4)
    assert node_1.data == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_5 = linked_list_9.display()
    assert var_5 == ')'
    none_type_1 = None
    linked_list_10 = module_0.LinkedList(none_type_1)
    assert linked_list_10.head is None
    var_6 = linked_list_10.size()
    assert var_6 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_2 = module_0.Node(var_6)
    assert node_2.data == 0
    var_7 = linked_list_11.push(none_type_1)
    bool_0 = True
    set_0 = {bool_0}
    none_type_2 = None
    node_3 = module_0.Node(set_0, none_type_2)
    none_type_3 = None
    linked_list_12 = module_0.LinkedList(none_type_3)
    assert linked_list_12.head is None
    str_2 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_12.display()
    assert var_8 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    var_9 = linked_list_12.display()
    assert var_9 == ')'
    bool_2 = False
    linked_list_14 = module_0.LinkedList(bool_2)
    assert linked_list_14.head is None
    with pytest.raises(IndexError):
        linked_list_3.pop()

def test_case_1955():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    var_2 = linked_list_0.size()
    assert var_2 == 1
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    var_5 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList4.Node'
    assert var_5.data is None
    assert var_5.next is None
    linked_list_4 = module_0.LinkedList(linked_list_2)
    linked_list_5 = module_0.LinkedList()
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    node_2 = module_0.Node(var_7)
    assert node_2.data == 0
    var_8 = linked_list_7.push(none_type_2)
    var_9 = linked_list_5.push(linked_list_5)
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    linked_list_9 = module_0.LinkedList()
    float_0 = -2869.0
    linked_list_10 = module_0.LinkedList()
    var_10 = linked_list_10.push(float_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_0)
    var_11 = linked_list_10.display()
    assert var_11 == '(-2869.0)'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_6)
    var_12 = linked_list_11.remove(none_type_4)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList(node_7)
    var_13 = linked_list_12.remove(none_type_5)
    linked_list_13 = module_0.LinkedList(none_type_5)
    var_14 = linked_list_12.display()
    node_8 = module_0.Node(linked_list_13)
    var_15 = linked_list_12.search(var_13)

def test_case_1956():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_1 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    var_4 = linked_list_2.search(node_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_5 = linked_list_3.size()
    assert var_5 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_0 = True
    set_0 = {bool_0}
    none_type_3 = None
    node_2 = module_0.Node(set_0, none_type_3)
    node_3 = module_0.Node(bool_0)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    node_5 = module_0.Node(linked_list_6)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'

def test_case_1957():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_1 = linked_list_0.size()
    assert var_1 == 1
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(node_0, var_2)
    node_2 = module_0.Node(node_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_6 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(float_0)
    var_8 = linked_list_7.pop()
    assert var_8 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_7.head is None
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_2)
    var_10 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_8 = module_0.Node(node_7, var_9)
    bytes_1 = b'\xa5[%<'
    node_9 = module_0.Node(bytes_1)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.display()
    assert var_11 == ')'

def test_case_1958():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_1 = module_0.Node(linked_list_1, linked_list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    node_2 = module_0.Node(var_2)
    assert node_2.data == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_3 = linked_list_8.push(linked_list_8)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_5 = linked_list_9.display()
    node_6 = module_0.Node(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_6 = linked_list_11.display()
    assert var_6 == ')'
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_7 = linked_list_12.size()
    assert var_7 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_5 = None
    linked_list_14 = module_0.LinkedList(none_type_5)
    assert linked_list_14.head is None
    var_8 = linked_list_14.size()
    assert var_8 == 0
    var_9 = linked_list_12.display()
    assert var_9 == ')'

def test_case_1959():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_0.push(linked_list_0)
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_4.push(linked_list_5)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.remove(none_type_2)
    var_7 = linked_list_6.search(node_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_9 = linked_list_9.display()
    var_10 = linked_list_9.pop()
    assert linked_list_9.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.Node'
    assert var_10.data is None
    assert var_10.next is None
    linked_list_11 = module_0.LinkedList(linked_list_9)

def test_case_1960():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_1)
    assert node_2.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_0.push(linked_list_0)
    bool_0 = False
    linked_list_3 = module_0.LinkedList(bool_0)
    assert linked_list_3.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_1)
    var_5 = linked_list_4.display()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(var_5)
    bool_1 = True

def test_case_1961():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    list_0 = [dict_0]
    list_1 = [bool_0, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_0, list_0, tuple_0)
    node_2 = module_0.Node(tuple_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_2 = [dict_1, dict_1, str_0, dict_1]
    node_3 = module_0.Node(list_2)
    node_4 = module_0.Node(node_3, list_2)
    node_5 = module_0.Node(node_3, dict_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(bytes_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(linked_list_5)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_9 = linked_list_7.display()
    assert var_9 == ')'

def test_case_1962():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_1 = linked_list_0.size()
    assert var_1 == 1
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    node_0 = module_0.Node(var_2)
    assert node_0.data == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_0 = 'EU%1@v\x0b'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_6 = module_0.LinkedList(none_type_0)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_4 = linked_list_7.display()
    assert var_4 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None

def test_case_1963():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.size()
    assert var_2 == 0
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(int_0)
    var_4 = linked_list_2.size()
    assert var_4 == 1
    node_2 = module_0.Node(var_4, var_4)
    assert node_2.data == 1
    assert node_2.next == 1
    complex_1 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_1)
    node_4 = module_0.Node(node_3)
    var_5 = linked_list_2.push(linked_list_1)

def test_case_1964():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    node_2 = module_0.Node(var_5)
    assert node_2.data == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    node_7 = module_0.Node(linked_list_7)
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_8 = module_0.Node(list_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'

def test_case_1965():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    var_2 = linked_list_1.push(none_type_0)
    int_1 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(int_1)
    int_2 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(int_2)
    var_5 = linked_list_3.search(var_4)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None

def test_case_1966():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.remove(none_type_4)
    var_5 = linked_list_5.search(node_3)

def test_case_1967():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_2.push(linked_list_0)

def test_case_1968():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)

def test_case_1969():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1970():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '8gF^Uhhbr$c}'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.search(str_0)
    str_1 = '$T\x0bL=O]w^NF\tP'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.remove(str_1)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(int_0)

def test_case_1971():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_1972():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    node_1 = module_0.Node(var_2)
    assert node_1.data == ')'
    float_0 = -2869.0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(float_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(bytes_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_1973():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(linked_list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(linked_list_3)
    bool_0 = True
    set_0 = {bool_0}
    none_type_2 = None
    node_3 = module_0.Node(set_0, none_type_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    node_4 = module_0.Node(var_6)
    assert node_4.data == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_5.push(linked_list_5)
    float_0 = -2122.54
    node_5 = module_0.Node(float_0)
    bool_1 = True
    linked_list_8 = module_0.LinkedList(bool_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'

def test_case_1974():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1975():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    node_0 = module_0.Node(var_2)
    assert node_0.data == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.remove(none_type_1)
    linked_list_7 = module_0.LinkedList(none_type_1)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_4 = linked_list_9.size()
    assert var_4 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_5 = linked_list_9.display()
    assert var_5 == ')'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_11 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_11.remove(none_type_3)
    var_7 = linked_list_11.remove(linked_list_11)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_12.remove(none_type_4)
    var_9 = linked_list_12.push(none_type_4)
    int_0 = 1454
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_10 = linked_list_13.search(int_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    bytes_0 = b'\xa5[%<'
    node_7 = module_0.Node(bytes_0)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_15 = module_0.LinkedList(none_type_5)
    assert linked_list_15.head is None
    var_11 = linked_list_15.size()
    assert var_11 == 0
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    node_9 = module_0.Node(var_11)
    assert node_9.data == 0
    var_12 = linked_list_16.display()
    assert var_12 == ')'
    var_13 = linked_list_3.display()
    assert var_13 == ')'

def test_case_1976():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    node_3 = module_0.Node(linked_list_3)
    node_4 = module_0.Node(node_2)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_2)
    var_5 = linked_list_5.display()
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    int_0 = 3548
    var_8 = linked_list_7.search(int_0)
    node_6 = module_0.Node(int_0, var_8)
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    bool_0 = True
    linked_list_10 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_11 = linked_list_10.size()
    assert var_11 == 1
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_12 = linked_list_13.display()
    assert var_12 == ')'
    node_7 = module_0.Node(var_12)
    assert node_7.data == ')'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_13 = linked_list_12.push(linked_list_12)

def test_case_1977():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.search(var_2)
    var_5 = linked_list_3.search(node_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_2)
    var_7 = linked_list_4.display()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(var_7)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.search(int_0)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    node_7 = module_0.Node(node_6)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_0 = '8gF^Uhhbr$c}'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.search(str_0)
    int_1 = -1061
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.push(int_1)
    var_11 = linked_list_8.size()
    assert var_11 == 1
    node_9 = module_0.Node(var_11, var_11)
    assert node_9.data == 1
    assert node_9.next == 1
    bool_1 = True
    node_10 = module_0.Node(bool_1)
    node_11 = module_0.Node(bool_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    set_0 = {bool_1, linked_list_9, node_10}
    var_12 = linked_list_9.remove(set_0)

def test_case_1978():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    node_6 = module_0.Node(none_type_3)
    bool_1 = True
    set_0 = {bool_1}
    none_type_4 = None
    node_7 = module_0.Node(set_0, none_type_4)
    node_8 = module_0.Node(bool_1)
    bool_2 = False
    list_0 = [bool_2, bool_2]
    node_9 = module_0.Node(list_0)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_5 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_5)
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_5 = linked_list_5.display()
    node_11 = module_0.Node(linked_list_6)
    var_6 = linked_list_5.search(var_4)
    none_type_6 = None
    node_12 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_6)
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    node_13 = module_0.Node(linked_list_8)

def test_case_1979():
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_0 = module_0.Node(var_2)
    assert node_0.data == 0
    var_3 = linked_list_3.push(none_type_0)
    str_1 = '8gF^Uhhbr$c}'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.search(str_1)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_0)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_5 = module_0.Node(linked_list_6, linked_list_5)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.remove(none_type_2)
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_1980():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_0.search(int_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(var_2)
    assert node_3.data == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_4.display()
    bool_2 = False
    list_0 = [bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.remove(none_type_3)
    var_7 = linked_list_6.search(node_6)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_4)
    var_9 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_8 = module_0.Node(node_7, var_8)
    node_9 = module_0.Node(node_7)
    int_1 = -1061
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.push(int_1)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_12 = linked_list_10.display()
    node_11 = module_0.Node(linked_list_11)
    node_12 = module_0.Node(linked_list_10)
    node_13 = module_0.Node(node_11)

def test_case_1981():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(bytes_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(var_5)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(linked_list_8)
    var_8 = linked_list_8.pop()
    assert linked_list_8.head is None
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList4.LinkedList'
    assert var_8.head is None
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_6)
    var_10 = linked_list_9.display()
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    node_7 = module_0.Node(var_10)
    var_11 = linked_list_9.remove(node_0)

def test_case_1982():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_5.remove(none_type_1)
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_5 = linked_list_5.display()
    node_2 = module_0.Node(linked_list_6)
    var_6 = linked_list_5.search(var_4)
    var_7 = linked_list_5.push(linked_list_5)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_9 = linked_list_8.size()
    assert var_9 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_3 = None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.remove(none_type_3)
    linked_list_11 = module_0.LinkedList(var_10)
    assert linked_list_11.head is None
    with pytest.raises(IndexError):
        linked_list_9.pop()

def test_case_1983():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None

def test_case_1984():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    var_3 = linked_list_1.search(var_1)
    var_4 = linked_list_2.search(node_2)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.remove(none_type_1)
    var_6 = linked_list_3.display()
    var_7 = linked_list_3.display()
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_5 = module_0.LinkedList(bool_0)
    assert linked_list_5.head is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_5 = module_0.Node(none_type_2, linked_list_6)
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(bool_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    set_0 = {bool_1, linked_list_7, node_6}
    var_9 = linked_list_7.remove(set_0)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_11 = linked_list_8.display()
    node_9 = module_0.Node(linked_list_9)
    var_12 = linked_list_8.search(var_10)
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_13 = linked_list_10.size()
    assert var_13 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_11 = module_0.Node(var_13)
    assert node_11.data == 0
    var_14 = linked_list_11.display()
    assert var_14 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_12 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_15 = linked_list_13.size()
    assert var_15 == 0
    var_16 = linked_list_13.display()
    assert var_16 == ')'
    var_17 = linked_list_13.search(none_type_5)
    int_1 = -1061
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_18 = linked_list_14.push(int_1)
    float_0 = 4618.447563
    var_19 = linked_list_14.remove(float_0)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None

def test_case_1985():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(linked_list_4)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    node_5 = module_0.Node(bool_1)
    float_0 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(float_0)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_2)
    var_10 = linked_list_9.display()
    assert var_10 == '(-2869.0)'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_9 = module_0.Node(list_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_1986():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_1, dict_1, str_1, dict_1]
    node_1 = module_0.Node(list_1)
    node_2 = module_0.Node(node_1, list_1)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.search(int_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_4 = module_0.Node(linked_list_2, linked_list_1)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_6.size()
    assert var_5 == 0
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_3.remove(var_5)

def test_case_1987():
    bool_0 = True
    int_0 = -1146
    set_0 = {int_0, int_0}
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(set_0)

def test_case_1988():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None

def test_case_1989():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_1 = module_0.LinkedList(none_type_3)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    var_3 = linked_list_1.size()
    assert var_3 == 0
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(var_2)
    assert node_5.data == 0

def test_case_1990():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_4 = module_0.Node(linked_list_2, linked_list_1)
    bool_1 = True
    set_0 = {bool_1}
    none_type_3 = None
    node_5 = module_0.Node(set_0, none_type_3)
    bool_2 = False
    list_0 = [bool_2, bool_2]
    node_6 = module_0.Node(list_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0, dict_0, str_0, dict_0]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(node_7, list_1)
    node_9 = module_0.Node(node_7, dict_0)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_10 = module_0.Node(complex_0)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_8.remove(linked_list_8)
    bytes_2 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_9 = linked_list_10.push(bytes_2)
    none_type_7 = None
    node_11 = module_0.Node(none_type_7)
    linked_list_11 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_11.remove(none_type_7)
    node_12 = module_0.Node(none_type_7, linked_list_11)
    var_11 = linked_list_2.search(linked_list_2)

def test_case_1991():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_2)
    var_3 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(node_1, var_2)
    node_3 = module_0.Node(node_1)
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(float_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_0)
    var_5 = linked_list_5.display()
    assert var_5 == '(-2869.0)'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_9 = linked_list_8.display()
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_10 = linked_list_10.push(linked_list_10)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    node_9 = module_0.Node(node_8)
    node_10 = module_0.Node(bool_1)
    complex_0 = -1265.460815 + 1056.434j
    node_11 = module_0.Node(node_10, complex_0)
    int_0 = 1454
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_11 = linked_list_11.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_12 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.display()
    assert var_12 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_6 = None
    node_12 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_13.remove(none_type_6)
    var_14 = linked_list_13.remove(linked_list_13)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_13 = module_0.Node(list_0)

def test_case_1992():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    node_3 = module_0.Node(node_2)
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(float_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    var_3 = linked_list_3.display()
    assert var_3 == '(-2869.0)'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_7 = module_0.Node(var_5)
    assert node_7.data == 0
    var_6 = linked_list_6.push(none_type_1)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    var_8 = linked_list_7.size()
    assert var_8 == 0
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(var_7)
    assert node_10.data == 0
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_9 = linked_list_8.push(linked_list_8)
    var_10 = linked_list_8.pop()
    assert linked_list_8.head is None
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.LinkedList'
    assert var_10.head is None
    none_type_5 = None
    node_11 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.remove(none_type_5)
    var_12 = linked_list_9.search(node_11)
    none_type_6 = None
    node_12 = module_0.Node(none_type_6)
    linked_list_10 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_10.remove(none_type_6)
    var_14 = linked_list_10.remove(linked_list_10)
    float_1 = 2634.854
    dict_0 = {float_1: float_1, float_1: float_1, float_1: float_1}
    bool_3 = True
    list_0 = [dict_0]
    list_1 = [bool_3, float_1]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_3, list_0, tuple_0)
    node_13 = module_0.Node(tuple_1)
    with pytest.raises(IndexError):
        linked_list_4.pop()

def test_case_1993():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)

def test_case_1994():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(none_type_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_3 = module_0.LinkedList(bool_0)
    assert linked_list_3.head is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_4 = module_0.Node(none_type_2, linked_list_4)
    var_2 = linked_list_3.display()
    assert var_2 == ')'

def test_case_1995():
    int_0 = 131
    int_1 = -2434
    list_0 = [int_1, int_1, int_1, int_1]
    bool_0 = False
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(list_0)

def test_case_1996():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 3548
    var_4 = linked_list_3.search(int_0)
    node_1 = module_0.Node(int_0, var_4)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    var_7 = linked_list_4.search(none_type_2)
    float_0 = -2122.54
    node_3 = module_0.Node(float_0)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.remove(none_type_3)
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_4)
    var_10 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_7 = module_0.Node(node_6, var_9)
    node_8 = module_0.Node(linked_list_8)
    str_0 = '8gF^Uhhbr$c}'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.search(str_0)
    list_0 = []
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.push(list_0)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_13 = linked_list_12.size()
    assert var_13 == 0
    var_14 = linked_list_12.display()
    assert var_14 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_15 = linked_list_13.display()
    assert var_15 == ')'

def test_case_1997():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(linked_list_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_1998():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_1999():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(bytes_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_3 = linked_list_6.display()
    var_4 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    with pytest.raises(IndexError):
        linked_list_6.pop()

def test_case_2000():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    var_4 = linked_list_3.display()
    dict_0 = {node_0: linked_list_3, var_3: node_0, var_4: linked_list_3, var_4: node_0}
    node_1 = module_0.Node(dict_0, node_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    var_6 = linked_list_4.display()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    node_4 = module_0.Node(var_6)
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_1, dict_1, str_0, dict_1]
    node_5 = module_0.Node(list_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    float_0 = -2869.0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.push(float_0)
    var_8 = linked_list_6.pop()
    assert var_8 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_6.head is None
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.remove(none_type_4)
    var_10 = linked_list_7.search(node_6)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(node_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_11 = linked_list_9.remove(none_type_5)
    var_12 = linked_list_9.search(node_9)

def test_case_2001():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.push(linked_list_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_3)
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    var_7 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.Node'
    assert var_7.data is None
    assert var_7.next is None
    linked_list_8 = module_0.LinkedList(linked_list_6)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    var_8 = linked_list_9.size()
    assert var_8 == 0
    linked_list_10 = module_0.LinkedList()
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    var_9 = linked_list_11.size()
    assert var_9 == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    var_11 = linked_list_9.search(var_10)
    none_type_6 = None
    node_1 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_1)
    var_12 = linked_list_12.remove(none_type_6)
    linked_list_13 = module_0.LinkedList(none_type_6)
    linked_list_14 = module_0.LinkedList()
    var_13 = linked_list_14.remove(node_1)
    bool_0 = True
    set_0 = {bool_0}
    none_type_7 = None
    node_2 = module_0.Node(set_0, none_type_7)
    str_0 = 'EU%1@v\x0b'
    linked_list_15 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    none_type_8 = None
    node_3 = module_0.Node(none_type_8)
    linked_list_16 = module_0.LinkedList(node_3)
    var_14 = linked_list_16.remove(none_type_8)
    var_15 = linked_list_16.display()
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)

def test_case_2002():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.display()
    dict_0 = {node_1: linked_list_2, var_1: node_1, var_2: linked_list_2, var_2: node_1}
    node_2 = module_0.Node(dict_0, node_1)
    float_1 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(float_1)
    bool_0 = False
    set_0 = {bool_0}
    node_3 = module_0.Node(set_0)
    int_0 = -2297
    var_4 = linked_list_3.search(int_0)
    var_5 = linked_list_3.size()
    assert var_5 == 1
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.push(linked_list_4)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.remove(none_type_3)
    linked_list_8 = module_0.LinkedList(var_8)
    assert linked_list_8.head is None
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.remove(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_11 = linked_list_11.display()
    assert var_11 == ')'
    float_2 = -2869.0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_12.push(float_2)
    var_13 = linked_list_12.display()
    assert var_13 == '(-2869.0)'
    int_1 = 1454
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_14 = linked_list_13.search(int_1)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    linked_list_14 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_14.remove(none_type_6)
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    node_7 = module_0.Node(linked_list_14, linked_list_13)
    bool_1 = False
    list_0 = [bool_1, bool_1]
    node_8 = module_0.Node(list_0)

def test_case_2003():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(linked_list_4, linked_list_3)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_5 = linked_list_7.display()
    assert var_5 == ')'
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_6 = linked_list_8.push(linked_list_8)
    var_7 = linked_list_8.pop()
    assert linked_list_8.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.LinkedList'
    assert var_7.head is None
    with pytest.raises(IndexError):
        linked_list_8.pop()

def test_case_2004():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_2005():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_1)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(bytes_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    set_0 = {bool_0, linked_list_6, node_0}
    var_5 = linked_list_6.remove(set_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_3)
    var_7 = linked_list_7.push(none_type_3)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_10.size()
    assert var_11 == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(var_10)
    assert node_5.data == 0
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_11 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_12 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.remove(none_type_7)
    var_13 = linked_list_12.display()
    var_14 = linked_list_12.display()
    tuple_0 = ()
    node_7 = module_0.Node(tuple_0)
    node_8 = module_0.Node(var_13)

def test_case_2006():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_2 = module_0.Node(set_0)
    int_0 = -2297
    var_6 = linked_list_5.search(int_0)

def test_case_2007():
    str_0 = 'EU%1@v\x0b'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_1 = module_0.Node(linked_list_4)

def test_case_2008():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_0.search(int_0)
    var_2 = linked_list_0.size()
    assert var_2 == 1
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(node_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.size()
    assert var_6 == 0
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.remove(linked_list_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    str_2 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.push(linked_list_9)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.remove(none_type_4)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    list_0 = []
    var_11 = linked_list_11.push(list_0)
    bool_1 = False
    linked_list_12 = module_0.LinkedList(bool_1)
    assert linked_list_12.head is None
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_2009():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)

def test_case_2010():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_1)
    node_3 = module_0.Node(none_type_1, linked_list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_1 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_2)
    var_2 = linked_list_1.remove(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_5 = module_0.Node(node_4, var_1)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.push(linked_list_7)
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_6 = module_0.Node(list_0)
    int_0 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.search(int_0)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_8 = module_0.Node(linked_list_9, linked_list_8)
    complex_0 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_0)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_7 = linked_list_11.size()
    assert var_7 == 0
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_2011():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    var_3 = linked_list_4.push(none_type_1)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(linked_list_5)
    var_5 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList4.LinkedList'
    assert var_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_7 = linked_list_7.display()
    node_3 = module_0.Node(linked_list_8)
    node_4 = module_0.Node(linked_list_7)
    node_5 = module_0.Node(node_3)
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_8 = linked_list_9.size()
    assert var_8 == 0
    str_0 = 'b}@pV%=ey'

def test_case_2012():
    str_0 = '<R4jatDA~@%5d<83'
    int_0 = -2955
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)

def test_case_2013():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    complex_1 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_1)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0

def test_case_2014():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    node_0 = module_0.Node(var_2)
    assert node_0.data == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_2.push(linked_list_2)
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    str_0 = '3$;;z6n'
    linked_list_9 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.display()
    assert var_7 == ')'
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_3)
    var_9 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_2 = module_0.Node(node_1, var_8)
    node_3 = module_0.Node(node_1)
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    float_0 = -2869.0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_10 = linked_list_12.push(float_0)
    var_11 = linked_list_12.display()
    assert var_11 == '(-2869.0)'

def test_case_2015():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_0, dict_0, str_2, dict_0]
    node_4 = module_0.Node(list_1)
    node_5 = module_0.Node(node_4, list_1)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.remove(none_type_1)
    linked_list_7 = module_0.LinkedList(none_type_1)
    assert linked_list_7.head is None
    var_4 = linked_list_0.size()
    assert var_4 == 0

def test_case_2016():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_3 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.search(var_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(int_0)
    var_6 = linked_list_4.size()
    assert var_6 == 1
    str_1 = '$T\x0bL=O]w^NF\tP'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.remove(str_1)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_8 = linked_list_6.push(linked_list_6)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_6.push(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_11 = linked_list_9.size()
    assert var_11 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_7 = module_0.Node(var_11)
    assert node_7.data == 0
    var_12 = linked_list_10.push(none_type_4)
    var_13 = linked_list_8.push(linked_list_8)
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    none_type_5 = None
    linked_list_11 = module_0.LinkedList(none_type_5)
    assert linked_list_11.head is None
    var_14 = linked_list_11.size()
    assert var_14 == 0
    var_15 = linked_list_11.display()
    assert var_15 == ')'
    var_16 = linked_list_11.search(none_type_5)
    var_17 = linked_list_3.size()
    assert var_17 == 0

def test_case_2017():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_8 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.search(var_2)
    var_5 = linked_list_3.search(node_8)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.remove(none_type_3)
    var_7 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_2018():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(var_2)
    assert node_1.data == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_7.remove(none_type_3)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_6 = linked_list_9.push(var_5)
    float_0 = 2634.854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_1 = True
    list_0 = [dict_0]
    list_1 = [bool_1, float_0]
    tuple_0 = (list_1,)
    tuple_1 = (dict_0, bool_1, list_0, tuple_0)
    node_5 = module_0.Node(tuple_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    bool_2 = False
    linked_list_11 = module_0.LinkedList(bool_2)
    assert linked_list_11.head is None
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_7 = module_0.Node(none_type_5, linked_list_12)
    var_7 = linked_list_11.display()
    assert var_7 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_8 = module_0.Node(complex_0)
    none_type_6 = None
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_8 = linked_list_13.remove(none_type_6)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    bool_3 = True
    node_9 = module_0.Node(bool_3)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(bool_3)

def test_case_2019():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    list_0 = []
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    str_0 = '8gF^Uhhbr$c}'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(str_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    var_4 = linked_list_4.display()
    var_5 = linked_list_4.display()
    tuple_0 = ()
    node_3 = module_0.Node(tuple_0)
    node_4 = module_0.Node(var_4)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_0, dict_0, str_1, dict_0]
    node_5 = module_0.Node(list_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'

def test_case_2020():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    node_1 = module_0.Node(none_type_0, linked_list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_1)
    var_1 = linked_list_1.display()
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    float_0 = -2122.54
    node_3 = module_0.Node(float_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    str_2 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(linked_list_6)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_2021():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    var_4 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    var_5 = linked_list_4.push(float_0)
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList()
    var_7 = linked_list_7.remove(none_type_2)
    var_8 = linked_list_7.search(node_2)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    linked_list_8 = module_0.LinkedList()
    bool_2 = False
    list_0 = [bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_6)
    var_9 = linked_list_9.remove(none_type_3)
    var_10 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    node_7 = module_0.Node(node_6, var_9)
    node_8 = module_0.Node(node_6)

def test_case_2022():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_5 = linked_list_2.display()
    assert var_5 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.search(int_0)
    var_7 = linked_list_4.search(var_6)
    tuple_0 = ()
    node_1 = module_0.Node(tuple_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_5.remove(none_type_2)
    var_9 = linked_list_5.display()
    node_3 = module_0.Node(var_9, linked_list_5)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_10 = linked_list_9.size()
    assert var_10 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None

def test_case_2023():
    object_0 = module_1.object()
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_2024():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(int_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    node_3 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.push(node_1)

def test_case_2025():
    int_0 = -578
    float_0 = -2869.0
    bool_0 = False
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(float_0)

def test_case_2026():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    list_0 = [linked_list_1]

def test_case_2027():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)

def test_case_2028():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.push(linked_list_0)
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    node_0 = module_0.Node(var_1)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    var_3 = linked_list_2.push(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_1)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(var_5)
    bool_0 = True
    linked_list_6 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'

def test_case_2029():
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    var_1 = linked_list_1.display()
    dict_0 = {node_1: linked_list_1, var_0: node_1, var_1: linked_list_1, var_1: node_1}
    node_2 = module_0.Node(dict_0, node_1)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_1, dict_1, str_0, dict_1]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_4)
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_6 = linked_list_5.display()
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.search(int_0)
    node_7 = module_0.Node(var_7)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(linked_list_8)
    var_9 = linked_list_8.push(none_type_5)
    float_0 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.push(float_0)
    bool_0 = True
    node_8 = module_0.Node(bool_0)
    node_9 = module_0.Node(node_8)
    node_10 = module_0.Node(bool_0)
    var_11 = linked_list_9.display()
    assert var_11 == '(-2869.0)'
    complex_0 = -2363.678516 + 1356.37j
    node_11 = module_0.Node(complex_0)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_12 = linked_list_10.remove(none_type_6)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_7 = None
    node_12 = module_0.Node(none_type_7)
    linked_list_12 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_12.remove(none_type_7)
    var_14 = linked_list_12.display()
    var_15 = linked_list_12.display()

def test_case_2030():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(float_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_1)
    var_3 = linked_list_3.display()
    assert var_3 == '(-2869.0)'
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_0)
    var_5 = linked_list_4.display()
    var_6 = linked_list_4.display()
    tuple_0 = ()
    node_5 = module_0.Node(tuple_0)
    node_6 = module_0.Node(var_5)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_7 = linked_list_5.push(bytes_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    var_9 = linked_list_7.display()
    assert var_9 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bool_3 = True
    node_9 = module_0.Node(bool_3)
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_11 = linked_list_10.size()
    assert var_11 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_10 = module_0.Node(var_11)
    assert node_10.data == 0
    var_12 = linked_list_11.display()
    assert var_12 == ')'
    complex_0 = -2363.678516 + 1356.37j
    node_11 = module_0.Node(complex_0)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_1 = [dict_0, dict_0, str_1, dict_0]
    node_12 = module_0.Node(list_1)
    var_13 = linked_list_2.size()
    assert var_13 == 0

def test_case_2031():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList(var_4)
    assert linked_list_5.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_6.display()
    node_3 = module_0.Node(linked_list_7)
    node_4 = module_0.Node(linked_list_6)

def test_case_2032():
    float_0 = -2122.54
    node_0 = module_0.Node(float_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_2 = module_0.Node(node_1, var_1)
    node_3 = module_0.Node(node_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_2033():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    var_1 = linked_list_0.search(var_0)
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_2034():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    float_1 = -2869.0
    node_3 = module_0.Node(float_1)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_5 = module_0.Node(list_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_2035():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_1)
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_0 = True
    linked_list_5 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_6 = linked_list_5.size()
    assert var_6 == 1
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.search(int_0)
    var_8 = linked_list_7.search(var_7)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.size()
    assert var_9 == 10
    none_type_3 = None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.remove(none_type_3)
    bytes_2 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_1 = module_0.Node(bytes_2, bytes_2)

def test_case_2036():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.display()
    var_7 = linked_list_5.display()
    tuple_0 = ()
    node_3 = module_0.Node(tuple_0)
    node_4 = module_0.Node(var_6)

def test_case_2037():
    str_0 = '|u\tG*{E~'
    complex_0 = -1466.18 + 2114.19j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(node_0)

def test_case_2038():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    var_3 = linked_list_1.size()
    assert var_3 == 0
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    var_5 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_1 = module_0.Node(node_0, var_4)
    node_2 = module_0.Node(linked_list_3)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_3)

def test_case_2039():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_1 = linked_list_0.size()
    assert var_1 == 1
    str_0 = '8gF^Uhhbr$c}'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(str_0)

def test_case_2040():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    var_3 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.Node'
    assert var_3.data is None
    assert var_3.next is None
    linked_list_4 = module_0.LinkedList(linked_list_2)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_3)
    var_4 = linked_list_5.remove(none_type_1)
    var_5 = linked_list_5.push(none_type_1)
    float_0 = -2869.0
    linked_list_6 = module_0.LinkedList()
    var_6 = linked_list_6.push(float_0)
    var_7 = linked_list_6.display()
    assert var_7 == '(-2869.0)'
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    var_8 = linked_list_7.search(int_0)
    node_4 = module_0.Node(var_8)
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    var_9 = linked_list_8.size()
    assert var_9 == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'
    linked_list_9 = module_0.LinkedList()
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    var_12 = linked_list_10.push(linked_list_10)
    var_13 = linked_list_10.pop()

def test_case_2041():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_1 = module_0.Node(node_0, var_2)
    node_2 = module_0.Node(node_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    float_0 = -2869.0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.push(float_0)
    bool_1 = False
    set_0 = {bool_1}
    node_5 = module_0.Node(set_0)
    int_1 = -2297
    var_5 = linked_list_5.search(int_1)
    complex_0 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.remove(none_type_1)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_7 = linked_list_8.size()
    assert var_7 == 0
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    float_1 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(float_1)

def test_case_2042():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    none_type_2 = None
    linked_list_1 = module_0.LinkedList(none_type_2)
    assert linked_list_1.head is None
    var_2 = linked_list_1.size()
    assert var_2 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_3)
    var_5 = linked_list_3.display()
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    node_5 = module_0.Node(var_5)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    node_6 = module_0.Node(var_6)
    assert node_6.data == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_7 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_5)
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_7.display()
    var_9 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList4.Node'
    assert var_9.data is None
    assert var_9.next is None
    linked_list_9 = module_0.LinkedList(linked_list_7)
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    int_0 = -1061
    linked_list_10 = module_0.LinkedList()
    var_10 = linked_list_10.push(int_0)
    var_11 = linked_list_10.size()
    assert var_11 == 1
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    linked_list_11 = module_0.LinkedList(node_9)
    var_12 = linked_list_11.remove(none_type_6)
    linked_list_12 = module_0.LinkedList(none_type_6)
    var_13 = linked_list_11.display()
    node_10 = module_0.Node(linked_list_12)
    node_11 = module_0.Node(linked_list_11)
    complex_0 = -2363.678516 + 1356.37j
    node_12 = module_0.Node(complex_0)
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    var_14 = linked_list_13.size()
    assert var_14 == 0
    var_15 = linked_list_13.display()
    assert var_15 == ')'
    var_16 = linked_list_13.search(none_type_7)
    bool_2 = True
    set_0 = {bool_2}
    none_type_8 = None
    node_13 = module_0.Node(set_0, none_type_8)

def test_case_2043():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    var_1 = linked_list_0.size()
    assert var_1 == 1
    node_0 = module_0.Node(var_1, var_1)
    assert node_0.data == 1
    assert node_0.next == 1
    int_1 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.search(int_1)
    node_1 = module_0.Node(var_2)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_2)
    var_4 = linked_list_2.push(none_type_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(var_6)
    assert node_2.data == 0
    var_7 = linked_list_5.push(none_type_1)
    var_8 = linked_list_3.push(linked_list_3)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    list_1 = []
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_9 = linked_list_6.push(list_1)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_10 = linked_list_7.remove(none_type_3)
    var_11 = linked_list_7.search(node_6)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(node_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_12 = linked_list_9.push(linked_list_9)
    var_13 = linked_list_9.pop()
    assert linked_list_9.head is None
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList4.LinkedList'
    assert var_13.head is None
    var_14 = linked_list_9.size()
    assert var_14 == 0
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_15 = linked_list_11.push(linked_list_11)
    var_16 = linked_list_10.size()
    assert var_16 == 0

def test_case_2044():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_0.search(int_0)
    var_2 = linked_list_0.size()
    assert var_2 == 1
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_4 = linked_list_1.display()
    node_2 = module_0.Node(linked_list_2)
    var_5 = linked_list_1.search(var_3)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_6 = linked_list_3.size()
    assert var_6 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(var_7)
    assert linked_list_6.head is None

def test_case_2045():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    str_0 = '8gF^Uhhbr$c}'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.search(str_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    bool_1 = True
    set_0 = {bool_1}
    none_type_1 = None
    node_5 = module_0.Node(set_0, none_type_1)
    node_6 = module_0.Node(bool_1)
    var_4 = linked_list_3.push(linked_list_2)

def test_case_2046():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_1.remove(none_type_1)
    var_4 = linked_list_1.display()
    var_5 = linked_list_1.display()
    tuple_0 = ()
    node_2 = module_0.Node(tuple_0)
    node_3 = module_0.Node(var_4)
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_6 = linked_list_2.search(int_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_5 = module_0.Node(linked_list_3, linked_list_2)
    int_1 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.search(int_1)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_6.remove(none_type_3)
    var_10 = linked_list_6.display()
    var_11 = linked_list_6.display()
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_12 = linked_list_7.display()
    assert var_12 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_9.remove(none_type_4)
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_14 = linked_list_9.display()
    node_8 = module_0.Node(linked_list_10)
    var_15 = linked_list_9.search(var_13)
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_11 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_16 = linked_list_12.remove(none_type_5)
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_17 = linked_list_12.display()
    node_10 = module_0.Node(linked_list_13)
    var_18 = linked_list_12.search(var_16)
    var_19 = linked_list_12.push(linked_list_12)
    with pytest.raises(IndexError):
        linked_list_2.pop()

def test_case_2047():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    node_2 = module_0.Node(node_0, dict_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    str_1 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_3 = linked_list_5.display()
    assert var_3 == ')'
    complex_1 = -2363.678516 + 1356.37j
    node_6 = module_0.Node(complex_1)
    node_7 = module_0.Node(node_6)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_1)
    var_5 = linked_list_6.display()
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    node_10 = module_0.Node(none_type_1)
    int_1 = 1454
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.search(int_1)
    node_11 = module_0.Node(var_6)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(linked_list_9)
    var_8 = linked_list_9.push(none_type_3)
    none_type_4 = None
    node_12 = module_0.Node(none_type_4)
    linked_list_10 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.remove(none_type_4)
    var_10 = linked_list_10.remove(linked_list_10)
    var_11 = linked_list_10.size()
    assert var_11 == 1
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.display()
    assert var_12 == ')'
    node_13 = module_0.Node(var_12)
    assert node_13.data == ')'
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_2048():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_2 = module_0.Node(var_5)
    assert node_2.data == 0
    var_6 = linked_list_5.push(none_type_2)
    var_7 = linked_list_3.push(linked_list_3)

def test_case_2049():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'

def test_case_2050():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    node_0 = module_0.Node(set_0, none_type_0)
    node_1 = module_0.Node(bool_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    node_2 = module_0.Node(var_0)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_1.search(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_5 = module_0.Node(none_type_2, linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    var_5 = linked_list_4.pop()
    assert linked_list_4.head is None
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'linkedList4.LinkedList'
    assert var_5.head is None
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    node_8 = module_0.Node(bool_1)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList(none_type_5)
    assert linked_list_6.head is None
    var_6 = linked_list_6.push(linked_list_6)
    var_7 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert var_7.head is None
    node_9 = module_0.Node(none_type_4, var_6)
    none_type_6 = None
    node_10 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_6)
    linked_list_8 = module_0.LinkedList(none_type_6)
    assert linked_list_8.head is None
    var_9 = linked_list_7.display()
    node_11 = module_0.Node(linked_list_8)
    var_10 = linked_list_7.search(var_8)
    none_type_7 = None
    node_12 = module_0.Node(none_type_7)
    linked_list_9 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_9.remove(none_type_7)
    var_12 = linked_list_9.display()
    dict_0 = {node_12: linked_list_9, var_11: node_12, var_12: linked_list_9, var_12: node_12}
    node_13 = module_0.Node(dict_0, node_12)

def test_case_2051():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_2.pop()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    node_1 = module_0.Node(var_4)
    assert node_1.data == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_5 = linked_list_5.push(linked_list_5)
    var_6 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert var_6.head is None
    node_2 = module_0.Node(none_type_1, var_5)
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_7 = module_0.LinkedList(bool_0)
    assert linked_list_7.head is None
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_8 = linked_list_8.display()
    node_4 = module_0.Node(linked_list_9)
    node_5 = module_0.Node(linked_list_8)
    node_6 = module_0.Node(node_4)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_10.size()
    assert var_9 == 10
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.display()
    assert var_10 == ')'
    node_7 = module_0.Node(var_10)
    assert node_7.data == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None

def test_case_2052():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(linked_list_1)
    var_2 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.LinkedList'
    assert var_2.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.search(int_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_3.display()
    assert var_5 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_7 = linked_list_5.display()
    assert var_7 == ')'
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.remove(none_type_3)
    var_9 = linked_list_6.remove(linked_list_6)
    bool_0 = True
    linked_list_7 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_8.display()
    assert var_10 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_11 = linked_list_7.size()
    assert var_11 == 1
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_12 = linked_list_9.size()
    assert var_12 == 0
    var_13 = linked_list_9.display()
    assert var_13 == ')'
    var_14 = linked_list_9.search(none_type_4)
    int_1 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_15 = linked_list_10.search(int_1)
    node_2 = module_0.Node(var_15)
    str_0 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    with pytest.raises(IndexError):
        linked_list_10.pop()

def test_case_2053():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_3 = module_0.Node(node_2, complex_0)
    complex_1 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_0.remove(none_type_1)

def test_case_2054():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(node_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.search(int_0)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(node_7)
    complex_0 = -2363.678516 + 1356.37j
    node_9 = module_0.Node(complex_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_4 = linked_list_6.size()
    assert var_4 == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_2 = None
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_7 = linked_list_9.size()
    assert var_7 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    var_8 = linked_list_11.size()
    assert var_8 == 0
    var_9 = linked_list_9.display()
    assert var_9 == ')'
    str_0 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.push(linked_list_12)

def test_case_2055():
    bytes_0 = b'L\xbf\x1c^\x1f\xd7\x956\xef\xefU'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    set_0 = {bool_0, linked_list_1, node_0}
    var_0 = linked_list_1.remove(set_0)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(int_0)
    float_0 = 4618.447563
    var_4 = linked_list_3.remove(float_0)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    bytes_1 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_2 = module_0.Node(bytes_1, bytes_1)

def test_case_2056():
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(linked_list_6)
    int_0 = -1061
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.push(int_0)
    float_0 = 4618.447563
    var_8 = linked_list_8.remove(float_0)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None

def test_case_2057():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(linked_list_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_4 = module_0.Node(var_2)
    assert node_4.data == 0
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    var_10 = linked_list_8.display()
    assert var_10 == ')'

def test_case_2058():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_1 = linked_list_0.size()
    assert var_1 == 1
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_0)

def test_case_2059():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(int_0)
    float_0 = 4618.447563
    var_2 = linked_list_2.remove(float_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    str_2 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(linked_list_4)
    str_3 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_7.search(linked_list_8)
    float_1 = -2122.54
    node_0 = module_0.Node(float_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    with pytest.raises(IndexError):
        linked_list_9.pop()

def test_case_2060():
    bool_0 = True
    set_0 = set()
    str_0 = '$@'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(str_0)
    list_0 = [var_0]
    linked_list_1 = module_0.LinkedList(list_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.push(set_0)

def test_case_2061():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    bool_0 = False
    linked_list_1 = module_0.LinkedList(bool_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(node_2)
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    node_6 = module_0.Node(none_type_3)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    node_8 = module_0.Node(bool_2)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.size()
    assert var_5 == 10
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_9 = module_0.Node(list_1)
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_2062():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_2)
    var_4 = linked_list_1.size()
    assert var_4 == 0
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(linked_list_6)
    var_6 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList4.LinkedList'
    assert var_6.head is None
    node_1 = module_0.Node(none_type_3, var_5)
    str_1 = '8gF^Uhhbr$c}'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.search(str_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_6 = module_0.Node(list_0)
    node_7 = module_0.Node(node_6, list_0)

def test_case_2063():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_2064():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_3 = linked_list_2.display()
    node_3 = module_0.Node(linked_list_3)
    var_4 = linked_list_2.search(var_2)
    var_5 = linked_list_3.search(node_3)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_3)
    var_10 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_5 = module_0.Node(node_4, var_9)
    node_6 = module_0.Node(linked_list_7)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_9.remove(none_type_4)
    var_12 = linked_list_9.display()
    var_13 = linked_list_9.display()
    tuple_0 = ()
    node_8 = module_0.Node(tuple_0)
    node_9 = module_0.Node(var_12)
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_14 = linked_list_10.search(int_0)
    none_type_5 = None
    node_10 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_11.remove(none_type_5)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_11 = module_0.Node(linked_list_11, linked_list_10)
    bool_1 = True
    node_12 = module_0.Node(bool_1)
    node_13 = module_0.Node(node_12)
    none_type_6 = None
    node_14 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_16 = linked_list_13.remove(none_type_6)
    var_17 = linked_list_13.search(node_14)
    bool_2 = True
    node_15 = module_0.Node(bool_2)
    node_16 = module_0.Node(node_15)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    str_1 = '3$;;z6n'
    linked_list_15 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    var_18 = linked_list_15.search(linked_list_16)
    float_0 = -2122.54
    node_17 = module_0.Node(float_0)
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None
    var_19 = linked_list_18.display()
    assert var_19 == ')'
    none_type_7 = None
    linked_list_19 = module_0.LinkedList(none_type_7)
    assert linked_list_19.head is None
    var_20 = linked_list_19.size()
    assert var_20 == 0
    linked_list_20 = module_0.LinkedList()
    assert linked_list_20.head is None
    node_18 = module_0.Node(var_20)
    assert node_18.data == 0
    var_21 = linked_list_20.push(none_type_7)
    var_22 = linked_list_18.push(linked_list_18)

def test_case_2065():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bool_0 = True
    set_0 = {bool_0}
    none_type_1 = None
    node_1 = module_0.Node(set_0, none_type_1)
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(int_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(linked_list_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_8.remove(none_type_3)
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_5 = linked_list_8.display()
    var_6 = linked_list_8.pop()
    assert linked_list_8.head is None
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'linkedList4.Node'
    assert var_6.data is None
    assert var_6.next is None
    linked_list_10 = module_0.LinkedList(linked_list_8)
    int_1 = 1454
    linked_list_11 = module_0.LinkedList()
    var_7 = linked_list_11.search(int_1)
    node_3 = module_0.Node(var_7)
    with pytest.raises(IndexError):
        linked_list_9.pop()

def test_case_2066():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.size()
    assert var_1 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.search(node_3)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    node_7 = module_0.Node(bool_2)
    bool_3 = False
    list_0 = [bool_3, bool_3]
    node_8 = module_0.Node(list_0)
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.push(linked_list_5)
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(linked_list_7)
    var_7 = linked_list_6.size()
    assert var_7 == 0

def test_case_2067():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    var_3 = linked_list_0.push(linked_list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    var_6 = linked_list_3.search(var_4)
    var_7 = linked_list_3.push(linked_list_3)

def test_case_2068():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    node_0 = module_0.Node(none_type_0, var_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.remove(none_type_2)
    var_3 = linked_list_3.search(node_1)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_3)
    var_5 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(node_2, var_4)
    node_4 = module_0.Node(linked_list_4)

def test_case_2069():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_1 = linked_list_4.remove(node_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_6.remove(none_type_2)
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_3 = linked_list_6.display()
    var_4 = linked_list_6.pop()
    assert linked_list_6.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    var_5 = linked_list_8.size()
    assert var_5 == 0
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    linked_list_9 = module_0.LinkedList()
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    linked_list_10 = module_0.LinkedList()
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    var_8 = linked_list_11.size()
    assert var_8 == 0
    linked_list_12 = module_0.LinkedList()
    node_2 = module_0.Node(var_8)
    assert node_2.data == 0
    linked_list_13 = module_0.LinkedList()
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_14 = module_0.LinkedList(node_3)
    var_9 = linked_list_14.remove(none_type_5)
    linked_list_15 = module_0.LinkedList(none_type_5)
    var_10 = linked_list_14.display()
    var_11 = linked_list_14.pop()
    linked_list_16 = module_0.LinkedList(linked_list_14)

def test_case_2070():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(none_type_1)
    str_0 = 'EU%1@v\x0b'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_4 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_5 = linked_list_8.size()
    assert var_5 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_10 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_11 = module_0.LinkedList(none_type_4)
    assert linked_list_11.head is None
    var_6 = linked_list_11.size()
    assert var_6 == 0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_7 = linked_list_12.display()
    assert var_7 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_8 = linked_list_12.remove(linked_list_12)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_14 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_14.remove(none_type_5)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    node_5 = module_0.Node(none_type_6)

def test_case_2071():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(none_type_1)
    bytes_0 = b'\xa5[%<'
    node_3 = module_0.Node(bytes_0)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(linked_list_2)
    var_2 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.LinkedList'
    assert var_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    node_6 = module_0.Node(node_4, dict_0)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(none_type_3)
    var_5 = linked_list_4.display()
    node_8 = module_0.Node(var_5, linked_list_4)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.search(int_0)
    bool_0 = True
    node_9 = module_0.Node(bool_0)
    node_10 = module_0.Node(node_9)
    complex_0 = -2363.678516 + 1356.37j
    node_11 = module_0.Node(complex_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'

def test_case_2072():
    str_0 = '3$;;z6n'
    linked_list_0 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_1.search(int_0)
    var_2 = linked_list_1.size()
    assert var_2 == 1
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(bool_1)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.remove(node_4)
    str_1 = '8gF^Uhhbr$c}'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(str_1)
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_2)
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_0 = [dict_0, dict_0, str_2, dict_0]
    node_8 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    none_type_1 = None
    linked_list_7 = module_0.LinkedList(none_type_1)
    assert linked_list_7.head is None
    var_7 = linked_list_7.push(linked_list_7)
    bool_3 = True
    node_9 = module_0.Node(bool_3)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(bool_3)
    complex_0 = -1265.460815 + 1056.434j
    node_12 = module_0.Node(node_11, complex_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_8 = linked_list_8.push(bytes_0)
    bool_4 = True
    node_13 = module_0.Node(bool_4)
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_14 = module_0.Node(var_9)
    assert node_14.data == 0
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_15 = module_0.Node(var_11)
    assert node_15.data == 0

def test_case_2073():
    float_0 = -4479.1827
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0

def test_case_2074():
    bytes_0 = b'\xa5[%<'
    node_0 = module_0.Node(bytes_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.push(linked_list_1)
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_3)
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.search(int_0)
    node_1 = module_0.Node(var_5)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_6.remove(none_type_1)
    var_7 = linked_list_6.display()
    dict_0 = {node_2: linked_list_6, var_6: node_2, var_7: linked_list_6, var_7: node_2}
    node_3 = module_0.Node(dict_0, node_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_7.remove(none_type_2)
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_9 = linked_list_7.display()
    node_5 = module_0.Node(linked_list_8)
    var_10 = linked_list_7.search(var_8)

def test_case_2075():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'

def test_case_2076():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    var_2 = linked_list_0.size()
    assert var_2 == 1
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.display()
    assert var_3 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_1.remove(none_type_0)

def test_case_2077():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    var_2 = linked_list_0.size()
    assert var_2 == 0
    int_0 = 1454
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(var_5)
    assert node_3.data == 0
    var_6 = linked_list_5.push(none_type_1)
    complex_1 = -2363.678516 + 1356.37j
    node_4 = module_0.Node(complex_1)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    var_8 = linked_list_6.display()
    assert var_8 == ')'
    var_9 = linked_list_6.search(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_10 = linked_list_7.size()
    assert var_10 == 0
    var_11 = linked_list_7.size()
    assert var_11 == 0
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(var_10)
    assert node_7.data == 0
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    linked_list_8 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_8.remove(none_type_5)
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None

def test_case_2078():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_2079():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)

def test_case_2080():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    var_3 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.Node'
    assert var_3.data is None
    assert var_3.next is None
    linked_list_4 = module_0.LinkedList()
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    var_5 = linked_list_5.size()
    assert var_5 == 0
    linked_list_6 = module_0.LinkedList()
    node_2 = module_0.Node(var_5)
    assert node_2.data == 0
    var_6 = linked_list_6.push(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_3)
    var_7 = linked_list_7.remove(none_type_3)
    var_8 = linked_list_7.push(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_4)
    var_9 = linked_list_8.remove(none_type_4)
    var_10 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    node_5 = module_0.Node(node_4, var_9)
    node_6 = module_0.Node(node_4)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_7)
    var_11 = linked_list_10.remove(none_type_5)
    linked_list_11 = module_0.LinkedList(none_type_5)
    var_12 = linked_list_10.display()
    node_8 = module_0.Node(linked_list_11)
    var_13 = linked_list_10.search(var_11)
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_9)
    var_14 = linked_list_12.remove(none_type_6)
    node_10 = module_0.Node(none_type_6, linked_list_12)
    none_type_7 = None
    node_11 = module_0.Node(none_type_7)
    linked_list_13 = module_0.LinkedList(node_11)
    var_15 = linked_list_13.remove(none_type_7)
    linked_list_14 = module_0.LinkedList(none_type_7)

def test_case_2081():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.remove(none_type_0)
    node_1 = module_0.Node(none_type_0, linked_list_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = -1061
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(int_0)
    var_2 = linked_list_3.size()
    assert var_2 == 1
    node_3 = module_0.Node(var_2, var_2)
    assert node_3.data == 1
    assert node_3.next == 1
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0

def test_case_2082():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    int_0 = 1454
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.search(int_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(linked_list_4, linked_list_3)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    node_7 = module_0.Node(none_type_3)
    float_0 = -2122.54
    node_8 = module_0.Node(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_9 = module_0.Node(set_0)
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_7.display()
    node_11 = module_0.Node(linked_list_8)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    list_0 = []
    var_7 = linked_list_9.push(list_0)
    str_0 = '8gF^Uhhbr$c}'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.search(str_0)

def test_case_2083():
    bytes_0 = b'PL\xd6e%F\xd1\xa5A\xe2&\xba\x89\x16'
    int_0 = -3675
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(int_0)

def test_case_2084():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    int_0 = -1061
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(int_0)
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_3 = linked_list_3.display()
    assert var_3 == '(-2869.0)'
    var_4 = linked_list_3.push(node_1)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_3 = module_0.Node(list_0)
    str_1 = '8gF^Uhhbr$c}'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.search(str_1)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    node_6 = module_0.Node(bool_1)
    str_2 = '$T\x0bL=O]w^NF\tP'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.remove(str_2)
    str_3 = '#p1jIXa}Q?(h'
    dict_1 = {str_3: str_3, str_3: str_3, str_3: str_3}
    list_1 = [dict_1, dict_1, str_3, dict_1]
    node_7 = module_0.Node(list_1)
    node_8 = module_0.Node(node_7, list_1)
    node_9 = module_0.Node(node_7, dict_1)
    none_type_0 = None
    node_10 = module_0.Node(none_type_0)
    linked_list_6 = module_0.LinkedList(node_10)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_0)
    var_8 = linked_list_6.display()
    node_11 = module_0.Node(var_8, linked_list_6)

def test_case_2085():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(linked_list_2)
    var_2 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'linkedList4.LinkedList'
    assert var_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_5 = linked_list_5.size()
    assert var_5 == 0
    var_6 = linked_list_3.display()
    assert var_6 == ')'
    var_7 = linked_list_3.search(var_6)
    int_0 = 1454
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_8 = linked_list_6.search(int_0)
    none_type_4 = None
    node_0 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_1 = module_0.Node(linked_list_7, linked_list_6)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    node_4 = module_0.Node(node_2, dict_0)
    float_0 = -2869.0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.push(float_0)
    var_11 = linked_list_9.display()
    assert var_11 == '(-2869.0)'
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_12 = linked_list_10.size()
    assert var_12 == 0

def test_case_2086():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    var_1 = linked_list_0.search(var_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(none_type_0)
    var_3 = linked_list_1.display()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(var_3)

def test_case_2087():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.search(node_0)
    float_0 = -2122.54
    node_1 = module_0.Node(float_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    node_3 = module_0.Node(node_2, list_0)
    none_type_1 = None
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.size()
    assert var_5 == 0
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_6 = linked_list_4.size()
    assert var_6 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_5 = None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_7 = linked_list_6.remove(none_type_5)
    linked_list_7 = module_0.LinkedList(var_7)
    assert linked_list_7.head is None
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    linked_list_8 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_6)
    linked_list_9 = module_0.LinkedList(none_type_6)
    assert linked_list_9.head is None
    var_9 = linked_list_8.display()
    node_6 = module_0.Node(linked_list_9)
    node_7 = module_0.Node(linked_list_8)
    node_8 = module_0.Node(node_6)
    int_1 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_10 = linked_list_10.push(int_1)
    float_1 = 4618.447563
    var_11 = linked_list_10.remove(float_1)

def test_case_2088():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_4)
    assert node_2.data == 0
    var_5 = linked_list_4.push(none_type_1)
    var_6 = linked_list_4.pop()
    assert linked_list_4.head is None
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_7 = linked_list_5.size()
    assert var_7 == 0
    var_8 = linked_list_5.display()
    assert var_8 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    int_0 = 3548
    var_9 = linked_list_6.search(int_0)
    node_3 = module_0.Node(int_0, var_9)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_10 = linked_list_7.display()
    assert var_10 == ')'
    node_4 = module_0.Node(var_10)
    assert node_4.data == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_9.remove(none_type_3)
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.remove(node_5)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_12 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_13 = linked_list_12.remove(none_type_4)
    node_7 = module_0.Node(none_type_4, linked_list_12)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_14 = linked_list_13.push(bytes_0)
    bool_1 = False
    list_0 = [bool_1, bool_1]
    node_8 = module_0.Node(list_0)

def test_case_2089():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(linked_list_3)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(linked_list_5)
    var_7 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'linkedList4.LinkedList'
    assert var_7.head is None
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_8 = linked_list_6.push(bytes_0)

def test_case_2090():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_1)
    node_1 = module_0.Node(none_type_1, linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_4.push(none_type_2)
    var_5 = linked_list_4.pop()
    assert linked_list_4.head is None

def test_case_2091():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_0 = module_0.Node(var_0)
    assert node_0.data == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    var_2 = linked_list_2.display()
    var_3 = linked_list_2.display()
    tuple_0 = ()
    node_2 = module_0.Node(tuple_0)
    node_3 = module_0.Node(var_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(none_type_2)
    var_5 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    node_5 = module_0.Node(var_6)
    assert node_5.data == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_5.push(linked_list_5)

def test_case_2092():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)

def test_case_2093():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_3 = linked_list_6.size()
    assert var_3 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_3 = None
    linked_list_8 = module_0.LinkedList(none_type_3)
    assert linked_list_8.head is None
    var_4 = linked_list_8.size()
    assert var_4 == 0
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_4 = None
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    str_1 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_9.display()
    assert var_6 == ')'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    with pytest.raises(IndexError):
        linked_list_6.pop()

def test_case_2094():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    var_4 = linked_list_2.display()
    node_2 = module_0.Node(linked_list_3)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_1)
    var_6 = linked_list_4.display()
    var_7 = linked_list_4.display()
    tuple_0 = ()
    node_4 = module_0.Node(tuple_0)
    node_5 = module_0.Node(var_6)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_6 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_8 = linked_list_7.size()
    assert var_8 == 0
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    linked_list_8 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_3)
    int_0 = 1454
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.search(int_0)
    node_8 = module_0.Node(var_10)
    none_type_4 = None
    linked_list_10 = module_0.LinkedList(none_type_4)
    assert linked_list_10.head is None
    var_11 = linked_list_10.push(linked_list_10)
    var_12 = linked_list_10.push(none_type_4)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_13 = linked_list_11.display()
    assert var_13 == ')'
    node_9 = module_0.Node(var_13)
    assert node_9.data == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    str_2 = '3$;;z6n'
    linked_list_13 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None

def test_case_2095():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.remove(linked_list_3)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    node_3 = module_0.Node(node_2, var_2)

def test_case_2096():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_3 = module_0.Node(node_2, var_0)
    node_4 = module_0.Node(linked_list_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.size()
    assert var_3 == 0
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.remove(none_type_3)
    var_5 = linked_list_3.search(node_6)
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_4.push(linked_list_4)
    none_type_4 = None
    linked_list_5 = module_0.LinkedList(none_type_4)
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_7 = module_0.Node(list_0)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_8.display()
    assert var_9 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.push(linked_list_9)
    var_12 = linked_list_10.display()

def test_case_2097():
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.size()
    assert var_0 == 10
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    str_1 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.remove(linked_list_1)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(bool_1)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    set_1 = {bool_1, linked_list_4, node_1}
    var_3 = linked_list_4.remove(set_1)
    bool_2 = True
    linked_list_5 = module_0.LinkedList(bool_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.display()
    assert var_4 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_5 = linked_list_5.size()
    assert var_5 == 1

def test_case_2098():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    none_type_1 = None
    linked_list_0 = module_0.LinkedList(none_type_1)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(var_2)
    str_0 = '8gF^Uhhbr$c}'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.search(str_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    var_6 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_6 = module_0.Node(node_5, var_5)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_8.remove(linked_list_8)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_7 = module_0.Node(list_0)
    node_8 = module_0.Node(node_7, list_0)
    node_9 = module_0.Node(node_7, dict_0)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    bool_1 = False
    linked_list_11 = module_0.LinkedList(bool_1)
    assert linked_list_11.head is None
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_11 = linked_list_12.size()
    assert var_11 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_12 = linked_list_13.display()
    assert var_12 == ')'

def test_case_2099():
    str_0 = 'E'

def test_case_2100():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    node_1 = module_0.Node(node_0)
    bytes_0 = b'\xa5[%<'
    node_2 = module_0.Node(bytes_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_2.remove(none_type_1)
    var_1 = linked_list_2.display()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_5 = module_0.Node(none_type_1)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.size()
    assert var_3 == 0
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    node_8 = module_0.Node(var_2)
    assert node_8.data == 0
    int_0 = 1454
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.search(int_0)
    var_5 = linked_list_5.search(var_4)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_9 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_5 = None
    linked_list_7 = module_0.LinkedList(none_type_5)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_8 = linked_list_8.display()
    assert var_8 == ')'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_9 = linked_list_9.push(linked_list_8)
    none_type_6 = None
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    var_12 = linked_list_6.remove(linked_list_5)

def test_case_2101():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    node_2 = module_0.Node(linked_list_0)
    node_3 = module_0.Node(node_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_4.remove(linked_list_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_2 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_5 = linked_list_8.search(linked_list_9)
    list_0 = []
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_6 = linked_list_10.push(list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    linked_list_11 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_11.remove(none_type_2)
    linked_list_12 = module_0.LinkedList(none_type_2)
    assert linked_list_12.head is None
    var_8 = linked_list_11.display()
    node_5 = module_0.Node(linked_list_12)
    var_9 = linked_list_11.search(var_7)
    var_10 = linked_list_12.search(node_5)
    none_type_3 = None
    linked_list_13 = module_0.LinkedList(none_type_3)
    assert linked_list_13.head is None
    var_11 = linked_list_13.size()
    assert var_11 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_12 = linked_list_14.display()
    assert var_12 == ')'

def test_case_2102():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    var_2 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_4.remove(none_type_1)
    var_4 = linked_list_4.remove(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_4 = module_0.Node(node_3, var_3)

def test_case_2103():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_1)
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_3 = linked_list_5.push(linked_list_5)
    var_4 = linked_list_5.pop()
    assert linked_list_5.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.LinkedList'
    assert var_4.head is None
    node_2 = module_0.Node(none_type_2, var_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    var_6 = linked_list_9.size()
    assert var_6 == 0
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_7 = linked_list_11.size()
    assert var_7 == 0
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    var_9 = linked_list_9.search(var_8)
    none_type_7 = None
    node_4 = module_0.Node(none_type_7)
    linked_list_12 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_12.remove(none_type_7)
    var_11 = linked_list_12.display()
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    node_6 = module_0.Node(none_type_7)

def test_case_2104():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    float_0 = -2869.0
    node_0 = module_0.Node(float_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(linked_list_4)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(linked_list_6)
    var_6 = linked_list_5.size()
    assert var_6 == 0
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    node_2 = module_0.Node(node_1)
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.remove(none_type_6)
    var_8 = linked_list_7.display()
    none_type_7 = None
    node_4 = module_0.Node(none_type_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_5 = module_0.Node(none_type_6)
    none_type_8 = None
    linked_list_9 = module_0.LinkedList(none_type_8)
    assert linked_list_9.head is None
    var_9 = linked_list_9.size()
    assert var_9 == 0
    var_10 = linked_list_9.display()
    assert var_10 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.push(linked_list_10)
    var_13 = linked_list_11.display()
    none_type_9 = None
    linked_list_12 = module_0.LinkedList(none_type_9)
    assert linked_list_12.head is None
    var_14 = linked_list_12.size()
    assert var_14 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_15 = linked_list_12.display()
    assert var_15 == ')'
    none_type_10 = None
    node_6 = module_0.Node(none_type_10)
    linked_list_14 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_16 = linked_list_14.remove(none_type_10)
    var_17 = linked_list_14.display()
    none_type_11 = None
    node_7 = module_0.Node(none_type_11)
    node_8 = module_0.Node(var_17)

def test_case_2105():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(var_3)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_3)
    var_6 = linked_list_5.display()
    node_3 = module_0.Node(var_6, linked_list_5)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    node_5 = module_0.Node(bool_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    set_0 = {bool_0, linked_list_6, node_4}
    var_7 = linked_list_6.remove(set_0)
    none_type_4 = None
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.push(linked_list_7)
    var_9 = linked_list_7.pop()
    assert linked_list_7.head is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList4.LinkedList'
    assert var_9.head is None
    bool_1 = False
    list_0 = [bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_10 = linked_list_8.search(linked_list_9)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_11 = linked_list_11.push(linked_list_11)
    var_12 = linked_list_11.pop()
    assert linked_list_11.head is None
    assert var_12.head is None
    node_7 = module_0.Node(none_type_5, var_11)
    none_type_7 = None
    linked_list_12 = module_0.LinkedList(none_type_7)
    assert linked_list_12.head is None
    var_13 = linked_list_12.size()
    assert var_13 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    none_type_8 = None
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_14 = linked_list_14.remove(none_type_8)
    linked_list_15 = module_0.LinkedList(var_14)
    assert linked_list_15.head is None
    none_type_9 = None
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    var_15 = linked_list_16.remove(none_type_9)

def test_case_2106():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    node_1 = module_0.Node(none_type_0, linked_list_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.display()
    assert var_2 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    var_4 = linked_list_3.display()
    tuple_0 = ()
    node_3 = module_0.Node(tuple_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_4 = module_0.Node(list_0)
    node_5 = module_0.Node(node_4, list_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    none_type_4 = None
    linked_list_4 = module_0.LinkedList(none_type_4)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_8 = module_0.Node(var_5)
    assert node_8.data == 0
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    var_7 = linked_list_5.remove(none_type_4)

def test_case_2107():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_4 = linked_list_3.display()
    assert var_4 == '(-2869.0)'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_2)
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    none_type_3 = None
    linked_list_6 = module_0.LinkedList(none_type_3)
    assert linked_list_6.head is None
    var_7 = linked_list_6.size()
    assert var_7 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_8 = linked_list_8.size()
    assert var_8 == 0
    var_9 = linked_list_6.display()
    assert var_9 == ')'
    var_10 = linked_list_6.search(var_9)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    str_0 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_9.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_12 = linked_list_12.size()
    assert var_12 == 0
    var_13 = linked_list_12.display()
    assert var_13 == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_14 = linked_list_13.display()
    assert var_14 == ')'
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_6 = module_0.Node(bytes_0, bytes_0)
    none_type_7 = None
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    var_15 = linked_list_14.push(linked_list_14)
    var_16 = linked_list_4.remove(var_6)

def test_case_2108():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_4 = linked_list_5.display()
    node_3 = module_0.Node(linked_list_6)
    var_5 = linked_list_5.search(var_3)
    bool_1 = False
    set_0 = {bool_1}
    node_4 = module_0.Node(set_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_3)
    var_7 = linked_list_7.display()
    var_8 = linked_list_7.display()
    tuple_0 = ()
    node_6 = module_0.Node(tuple_0)
    node_7 = module_0.Node(var_7)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_8)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    var_11 = linked_list_10.display()
    assert var_11 == ')'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_12 = linked_list_11.display()
    assert var_12 == ')'
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_13 = linked_list_13.push(linked_list_13)
    var_14 = linked_list_12.size()
    assert var_14 == 0
    int_0 = 1454
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_15 = linked_list_14.search(int_0)
    node_9 = module_0.Node(var_15)
    none_type_8 = None
    linked_list_15 = module_0.LinkedList(none_type_8)
    assert linked_list_15.head is None
    var_16 = linked_list_15.push(linked_list_15)
    var_17 = linked_list_15.push(none_type_8)
    none_type_9 = None
    linked_list_16 = module_0.LinkedList(none_type_9)
    assert linked_list_16.head is None
    var_18 = linked_list_16.push(linked_list_16)
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    node_11 = module_0.Node(node_10)
    node_12 = module_0.Node(bool_2)
    complex_0 = -1265.460815 + 1056.434j
    node_13 = module_0.Node(node_12, complex_0)

def test_case_2109():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.size()
    assert var_2 == 0
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_0 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.push(linked_list_5)
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_1 = module_0.Node(list_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    float_0 = -2869.0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(float_0)
    var_7 = linked_list_7.pop()
    assert var_7 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_7.head is None
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.remove(none_type_2)
    linked_list_10 = module_0.LinkedList(none_type_2)
    assert linked_list_10.head is None
    var_9 = linked_list_9.display()
    var_10 = linked_list_9.pop()
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'linkedList4.Node'
    assert var_10.data is None
    assert var_10.next is None
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_3 = module_0.Node(list_1)
    linked_list_11 = module_0.LinkedList()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    linked_list_12 = module_0.LinkedList(node_4)
    var_11 = linked_list_12.remove(none_type_3)
    linked_list_13 = module_0.LinkedList(none_type_3)
    var_12 = linked_list_12.display()
    node_5 = module_0.Node(linked_list_13)
    var_13 = linked_list_12.search(var_11)
    var_14 = linked_list_13.search(node_5)

def test_case_2110():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_2)
    var_4 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.LinkedList'
    assert var_4.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.display()
    assert var_5 == ')'
    node_0 = module_0.Node(var_5)
    assert node_0.data == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_5.remove(none_type_2)
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_7 = linked_list_5.display()
    var_8 = linked_list_5.pop()
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'linkedList4.Node'
    assert var_8.data is None
    assert var_8.next is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_8 = module_0.LinkedList()
    none_type_3 = None
    linked_list_9 = module_0.LinkedList(none_type_3)
    var_9 = linked_list_9.size()
    assert var_9 == 0
    linked_list_10 = module_0.LinkedList()
    var_10 = linked_list_10.display()
    assert var_10 == ')'
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_3)
    var_11 = linked_list_11.remove(none_type_4)
    var_12 = linked_list_11.remove(linked_list_11)
    linked_list_12 = module_0.LinkedList()
    node_4 = module_0.Node(node_3, var_11)
    node_5 = module_0.Node(linked_list_11)
    linked_list_13 = module_0.LinkedList()
    var_13 = linked_list_13.display()
    assert var_13 == ')'
    linked_list_14 = module_0.LinkedList()
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_15 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_15.head).__module__}.{type(linked_list_15.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_15.size()
    assert var_14 == 10

def test_case_2111():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_0 = module_0.Node(var_1)
    assert node_0.data == 0
    var_2 = linked_list_2.push(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_1)
    node_2 = module_0.Node(none_type_1, linked_list_3)

def test_case_2112():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(bytes_0)
    bool_0 = False

def test_case_2113():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    var_4 = linked_list_3.pop()
    assert linked_list_3.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    linked_list_5 = module_0.LinkedList(linked_list_3)
    linked_list_6 = module_0.LinkedList()
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    str_0 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    var_6 = linked_list_8.search(linked_list_9)
    float_0 = -2122.54
    node_1 = module_0.Node(float_0)
    linked_list_10 = module_0.LinkedList()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_11 = module_0.LinkedList(node_2)
    var_7 = linked_list_11.remove(none_type_3)
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    var_8 = linked_list_12.size()
    assert var_8 == 0
    linked_list_13 = module_0.LinkedList()
    var_9 = linked_list_13.push(var_8)
    none_type_5 = None
    linked_list_14 = module_0.LinkedList(none_type_5)
    var_10 = linked_list_14.size()
    assert var_10 == 0
    var_11 = linked_list_14.display()
    assert var_11 == ')'
    linked_list_15 = module_0.LinkedList()
    int_0 = 3548
    var_12 = linked_list_15.search(int_0)
    node_3 = module_0.Node(int_0, var_12)
    bool_0 = False
    list_0 = [bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    var_13 = linked_list_9.size()
    assert var_13 == 0

def test_case_2114():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_3 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    bool_1 = True
    linked_list_2 = module_0.LinkedList(bool_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_3 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_4 = linked_list_2.size()
    assert var_4 == 1
    linked_list_4 = module_0.LinkedList(var_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    var_5 = linked_list_6.size()
    assert var_5 == 0
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.display()
    assert var_6 == ')'
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_7.remove(linked_list_7)
    str_0 = 'r|wb1'

def test_case_2115():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(node_0, var_0)
    node_2 = module_0.Node(node_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.size()
    assert var_2 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    node_4 = module_0.Node(var_4)
    assert node_4.data == ')'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_5 = linked_list_5.push(linked_list_5)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_6 = linked_list_8.display()
    assert var_6 == ')'
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    linked_list_9 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_9.remove(none_type_2)
    linked_list_10 = module_0.LinkedList(none_type_2)
    assert linked_list_10.head is None
    var_8 = linked_list_9.display()
    node_6 = module_0.Node(linked_list_10)
    var_9 = linked_list_9.size()
    assert var_9 == 1
    none_type_3 = None
    linked_list_11 = module_0.LinkedList(none_type_3)
    assert linked_list_11.head is None
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_10 = linked_list_12.push(linked_list_12)
    var_11 = linked_list_11.size()
    assert var_11 == 0
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    assert linked_list_13.head is None
    var_12 = linked_list_13.size()
    assert var_12 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    node_8 = module_0.Node(var_12)
    assert node_8.data == 0
    var_13 = linked_list_14.display()
    assert var_13 == ')'
    var_14 = linked_list_14.remove(none_type_5)
    none_type_6 = None
    linked_list_15 = module_0.LinkedList(none_type_6)
    assert linked_list_15.head is None
    var_15 = linked_list_15.push(linked_list_15)
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    node_10 = module_0.Node(node_9)
    node_11 = module_0.Node(bool_2)
    complex_0 = -1265.460815 + 1056.434j
    node_12 = module_0.Node(node_11, complex_0)

def test_case_2116():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_1 = False
    set_0 = {bool_1}
    node_3 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_0.search(int_0)

def test_case_2117():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_1)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(linked_list_2)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.push(linked_list_4)
    var_7 = linked_list_5.display()

def test_case_2118():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_5 = module_0.Node(bytes_0, bytes_0)
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(int_0)
    var_4 = linked_list_4.size()
    assert var_4 == 1
    node_6 = module_0.Node(var_4, var_4)
    assert node_6.data == 1
    assert node_6.next == 1
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_1)
    linked_list_6 = module_0.LinkedList(none_type_1)
    assert linked_list_6.head is None
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.remove(node_7)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_7 = linked_list_8.remove(none_type_2)
    var_8 = linked_list_8.search(node_8)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_3)
    var_10 = linked_list_9.remove(linked_list_9)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_10 = module_0.Node(node_9, var_9)
    none_type_4 = None
    node_11 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_11.remove(none_type_4)
    var_12 = linked_list_11.push(none_type_4)
    str_1 = '3$;;z6n'
    linked_list_12 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_13 = linked_list_12.search(linked_list_13)
    float_1 = -2122.54
    node_12 = module_0.Node(float_1)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None

def test_case_2119():
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(bytes_0)
    int_0 = -1061
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.push(int_0)
    var_2 = linked_list_1.size()
    assert var_2 == 1
    node_0 = module_0.Node(var_2, var_2)
    assert node_0.data == 1
    assert node_0.next == 1
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_5 = linked_list_4.push(linked_list_4)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_4.push(linked_list_5)

def test_case_2120():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.size()
    assert var_0 == 10
    str_0 = '8gF^Uhhbr$c}'
    linked_list_1 = module_0.LinkedList()
    assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_1.head is None
    var_1 = linked_list_1.search(str_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bool_1 = True
    set_0 = {bool_1}
    none_type_1 = None
    node_3 = module_0.Node(set_0, none_type_1)
    str_1 = '/*vq&'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(linked_list_4)
    var_3 = linked_list_3.size()
    assert var_3 == 0
    node_4 = module_0.Node(var_3)
    assert node_4.data == 0

def test_case_2121():
    tuple_0 = ()
    linked_list_0 = module_0.LinkedList(tuple_0)
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_2122():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_2 = linked_list_3.push(bytes_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    var_4 = linked_list_4.display()
    assert var_4 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    str_0 = '8gF^Uhhbr$c}'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.search(str_0)
    str_1 = '3$;;z6n'
    linked_list_7 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_7.push(linked_list_7)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_8 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(bool_1)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    set_0 = {bool_1, linked_list_9, node_2}
    var_8 = linked_list_9.remove(set_0)
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_9 = linked_list_10.size()
    assert var_9 == 0
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_10 = linked_list_11.display()
    assert var_10 == ')'
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(node_4)
    bytes_2 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_4 = None
    linked_list_12 = module_0.LinkedList(none_type_4)
    assert linked_list_12.head is None
    var_11 = linked_list_12.push(bytes_2)
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    int_0 = -1061
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_12 = linked_list_14.push(int_0)
    var_13 = linked_list_14.size()
    assert var_13 == 1
    var_14 = linked_list_12.size()
    assert var_14 == 1

def test_case_2123():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'

def test_case_2124():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    node_1 = module_0.Node(node_0, list_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.display()
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    node_3 = module_0.Node(var_4)
    assert node_3.data == 0

def test_case_2125():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()

def test_case_2126():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_1)
    var_4 = linked_list_2.display()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_5 = linked_list_3.remove(none_type_1)
    var_6 = linked_list_3.search(node_0)
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_7 = linked_list_4.size()
    assert var_7 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_8 = linked_list_4.display()
    assert var_8 == ')'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_3 = module_0.Node(none_type_3, linked_list_6)
    int_0 = 1454
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_9 = linked_list_7.search(int_0)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_8 = module_0.LinkedList(none_type_5)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    var_11 = linked_list_8.size()
    assert var_11 == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(var_10)
    assert node_6.data == 0
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_9 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_9.remove(none_type_6)
    linked_list_10 = module_0.LinkedList(none_type_6)
    assert linked_list_10.head is None
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_13 = linked_list_11.remove(node_7)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_12 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_14 = linked_list_13.size()
    assert var_14 == 0
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_15 = linked_list_14.display()
    assert var_15 == ')'
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    linked_list_17 = module_0.LinkedList()
    assert linked_list_17.head is None
    var_16 = linked_list_17.display()
    assert var_16 == ')'
    node_8 = module_0.Node(var_16)
    assert node_8.data == ')'
    linked_list_18 = module_0.LinkedList()
    assert linked_list_18.head is None
    var_17 = linked_list_16.push(linked_list_16)

def test_case_2127():
    str_0 = '8gF^Uhhbr$c}'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(str_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.display()
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.search(int_0)
    node_4 = module_0.Node(var_3)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(linked_list_3)
    var_5 = linked_list_3.push(none_type_1)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_6 = linked_list_6.search(linked_list_6)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_7 = linked_list_7.size()
    assert var_7 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_7 = module_0.Node(var_7)
    assert node_7.data == 0

def test_case_2128():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    var_2 = linked_list_0.search(var_0)
    var_3 = linked_list_1.search(node_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_5 = linked_list_4.size()
    assert var_5 == 0
    var_6 = linked_list_4.display()
    assert var_6 == ')'
    var_7 = linked_list_4.search(none_type_1)
    bool_0 = True
    linked_list_5 = module_0.LinkedList(bool_0)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_6 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_6.display()
    assert var_8 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    var_9 = linked_list_5.size()
    assert var_9 == 1
    linked_list_7 = module_0.LinkedList(var_8)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    none_type_2 = None
    linked_list_8 = module_0.LinkedList(none_type_2)
    assert linked_list_8.head is None
    var_10 = linked_list_8.size()
    assert var_10 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    int_0 = 1454
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_11 = linked_list_10.search(int_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(node_3)
    complex_1 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_1)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_12.display()
    assert var_12 == ')'
    node_6 = module_0.Node(var_12)
    assert node_6.data == ')'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None

def test_case_2129():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_2.display()
    assert var_1 == ')'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bool_1 = True
    set_0 = {bool_1}
    none_type_0 = None
    node_2 = module_0.Node(set_0, none_type_0)
    str_1 = '/*vq&'
    linked_list_3 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    list_0 = []
    var_2 = linked_list_4.push(list_0)
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.display()
    assert var_4 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_7.remove(none_type_3)
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.push(var_6)
    int_1 = -1061
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_10.push(int_1)
    float_0 = 4618.447563
    var_9 = linked_list_10.remove(float_0)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_10 = linked_list_11.size()
    assert var_10 == 0
    var_11 = linked_list_11.size()
    assert var_11 == 0
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(var_10)
    assert node_6.data == 0
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    linked_list_12 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_12 = linked_list_12.remove(none_type_7)
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    var_13 = linked_list_12.display()
    node_8 = module_0.Node(linked_list_13)
    var_14 = linked_list_12.search(var_12)
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    linked_list_14 = module_0.LinkedList()
    assert linked_list_14.head is None
    var_15 = linked_list_14.remove(none_type_8)

def test_case_2130():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_0.size()
    assert var_1 == 0
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    list_0 = []
    var_2 = linked_list_2.push(list_0)
    none_type_3 = None
    linked_list_3 = module_0.LinkedList(none_type_3)
    assert linked_list_3.head is None
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.display()
    assert var_3 == ')'
    str_1 = '3$;;z6n'
    linked_list_5 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_3.remove(linked_list_3)
    none_type_4 = None
    linked_list_6 = module_0.LinkedList(none_type_4)
    assert linked_list_6.head is None
    var_5 = linked_list_6.push(linked_list_6)
    str_2 = '#p1jIXa}Q?(h'
    dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_0, dict_0, str_2, dict_0]
    node_0 = module_0.Node(list_1)
    node_1 = module_0.Node(node_0, list_1)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)

def test_case_2131():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    var_2 = linked_list_0.size()
    assert var_2 == 0

def test_case_2132():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_2 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_1 = linked_list_3.push(float_0)
    int_0 = 1454
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.search(int_0)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_5 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_5.display()
    assert var_3 == '(243, 41, 243, 30, 91, 11, 131, 99, 121, 171)'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_6 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_6.remove(none_type_1)
    linked_list_7 = module_0.LinkedList(none_type_1)
    assert linked_list_7.head is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    var_5 = linked_list_8.display()
    assert var_5 == ')'

def test_case_2133():
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_0 = module_0.Node(bytes_0, bytes_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.size()
    assert var_1 == 0
    var_2 = linked_list_0.display()
    assert var_2 == ')'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_3 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_3.remove(none_type_2)
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_4 = linked_list_3.display()
    node_2 = module_0.Node(linked_list_4)
    var_5 = linked_list_3.search(var_3)

def test_case_2134():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_1 = module_0.Node(var_0)
    assert node_1.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    var_3 = linked_list_2.remove(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    node_3 = module_0.Node(node_2, var_2)
    node_4 = module_0.Node(linked_list_2)
    int_0 = -1061
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(int_0)
    float_0 = 4618.447563
    var_5 = linked_list_4.remove(float_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_2 = None
    linked_list_6 = module_0.LinkedList(none_type_2)
    assert linked_list_6.head is None
    var_6 = linked_list_6.size()
    assert var_6 == 0
    var_7 = linked_list_6.display()
    assert var_7 == ')'
    var_8 = linked_list_6.search(none_type_2)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_9 = linked_list_7.size()
    assert var_9 == 0
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    node_7 = module_0.Node(none_type_5, linked_list_10)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_8 = module_0.Node(list_0)
    node_9 = module_0.Node(node_8, list_0)
    node_10 = module_0.Node(node_8, dict_0)
    none_type_6 = None
    linked_list_11 = module_0.LinkedList(none_type_6)
    assert linked_list_11.head is None
    var_10 = linked_list_11.display()
    assert var_10 == ')'
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    str_1 = '8gF^Uhhbr$c}'
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_11 = linked_list_13.search(str_1)
    with pytest.raises(IndexError):
        linked_list_5.pop()

def test_case_2135():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.display()
    assert var_2 == ')'
    none_type_1 = None
    linked_list_5 = module_0.LinkedList(none_type_1)
    assert linked_list_5.head is None
    var_3 = linked_list_5.size()
    assert var_3 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_0 = module_0.Node(var_3)
    assert node_0.data == 0
    var_4 = linked_list_6.push(none_type_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = False
    linked_list_8 = module_0.LinkedList(bool_0)
    assert linked_list_8.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_2 = module_0.Node(none_type_2, linked_list_9)
    var_5 = linked_list_8.display()
    assert var_5 == ')'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_10 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_10.remove(none_type_3)
    var_7 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    none_type_5 = None
    linked_list_12 = module_0.LinkedList(none_type_5)
    assert linked_list_12.head is None
    var_8 = linked_list_12.size()
    assert var_8 == 0
    var_9 = linked_list_12.size()
    assert var_9 == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(var_8)
    assert node_6.data == 0
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    linked_list_13 = module_0.LinkedList(node_7)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_13.remove(none_type_6)
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    var_11 = linked_list_13.display()
    node_8 = module_0.Node(linked_list_14)
    tuple_0 = (var_8,)
    var_12 = linked_list_7.search(tuple_0)

def test_case_2136():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.display()
    var_2 = linked_list_0.display()
    tuple_0 = ()
    node_1 = module_0.Node(tuple_0)
    node_2 = module_0.Node(var_1)
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    var_4 = linked_list_3.size()
    assert var_4 == 0
    var_5 = linked_list_3.display()
    assert var_5 == ')'

def test_case_2137():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    bool_0 = True
    set_0 = {bool_0}
    none_type_1 = None
    node_0 = module_0.Node(set_0, none_type_1)
    node_1 = module_0.Node(bool_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_2)
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_2 = linked_list_2.display()
    var_3 = linked_list_2.pop()
    assert linked_list_2.head is None
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'linkedList4.Node'
    assert var_3.data is None
    assert var_3.next is None
    linked_list_4 = module_0.LinkedList(linked_list_2)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    var_4 = linked_list_5.size()
    assert var_4 == 0
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    linked_list_6 = module_0.LinkedList()
    var_6 = linked_list_6.display()
    assert var_6 == ')'
    linked_list_7 = module_0.LinkedList()
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_3)
    var_7 = linked_list_8.remove(none_type_4)
    var_8 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    node_4 = module_0.Node(node_3, var_7)
    node_5 = module_0.Node(node_3)
    linked_list_10 = module_0.LinkedList()
    int_0 = -1061
    linked_list_11 = module_0.LinkedList()
    var_9 = linked_list_11.push(int_0)
    float_0 = 4618.447563
    var_10 = linked_list_11.remove(float_0)
    linked_list_12 = module_0.LinkedList()
    none_type_5 = None
    linked_list_13 = module_0.LinkedList(none_type_5)
    var_11 = linked_list_13.size()
    assert var_11 == 0
    linked_list_14 = module_0.LinkedList()
    var_12 = linked_list_14.display()
    assert var_12 == ')'
    int_1 = 1454
    linked_list_15 = module_0.LinkedList()
    var_13 = linked_list_15.search(int_1)
    var_14 = linked_list_15.search(var_13)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    none_type_6 = None
    linked_list_16 = module_0.LinkedList(none_type_6)
    str_0 = '3$;;z6n'
    linked_list_17 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_17.head).__module__}.{type(linked_list_17.head).__qualname__}' == 'linkedList4.Node'
    var_15 = linked_list_16.display()
    assert var_15 == ')'
    linked_list_18 = module_0.LinkedList()
    int_2 = 1454
    linked_list_19 = module_0.LinkedList()
    var_16 = linked_list_19.search(int_2)
    var_17 = linked_list_19.search(var_16)
    var_18 = linked_list_19.push(var_16)

def test_case_2138():
    none_type_0 = None
    bytes_0 = b'\xa5\x8c\xc4\x0e'
    node_0 = module_0.Node(bytes_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'linkedList4.Node'
    assert var_0.data == b'\xa5\x8c\xc4\x0e'
    assert var_0.next is None

def test_case_2139():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    var_1 = linked_list_0.display()
    assert var_1 == ')'
    var_2 = linked_list_0.search(none_type_0)
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.remove(str_0)

def test_case_2140():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_1 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_2 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    with pytest.raises(IndexError):
        linked_list_3.pop()

def test_case_2141():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(str_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_2.remove(none_type_1)
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.size()
    assert var_3 == 0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_4 = linked_list_4.push(var_3)
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    str_1 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.display()
    assert var_5 == ')'
    float_0 = -2869.0
    node_2 = module_0.Node(float_0)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_6 = linked_list_8.size()
    assert var_6 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.display()
    assert var_7 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_8 = linked_list_9.remove(linked_list_9)
    str_2 = '$T\x0bL=O]w^NF\tP'
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_9 = linked_list_11.remove(str_2)
    var_10 = linked_list_11.size()
    assert var_10 == 0
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    node_4 = module_0.Node(none_type_5, linked_list_12)
    none_type_6 = None
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_11 = linked_list_13.push(linked_list_13)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_0)
    complex_0 = -1265.460815 + 1056.434j
    node_8 = module_0.Node(node_7, complex_0)
    none_type_7 = None
    linked_list_14 = module_0.LinkedList(none_type_7)
    assert linked_list_14.head is None
    var_12 = linked_list_14.size()
    assert var_12 == 0

def test_case_2142():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_1 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_1.remove(none_type_0)
    var_2 = linked_list_1.display()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_2)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_3 = linked_list_2.push(linked_list_2)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_2.push(linked_list_3)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    node_4 = module_0.Node(linked_list_5)
    node_5 = module_0.Node(linked_list_4)
    node_6 = module_0.Node(node_4)

def test_case_2143():
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'

def test_case_2144():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    bytes_0 = b'\xa5[%<'
    node_1 = module_0.Node(bytes_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_2 = None
    linked_list_4 = module_0.LinkedList(none_type_2)
    assert linked_list_4.head is None
    var_1 = linked_list_4.size()
    assert var_1 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_2 = linked_list_5.display()
    assert var_2 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    str_1 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_7.display()
    assert var_3 == ')'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(node_4)
    var_4 = linked_list_7.display()
    assert var_4 == ')'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    linked_list_9 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_9.remove(none_type_4)
    none_type_5 = None
    linked_list_10 = module_0.LinkedList(none_type_5)
    assert linked_list_10.head is None
    var_6 = linked_list_10.size()
    assert var_6 == 0
    var_7 = linked_list_10.display()
    assert var_7 == ')'
    var_8 = linked_list_9.search(linked_list_9)

def test_case_2145():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_3 = linked_list_2.display()
    assert var_3 == ')'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    node_0 = module_0.Node(var_4)
    assert node_0.data == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_5 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_5.remove(none_type_2)
    var_6 = linked_list_5.display()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    node_3 = module_0.Node(var_6)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_6 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_7 = linked_list_6.remove(none_type_4)
    linked_list_7 = module_0.LinkedList(none_type_4)
    assert linked_list_7.head is None
    var_8 = linked_list_7.display()
    assert var_8 == ')'

def test_case_2146():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    bool_0 = False
    set_0 = {bool_0}
    node_1 = module_0.Node(set_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(linked_list_1)
    var_1 = linked_list_1.pop()
    assert linked_list_1.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_2 = '8gF^Uhhbr$c}'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_2 = linked_list_4.search(str_2)
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_2147():
    int_0 = 1454
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(int_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    complex_0 = -2363.678516 + 1356.37j
    node_2 = module_0.Node(complex_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_3 = module_0.Node(list_0)
    node_4 = module_0.Node(node_3, list_0)
    node_5 = module_0.Node(node_3, dict_0)
    none_type_0 = None
    linked_list_4 = module_0.LinkedList(none_type_0)
    assert linked_list_4.head is None
    var_1 = linked_list_4.display()
    assert var_1 == ')'
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    linked_list_5 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_5.remove(none_type_1)
    var_3 = linked_list_5.display()
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(bool_1)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    str_2 = '#p1jIXa}Q?(h'
    dict_1 = {str_2: str_2, str_2: str_2, str_2: str_2}
    list_1 = [dict_1, dict_1, str_2, dict_1]
    node_9 = module_0.Node(list_1)
    node_10 = module_0.Node(node_9, list_1)
    none_type_2 = None
    node_11 = module_0.Node(none_type_2)
    linked_list_8 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_4 = linked_list_8.remove(none_type_2)
    linked_list_9 = module_0.LinkedList(none_type_2)
    assert linked_list_9.head is None
    var_5 = linked_list_8.display()
    node_12 = module_0.Node(linked_list_9)
    var_6 = linked_list_8.search(var_4)
    var_7 = linked_list_9.search(node_12)
    none_type_3 = None
    linked_list_10 = module_0.LinkedList(none_type_3)
    assert linked_list_10.head is None
    var_8 = linked_list_10.push(linked_list_10)
    var_9 = linked_list_10.pop()
    assert linked_list_10.head is None
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'linkedList4.LinkedList'
    assert var_9.head is None
    var_10 = linked_list_10.size()
    assert var_10 == 0
    str_3 = 'Vr<Zc3Mq:]H'

def test_case_2148():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    str_0 = '3$;;z6n'
    linked_list_1 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    str_1 = '3$;;z6n'
    linked_list_2 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_0.remove(linked_list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.push(bytes_0)
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    linked_list_6 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_6.remove(none_type_2)
    var_4 = linked_list_6.remove(linked_list_6)
    var_5 = linked_list_6.size()
    assert var_5 == 1
    int_0 = -1061
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_6 = linked_list_7.push(int_0)
    str_2 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList(linked_list_8)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    none_type_3 = None
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    var_7 = linked_list_10.remove(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_4 = module_0.Node(none_type_4, linked_list_11)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_8 = linked_list_12.remove(none_type_5)
    bytes_1 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_13 = module_0.LinkedList(bytes_1)
    assert f'{type(linked_list_13.head).__module__}.{type(linked_list_13.head).__qualname__}' == 'linkedList4.Node'
    none_type_6 = None
    linked_list_14 = module_0.LinkedList(none_type_6)
    assert linked_list_14.head is None
    var_9 = linked_list_14.size()
    assert var_9 == 0
    linked_list_15 = module_0.LinkedList()
    assert linked_list_15.head is None
    var_10 = linked_list_15.display()
    assert var_10 == ')'
    linked_list_16 = module_0.LinkedList()
    assert linked_list_16.head is None
    none_type_7 = None
    node_6 = module_0.Node(none_type_7)
    linked_list_17 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_17.head).__module__}.{type(linked_list_17.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_17.remove(none_type_7)
    linked_list_18 = module_0.LinkedList(none_type_7)
    assert linked_list_18.head is None
    var_12 = linked_list_17.display()
    node_7 = module_0.Node(linked_list_18)
    node_8 = module_0.Node(linked_list_17)
    node_9 = module_0.Node(node_7)

def test_case_2149():
    list_0 = []
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(list_0)
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_2 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_1 = linked_list_2.remove(none_type_0)
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_2 = linked_list_4.size()
    assert var_2 == 0
    var_3 = linked_list_4.display()
    assert var_3 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_4 = linked_list_5.display()
    assert var_4 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_5 = linked_list_6.display()
    assert var_5 == ')'
    none_type_2 = None
    linked_list_7 = module_0.LinkedList(none_type_2)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_1 = module_0.Node(var_6)
    assert node_1.data == 0
    var_7 = linked_list_8.push(none_type_2)
    var_8 = linked_list_8.pop()
    assert linked_list_8.head is None
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    linked_list_9 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(none_type_3)
    var_10 = linked_list_9.remove(linked_list_9)
    var_11 = linked_list_9.size()
    assert var_11 == 1

def test_case_2150():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    var_2 = linked_list_0.push(node_1)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    var_4 = linked_list_1.display()
    assert var_4 == ')'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(node_3)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    node_6 = module_0.Node(bool_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    set_0 = {bool_1, linked_list_2, node_5}
    var_5 = linked_list_2.remove(set_0)
    float_1 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_6 = linked_list_3.push(float_1)
    bool_2 = False
    set_1 = {bool_2}
    node_7 = module_0.Node(set_1)
    int_0 = -2297
    var_7 = linked_list_3.search(int_0)
    var_8 = linked_list_3.size()
    assert var_8 == 1

def test_case_2151():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None

def test_case_2152():
    list_0 = []
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(list_0)
    complex_0 = -2363.678516 + 1356.37j
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_1 = linked_list_1.remove(none_type_0)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_2 = linked_list_3.display()
    assert var_2 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None

def test_case_2153():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    var_3 = linked_list_0.search(linked_list_0)
    none_type_2 = None
    linked_list_2 = module_0.LinkedList(none_type_2)
    assert linked_list_2.head is None
    var_4 = linked_list_2.size()
    assert var_4 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    linked_list_4 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_4.remove(none_type_3)
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_6 = linked_list_4.display()
    node_2 = module_0.Node(linked_list_5)
    node_3 = module_0.Node(linked_list_4)
    str_0 = '3$;;z6n'
    linked_list_6 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_6.head).__module__}.{type(linked_list_6.head).__qualname__}' == 'linkedList4.Node'
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    var_7 = linked_list_7.display()
    assert var_7 == ')'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_4)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_4)
    linked_list_9 = module_0.LinkedList(none_type_4)
    assert linked_list_9.head is None
    var_9 = linked_list_8.display()
    node_5 = module_0.Node(linked_list_9)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_6)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_5)
    var_11 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    node_7 = module_0.Node(node_6, var_10)
    node_8 = module_0.Node(linked_list_10)
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_12 = linked_list_12.remove(none_type_6)
    var_13 = linked_list_12.search(node_9)
    none_type_7 = None
    linked_list_13 = module_0.LinkedList(none_type_7)
    assert linked_list_13.head is None
    str_1 = '3$;;z6n'
    linked_list_14 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_14.head).__module__}.{type(linked_list_14.head).__qualname__}' == 'linkedList4.Node'
    var_14 = linked_list_13.display()
    assert var_14 == ')'
    str_2 = '}#lc4Uvb2Z13ai83yU'

def test_case_2154():
    int_0 = -1061
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(int_0)
    float_0 = 4618.447563
    var_1 = linked_list_0.remove(float_0)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    str_0 = '$T\x0bL=O]w^NF\tP'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.remove(str_0)

def test_case_2155():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(node_0)
    node_2 = module_0.Node(bool_0)
    var_1 = linked_list_0.display()
    assert var_1 == '(-2869.0)'
    var_2 = linked_list_0.push(node_1)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_1 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'linkedList4.Node'
    none_type_0 = None
    linked_list_2 = module_0.LinkedList(none_type_0)
    assert linked_list_2.head is None
    var_3 = linked_list_2.size()
    assert var_3 == 0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.display()
    assert var_4 == ')'
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_5 = linked_list_3.remove(linked_list_3)

def test_case_2156():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    float_0 = -2869.0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.push(float_0)
    var_1 = linked_list_1.pop()
    assert var_1 == pytest.approx(-2869.0, abs=0.01, rel=0.01)
    assert linked_list_1.head is None
    int_0 = 1454
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.search(int_0)
    none_type_0 = None
    linked_list_3 = module_0.LinkedList(none_type_0)
    assert linked_list_3.head is None
    none_type_1 = None
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_4.push(linked_list_4)
    var_4 = linked_list_3.size()
    assert var_4 == 0

def test_case_2157():
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_0 = linked_list_1.display()
    assert var_0 == ')'
    node_0 = module_0.Node(var_0)
    assert node_0.data == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_1 = linked_list_0.push(linked_list_0)
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_2158():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_1 = linked_list_1.size()
    assert var_1 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    var_2 = linked_list_2.push(var_1)
    str_0 = '3$;;z6n'
    linked_list_3 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(node_1)
    bool_1 = True
    set_0 = {bool_1}
    none_type_2 = None
    node_3 = module_0.Node(set_0, none_type_2)
    str_1 = '/*vq&'
    linked_list_4 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    var_3 = linked_list_2.display()
    assert var_3 == '(0)'

def test_case_2159():
    float_0 = -2869.0
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(float_0)
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    int_0 = -2297
    var_1 = linked_list_0.search(int_0)
    var_2 = linked_list_0.size()
    assert var_2 == 1
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_3 = linked_list_1.size()
    assert var_3 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    node_2 = module_0.Node(var_3)
    assert node_2.data == 0
    var_4 = linked_list_2.display()
    assert var_4 == ')'
    var_5 = linked_list_2.remove(none_type_0)
    none_type_1 = None
    linked_list_3 = module_0.LinkedList(none_type_1)
    assert linked_list_3.head is None
    list_0 = []
    var_6 = linked_list_3.push(list_0)
    with pytest.raises(IndexError):
        linked_list_1.pop()

def test_case_2160():
    bool_0 = False
    set_0 = {bool_0}
    node_0 = module_0.Node(set_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(none_type_0)
    var_1 = linked_list_0.search(node_2)
    complex_0 = -2363.678516 + 1356.37j
    node_3 = module_0.Node(complex_0)
    node_4 = module_0.Node(node_3)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_2 = linked_list_1.remove(none_type_1)
    var_3 = linked_list_1.search(node_5)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    node_7 = module_0.Node(node_6)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    float_0 = -2869.0
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    var_4 = linked_list_3.push(float_0)
    bool_2 = False
    set_1 = {bool_2}
    node_8 = module_0.Node(set_1)
    int_0 = -2297
    var_5 = linked_list_3.search(int_0)
    var_6 = linked_list_3.size()
    assert var_6 == 1
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_7 = linked_list_4.display()
    assert var_7 == ')'
    none_type_2 = None
    linked_list_5 = module_0.LinkedList(none_type_2)
    assert linked_list_5.head is None
    var_8 = linked_list_5.size()
    assert var_8 == 0
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    node_9 = module_0.Node(var_8)
    assert node_9.data == 0
    var_9 = linked_list_6.push(none_type_2)
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    node_11 = module_0.Node(node_10)
    none_type_4 = None
    node_12 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_12)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_7.remove(none_type_4)
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_11 = linked_list_7.display()

def test_case_2161():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    linked_list_0 = module_0.LinkedList(node_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'linkedList4.Node'
    var_0 = linked_list_0.remove(none_type_0)
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    var_1 = linked_list_0.display()
    node_1 = module_0.Node(linked_list_1)
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_2)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    linked_list_4 = module_0.LinkedList(none_type_1)
    assert linked_list_4.head is None
    var_3 = linked_list_3.display()
    var_4 = linked_list_3.pop()
    assert linked_list_3.head is None
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'linkedList4.Node'
    assert var_4.data is None
    assert var_4.next is None
    linked_list_5 = module_0.LinkedList(linked_list_3)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    linked_list_6 = module_0.LinkedList()
    set_0 = {bool_0, linked_list_6, node_3}
    var_5 = linked_list_6.remove(set_0)
    complex_0 = -2363.678516 + 1356.37j
    node_5 = module_0.Node(complex_0)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    linked_list_7 = module_0.LinkedList()
    var_6 = linked_list_7.remove(none_type_2)
    var_7 = linked_list_7.search(node_6)
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    node_8 = module_0.Node(node_7)
    linked_list_8 = module_0.LinkedList()

def test_case_2162():
    bytes_0 = b'\x94'
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(bytes_0)

def test_case_2163():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    none_type_1 = None
    linked_list_1 = module_0.LinkedList(none_type_1)
    assert linked_list_1.head is None
    var_0 = linked_list_1.size()
    assert var_0 == 0
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_1 = linked_list_3.size()
    assert var_1 == 0
    var_2 = linked_list_1.display()
    assert var_2 == ')'
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_3 = linked_list_4.size()
    assert var_3 == 0
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    str_1 = '$T\x0bL=O]w^NF\tP'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_4 = linked_list_6.remove(str_1)
    var_5 = linked_list_6.size()
    assert var_5 == 0
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    var_6 = linked_list_7.remove(none_type_4)
    var_7 = linked_list_7.remove(linked_list_7)
    linked_list_8 = module_0.LinkedList()
    assert linked_list_8.head is None
    node_4 = module_0.Node(node_3, var_6)
    none_type_5 = None
    linked_list_9 = module_0.LinkedList(none_type_5)
    assert linked_list_9.head is None
    str_2 = '3$;;z6n'
    linked_list_10 = module_0.LinkedList(str_2)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_9.display()
    assert var_8 == ')'
    str_3 = '3$;;z6n'
    linked_list_11 = module_0.LinkedList(str_3)
    assert f'{type(linked_list_11.head).__module__}.{type(linked_list_11.head).__qualname__}' == 'linkedList4.Node'
    var_9 = linked_list_9.remove(linked_list_9)
    float_0 = -2869.0
    linked_list_12 = module_0.LinkedList()
    assert linked_list_12.head is None
    var_10 = linked_list_12.push(float_0)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    node_6 = module_0.Node(node_5)
    node_7 = module_0.Node(bool_0)
    var_11 = linked_list_12.display()
    assert var_11 == '(-2869.0)'
    var_12 = linked_list_12.push(node_6)

def test_case_2164():
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ')'
    none_type_0 = None
    linked_list_1 = module_0.LinkedList(none_type_0)
    assert linked_list_1.head is None
    none_type_1 = None
    linked_list_2 = module_0.LinkedList(none_type_1)
    assert linked_list_2.head is None
    var_1 = linked_list_2.push(linked_list_2)
    var_2 = linked_list_1.size()
    assert var_2 == 0
    bytes_0 = b'\x19\x9dq\xf4\x18=<\xfc\xf2'
    none_type_2 = None
    linked_list_3 = module_0.LinkedList(none_type_2)
    assert linked_list_3.head is None
    var_3 = linked_list_3.push(bytes_0)
    none_type_3 = None
    linked_list_4 = module_0.LinkedList(none_type_3)
    assert linked_list_4.head is None
    var_4 = linked_list_4.size()
    assert var_4 == 0
    var_5 = linked_list_4.display()
    assert var_5 == ')'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_6 = linked_list_5.display()
    assert var_6 == ')'
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    complex_0 = -2363.678516 + 1356.37j
    node_1 = module_0.Node(complex_0)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    linked_list_7 = module_0.LinkedList()
    assert linked_list_7.head is None
    str_1 = '3$;;z6n'
    linked_list_8 = module_0.LinkedList(str_1)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_7 = linked_list_9.search(linked_list_9)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    node_4 = module_0.Node(bool_0)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_5)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_10.remove(none_type_5)
    var_9 = linked_list_10.remove(linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_10 = linked_list_12.size()
    assert var_10 == 0
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None

def test_case_2165():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'linkedList4.LinkedList'
    assert var_1.head is None
    var_2 = linked_list_0.size()
    assert var_2 == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    var_3 = linked_list_1.remove(none_type_1)
    var_4 = linked_list_1.search(node_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    linked_list_2 = module_0.LinkedList(node_1)
    assert f'{type(linked_list_2.head).__module__}.{type(linked_list_2.head).__qualname__}' == 'linkedList4.Node'
    var_5 = linked_list_2.remove(none_type_2)
    var_6 = linked_list_2.remove(linked_list_2)
    str_0 = '#p1jIXa}Q?(h'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    node_2 = module_0.Node(list_0)
    linked_list_3 = module_0.LinkedList()
    assert linked_list_3.head is None
    float_0 = -2869.0
    linked_list_4 = module_0.LinkedList()
    assert linked_list_4.head is None
    var_7 = linked_list_4.push(float_0)
    var_8 = linked_list_4.pop()
    assert linked_list_4.head is None
    none_type_3 = None
    linked_list_5 = module_0.LinkedList(none_type_3)
    assert linked_list_5.head is None
    var_9 = linked_list_5.push(linked_list_5)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    var_10 = linked_list_5.push(linked_list_6)
    bytes_0 = b'\xabyc\x83\x0b[\x1e\xf3)\xf3'
    linked_list_7 = module_0.LinkedList(bytes_0)
    assert f'{type(linked_list_7.head).__module__}.{type(linked_list_7.head).__qualname__}' == 'linkedList4.Node'
    none_type_4 = None
    linked_list_8 = module_0.LinkedList(none_type_4)
    assert linked_list_8.head is None
    var_11 = linked_list_8.size()
    assert var_11 == 0
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    var_12 = linked_list_9.display()
    assert var_12 == ')'
    linked_list_10 = module_0.LinkedList()
    assert linked_list_10.head is None
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    var_13 = linked_list_11.search(node_3)
    none_type_6 = None
    linked_list_12 = module_0.LinkedList(none_type_6)
    assert linked_list_12.head is None
    var_14 = linked_list_12.size()
    assert var_14 == 0
    var_15 = linked_list_12.display()
    assert var_15 == ')'
    int_0 = 1454
    linked_list_13 = module_0.LinkedList()
    assert linked_list_13.head is None
    var_16 = linked_list_13.search(int_0)
    var_17 = linked_list_13.search(var_16)
    var_18 = linked_list_13.push(var_16)

def test_case_2166():
    bytes_0 = b'\xc3\xc2\xb3\x80\xf1b_\xad\xc6\x00Z\xff(~\x07>\x94t'
    node_0 = module_0.Node(bytes_0, bytes_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    linked_list_0 = module_0.LinkedList(none_type_0)
    assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'linkedList4.LinkedList'
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.head is None
    node_2 = module_0.Node(var_0)
    assert node_2.data == 0
    var_1 = linked_list_1.display()
    assert var_1 == ')'
    linked_list_2 = module_0.LinkedList()
    assert linked_list_2.head is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    linked_list_3 = module_0.LinkedList(node_3)
    assert f'{type(linked_list_3.head).__module__}.{type(linked_list_3.head).__qualname__}' == 'linkedList4.Node'
    var_2 = linked_list_3.remove(none_type_1)
    var_3 = linked_list_3.remove(linked_list_3)
    var_4 = linked_list_3.size()
    assert var_4 == 1
    str_0 = '3$;;z6n'
    linked_list_4 = module_0.LinkedList(str_0)
    assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'linkedList4.Node'
    linked_list_5 = module_0.LinkedList()
    assert linked_list_5.head is None
    var_5 = linked_list_4.search(linked_list_5)
    float_0 = -2122.54
    node_4 = module_0.Node(float_0)
    linked_list_6 = module_0.LinkedList()
    assert linked_list_6.head is None
    str_1 = '#p1jIXa}Q?(h'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    list_0 = [dict_0, dict_0, str_1, dict_0]
    node_5 = module_0.Node(list_0)
    node_6 = module_0.Node(node_5, list_0)
    node_7 = module_0.Node(node_5, dict_0)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    none_type_3 = None
    linked_list_7 = module_0.LinkedList(none_type_3)
    assert linked_list_7.head is None
    var_6 = linked_list_7.size()
    assert var_6 == 0
    var_7 = linked_list_7.size()
    assert var_7 == 0
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    linked_list_8 = module_0.LinkedList(node_9)
    assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'linkedList4.Node'
    var_8 = linked_list_8.remove(none_type_4)
    var_9 = linked_list_8.remove(linked_list_8)
    linked_list_9 = module_0.LinkedList()
    assert linked_list_9.head is None
    node_10 = module_0.Node(node_9, var_8)
    none_type_5 = None
    node_11 = module_0.Node(none_type_5)
    linked_list_10 = module_0.LinkedList(node_11)
    assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'linkedList4.Node'
    var_10 = linked_list_10.remove(none_type_5)
    node_12 = module_0.Node(none_type_5, linked_list_10)
    linked_list_11 = module_0.LinkedList()
    assert linked_list_11.head is None
    none_type_6 = None
    node_13 = module_0.Node(none_type_6)
    linked_list_12 = module_0.LinkedList(node_13)
    assert f'{type(linked_list_12.head).__module__}.{type(linked_list_12.head).__qualname__}' == 'linkedList4.Node'
    var_11 = linked_list_12.remove(none_type_6)
    linked_list_13 = module_0.LinkedList(none_type_6)
    assert linked_list_13.head is None
    var_12 = linked_list_12.display()
    var_13 = linked_list_12.pop()
    assert linked_list_12.head is None
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'linkedList4.Node'
    assert var_13.data is None
    assert var_13.next is None
    linked_list_14 = module_0.LinkedList(linked_list_12)
