[34m[*][0m Start mutation process:
[36m   -[0m targets: binarySearchTree2.py
[36m   -[0m tests: ./DYNAMOSA
[34m[*][0m 15 tests passed:
[36m   -[0m test_binarySearchTree2_DYNAMOSA [0.27671 s]
[34m[*][0m Start mutants generation and execution:
[36m   -[0m [#   1] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
[34m- 120:         self.root = self.__build(array, None, 0, len(array) - 1)[0m
[32m+ 120:         self.root = self.__build(array, None, 0, len(array) + 1)[0m
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.17420 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
>       none_type_0 = b_s_t_0.build(list_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d9810e80>
array = [<binarySearchTree2.BST object at 0x7f09d9810e80>], root = None
left = 0, right = 2

>   ???
E   IndexError: list index out of range

binarySearchTree2:131: IndexError
[36m   -[0m [#   2] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
[34m- 127:         mid = (left + right) // 2[0m
[32m+ 127:         mid = (left - right) // 2[0m
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[0.21722 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(bytes_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
[36m   -[0m [#   3] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
[34m- 127:         mid = (left + right) // 2[0m
[32m+ 127:         mid = (left + right) / 2[0m
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[0.17489 s] [36mincompetent[0m

TypeError: binarySearchTree2:131: TypeError: list indices must be integers or slices, not float

[36m   -[0m [#   4] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
[34m- 127:         mid = (left + right) // 2[0m
[32m+ 127:         mid = (left + right) * 2[0m
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[0.15968 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(bytes_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d9425960>
array = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc', root = None, left = 0
right = 11

>   ???
E   IndexError: index out of range

binarySearchTree2:131: IndexError
[36m   -[0m [#   5] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
[34m- 138:         self.__build(array, root, left, mid - 1)[0m
[32m+ 138:         self.__build(array, root, left, mid + 1)[0m
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[0.23680 s] [36mincompetent[0m

TypeError: binarySearchTree2:28: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [#   6] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
[34m- 139:         self.__build(array, root, mid + 1, right)[0m
[32m+ 139:         self.__build(array, root, mid - 1, right)[0m
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[0.16440 s] [36mincompetent[0m

TypeError: binarySearchTree2:28: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [#   7] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
[34m-  23:             self.size += 1[0m
[32m+  23:             self.size -= 1[0m
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
--------------------------------------------------------------------------------
[0.17619 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_2

def test_case_2():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
>       assert len(b_s_t_0) == 1
E       ValueError: __len__() should return >= 0

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:29: ValueError
[36m   -[0m [#   8] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
[34m-  31:                 self.size += 1[0m
[32m+  31:                 self.size -= 1[0m
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
--------------------------------------------------------------------------------
[0.18178 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [#   9] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
[34m-  37:                 self.size += 1[0m
[32m+  37:                 self.size -= 1[0m
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
--------------------------------------------------------------------------------
[0.17694 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [#  10] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
   68:                 self.root = None
[34m-  69:                 self.size -= 1[0m
[32m+  69:                 self.size += 1[0m
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
   73:                 self.size -= 1
--------------------------------------------------------------------------------
[0.25936 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_12

def test_case_12():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
        assert len(b_s_t_0) == 1
        var_1 = var_0.__str__()
        assert var_1 == 'None'
        var_2 = b_s_t_0.remove(b_s_t_0)
>       assert len(b_s_t_0) == 0
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:146: AssertionError
[36m   -[0m [#  11] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
[34m-  73:                 self.size -= 1[0m
[32m+  73:                 self.size += 1[0m
   74:         else:
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
--------------------------------------------------------------------------------
[0.17982 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
        var_2 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 2
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:51: AssertionError
[36m   -[0m [#  12] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
[34m- 132:             self.size += 1[0m
[32m+ 132:             self.size -= 1[0m
  133:         else:
  134:             
  135:             
  136:             self.__add(root, array[mid])
--------------------------------------------------------------------------------
[0.17612 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 1
E       ValueError: __len__() should return >= 0

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:17: ValueError
[36m   -[0m [#  13] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
    4: 
    5: T = TypeVar('T')
    6: 
    7: class Node:
[34m-   8:     def __init__(self, value: T):[0m
[34m-   9:         self.value = value[0m
[34m-  10:         self.left = None[0m
[34m-  11:         self.right = None[0m
[34m-  12: [0m
[32m+   8:     @classmethod[0m
[32m+   9:     def __init__(self, value: T):[0m
[32m+  10:         self.value = value[0m
[32m+  11:         self.left = None[0m
[32m+  12:         self.right = None[0m
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
--------------------------------------------------------------------------------
[0.18472 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree2/DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:103: TypeError: object of type 'NoneType' has no len()

[36m   -[0m [#  14] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
[34m-  14:     def __init__(self):[0m
[34m-  15:         self.root = None[0m
[34m-  16:         self.size = 0[0m
[34m-  17:     [0m
[32m+  14:     @classmethod[0m
[32m+  15:     def __init__(self):[0m
[32m+  16:         self.root = None[0m
[32m+  17:         self.size = 0[0m
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
--------------------------------------------------------------------------------
[0.13959 s] [31msurvived[0m
[36m   -[0m [#  15] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
   17:     
[34m-  18:     def add(self, value: T):[0m
[34m-  19:         if self.contains(value):[0m
[34m-  20:             return False[0m
[34m-  21:         elif self.root == None:[0m
[34m-  22:             self.root = Node(value)[0m
[34m-  23:             self.size += 1[0m
[34m-  24:         else:[0m
[34m-  25:             self.__add(self.root, value)[0m
[34m-  26:     [0m
[32m+  18:     @classmethod[0m
[32m+  19:     def add(self, value: T):[0m
[32m+  20:         if self.contains(value):[0m
[32m+  21:             return False[0m
[32m+  22:         elif self.root == None:[0m
[32m+  23:             self.root = Node(value)[0m
[32m+  24:             self.size += 1[0m
[32m+  25:         else:[0m
[32m+  26:             self.__add(self.root, value)[0m
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
--------------------------------------------------------------------------------
[0.25929 s] [36mincompetent[0m

TypeError: binarySearchTree2:20: TypeError: BST.contains() missing 1 required positional argument: 'value'

[36m   -[0m [#  16] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
[34m-  27:     def __add(self, root, value):[0m
[34m-  28:         if value < root.value:[0m
[34m-  29:             if root.left == None:[0m
[34m-  30:                 root.left = Node(value)[0m
[34m-  31:                 self.size += 1[0m
[34m-  32:             else:[0m
[34m-  33:                 self.__add(root.left, value)[0m
[34m-  34:         elif value >= root.value:[0m
[34m-  35:             if root.right == None:[0m
[34m-  36:                 root.right = Node(value)[0m
[34m-  37:                 self.size += 1[0m
[34m-  38:             else:[0m
[34m-  39:                 self.__add(root.right, value)[0m
[34m-  40:     [0m
[32m+  27:     @classmethod[0m
[32m+  28:     def __add(self, root, value):[0m
[32m+  29:         if value < root.value:[0m
[32m+  30:             if root.left == None:[0m
[32m+  31:                 root.left = Node(value)[0m
[32m+  32:                 self.size += 1[0m
[32m+  33:             else:[0m
[32m+  34:                 self.__add(root.left, value)[0m
[32m+  35:         elif value >= root.value:[0m
[32m+  36:             if root.right == None:[0m
[32m+  37:                 root.right = Node(value)[0m
[32m+  38:                 self.size += 1[0m
[32m+  39:             else:[0m
[32m+  40:                 self.__add(root.right, value)[0m
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
--------------------------------------------------------------------------------
[0.17961 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(bytes_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>
root = <binarySearchTree2.Node object at 0x7f09d9529180>, value = 6

>   ???
E   AttributeError: type object 'BST' has no attribute 'size'

binarySearchTree2:32: AttributeError
[36m   -[0m [#  17] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
[34m-  41:     def contains(self, value):[0m
[34m-  42:         [0m
[34m-  43:         return self.__contains(self.root, value)[0m
[34m-  44:     [0m
[32m+  41:     @classmethod[0m
[32m+  42:     def contains(self, value):[0m
[32m+  43:         [0m
[32m+  44:         return self.__contains(self.root, value)[0m
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
   48:         elif root.value == value:
--------------------------------------------------------------------------------
[0.16733 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.__str__()
        var_2 = b_s_t_0.isValid()
>       var_3 = b_s_t_0.add(b_s_t_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>
value = <binarySearchTree2.BST object at 0x7f09d9097ee0>

>   ???
E   AttributeError: type object 'BST' has no attribute 'root'

binarySearchTree2:44: AttributeError
[36m   -[0m [#  18] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
[34m-  45:     def __contains(self, root, value):[0m
[34m-  46:         if root == None:[0m
[34m-  47:             return False[0m
[34m-  48:         elif root.value == value:[0m
[34m-  49:             return True[0m
[34m-  50:         [0m
[34m-  51:         elif value < root.value:[0m
[34m-  52:             return self.__contains(root.left, value)[0m
[34m-  53:         else:[0m
[34m-  54:             return self.__contains(root.right, value)[0m
[34m-  55:     [0m
[32m+  45:     @classmethod[0m
[32m+  46:     def __contains(self, root, value):[0m
[32m+  47:         if root == None:[0m
[32m+  48:             return False[0m
[32m+  49:         elif root.value == value:[0m
[32m+  50:             return True[0m
[32m+  51:         [0m
[32m+  52:         elif value < root.value:[0m
[32m+  53:             return self.__contains(root.left, value)[0m
[32m+  54:         else:[0m
[32m+  55:             return self.__contains(root.right, value)[0m
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
--------------------------------------------------------------------------------
[0.15648 s] [31msurvived[0m
[36m   -[0m [#  19] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
[34m-  56:     def minValueNode(self, node):[0m
[34m-  57:         current = node[0m
[34m-  58:         [0m
[34m-  59:         while current.left is not None:[0m
[34m-  60:             current = current.left[0m
[34m-  61:         [0m
[34m-  62:         return current[0m
[34m-  63:     [0m
[32m+  56:     @classmethod[0m
[32m+  57:     def minValueNode(self, node):[0m
[32m+  58:         current = node[0m
[32m+  59:         [0m
[32m+  60:         while current.left is not None:[0m
[32m+  61:             current = current.left[0m
[32m+  62:         [0m
[32m+  63:         return current[0m
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
--------------------------------------------------------------------------------
[0.15571 s] [31msurvived[0m
[36m   -[0m [#  20] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   60:             current = current.left
   61:         
   62:         return current
   63:     
[34m-  64:     def remove(self, value):[0m
[34m-  65:         [0m
[34m-  66:         if self.contains(value):[0m
[34m-  67:             if self.size == 1:[0m
[34m-  68:                 self.root = None[0m
[34m-  69:                 self.size -= 1[0m
[34m-  70:             else:[0m
[34m-  71:                 [0m
[34m-  72:                 self.__remove(self.root, value)[0m
[34m-  73:                 self.size -= 1[0m
[34m-  74:         else:[0m
[34m-  75:             pass[0m
[34m-  76:     [0m
[32m+  64:     @classmethod[0m
[32m+  65:     def remove(self, value):[0m
[32m+  66:         [0m
[32m+  67:         if self.contains(value):[0m
[32m+  68:             if self.size == 1:[0m
[32m+  69:                 self.root = None[0m
[32m+  70:                 self.size -= 1[0m
[32m+  71:             else:[0m
[32m+  72:                 [0m
[32m+  73:                 self.__remove(self.root, value)[0m
[32m+  74:                 self.size -= 1[0m
[32m+  75:         else:[0m
[32m+  76:             pass[0m
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
   79:             current = node
   80:             
--------------------------------------------------------------------------------
[0.17736 s] [36mincompetent[0m

TypeError: binarySearchTree2:67: TypeError: BST.contains() missing 1 required positional argument: 'value'

[36m   -[0m [#  21] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
[34m-  77:     def __remove(self, root, value: T):[0m
[34m-  78:         def minValueNode(node):[0m
[34m-  79:             current = node[0m
[34m-  80:             [0m
[34m-  81:             while current.left is not None:[0m
[34m-  82:                 current = current.left[0m
[34m-  83:             [0m
[34m-  84:             return current[0m
[34m-  85:         [0m
[34m-  86:         if root is None:[0m
[34m-  87:             return root[0m
[34m-  88:         [0m
[34m-  89:         if value < root.value:[0m
[34m-  90:             root.left = self.__remove(root.left, value)[0m
[34m-  91:         [0m
[34m-  92:         elif value > root.value:[0m
[34m-  93:             root.right = self.__remove(root.right, value)[0m
[34m-  94:         else:[0m
[34m-  95:             [0m
[32m+  77:     @classmethod[0m
[32m+  78:     def __remove(self, root, value: T):[0m
[32m+  79:         def minValueNode(node):[0m
[32m+  80:             current = node[0m
[32m+  81:             [0m
[32m+  82:             while current.left is not None:[0m
[32m+  83:                 current = current.left[0m
[32m+  84:             [0m
[32m+  85:             return current[0m
[32m+  86:         [0m
[32m+  87:         if root is None:[0m
[32m+  88:             return root[0m
[32m+  89:         [0m
[32m+  90:         if value < root.value:[0m
[32m+  91:             root.left = self.__remove(root.left, value)[0m
[32m+  92:         [0m
[32m+  93:         elif value > root.value:[0m
[32m+  94:             root.right = self.__remove(root.right, value)[0m
[32m+  95:         else:[0m
   96:             
[34m-  97:             if root.left is None:[0m
[34m-  98:                 temp = root.right[0m
[34m-  99:                 root = None[0m
[34m- 100:                 return temp[0m
[34m- 101:             [0m
[34m- 102:             elif root.right is None:[0m
[34m- 103:                 temp = root.left[0m
[34m- 104:                 root = None[0m
[34m- 105:                 return temp[0m
[34m- 106:             [0m
[34m- 107:             temp = minValueNode(root.right)[0m
[34m- 108:             [0m
[34m- 109:             root.value = temp.value[0m
[34m- 110:             [0m
[34m- 111:             root.right = self.__remove(root.right, temp.value)[0m
[34m- 112:         [0m
[34m- 113:         return root[0m
[34m- 114:     [0m
[32m+  97:             [0m
[32m+  98:             if root.left is None:[0m
[32m+  99:                 temp = root.right[0m
[32m+ 100:                 root = None[0m
[32m+ 101:                 return temp[0m
[32m+ 102:             [0m
[32m+ 103:             elif root.right is None:[0m
[32m+ 104:                 temp = root.left[0m
[32m+ 105:                 root = None[0m
[32m+ 106:                 return temp[0m
[32m+ 107:             [0m
[32m+ 108:             temp = minValueNode(root.right)[0m
[32m+ 109:             [0m
[32m+ 110:             root.value = temp.value[0m
[32m+ 111:             [0m
[32m+ 112:             root.right = self.__remove(root.right, temp.value)[0m
[32m+ 113:         [0m
[32m+ 114:         return root[0m
  115:     def isValid(self):
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
--------------------------------------------------------------------------------
[0.15695 s] [31msurvived[0m
[36m   -[0m [#  22] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
  113:         return root
  114:     
[34m- 115:     def isValid(self):[0m
[34m- 116:         pass[0m
[34m- 117:     [0m
[32m+ 115:     @classmethod[0m
[32m+ 116:     def isValid(self):[0m
[32m+ 117:         pass[0m
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
--------------------------------------------------------------------------------
[0.15232 s] [31msurvived[0m
[36m   -[0m [#  23] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  114:     
  115:     def isValid(self):
  116:         pass
  117:     
[34m- 118:     def build(self, array: list) -> None:[0m
[34m- 119:         [0m
[34m- 120:         self.root = self.__build(array, None, 0, len(array) - 1)[0m
[34m- 121:     [0m
[32m+ 118:     @classmethod[0m
[32m+ 119:     def build(self, array: list) -> None:[0m
[32m+ 120:         [0m
[32m+ 121:         self.root = self.__build(array, None, 0, len(array) - 1)[0m
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
  125:             return
--------------------------------------------------------------------------------
[0.17755 s] [36mincompetent[0m

TypeError: binarySearchTree2:121: TypeError: BST.__build() missing 1 required positional argument: 'right'

[36m   -[0m [#  24] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
[34m- 122:     def __build(self, array: list, root, left: int, right: int):[0m
[34m- 123:         [0m
[34m- 124:         if left > right:[0m
[34m- 125:             return[0m
[34m- 126:         [0m
[34m- 127:         mid = (left + right) // 2[0m
[34m- 128:         [0m
[34m- 129:         if not root:[0m
[34m- 130:             [0m
[34m- 131:             root = Node(array[mid])[0m
[34m- 132:             self.size += 1[0m
[34m- 133:         else:[0m
[34m- 134:             [0m
[32m+ 122:     @classmethod[0m
[32m+ 123:     def __build(self, array: list, root, left: int, right: int):[0m
[32m+ 124:         [0m
[32m+ 125:         if left > right:[0m
[32m+ 126:             return[0m
[32m+ 127:         [0m
[32m+ 128:         mid = (left + right) // 2[0m
[32m+ 129:         [0m
[32m+ 130:         if not root:[0m
[32m+ 131:             [0m
[32m+ 132:             root = Node(array[mid])[0m
[32m+ 133:             self.size += 1[0m
[32m+ 134:         else:[0m
  135:             
[34m- 136:             self.__add(root, array[mid])[0m
[34m- 137:         [0m
[34m- 138:         self.__build(array, root, left, mid - 1)[0m
[34m- 139:         self.__build(array, root, mid + 1, right)[0m
[34m- 140:         [0m
[34m- 141:         return root[0m
[34m- 142:     [0m
[32m+ 136:             [0m
[32m+ 137:             self.__add(root, array[mid])[0m
[32m+ 138:         [0m
[32m+ 139:         self.__build(array, root, left, mid - 1)[0m
[32m+ 140:         self.__build(array, root, mid + 1, right)[0m
[32m+ 141:         [0m
[32m+ 142:         return root[0m
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
--------------------------------------------------------------------------------
[0.16124 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
>       none_type_0 = b_s_t_0.build(list_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>
array = [<binarySearchTree2.BST object at 0x7f09d9188ee0>]
root = <binarySearchTree2.Node object at 0x7f09d9188fd0>, left = 0, right = 0

>   ???
E   AttributeError: type object 'BST' has no attribute 'size'

binarySearchTree2:133: AttributeError
[36m   -[0m [#  25] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
[34m- 143:     def getOrder(self, order='inOrder'):[0m
[34m- 144:         def inOrder(root):[0m
[34m- 145:             if root:[0m
[34m- 146:                 inOrder(root.left)[0m
[34m- 147:                 traversal.append(root.value)[0m
[34m- 148:                 inOrder(root.right)[0m
[34m- 149:         [0m
[34m- 150:         def preOrder(root):[0m
[34m- 151:             if root:[0m
[34m- 152:                 traversal.append(root.value)[0m
[34m- 153:                 preOrder(root.left)[0m
[34m- 154:                 preOrder(root.right)[0m
[34m- 155:         [0m
[34m- 156:         def postOrder(root):[0m
[34m- 157:             if root:[0m
[34m- 158:                 preOrder(root.left)[0m
[34m- 159:                 preOrder(root.right)[0m
[34m- 160:                 traversal.append(root.value)[0m
[34m- 161:         [0m
[34m- 162:         traversal = [][0m
[34m- 163:         if order == 'inOrder':[0m
[34m- 164:             inOrder(self.root)[0m
[34m- 165:             return traversal[0m
[34m- 166:         elif order == 'preOrder':[0m
[34m- 167:             preOrder(self.root)[0m
[34m- 168:             return traversal[0m
[34m- 169:         elif order == 'postOrder':[0m
[34m- 170:             postOrder(self.root)[0m
[34m- 171:             return traversal[0m
[34m- 172:     [0m
[32m+ 143:     @classmethod[0m
[32m+ 144:     def getOrder(self, order='inOrder'):[0m
[32m+ 145:         def inOrder(root):[0m
[32m+ 146:             if root:[0m
[32m+ 147:                 inOrder(root.left)[0m
[32m+ 148:                 traversal.append(root.value)[0m
[32m+ 149:                 inOrder(root.right)[0m
[32m+ 150:         [0m
[32m+ 151:         def preOrder(root):[0m
[32m+ 152:             if root:[0m
[32m+ 153:                 traversal.append(root.value)[0m
[32m+ 154:                 preOrder(root.left)[0m
[32m+ 155:                 preOrder(root.right)[0m
[32m+ 156:         [0m
[32m+ 157:         def postOrder(root):[0m
[32m+ 158:             if root:[0m
[32m+ 159:                 preOrder(root.left)[0m
[32m+ 160:                 preOrder(root.right)[0m
[32m+ 161:                 traversal.append(root.value)[0m
[32m+ 162:         [0m
[32m+ 163:         traversal = [][0m
[32m+ 164:         if order == 'inOrder':[0m
[32m+ 165:             inOrder(self.root)[0m
[32m+ 166:             return traversal[0m
[32m+ 167:         elif order == 'preOrder':[0m
[32m+ 168:             preOrder(self.root)[0m
[32m+ 169:             return traversal[0m
[32m+ 170:         elif order == 'postOrder':[0m
[32m+ 171:             postOrder(self.root)[0m
[32m+ 172:             return traversal[0m
  173:     def __len__(self):
  174:         return self.size
  175:     
  176:     def __str__(self):
--------------------------------------------------------------------------------
[0.17289 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.__str__()

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>, order = 'inOrder'

>   ???
E   AttributeError: type object 'BST' has no attribute 'root'

binarySearchTree2:165: AttributeError
[36m   -[0m [#  26] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
[34m- 173:     def __len__(self):[0m
[34m- 174:         return self.size[0m
[34m- 175:     [0m
[32m+ 173:     @classmethod[0m
[32m+ 174:     def __len__(self):[0m
[32m+ 175:         return self.size[0m
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
  179:         Returns:
--------------------------------------------------------------------------------
[0.17962 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_0

def test_case_0():
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>

>   ???
E   AttributeError: type object 'BST' has no attribute 'size'

binarySearchTree2:175: AttributeError
[36m   -[0m [#  27] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  172:     
  173:     def __len__(self):
  174:         return self.size
  175:     
[34m- 176:     def __str__(self):[0m
[34m- 177:         '''Return String representation of BST values.[0m
[34m- 178: [0m
[34m- 179:         Returns:[0m
[34m- 180:             String: String inorder representaion of BST.[0m
[34m- 181:         '''[0m
[34m- 182:         [0m
[34m- 183:         return str(self.getOrder())[0m
[34m- 184: [0m
[32m+ 176:     @classmethod[0m
[32m+ 177:     def __str__(self):[0m
[32m+ 178:         '''Return String representation of BST values.[0m
[32m+ 179: [0m
[32m+ 180:         Returns:[0m
[32m+ 181:             String: String inorder representaion of BST.[0m
[32m+ 182:         '''[0m
[32m+ 183:         [0m
[32m+ 184:         return str(self.getOrder())[0m
  185: 
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
--------------------------------------------------------------------------------
[0.17800 s] [36mincompetent[0m

TypeError: binarySearchTree2:184: TypeError: BST.getOrder() missing 1 required positional argument: 'self'

[36m   -[0m [#  28] COD binarySearchTree2: 
--------------------------------------------------------------------------------
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
[34m- 129:         if not root:[0m
[32m+ 129:         if root:[0m
  130:             
  131:             root = Node(array[mid])
  132:             self.size += 1
  133:         else:
--------------------------------------------------------------------------------
[0.17770 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
>       none_type_0 = b_s_t_0.build(list_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d96f7f10>, root = None
value = <binarySearchTree2.BST object at 0x7f09d96f7f10>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
[36m   -[0m [#  29] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   15:         self.root = None
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
[34m-  19:         if self.contains(value):[0m
[32m+  19:         if not (self.contains(value)):[0m
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
--------------------------------------------------------------------------------
[0.23960 s] [36mincompetent[0m

TypeError: binarySearchTree2:28: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [#  30] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
[34m-  21:         elif self.root == None:[0m
[32m+  21:         elif not (self.root == None):[0m
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
--------------------------------------------------------------------------------
[0.17966 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_2

def test_case_2():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:25: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d90976d0>, root = None
value = <binarySearchTree2.BST object at 0x7f09d90976d0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
[36m   -[0m [#  31] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
[34m-  28:         if value < root.value:[0m
[32m+  28:         if not (value < root.value):[0m
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
--------------------------------------------------------------------------------
[0.17739 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [#  32] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
[34m-  29:             if root.left == None:[0m
[32m+  29:             if not (root.left == None):[0m
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
--------------------------------------------------------------------------------
[0.17557 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(bytes_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:33: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d96bc790>, root = None, value = 6

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
[36m   -[0m [#  33] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
[34m-  34:         elif value >= root.value:[0m
[32m+  34:         elif not (value >= root.value):[0m
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
--------------------------------------------------------------------------------
[0.17781 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [#  34] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
[34m-  35:             if root.right == None:[0m
[32m+  35:             if not (root.right == None):[0m
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
--------------------------------------------------------------------------------
[0.24984 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(bytes_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:39: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d95c6230>, root = None
value = 248

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
[36m   -[0m [#  35] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   42:         
   43:         return self.__contains(self.root, value)
   44:     
   45:     def __contains(self, root, value):
[34m-  46:         if root == None:[0m
[32m+  46:         if not (root == None):[0m
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
--------------------------------------------------------------------------------
[0.17813 s] [36mincompetent[0m

TypeError: binarySearchTree2:28: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [#  36] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
[34m-  48:         elif root.value == value:[0m
[32m+  48:         elif not (root.value == value):[0m
   49:             return True
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
--------------------------------------------------------------------------------
[0.16139 s] [36mincompetent[0m

TypeError: binarySearchTree2:51: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [#  37] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
[34m-  51:         elif value < root.value:[0m
[32m+  51:         elif not (value < root.value):[0m
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
--------------------------------------------------------------------------------
[0.17819 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
        var_2 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 2
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:51: AssertionError
[36m   -[0m [#  38] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   55:     
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
[34m-  59:         while current.left is not None:[0m
[32m+  59:         while not (current.left is not None):[0m
   60:             current = current.left
   61:         
   62:         return current
   63:     
--------------------------------------------------------------------------------
[0.18391 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_5

def test_case_5():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
>       var_0 = b_s_t_0.minValueNode(node_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d937e4a0>
node = <binarySearchTree2.Node object at 0x7f09d937e140>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree2:59: AttributeError
[36m   -[0m [#  39] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   62:         return current
   63:     
   64:     def remove(self, value):
   65:         
[34m-  66:         if self.contains(value):[0m
[32m+  66:         if not (self.contains(value)):[0m
   67:             if self.size == 1:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
--------------------------------------------------------------------------------
[0.25096 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
        var_2 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 2
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:51: AssertionError
[36m   -[0m [#  40] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
[34m-  67:             if self.size == 1:[0m
[32m+  67:             if not (self.size == 1):[0m
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[0.17060 s] [36mincompetent[0m

TypeError: binarySearchTree2:89: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [#  41] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
   79:             current = node
   80:             
[34m-  81:             while current.left is not None:[0m
[32m+  81:             while not (current.left is not None):[0m
   82:                 current = current.left
   83:             
   84:             return current
   85:         
--------------------------------------------------------------------------------
[0.15229 s] [31msurvived[0m
[36m   -[0m [#  42] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   82:                 current = current.left
   83:             
   84:             return current
   85:         
[34m-  86:         if root is None:[0m
[32m+  86:         if not (root is None):[0m
   87:             return root
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
--------------------------------------------------------------------------------
[0.15232 s] [31msurvived[0m
[36m   -[0m [#  43] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   85:         
   86:         if root is None:
   87:             return root
   88:         
[34m-  89:         if value < root.value:[0m
[32m+  89:         if not (value < root.value):[0m
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
--------------------------------------------------------------------------------
[0.15592 s] [31msurvived[0m
[36m   -[0m [#  44] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
[34m-  92:         elif value > root.value:[0m
[32m+  92:         elif not (value > root.value):[0m
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
--------------------------------------------------------------------------------
[0.15718 s] [31msurvived[0m
[36m   -[0m [#  45] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
[34m-  97:             if root.left is None:[0m
[32m+  97:             if not (root.left is None):[0m
   98:                 temp = root.right
   99:                 root = None
  100:                 return temp
  101:             
--------------------------------------------------------------------------------
[0.14400 s] [31msurvived[0m
[36m   -[0m [#  46] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   98:                 temp = root.right
   99:                 root = None
  100:                 return temp
  101:             
[34m- 102:             elif root.right is None:[0m
[32m+ 102:             elif not (root.right is None):[0m
  103:                 temp = root.left
  104:                 root = None
  105:                 return temp
  106:             
--------------------------------------------------------------------------------
[0.15515 s] [31msurvived[0m
[36m   -[0m [#  47] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
[34m- 124:         if left > right:[0m
[32m+ 124:         if not (left > right):[0m
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
--------------------------------------------------------------------------------
[0.16009 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 1
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:17: AssertionError
[36m   -[0m [#  48] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
[34m- 129:         if not root:[0m
[32m+ 129:         if not ((not root)):[0m
  130:             
  131:             root = Node(array[mid])
  132:             self.size += 1
  133:         else:
--------------------------------------------------------------------------------
[0.18142 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
>       none_type_0 = b_s_t_0.build(list_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d94d3d00>, root = None
value = <binarySearchTree2.BST object at 0x7f09d94d3d00>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
[36m   -[0m [#  49] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
[34m- 145:             if root:[0m
[32m+ 145:             if not root:[0m
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
  148:                 inOrder(root.right)
  149:         
--------------------------------------------------------------------------------
[0.17078 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.__str__()

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
binarySearchTree2:164: in getOrder
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree2:146: AttributeError
[36m   -[0m [#  50] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  147:                 traversal.append(root.value)
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
[34m- 151:             if root:[0m
[32m+ 151:             if not root:[0m
  152:                 traversal.append(root.value)
  153:                 preOrder(root.left)
  154:                 preOrder(root.right)
  155:         
--------------------------------------------------------------------------------
[0.18263 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_13

def test_case_13():
        str_0 = 'preOrder'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.getOrder(str_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:154: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:167: in getOrder
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:152: AttributeError
[36m   -[0m [#  51] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  153:                 preOrder(root.left)
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
[34m- 157:             if root:[0m
[32m+ 157:             if not root:[0m
  158:                 preOrder(root.left)
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
--------------------------------------------------------------------------------
[0.15496 s] [31msurvived[0m
[36m   -[0m [#  52] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
[34m- 163:         if order == 'inOrder':[0m
[32m+ 163:         if not (order == 'inOrder'):[0m
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[0.17756 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:14: AssertionError
[36m   -[0m [#  53] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
[34m- 166:         elif order == 'preOrder':[0m
[32m+ 166:         elif not (order == 'preOrder'):[0m
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[0.25195 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_9

def test_case_9():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(b_s_t_0)
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        assert len(node_0.value) == 1
        var_2 = b_s_t_0.__str__()
>       assert var_2 == '[None]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:105: AssertionError
[36m   -[0m [#  54] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
[34m- 169:         elif order == 'postOrder':[0m
[32m+ 169:         elif not (order == 'postOrder'):[0m
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[0.18268 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_9

def test_case_9():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(b_s_t_0)
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        assert len(node_0.value) == 1
        var_2 = b_s_t_0.__str__()
>       assert var_2 == '[None]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:105: AssertionError
[36m   -[0m [#  55] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
[34m- 186: if __name__ == '__main__':[0m
[32m+ 186: if not (__name__ == '__main__'):[0m
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[1, 2, 3] 3
[2, 3] 2
[2] 1
[] 0
[0.13778 s] [31msurvived[0m
[36m   -[0m [#  56] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
    1: """Binary search tree, also called an ordered or sorted binary tree (BST), is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node's left subtree and less than those in its right subtree."""
    2: 
    3: from typing import TypeVar
    4: 
[34m-   5: T = TypeVar('T')[0m
[32m+   5: T = TypeVar('mutpy')[0m
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[0.14861 s] [31msurvived[0m
[36m   -[0m [#  57] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
    1: """Binary search tree, also called an ordered or sorted binary tree (BST), is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node's left subtree and less than those in its right subtree."""
    2: 
    3: from typing import TypeVar
    4: 
[34m-   5: T = TypeVar('T')[0m
[32m+   5: T = TypeVar('')[0m
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[0.15682 s] [31msurvived[0m
[36m   -[0m [#  58] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
[34m-  16:         self.size = 0[0m
[32m+  16:         self.size = 1[0m
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
--------------------------------------------------------------------------------
[0.26075 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_0

def test_case_0():
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:8: AssertionError
[36m   -[0m [#  59] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
[34m-  23:             self.size += 1[0m
[32m+  23:             self.size += 2[0m
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
--------------------------------------------------------------------------------
[0.17631 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_2

def test_case_2():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
>       assert len(b_s_t_0) == 1
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:29: AssertionError
[36m   -[0m [#  60] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
[34m-  31:                 self.size += 1[0m
[32m+  31:                 self.size += 2[0m
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
--------------------------------------------------------------------------------
[0.18313 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [#  61] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
[34m-  37:                 self.size += 1[0m
[32m+  37:                 self.size += 2[0m
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
--------------------------------------------------------------------------------
[0.18593 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [#  62] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
[34m-  67:             if self.size == 1:[0m
[32m+  67:             if self.size == 2:[0m
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[0.18988 s] [36mincompetent[0m

TypeError: binarySearchTree2:89: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [#  63] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
   68:                 self.root = None
[34m-  69:                 self.size -= 1[0m
[32m+  69:                 self.size -= 2[0m
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
   73:                 self.size -= 1
--------------------------------------------------------------------------------
[0.25217 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_12

def test_case_12():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
        assert len(b_s_t_0) == 1
        var_1 = var_0.__str__()
        assert var_1 == 'None'
        var_2 = b_s_t_0.remove(b_s_t_0)
>       assert len(b_s_t_0) == 0
E       ValueError: __len__() should return >= 0

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:146: ValueError
[36m   -[0m [#  64] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
[34m-  73:                 self.size -= 1[0m
[32m+  73:                 self.size -= 2[0m
   74:         else:
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
--------------------------------------------------------------------------------
[0.18356 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
        var_2 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 2
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:51: AssertionError
[36m   -[0m [#  65] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
[34m- 120:         self.root = self.__build(array, None, 0, len(array) - 1)[0m
[32m+ 120:         self.root = self.__build(array, None, 1, len(array) - 1)[0m
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.17738 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 1
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:17: AssertionError
[36m   -[0m [#  66] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
[34m- 120:         self.root = self.__build(array, None, 0, len(array) - 1)[0m
[32m+ 120:         self.root = self.__build(array, None, 0, len(array) - 2)[0m
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.17061 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 1
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:17: AssertionError
[36m   -[0m [#  67] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
[34m- 127:         mid = (left + right) // 2[0m
[32m+ 127:         mid = (left + right) // 3[0m
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[0.21409 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(bytes_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals & position)
[36m   -[0m [#  68] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
[34m- 132:             self.size += 1[0m
[32m+ 132:             self.size += 2[0m
  133:         else:
  134:             
  135:             
  136:             self.__add(root, array[mid])
--------------------------------------------------------------------------------
[0.17916 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 1
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:17: AssertionError
[36m   -[0m [#  69] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
[34m- 138:         self.__build(array, root, left, mid - 1)[0m
[32m+ 138:         self.__build(array, root, left, mid - 2)[0m
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[0.18468 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [#  70] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
[34m- 139:         self.__build(array, root, mid + 1, right)[0m
[32m+ 139:         self.__build(array, root, mid + 2, right)[0m
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[0.18474 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [#  71] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
[34m- 143:     def getOrder(self, order='inOrder'):[0m
[32m+ 143:     def getOrder(self, order='mutpy'):[0m
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
--------------------------------------------------------------------------------
[0.17494 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:14: AssertionError
[36m   -[0m [#  72] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
[34m- 143:     def getOrder(self, order='inOrder'):[0m
[32m+ 143:     def getOrder(self, order=''):[0m
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
--------------------------------------------------------------------------------
[0.15832 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:14: AssertionError
[36m   -[0m [#  73] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
[34m- 163:         if order == 'inOrder':[0m
[32m+ 163:         if order == 'mutpy':[0m
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[0.17719 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:14: AssertionError
[36m   -[0m [#  74] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
[34m- 163:         if order == 'inOrder':[0m
[32m+ 163:         if order == '':[0m
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[0.17475 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:14: AssertionError
[36m   -[0m [#  75] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
[34m- 166:         elif order == 'preOrder':[0m
[32m+ 166:         elif order == 'mutpy':[0m
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[0.15690 s] [31msurvived[0m
[36m   -[0m [#  76] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
[34m- 166:         elif order == 'preOrder':[0m
[32m+ 166:         elif order == '':[0m
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[0.15842 s] [31msurvived[0m
[36m   -[0m [#  77] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
[34m- 169:         elif order == 'postOrder':[0m
[32m+ 169:         elif order == 'mutpy':[0m
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[0.15663 s] [31msurvived[0m
[36m   -[0m [#  78] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
[34m- 169:         elif order == 'postOrder':[0m
[32m+ 169:         elif order == '':[0m
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[0.14900 s] [31msurvived[0m
[36m   -[0m [#  79] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
[34m- 186: if __name__ == '__main__':[0m
[32m+ 186: if __name__ == 'mutpy':[0m
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[0.15568 s] [31msurvived[0m
[36m   -[0m [#  80] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
[34m- 186: if __name__ == '__main__':[0m
[32m+ 186: if __name__ == '':[0m
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[0.15210 s] [31msurvived[0m
[36m   -[0m [#  81] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
  189:     
[34m- 190:     tree.add(3)[0m
[32m+ 190:     tree.add(4)[0m
  191:     tree.add(2)
  192:     tree.add(4)
  193:     
  194:     
--------------------------------------------------------------------------------
[0.15422 s] [31msurvived[0m
[36m   -[0m [#  82] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
[34m- 191:     tree.add(2)[0m
[32m+ 191:     tree.add(3)[0m
  192:     tree.add(4)
  193:     
  194:     
  195:     
--------------------------------------------------------------------------------
[0.15839 s] [31msurvived[0m
[36m   -[0m [#  83] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  188:     tree = BST()
  189:     
  190:     tree.add(3)
  191:     tree.add(2)
[34m- 192:     tree.add(4)[0m
[32m+ 192:     tree.add(5)[0m
  193:     
  194:     
  195:     
  196:     
--------------------------------------------------------------------------------
[0.13856 s] [31msurvived[0m
[36m   -[0m [#  84] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
[34m- 199:     tree2.build([1, 2, 3])[0m
[32m+ 199:     tree2.build([2, 2, 3])[0m
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[0.14802 s] [31msurvived[0m
[36m   -[0m [#  85] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
[34m- 199:     tree2.build([1, 2, 3])[0m
[32m+ 199:     tree2.build([1, 3, 3])[0m
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[0.15606 s] [31msurvived[0m
[36m   -[0m [#  86] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
[34m- 199:     tree2.build([1, 2, 3])[0m
[32m+ 199:     tree2.build([1, 2, 4])[0m
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[0.15646 s] [31msurvived[0m
[36m   -[0m [#  87] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  197:     
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
[34m- 201:     tree2.remove(1)[0m
[32m+ 201:     tree2.remove(2)[0m
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
--------------------------------------------------------------------------------
[0.15646 s] [31msurvived[0m
[36m   -[0m [#  88] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
[34m- 203:     tree2.remove(3)[0m
[32m+ 203:     tree2.remove(4)[0m
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.15884 s] [31msurvived[0m
[36m   -[0m [#  89] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
[34m- 205:     tree2.remove(2)[0m
[32m+ 205:     tree2.remove(3)[0m
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.13675 s] [31msurvived[0m
[36m   -[0m [#  90] OIL binarySearchTree2: 
--------------------------------------------------------------------------------
   57:         current = node
   58:         
   59:         while current.left is not None:
   60:             current = current.left
[34m-  61:         [0m
[32m+  61:             break[0m
   62:         return current
   63:     
   64:     def remove(self, value):
   65:         
--------------------------------------------------------------------------------
[0.15806 s] [31msurvived[0m
[36m   -[0m [#  91] OIL binarySearchTree2: 
--------------------------------------------------------------------------------
   79:             current = node
   80:             
   81:             while current.left is not None:
   82:                 current = current.left
[34m-  83:             [0m
[32m+  83:                 break[0m
   84:             return current
   85:         
   86:         if root is None:
   87:             return root
--------------------------------------------------------------------------------
[0.13942 s] [31msurvived[0m
[36m   -[0m [#  92] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
[34m-  21:         elif self.root == None:[0m
[32m+  21:         elif self.root != None:[0m
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
--------------------------------------------------------------------------------
[0.15971 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_2

def test_case_2():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:25: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d9538d60>, root = None
value = <binarySearchTree2.BST object at 0x7f09d9538d60>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
[36m   -[0m [#  93] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
[34m-  28:         if value < root.value:[0m
[32m+  28:         if value > root.value:[0m
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
--------------------------------------------------------------------------------
[0.25670 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [#  94] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
[34m-  28:         if value < root.value:[0m
[32m+  28:         if value <= root.value:[0m
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
--------------------------------------------------------------------------------
[0.15659 s] [31msurvived[0m
[36m   -[0m [#  95] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
[34m-  29:             if root.left == None:[0m
[32m+  29:             if root.left != None:[0m
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
--------------------------------------------------------------------------------
[0.17729 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(bytes_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:33: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d97aef20>, root = None, value = 6

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
[36m   -[0m [#  96] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
[34m-  34:         elif value >= root.value:[0m
[32m+  34:         elif value <= root.value:[0m
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
--------------------------------------------------------------------------------
[0.17992 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [#  97] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
[34m-  34:         elif value >= root.value:[0m
[32m+  34:         elif value > root.value:[0m
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
--------------------------------------------------------------------------------
[0.15790 s] [31msurvived[0m
[36m   -[0m [#  98] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
[34m-  35:             if root.right == None:[0m
[32m+  35:             if root.right != None:[0m
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
--------------------------------------------------------------------------------
[0.18265 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(bytes_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:39: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d9627a30>, root = None
value = 248

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
[36m   -[0m [#  99] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   42:         
   43:         return self.__contains(self.root, value)
   44:     
   45:     def __contains(self, root, value):
[34m-  46:         if root == None:[0m
[32m+  46:         if root != None:[0m
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
--------------------------------------------------------------------------------
[0.15989 s] [36mincompetent[0m

TypeError: binarySearchTree2:28: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [# 100] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
[34m-  48:         elif root.value == value:[0m
[32m+  48:         elif root.value != value:[0m
   49:             return True
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
--------------------------------------------------------------------------------
[0.17945 s] [36mincompetent[0m

TypeError: binarySearchTree2:51: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [# 101] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
[34m-  51:         elif value < root.value:[0m
[32m+  51:         elif value > root.value:[0m
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
--------------------------------------------------------------------------------
[0.17966 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
        var_2 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 2
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:51: AssertionError
[36m   -[0m [# 102] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
[34m-  51:         elif value < root.value:[0m
[32m+  51:         elif value <= root.value:[0m
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
--------------------------------------------------------------------------------
[0.15554 s] [31msurvived[0m
[36m   -[0m [# 103] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
[34m-  67:             if self.size == 1:[0m
[32m+  67:             if self.size != 1:[0m
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[0.18827 s] [36mincompetent[0m

TypeError: binarySearchTree2:89: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [# 104] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   85:         
   86:         if root is None:
   87:             return root
   88:         
[34m-  89:         if value < root.value:[0m
[32m+  89:         if value > root.value:[0m
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
--------------------------------------------------------------------------------
[0.15860 s] [31msurvived[0m
[36m   -[0m [# 105] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   85:         
   86:         if root is None:
   87:             return root
   88:         
[34m-  89:         if value < root.value:[0m
[32m+  89:         if value <= root.value:[0m
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
--------------------------------------------------------------------------------
[0.15483 s] [31msurvived[0m
[36m   -[0m [# 106] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
[34m-  92:         elif value > root.value:[0m
[32m+  92:         elif value < root.value:[0m
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
--------------------------------------------------------------------------------
[0.15585 s] [31msurvived[0m
[36m   -[0m [# 107] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
[34m-  92:         elif value > root.value:[0m
[32m+  92:         elif value >= root.value:[0m
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
--------------------------------------------------------------------------------
[0.15790 s] [31msurvived[0m
[36m   -[0m [# 108] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
[34m- 124:         if left > right:[0m
[32m+ 124:         if left < right:[0m
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
--------------------------------------------------------------------------------
[0.17888 s] [36mincompetent[0m

TypeError: binarySearchTree2:28: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [# 109] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
[34m- 124:         if left > right:[0m
[32m+ 124:         if left >= right:[0m
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
--------------------------------------------------------------------------------
[0.15755 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 1
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:17: AssertionError
[36m   -[0m [# 110] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
[34m- 163:         if order == 'inOrder':[0m
[32m+ 163:         if order != 'inOrder':[0m
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[0.17006 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:14: AssertionError
[36m   -[0m [# 111] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
[34m- 166:         elif order == 'preOrder':[0m
[32m+ 166:         elif order != 'preOrder':[0m
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[0.18414 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_9

def test_case_9():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(b_s_t_0)
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        assert len(node_0.value) == 1
        var_2 = b_s_t_0.__str__()
>       assert var_2 == '[None]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:105: AssertionError
[36m   -[0m [# 112] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
[34m- 169:         elif order == 'postOrder':[0m
[32m+ 169:         elif order != 'postOrder':[0m
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[0.16854 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_9

def test_case_9():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(b_s_t_0)
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        assert len(node_0.value) == 1
        var_2 = b_s_t_0.__str__()
>       assert var_2 == '[None]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:105: AssertionError
[36m   -[0m [# 113] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
[34m- 186: if __name__ == '__main__':[0m
[32m+ 186: if __name__ != '__main__':[0m
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[1, 2, 3] 3
[2, 3] 2
[2] 1
[] 0
[0.15670 s] [31msurvived[0m
[36m   -[0m [# 114] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
    4: 
    5: T = TypeVar('T')
    6: 
    7: class Node:
[34m-   8:     def __init__(self, value: T):[0m
[34m-   9:         self.value = value[0m
[34m-  10:         self.left = None[0m
[34m-  11:         self.right = None[0m
[34m-  12: [0m
[32m+   8:     @staticmethod[0m
[32m+   9:     def __init__(self, value: T):[0m
[32m+  10:         self.value = value[0m
[32m+  11:         self.left = None[0m
[32m+  12:         self.right = None[0m
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
--------------------------------------------------------------------------------
[0.17948 s] [36mincompetent[0m

TypeError: binarySearchTree2:131: TypeError: Node.__init__() missing 1 required positional argument: 'value'

[36m   -[0m [# 115] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
[34m-  14:     def __init__(self):[0m
[34m-  15:         self.root = None[0m
[34m-  16:         self.size = 0[0m
[34m-  17:     [0m
[32m+  14:     @staticmethod[0m
[32m+  15:     def __init__(self):[0m
[32m+  16:         self.root = None[0m
[32m+  17:         self.size = 0[0m
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
--------------------------------------------------------------------------------
[0.17676 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree2/DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:7: TypeError: BST.__init__() missing 1 required positional argument: 'self'

[36m   -[0m [# 116] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
   17:     
[34m-  18:     def add(self, value: T):[0m
[34m-  19:         if self.contains(value):[0m
[34m-  20:             return False[0m
[34m-  21:         elif self.root == None:[0m
[34m-  22:             self.root = Node(value)[0m
[34m-  23:             self.size += 1[0m
[34m-  24:         else:[0m
[34m-  25:             self.__add(self.root, value)[0m
[34m-  26:     [0m
[32m+  18:     @staticmethod[0m
[32m+  19:     def add(self, value: T):[0m
[32m+  20:         if self.contains(value):[0m
[32m+  21:             return False[0m
[32m+  22:         elif self.root == None:[0m
[32m+  23:             self.root = Node(value)[0m
[32m+  24:             self.size += 1[0m
[32m+  25:         else:[0m
[32m+  26:             self.__add(self.root, value)[0m
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
--------------------------------------------------------------------------------
[0.16992 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree2/DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:20: TypeError: BST.add() missing 1 required positional argument: 'value'

[36m   -[0m [# 117] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
[34m-  27:     def __add(self, root, value):[0m
[34m-  28:         if value < root.value:[0m
[34m-  29:             if root.left == None:[0m
[34m-  30:                 root.left = Node(value)[0m
[34m-  31:                 self.size += 1[0m
[34m-  32:             else:[0m
[34m-  33:                 self.__add(root.left, value)[0m
[34m-  34:         elif value >= root.value:[0m
[34m-  35:             if root.right == None:[0m
[34m-  36:                 root.right = Node(value)[0m
[34m-  37:                 self.size += 1[0m
[34m-  38:             else:[0m
[34m-  39:                 self.__add(root.right, value)[0m
[34m-  40:     [0m
[32m+  27:     @staticmethod[0m
[32m+  28:     def __add(self, root, value):[0m
[32m+  29:         if value < root.value:[0m
[32m+  30:             if root.left == None:[0m
[32m+  31:                 root.left = Node(value)[0m
[32m+  32:                 self.size += 1[0m
[32m+  33:             else:[0m
[32m+  34:                 self.__add(root.left, value)[0m
[32m+  35:         elif value >= root.value:[0m
[32m+  36:             if root.right == None:[0m
[32m+  37:                 root.right = Node(value)[0m
[32m+  38:                 self.size += 1[0m
[32m+  39:             else:[0m
[32m+  40:                 self.__add(root.right, value)[0m
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
--------------------------------------------------------------------------------
[0.17949 s] [36mincompetent[0m

TypeError: binarySearchTree2:136: TypeError: BST.__add() missing 1 required positional argument: 'value'

[36m   -[0m [# 118] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
[34m-  41:     def contains(self, value):[0m
[34m-  42:         [0m
[34m-  43:         return self.__contains(self.root, value)[0m
[34m-  44:     [0m
[32m+  41:     @staticmethod[0m
[32m+  42:     def contains(self, value):[0m
[32m+  43:         [0m
[32m+  44:         return self.__contains(self.root, value)[0m
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
   48:         elif root.value == value:
--------------------------------------------------------------------------------
[0.26232 s] [36mincompetent[0m

TypeError: binarySearchTree2:19: TypeError: BST.contains() missing 1 required positional argument: 'value'

[36m   -[0m [# 119] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
[34m-  45:     def __contains(self, root, value):[0m
[34m-  46:         if root == None:[0m
[34m-  47:             return False[0m
[34m-  48:         elif root.value == value:[0m
[34m-  49:             return True[0m
[34m-  50:         [0m
[34m-  51:         elif value < root.value:[0m
[34m-  52:             return self.__contains(root.left, value)[0m
[34m-  53:         else:[0m
[34m-  54:             return self.__contains(root.right, value)[0m
[34m-  55:     [0m
[32m+  45:     @staticmethod[0m
[32m+  46:     def __contains(self, root, value):[0m
[32m+  47:         if root == None:[0m
[32m+  48:             return False[0m
[32m+  49:         elif root.value == value:[0m
[32m+  50:             return True[0m
[32m+  51:         [0m
[32m+  52:         elif value < root.value:[0m
[32m+  53:             return self.__contains(root.left, value)[0m
[32m+  54:         else:[0m
[32m+  55:             return self.__contains(root.right, value)[0m
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
--------------------------------------------------------------------------------
[0.17648 s] [36mincompetent[0m

TypeError: binarySearchTree2:43: TypeError: BST.__contains() missing 1 required positional argument: 'value'

[36m   -[0m [# 120] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
[34m-  56:     def minValueNode(self, node):[0m
[34m-  57:         current = node[0m
[34m-  58:         [0m
[34m-  59:         while current.left is not None:[0m
[34m-  60:             current = current.left[0m
[34m-  61:         [0m
[34m-  62:         return current[0m
[34m-  63:     [0m
[32m+  56:     @staticmethod[0m
[32m+  57:     def minValueNode(self, node):[0m
[32m+  58:         current = node[0m
[32m+  59:         [0m
[32m+  60:         while current.left is not None:[0m
[32m+  61:             current = current.left[0m
[32m+  62:         [0m
[32m+  63:         return current[0m
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
--------------------------------------------------------------------------------
[0.17411 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree2/DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:58: TypeError: BST.minValueNode() missing 1 required positional argument: 'node'

[36m   -[0m [# 121] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   60:             current = current.left
   61:         
   62:         return current
   63:     
[34m-  64:     def remove(self, value):[0m
[34m-  65:         [0m
[34m-  66:         if self.contains(value):[0m
[34m-  67:             if self.size == 1:[0m
[34m-  68:                 self.root = None[0m
[34m-  69:                 self.size -= 1[0m
[34m-  70:             else:[0m
[34m-  71:                 [0m
[34m-  72:                 self.__remove(self.root, value)[0m
[34m-  73:                 self.size -= 1[0m
[34m-  74:         else:[0m
[34m-  75:             pass[0m
[34m-  76:     [0m
[32m+  64:     @staticmethod[0m
[32m+  65:     def remove(self, value):[0m
[32m+  66:         [0m
[32m+  67:         if self.contains(value):[0m
[32m+  68:             if self.size == 1:[0m
[32m+  69:                 self.root = None[0m
[32m+  70:                 self.size -= 1[0m
[32m+  71:             else:[0m
[32m+  72:                 [0m
[32m+  73:                 self.__remove(self.root, value)[0m
[32m+  74:                 self.size -= 1[0m
[32m+  75:         else:[0m
[32m+  76:             pass[0m
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
   79:             current = node
   80:             
--------------------------------------------------------------------------------
[0.18040 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree2/DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:50: TypeError: BST.remove() missing 1 required positional argument: 'value'

[36m   -[0m [# 122] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
[34m-  77:     def __remove(self, root, value: T):[0m
[34m-  78:         def minValueNode(node):[0m
[34m-  79:             current = node[0m
[34m-  80:             [0m
[34m-  81:             while current.left is not None:[0m
[34m-  82:                 current = current.left[0m
[34m-  83:             [0m
[34m-  84:             return current[0m
[34m-  85:         [0m
[34m-  86:         if root is None:[0m
[34m-  87:             return root[0m
[34m-  88:         [0m
[34m-  89:         if value < root.value:[0m
[34m-  90:             root.left = self.__remove(root.left, value)[0m
[34m-  91:         [0m
[34m-  92:         elif value > root.value:[0m
[34m-  93:             root.right = self.__remove(root.right, value)[0m
[34m-  94:         else:[0m
[34m-  95:             [0m
[32m+  77:     @staticmethod[0m
[32m+  78:     def __remove(self, root, value: T):[0m
[32m+  79:         def minValueNode(node):[0m
[32m+  80:             current = node[0m
[32m+  81:             [0m
[32m+  82:             while current.left is not None:[0m
[32m+  83:                 current = current.left[0m
[32m+  84:             [0m
[32m+  85:             return current[0m
[32m+  86:         [0m
[32m+  87:         if root is None:[0m
[32m+  88:             return root[0m
[32m+  89:         [0m
[32m+  90:         if value < root.value:[0m
[32m+  91:             root.left = self.__remove(root.left, value)[0m
[32m+  92:         [0m
[32m+  93:         elif value > root.value:[0m
[32m+  94:             root.right = self.__remove(root.right, value)[0m
[32m+  95:         else:[0m
   96:             
[34m-  97:             if root.left is None:[0m
[34m-  98:                 temp = root.right[0m
[34m-  99:                 root = None[0m
[34m- 100:                 return temp[0m
[34m- 101:             [0m
[34m- 102:             elif root.right is None:[0m
[34m- 103:                 temp = root.left[0m
[34m- 104:                 root = None[0m
[34m- 105:                 return temp[0m
[34m- 106:             [0m
[34m- 107:             temp = minValueNode(root.right)[0m
[34m- 108:             [0m
[34m- 109:             root.value = temp.value[0m
[34m- 110:             [0m
[34m- 111:             root.right = self.__remove(root.right, temp.value)[0m
[34m- 112:         [0m
[34m- 113:         return root[0m
[34m- 114:     [0m
[32m+  97:             [0m
[32m+  98:             if root.left is None:[0m
[32m+  99:                 temp = root.right[0m
[32m+ 100:                 root = None[0m
[32m+ 101:                 return temp[0m
[32m+ 102:             [0m
[32m+ 103:             elif root.right is None:[0m
[32m+ 104:                 temp = root.left[0m
[32m+ 105:                 root = None[0m
[32m+ 106:                 return temp[0m
[32m+ 107:             [0m
[32m+ 108:             temp = minValueNode(root.right)[0m
[32m+ 109:             [0m
[32m+ 110:             root.value = temp.value[0m
[32m+ 111:             [0m
[32m+ 112:             root.right = self.__remove(root.right, temp.value)[0m
[32m+ 113:         [0m
[32m+ 114:         return root[0m
  115:     def isValid(self):
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
--------------------------------------------------------------------------------
[0.16218 s] [36mincompetent[0m

TypeError: binarySearchTree2:72: TypeError: BST.__remove() missing 1 required positional argument: 'value'

[36m   -[0m [# 123] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
  113:         return root
  114:     
[34m- 115:     def isValid(self):[0m
[34m- 116:         pass[0m
[34m- 117:     [0m
[32m+ 115:     @staticmethod[0m
[32m+ 116:     def isValid(self):[0m
[32m+ 117:         pass[0m
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
--------------------------------------------------------------------------------
[0.26039 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree2/DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:19: TypeError: BST.isValid() missing 1 required positional argument: 'self'

[36m   -[0m [# 124] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  114:     
  115:     def isValid(self):
  116:         pass
  117:     
[34m- 118:     def build(self, array: list) -> None:[0m
[34m- 119:         [0m
[34m- 120:         self.root = self.__build(array, None, 0, len(array) - 1)[0m
[34m- 121:     [0m
[32m+ 118:     @staticmethod[0m
[32m+ 119:     def build(self, array: list) -> None:[0m
[32m+ 120:         [0m
[32m+ 121:         self.root = self.__build(array, None, 0, len(array) - 1)[0m
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
  125:             return
--------------------------------------------------------------------------------
[0.17473 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree2/DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:16: TypeError: BST.build() missing 1 required positional argument: 'array'

[36m   -[0m [# 125] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
[34m- 122:     def __build(self, array: list, root, left: int, right: int):[0m
[34m- 123:         [0m
[34m- 124:         if left > right:[0m
[34m- 125:             return[0m
[34m- 126:         [0m
[34m- 127:         mid = (left + right) // 2[0m
[34m- 128:         [0m
[34m- 129:         if not root:[0m
[34m- 130:             [0m
[34m- 131:             root = Node(array[mid])[0m
[34m- 132:             self.size += 1[0m
[34m- 133:         else:[0m
[34m- 134:             [0m
[32m+ 122:     @staticmethod[0m
[32m+ 123:     def __build(self, array: list, root, left: int, right: int):[0m
[32m+ 124:         [0m
[32m+ 125:         if left > right:[0m
[32m+ 126:             return[0m
[32m+ 127:         [0m
[32m+ 128:         mid = (left + right) // 2[0m
[32m+ 129:         [0m
[32m+ 130:         if not root:[0m
[32m+ 131:             [0m
[32m+ 132:             root = Node(array[mid])[0m
[32m+ 133:             self.size += 1[0m
[32m+ 134:         else:[0m
  135:             
[34m- 136:             self.__add(root, array[mid])[0m
[34m- 137:         [0m
[34m- 138:         self.__build(array, root, left, mid - 1)[0m
[34m- 139:         self.__build(array, root, mid + 1, right)[0m
[34m- 140:         [0m
[34m- 141:         return root[0m
[34m- 142:     [0m
[32m+ 136:             [0m
[32m+ 137:             self.__add(root, array[mid])[0m
[32m+ 138:         [0m
[32m+ 139:         self.__build(array, root, left, mid - 1)[0m
[32m+ 140:         self.__build(array, root, mid + 1, right)[0m
[32m+ 141:         [0m
[32m+ 142:         return root[0m
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
--------------------------------------------------------------------------------
[0.17128 s] [36mincompetent[0m

TypeError: binarySearchTree2:120: TypeError: BST.__build() missing 1 required positional argument: 'right'

[36m   -[0m [# 126] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
[34m- 143:     def getOrder(self, order='inOrder'):[0m
[34m- 144:         def inOrder(root):[0m
[34m- 145:             if root:[0m
[34m- 146:                 inOrder(root.left)[0m
[34m- 147:                 traversal.append(root.value)[0m
[34m- 148:                 inOrder(root.right)[0m
[34m- 149:         [0m
[34m- 150:         def preOrder(root):[0m
[34m- 151:             if root:[0m
[34m- 152:                 traversal.append(root.value)[0m
[34m- 153:                 preOrder(root.left)[0m
[34m- 154:                 preOrder(root.right)[0m
[34m- 155:         [0m
[34m- 156:         def postOrder(root):[0m
[34m- 157:             if root:[0m
[34m- 158:                 preOrder(root.left)[0m
[34m- 159:                 preOrder(root.right)[0m
[34m- 160:                 traversal.append(root.value)[0m
[34m- 161:         [0m
[34m- 162:         traversal = [][0m
[34m- 163:         if order == 'inOrder':[0m
[34m- 164:             inOrder(self.root)[0m
[34m- 165:             return traversal[0m
[34m- 166:         elif order == 'preOrder':[0m
[34m- 167:             preOrder(self.root)[0m
[34m- 168:             return traversal[0m
[34m- 169:         elif order == 'postOrder':[0m
[34m- 170:             postOrder(self.root)[0m
[34m- 171:             return traversal[0m
[34m- 172:     [0m
[32m+ 143:     @staticmethod[0m
[32m+ 144:     def getOrder(self, order='inOrder'):[0m
[32m+ 145:         def inOrder(root):[0m
[32m+ 146:             if root:[0m
[32m+ 147:                 inOrder(root.left)[0m
[32m+ 148:                 traversal.append(root.value)[0m
[32m+ 149:                 inOrder(root.right)[0m
[32m+ 150:         [0m
[32m+ 151:         def preOrder(root):[0m
[32m+ 152:             if root:[0m
[32m+ 153:                 traversal.append(root.value)[0m
[32m+ 154:                 preOrder(root.left)[0m
[32m+ 155:                 preOrder(root.right)[0m
[32m+ 156:         [0m
[32m+ 157:         def postOrder(root):[0m
[32m+ 158:             if root:[0m
[32m+ 159:                 preOrder(root.left)[0m
[32m+ 160:                 preOrder(root.right)[0m
[32m+ 161:                 traversal.append(root.value)[0m
[32m+ 162:         [0m
[32m+ 163:         traversal = [][0m
[32m+ 164:         if order == 'inOrder':[0m
[32m+ 165:             inOrder(self.root)[0m
[32m+ 166:             return traversal[0m
[32m+ 167:         elif order == 'preOrder':[0m
[32m+ 168:             preOrder(self.root)[0m
[32m+ 169:             return traversal[0m
[32m+ 170:         elif order == 'postOrder':[0m
[32m+ 171:             postOrder(self.root)[0m
[32m+ 172:             return traversal[0m
  173:     def __len__(self):
  174:         return self.size
  175:     
  176:     def __str__(self):
--------------------------------------------------------------------------------
[0.17418 s] [36mincompetent[0m

TypeError: binarySearchTree2:183: TypeError: BST.getOrder() missing 1 required positional argument: 'self'

[36m   -[0m [# 127] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
[34m- 173:     def __len__(self):[0m
[34m- 174:         return self.size[0m
[34m- 175:     [0m
[32m+ 173:     @staticmethod[0m
[32m+ 174:     def __len__(self):[0m
[32m+ 175:         return self.size[0m
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
  179:         Returns:
--------------------------------------------------------------------------------
[0.18133 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree2/DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:8: TypeError: BST.__len__() missing 1 required positional argument: 'self'

[36m   -[0m [# 128] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  172:     
  173:     def __len__(self):
  174:         return self.size
  175:     
[34m- 176:     def __str__(self):[0m
[34m- 177:         '''Return String representation of BST values.[0m
[34m- 178: [0m
[34m- 179:         Returns:[0m
[34m- 180:             String: String inorder representaion of BST.[0m
[34m- 181:         '''[0m
[34m- 182:         [0m
[34m- 183:         return str(self.getOrder())[0m
[34m- 184: [0m
[32m+ 176:     @staticmethod[0m
[32m+ 177:     def __str__(self):[0m
[32m+ 178:         '''Return String representation of BST values.[0m
[32m+ 179: [0m
[32m+ 180:         Returns:[0m
[32m+ 181:             String: String inorder representaion of BST.[0m
[32m+ 182:         '''[0m
[32m+ 183:         [0m
[32m+ 184:         return str(self.getOrder())[0m
  185: 
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
--------------------------------------------------------------------------------
[0.17491 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree2/DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:13: TypeError: BST.__str__() missing 1 required positional argument: 'self'

[36m   -[0m [# 129] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    1: """Binary search tree, also called an ordered or sorted binary tree (BST), is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node's left subtree and less than those in its right subtree."""
    2: 
    3: from typing import TypeVar
    4: 
[34m-   5: T = TypeVar('T')[0m
[32m+   5: pass[0m
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

NameError: name 'T' is not defined

[36m   -[0m [# 130] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    5: T = TypeVar('T')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
[34m-   9:         self.value = value[0m
[32m+   9:         pass[0m
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
--------------------------------------------------------------------------------
[0.17898 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 1
>       var_1 = b_s_t_0.__str__()

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
binarySearchTree2:164: in getOrder
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root = <binarySearchTree2.Node object at 0x7f09d96f6800>

>   ???
E   AttributeError: 'Node' object has no attribute 'value'

binarySearchTree2:147: AttributeError
[36m   -[0m [# 131] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
[34m-  10:         self.left = None[0m
[32m+  10:         pass[0m
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
--------------------------------------------------------------------------------
[0.17949 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 1
>       var_1 = b_s_t_0.__str__()

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
binarySearchTree2:164: in getOrder
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root = <binarySearchTree2.Node object at 0x7f09d9746230>

>   ???
E   AttributeError: 'Node' object has no attribute 'left'

binarySearchTree2:146: AttributeError
[36m   -[0m [# 132] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
   10:         self.left = None
[34m-  11:         self.right = None[0m
[32m+  11:         pass[0m
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
--------------------------------------------------------------------------------
[0.15987 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 1
>       var_1 = b_s_t_0.__str__()

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
binarySearchTree2:164: in getOrder
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root = <binarySearchTree2.Node object at 0x7f09d90b8070>

>   ???
E   AttributeError: 'Node' object has no attribute 'right'

binarySearchTree2:148: AttributeError
[36m   -[0m [# 133] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
[34m-  15:         self.root = None[0m
[32m+  15:         pass[0m
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
--------------------------------------------------------------------------------
[0.15834 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.__str__()

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d9847550>, order = 'inOrder'

>   ???
E   AttributeError: 'BST' object has no attribute 'root'

binarySearchTree2:164: AttributeError
[36m   -[0m [# 134] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
[34m-  16:         self.size = 0[0m
[32m+  16:         pass[0m
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
--------------------------------------------------------------------------------
[0.16070 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_0

def test_case_0():
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d97f9900>

>   ???
E   AttributeError: 'BST' object has no attribute 'size'

binarySearchTree2:174: AttributeError
[36m   -[0m [# 135] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
[34m-  20:             return False[0m
[32m+  20:             pass[0m
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
--------------------------------------------------------------------------------
[0.16033 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.__str__()
        var_2 = b_s_t_0.isValid()
        var_3 = b_s_t_0.add(b_s_t_0)
>       assert var_3 is False
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:21: AssertionError
[36m   -[0m [# 136] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
[34m-  22:             self.root = Node(value)[0m
[32m+  22:             pass[0m
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
--------------------------------------------------------------------------------
[0.17975 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_9

def test_case_9():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(b_s_t_0)
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        assert len(node_0.value) == 1
        var_2 = b_s_t_0.__str__()
>       assert var_2 == '[None]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:105: AssertionError
[36m   -[0m [# 137] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
[34m-  25:             self.__add(self.root, value)[0m
[32m+  25:             pass[0m
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
--------------------------------------------------------------------------------
[0.17952 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
>       assert len(b_s_t_0) == 3
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:49: AssertionError
[36m   -[0m [# 138] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
[34m-  30:                 root.left = Node(value)[0m
[32m+  30:                 pass[0m
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
--------------------------------------------------------------------------------
[0.24966 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
        var_2 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 2
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:51: AssertionError
[36m   -[0m [# 139] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
[34m-  33:                 self.__add(root.left, value)[0m
[32m+  33:                 pass[0m
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
--------------------------------------------------------------------------------
[0.18096 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [# 140] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
[34m-  36:                 root.right = Node(value)[0m
[32m+  36:                 pass[0m
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
--------------------------------------------------------------------------------
[0.17690 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
        var_2 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 2
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:51: AssertionError
[36m   -[0m [# 141] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
[34m-  39:                 self.__add(root.right, value)[0m
[32m+  39:                 pass[0m
   40:     
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
--------------------------------------------------------------------------------
[0.18345 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [# 142] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
   42:         
[34m-  43:         return self.__contains(self.root, value)[0m
[32m+  43:         pass[0m
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
--------------------------------------------------------------------------------
[0.17438 s] [36mincompetent[0m

TypeError: binarySearchTree2:28: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [# 143] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   43:         return self.__contains(self.root, value)
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
[34m-  47:             return False[0m
[32m+  47:             pass[0m
   48:         elif root.value == value:
   49:             return True
   50:         
   51:         elif value < root.value:
--------------------------------------------------------------------------------
[0.22304 s] [31msurvived[0m
[36m   -[0m [# 144] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
   48:         elif root.value == value:
[34m-  49:             return True[0m
[32m+  49:             pass[0m
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
--------------------------------------------------------------------------------
[0.15728 s] [36mincompetent[0m

TypeError: binarySearchTree2:28: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [# 145] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   48:         elif root.value == value:
   49:             return True
   50:         
   51:         elif value < root.value:
[34m-  52:             return self.__contains(root.left, value)[0m
[32m+  52:             pass[0m
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
   56:     def minValueNode(self, node):
--------------------------------------------------------------------------------
[0.17256 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
        var_2 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 2
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:51: AssertionError
[36m   -[0m [# 146] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
[34m-  54:             return self.__contains(root.right, value)[0m
[32m+  54:             pass[0m
   55:     
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
--------------------------------------------------------------------------------
[0.17834 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
        var_2 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 2
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:51: AssertionError
[36m   -[0m [# 147] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
   56:     def minValueNode(self, node):
[34m-  57:         current = node[0m
[32m+  57:         pass[0m
   58:         
   59:         while current.left is not None:
   60:             current = current.left
   61:         
--------------------------------------------------------------------------------
[0.17611 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_5

def test_case_5():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
>       var_0 = b_s_t_0.minValueNode(node_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d940da50>
node = <binarySearchTree2.Node object at 0x7f09d940d6f0>

>   ???
E   UnboundLocalError: local variable 'current' referenced before assignment

binarySearchTree2:59: UnboundLocalError
[36m   -[0m [# 148] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
[34m-  60:             current = current.left[0m
[32m+  60:             pass[0m
   61:         
   62:         return current
   63:     
   64:     def remove(self, value):
--------------------------------------------------------------------------------
[0.22819 s] [31msurvived[0m
[36m   -[0m [# 149] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   58:         
   59:         while current.left is not None:
   60:             current = current.left
   61:         
[34m-  62:         return current[0m
[32m+  62:         pass[0m
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
--------------------------------------------------------------------------------
[0.17929 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_5

def test_case_5():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_0 = b_s_t_0.minValueNode(node_0)
>       assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:59: AssertionError
[36m   -[0m [# 150] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
[34m-  68:                 self.root = None[0m
[32m+  68:                 pass[0m
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
--------------------------------------------------------------------------------
[0.13809 s] [31msurvived[0m
[36m   -[0m [# 151] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
[34m-  72:                 self.__remove(self.root, value)[0m
[32m+  72:                 pass[0m
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
--------------------------------------------------------------------------------
[0.15523 s] [31msurvived[0m
[36m   -[0m [# 152] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
[34m-  79:             current = node[0m
[32m+  79:             pass[0m
   80:             
   81:             while current.left is not None:
   82:                 current = current.left
   83:             
--------------------------------------------------------------------------------
[0.15521 s] [31msurvived[0m
[36m   -[0m [# 153] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   78:         def minValueNode(node):
   79:             current = node
   80:             
   81:             while current.left is not None:
[34m-  82:                 current = current.left[0m
[32m+  82:                 pass[0m
   83:             
   84:             return current
   85:         
   86:         if root is None:
--------------------------------------------------------------------------------
[0.24244 s] [31msurvived[0m
[36m   -[0m [# 154] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   80:             
   81:             while current.left is not None:
   82:                 current = current.left
   83:             
[34m-  84:             return current[0m
[32m+  84:             pass[0m
   85:         
   86:         if root is None:
   87:             return root
   88:         
--------------------------------------------------------------------------------
[0.15670 s] [31msurvived[0m
[36m   -[0m [# 155] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   83:             
   84:             return current
   85:         
   86:         if root is None:
[34m-  87:             return root[0m
[32m+  87:             pass[0m
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
--------------------------------------------------------------------------------
[0.15685 s] [31msurvived[0m
[36m   -[0m [# 156] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   86:         if root is None:
   87:             return root
   88:         
   89:         if value < root.value:
[34m-  90:             root.left = self.__remove(root.left, value)[0m
[32m+  90:             pass[0m
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
   94:         else:
--------------------------------------------------------------------------------
[0.15643 s] [31msurvived[0m
[36m   -[0m [# 157] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
[34m-  93:             root.right = self.__remove(root.right, value)[0m
[32m+  93:             pass[0m
   94:         else:
   95:             
   96:             
   97:             if root.left is None:
--------------------------------------------------------------------------------
[0.15536 s] [31msurvived[0m
[36m   -[0m [# 158] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   94:         else:
   95:             
   96:             
   97:             if root.left is None:
[34m-  98:                 temp = root.right[0m
[32m+  98:                 pass[0m
   99:                 root = None
  100:                 return temp
  101:             
  102:             elif root.right is None:
--------------------------------------------------------------------------------
[0.27052 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
>       var_2 = b_s_t_0.remove(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:72: in remove
    ???
binarySearchTree2:93: in __remove
    ???
binarySearchTree2:90: in __remove
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d918c880>, root = None
value = '[]'

>   ???
E   UnboundLocalError: local variable 'temp' referenced before assignment

binarySearchTree2:100: UnboundLocalError
[36m   -[0m [# 159] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   95:             
   96:             
   97:             if root.left is None:
   98:                 temp = root.right
[34m-  99:                 root = None[0m
[32m+  99:                 pass[0m
  100:                 return temp
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
--------------------------------------------------------------------------------
[0.15594 s] [31msurvived[0m
[36m   -[0m [# 160] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   96:             
   97:             if root.left is None:
   98:                 temp = root.right
   99:                 root = None
[34m- 100:                 return temp[0m
[32m+ 100:                 pass[0m
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
  104:                 root = None
--------------------------------------------------------------------------------
[0.18185 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
>       var_2 = b_s_t_0.remove(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:72: in remove
    ???
binarySearchTree2:93: in __remove
    ???
binarySearchTree2:90: in __remove
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d9096050>, root = None
value = '[]'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'right'

binarySearchTree2:107: AttributeError
[36m   -[0m [# 161] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   99:                 root = None
  100:                 return temp
  101:             
  102:             elif root.right is None:
[34m- 103:                 temp = root.left[0m
[32m+ 103:                 pass[0m
  104:                 root = None
  105:                 return temp
  106:             
  107:             temp = minValueNode(root.right)
--------------------------------------------------------------------------------
[0.14037 s] [31msurvived[0m
[36m   -[0m [# 162] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  100:                 return temp
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
[34m- 104:                 root = None[0m
[32m+ 104:                 pass[0m
  105:                 return temp
  106:             
  107:             temp = minValueNode(root.right)
  108:             
--------------------------------------------------------------------------------
[0.14908 s] [31msurvived[0m
[36m   -[0m [# 163] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
  104:                 root = None
[34m- 105:                 return temp[0m
[32m+ 105:                 pass[0m
  106:             
  107:             temp = minValueNode(root.right)
  108:             
  109:             root.value = temp.value
--------------------------------------------------------------------------------
[0.24488 s] [31msurvived[0m
[36m   -[0m [# 164] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  103:                 temp = root.left
  104:                 root = None
  105:                 return temp
  106:             
[34m- 107:             temp = minValueNode(root.right)[0m
[32m+ 107:             pass[0m
  108:             
  109:             root.value = temp.value
  110:             
  111:             root.right = self.__remove(root.right, temp.value)
--------------------------------------------------------------------------------
[0.13675 s] [31msurvived[0m
[36m   -[0m [# 165] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  105:                 return temp
  106:             
  107:             temp = minValueNode(root.right)
  108:             
[34m- 109:             root.value = temp.value[0m
[32m+ 109:             pass[0m
  110:             
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
  113:         return root
--------------------------------------------------------------------------------
[0.13822 s] [31msurvived[0m
[36m   -[0m [# 166] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  107:             temp = minValueNode(root.right)
  108:             
  109:             root.value = temp.value
  110:             
[34m- 111:             root.right = self.__remove(root.right, temp.value)[0m
[32m+ 111:             pass[0m
  112:         
  113:         return root
  114:     
  115:     def isValid(self):
--------------------------------------------------------------------------------
[0.15286 s] [31msurvived[0m
[36m   -[0m [# 167] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  109:             root.value = temp.value
  110:             
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
[34m- 113:         return root[0m
[32m+ 113:         pass[0m
  114:     
  115:     def isValid(self):
  116:         pass
  117:     
--------------------------------------------------------------------------------
[0.14091 s] [31msurvived[0m
[36m   -[0m [# 168] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
[34m- 120:         self.root = self.__build(array, None, 0, len(array) - 1)[0m
[32m+ 120:         pass[0m
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.24508 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 1
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:17: AssertionError
[36m   -[0m [# 169] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
[34m- 125:             return[0m
[32m+ 125:             pass[0m
  126:         
  127:         mid = (left + right) // 2
  128:         
  129:         if not root:
--------------------------------------------------------------------------------
[0.17766 s] [36mincompetent[0m

TypeError: binarySearchTree2:28: TypeError: '<' not supported between instances of 'BST' and 'BST'

[36m   -[0m [# 170] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
[34m- 127:         mid = (left + right) // 2[0m
[32m+ 127:         pass[0m
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[0.17401 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
>       none_type_0 = b_s_t_0.build(list_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d95428f0>
array = [<binarySearchTree2.BST object at 0x7f09d95428f0>], root = None
left = 0, right = 0

>   ???
E   NameError: name 'mid' is not defined

binarySearchTree2:131: NameError
[36m   -[0m [# 171] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  127:         mid = (left + right) // 2
  128:         
  129:         if not root:
  130:             
[34m- 131:             root = Node(array[mid])[0m
[32m+ 131:             pass[0m
  132:             self.size += 1
  133:         else:
  134:             
  135:             
--------------------------------------------------------------------------------
[0.15938 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.__str__()
        var_2 = b_s_t_0.isValid()
        var_3 = b_s_t_0.add(b_s_t_0)
>       assert var_3 is False
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:21: AssertionError
[36m   -[0m [# 172] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  132:             self.size += 1
  133:         else:
  134:             
  135:             
[34m- 136:             self.__add(root, array[mid])[0m
[32m+ 136:             pass[0m
  137:         
  138:         self.__build(array, root, left, mid - 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
--------------------------------------------------------------------------------
[0.18446 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [# 173] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
[34m- 138:         self.__build(array, root, left, mid - 1)[0m
[32m+ 138:         pass[0m
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[0.26147 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [# 174] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
[34m- 139:         self.__build(array, root, mid + 1, right)[0m
[32m+ 139:         pass[0m
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[0.18046 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(bytes_0)
>       assert len(b_s_t_0) == 12
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:39: AssertionError
[36m   -[0m [# 175] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  137:         
  138:         self.__build(array, root, left, mid - 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
[34m- 141:         return root[0m
[32m+ 141:         pass[0m
  142:     
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
--------------------------------------------------------------------------------
[0.17533 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.__str__()
        var_2 = b_s_t_0.isValid()
        var_3 = b_s_t_0.add(b_s_t_0)
>       assert var_3 is False
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:21: AssertionError
[36m   -[0m [# 176] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  142:     
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
[34m- 146:                 inOrder(root.left)[0m
[32m+ 146:                 pass[0m
  147:                 traversal.append(root.value)
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
--------------------------------------------------------------------------------
[0.15311 s] [31msurvived[0m
[36m   -[0m [# 177] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
[34m- 147:                 traversal.append(root.value)[0m
[32m+ 147:                 pass[0m
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
  151:             if root:
--------------------------------------------------------------------------------
[0.18336 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_9

def test_case_9():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(b_s_t_0)
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        assert len(node_0.value) == 1
        var_2 = b_s_t_0.__str__()
>       assert var_2 == '[None]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:105: AssertionError
[36m   -[0m [# 178] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
[34m- 148:                 inOrder(root.right)[0m
[32m+ 148:                 pass[0m
  149:         
  150:         def preOrder(root):
  151:             if root:
  152:                 traversal.append(root.value)
--------------------------------------------------------------------------------
[0.15459 s] [31msurvived[0m
[36m   -[0m [# 179] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
  151:             if root:
[34m- 152:                 traversal.append(root.value)[0m
[32m+ 152:                 pass[0m
  153:                 preOrder(root.left)
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
--------------------------------------------------------------------------------
[0.15769 s] [31msurvived[0m
[36m   -[0m [# 180] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  149:         
  150:         def preOrder(root):
  151:             if root:
  152:                 traversal.append(root.value)
[34m- 153:                 preOrder(root.left)[0m
[32m+ 153:                 pass[0m
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
  157:             if root:
--------------------------------------------------------------------------------
[0.15061 s] [31msurvived[0m
[36m   -[0m [# 181] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  150:         def preOrder(root):
  151:             if root:
  152:                 traversal.append(root.value)
  153:                 preOrder(root.left)
[34m- 154:                 preOrder(root.right)[0m
[32m+ 154:                 pass[0m
  155:         
  156:         def postOrder(root):
  157:             if root:
  158:                 preOrder(root.left)
--------------------------------------------------------------------------------
[0.15781 s] [31msurvived[0m
[36m   -[0m [# 182] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
  157:             if root:
[34m- 158:                 preOrder(root.left)[0m
[32m+ 158:                 pass[0m
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
--------------------------------------------------------------------------------
[0.15612 s] [31msurvived[0m
[36m   -[0m [# 183] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  155:         
  156:         def postOrder(root):
  157:             if root:
  158:                 preOrder(root.left)
[34m- 159:                 preOrder(root.right)[0m
[32m+ 159:                 pass[0m
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
--------------------------------------------------------------------------------
[0.15483 s] [31msurvived[0m
[36m   -[0m [# 184] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  156:         def postOrder(root):
  157:             if root:
  158:                 preOrder(root.left)
  159:                 preOrder(root.right)
[34m- 160:                 traversal.append(root.value)[0m
[32m+ 160:                 pass[0m
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
--------------------------------------------------------------------------------
[0.14835 s] [31msurvived[0m
[36m   -[0m [# 185] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  158:                 preOrder(root.left)
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
[34m- 162:         traversal = [][0m
[32m+ 162:         pass[0m
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
--------------------------------------------------------------------------------
[0.18006 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.__str__()

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d97f5960>, order = 'inOrder'

>   ???
E   NameError: name 'traversal' is not defined

binarySearchTree2:165: NameError
[36m   -[0m [# 186] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
[34m- 164:             inOrder(self.root)[0m
[32m+ 164:             pass[0m
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
--------------------------------------------------------------------------------
[0.17793 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_9

def test_case_9():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(b_s_t_0)
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        assert len(node_0.value) == 1
        var_2 = b_s_t_0.__str__()
>       assert var_2 == '[None]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:105: AssertionError
[36m   -[0m [# 187] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
[34m- 165:             return traversal[0m
[32m+ 165:             pass[0m
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
--------------------------------------------------------------------------------
[0.15764 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:14: AssertionError
[36m   -[0m [# 188] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
[34m- 167:             preOrder(self.root)[0m
[32m+ 167:             pass[0m
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
--------------------------------------------------------------------------------
[0.13878 s] [31msurvived[0m
[36m   -[0m [# 189] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
[34m- 168:             return traversal[0m
[32m+ 168:             pass[0m
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
--------------------------------------------------------------------------------
[0.14943 s] [31msurvived[0m
[36m   -[0m [# 190] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
[34m- 170:             postOrder(self.root)[0m
[32m+ 170:             pass[0m
  171:             return traversal
  172:     
  173:     def __len__(self):
  174:         return self.size
--------------------------------------------------------------------------------
[0.14626 s] [31msurvived[0m
[36m   -[0m [# 191] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
[34m- 171:             return traversal[0m
[32m+ 171:             pass[0m
  172:     
  173:     def __len__(self):
  174:         return self.size
  175:     
--------------------------------------------------------------------------------
[0.15835 s] [31msurvived[0m
[36m   -[0m [# 192] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
[34m- 174:         return self.size[0m
[32m+ 174:         pass[0m
  175:     
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
--------------------------------------------------------------------------------
[0.16948 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree2/DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:8: TypeError: 'NoneType' object cannot be interpreted as an integer

[36m   -[0m [# 193] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  179:         Returns:
  180:             String: String inorder representaion of BST.
  181:         '''
  182:         
[34m- 183:         return str(self.getOrder())[0m
[32m+ 183:         pass[0m
  184: 
  185: 
  186: if __name__ == '__main__':
  187:     
--------------------------------------------------------------------------------
[0.15761 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:14: AssertionError
[36m   -[0m [# 194] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  184: 
  185: 
  186: if __name__ == '__main__':
  187:     
[34m- 188:     tree = BST()[0m
[32m+ 188:     pass[0m
  189:     
  190:     tree.add(3)
  191:     tree.add(2)
  192:     tree.add(4)
--------------------------------------------------------------------------------
[0.13681 s] [31msurvived[0m
[36m   -[0m [# 195] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
  189:     
[34m- 190:     tree.add(3)[0m
[32m+ 190:     pass[0m
  191:     tree.add(2)
  192:     tree.add(4)
  193:     
  194:     
--------------------------------------------------------------------------------
[0.13979 s] [31msurvived[0m
[36m   -[0m [# 196] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
[34m- 191:     tree.add(2)[0m
[32m+ 191:     pass[0m
  192:     tree.add(4)
  193:     
  194:     
  195:     
--------------------------------------------------------------------------------
[0.15585 s] [31msurvived[0m
[36m   -[0m [# 197] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  188:     tree = BST()
  189:     
  190:     tree.add(3)
  191:     tree.add(2)
[34m- 192:     tree.add(4)[0m
[32m+ 192:     pass[0m
  193:     
  194:     
  195:     
  196:     
--------------------------------------------------------------------------------
[0.15814 s] [31msurvived[0m
[36m   -[0m [# 198] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  194:     
  195:     
  196:     
  197:     
[34m- 198:     tree2 = BST()[0m
[32m+ 198:     pass[0m
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.15621 s] [31msurvived[0m
[36m   -[0m [# 199] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
[34m- 199:     tree2.build([1, 2, 3])[0m
[32m+ 199:     pass[0m
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[0.15552 s] [31msurvived[0m
[36m   -[0m [# 200] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  196:     
  197:     
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
[34m- 200:     print(tree2, tree2.size)[0m
[32m+ 200:     pass[0m
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.15633 s] [31msurvived[0m
[36m   -[0m [# 201] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  197:     
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
[34m- 201:     tree2.remove(1)[0m
[32m+ 201:     pass[0m
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
--------------------------------------------------------------------------------
[0.15364 s] [31msurvived[0m
[36m   -[0m [# 202] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
[34m- 202:     print(tree2, tree2.size)[0m
[32m+ 202:     pass[0m
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.15622 s] [31msurvived[0m
[36m   -[0m [# 203] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
[34m- 203:     tree2.remove(3)[0m
[32m+ 203:     pass[0m
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.15752 s] [31msurvived[0m
[36m   -[0m [# 204] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
[34m- 204:     print(tree2, tree2.size)[0m
[32m+ 204:     pass[0m
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.14967 s] [31msurvived[0m
[36m   -[0m [# 205] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
[34m- 205:     tree2.remove(2)[0m
[32m+ 205:     pass[0m
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.13666 s] [31msurvived[0m
[36m   -[0m [# 206] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
[34m- 206:     print(tree2, tree2.size)[0m
[32m+ 206:     pass[0m
--------------------------------------------------------------------------------
[0.13805 s] [31msurvived[0m
[36m   -[0m [# 207] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
    5: T = TypeVar('T')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
[34m-   9:         self.value = value[0m
[32m+   9:         value = value[0m
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 208] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
[34m-  10:         self.left = None[0m
[32m+  10:         left = None[0m
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 209] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
   10:         self.left = None
[34m-  11:         self.right = None[0m
[32m+  11:         right = None[0m
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 210] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
[34m-  15:         self.root = None[0m
[32m+  15:         root = None[0m
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 211] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
[34m-  16:         self.size = 0[0m
[32m+  16:         size = 0[0m
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 212] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   15:         self.root = None
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
[34m-  19:         if self.contains(value):[0m
[32m+  19:         if contains(value):[0m
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
--------------------------------------------------------------------------------
[0.17668 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.__str__()
        var_2 = b_s_t_0.isValid()
>       var_3 = b_s_t_0.add(b_s_t_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d9745750>
value = <binarySearchTree2.BST object at 0x7f09d9745750>

>   ???
E   NameError: name 'contains' is not defined

binarySearchTree2:19: NameError
[36m   -[0m [# 213] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
[34m-  21:         elif self.root == None:[0m
[32m+  21:         elif root == None:[0m
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
--------------------------------------------------------------------------------
[0.18075 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_2

def test_case_2():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d96e8bb0>
value = <binarySearchTree2.BST object at 0x7f09d96e8bb0>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:21: NameError
[36m   -[0m [# 214] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
[34m-  22:             self.root = Node(value)[0m
[32m+  22:             root = Node(value)[0m
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 215] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
[34m-  23:             self.size += 1[0m
[32m+  23:             size += 1[0m
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 216] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
[34m-  25:             self.__add(self.root, value)[0m
[32m+  25:             __add(self.root, value)[0m
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
--------------------------------------------------------------------------------
[0.18008 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
>       var_1 = b_s_t_0.add(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d96f5420>, value = '[]'

>   ???
E   NameError: name '_BST__add' is not defined

binarySearchTree2:25: NameError
[36m   -[0m [# 217] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
[34m-  25:             self.__add(self.root, value)[0m
[32m+  25:             self.__add(root, value)[0m
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
--------------------------------------------------------------------------------
[0.16130 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
>       var_1 = b_s_t_0.add(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d94ab280>, value = '[]'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:25: NameError
[36m   -[0m [# 218] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
[34m-  31:                 self.size += 1[0m
[32m+  31:                 size += 1[0m
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 219] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
[34m-  33:                 self.__add(root.left, value)[0m
[32m+  33:                 __add(root.left, value)[0m
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
--------------------------------------------------------------------------------
[0.26095 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(bytes_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d95515a0>
root = <binarySearchTree2.Node object at 0x7f09d9550cd0>, value = 104

>   ???
E   NameError: name '_BST__add' is not defined

binarySearchTree2:33: NameError
[36m   -[0m [# 220] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
[34m-  37:                 self.size += 1[0m
[32m+  37:                 size += 1[0m
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 221] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
[34m-  39:                 self.__add(root.right, value)[0m
[32m+  39:                 __add(root.right, value)[0m
   40:     
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
--------------------------------------------------------------------------------
[0.17385 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(bytes_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:33: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d9250b80>
root = <binarySearchTree2.Node object at 0x7f09d9251750>, value = 168

>   ???
E   NameError: name '_BST__add' is not defined

binarySearchTree2:39: NameError
[36m   -[0m [# 222] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
   42:         
[34m-  43:         return self.__contains(self.root, value)[0m
[32m+  43:         return __contains(self.root, value)[0m
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
--------------------------------------------------------------------------------
[0.17146 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.__str__()
        var_2 = b_s_t_0.isValid()
>       var_3 = b_s_t_0.add(b_s_t_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d9095cc0>
value = <binarySearchTree2.BST object at 0x7f09d9095cc0>

>   ???
E   NameError: name '_BST__contains' is not defined

binarySearchTree2:43: NameError
[36m   -[0m [# 223] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
   42:         
[34m-  43:         return self.__contains(self.root, value)[0m
[32m+  43:         return self.__contains(root, value)[0m
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
--------------------------------------------------------------------------------
[0.15891 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.__str__()
        var_2 = b_s_t_0.isValid()
>       var_3 = b_s_t_0.add(b_s_t_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d9822950>
value = <binarySearchTree2.BST object at 0x7f09d9822950>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:43: NameError
[36m   -[0m [# 224] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   48:         elif root.value == value:
   49:             return True
   50:         
   51:         elif value < root.value:
[34m-  52:             return self.__contains(root.left, value)[0m
[32m+  52:             return __contains(root.left, value)[0m
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
   56:     def minValueNode(self, node):
--------------------------------------------------------------------------------
[0.27637 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
>       var_1 = b_s_t_0.add(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
binarySearchTree2:43: in contains
    ???
binarySearchTree2:54: in __contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d8f62d10>
root = <binarySearchTree2.Node object at 0x7f09d8f62dd0>, value = '[]'

>   ???
E   NameError: name '_BST__contains' is not defined

binarySearchTree2:52: NameError
[36m   -[0m [# 225] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
[34m-  54:             return self.__contains(root.right, value)[0m
[32m+  54:             return __contains(root.right, value)[0m
   55:     
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
--------------------------------------------------------------------------------
[0.17877 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
>       var_1 = b_s_t_0.add(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
binarySearchTree2:43: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d97f58a0>
root = <binarySearchTree2.Node object at 0x7f09d97f57e0>, value = '[]'

>   ???
E   NameError: name '_BST__contains' is not defined

binarySearchTree2:54: NameError
[36m   -[0m [# 226] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   62:         return current
   63:     
   64:     def remove(self, value):
   65:         
[34m-  66:         if self.contains(value):[0m
[32m+  66:         if contains(value):[0m
   67:             if self.size == 1:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
--------------------------------------------------------------------------------
[0.18084 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
>       var_2 = b_s_t_0.remove(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d96933d0>, value = '[]'

>   ???
E   NameError: name 'contains' is not defined

binarySearchTree2:66: NameError
[36m   -[0m [# 227] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
[34m-  67:             if self.size == 1:[0m
[32m+  67:             if size == 1:[0m
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[0.17531 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
>       var_2 = b_s_t_0.remove(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d96e6980>, value = '[]'

>   ???
E   NameError: name 'size' is not defined

binarySearchTree2:67: NameError
[36m   -[0m [# 228] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
[34m-  68:                 self.root = None[0m
[32m+  68:                 root = None[0m
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 229] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
   68:                 self.root = None
[34m-  69:                 self.size -= 1[0m
[32m+  69:                 size -= 1[0m
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
   73:                 self.size -= 1
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 230] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
[34m-  72:                 self.__remove(self.root, value)[0m
[32m+  72:                 __remove(self.root, value)[0m
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
--------------------------------------------------------------------------------
[0.17978 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
>       var_2 = b_s_t_0.remove(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d96f74c0>, value = '[]'

>   ???
E   NameError: name '_BST__remove' is not defined

binarySearchTree2:72: NameError
[36m   -[0m [# 231] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
[34m-  72:                 self.__remove(self.root, value)[0m
[32m+  72:                 self.__remove(root, value)[0m
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
--------------------------------------------------------------------------------
[0.17329 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
>       var_2 = b_s_t_0.remove(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d97ef5e0>, value = '[]'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:72: NameError
[36m   -[0m [# 232] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
[34m-  73:                 self.size -= 1[0m
[32m+  73:                 size -= 1[0m
   74:         else:
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 233] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   86:         if root is None:
   87:             return root
   88:         
   89:         if value < root.value:
[34m-  90:             root.left = self.__remove(root.left, value)[0m
[32m+  90:             root.left = __remove(root.left, value)[0m
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
   94:         else:
--------------------------------------------------------------------------------
[0.18142 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
>       var_2 = b_s_t_0.remove(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:72: in remove
    ???
binarySearchTree2:93: in __remove
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d9835480>
root = <binarySearchTree2.Node object at 0x7f09d9834e80>, value = '[]'

>   ???
E   NameError: name '_BST__remove' is not defined

binarySearchTree2:90: NameError
[36m   -[0m [# 234] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
[34m-  93:             root.right = self.__remove(root.right, value)[0m
[32m+  93:             root.right = __remove(root.right, value)[0m
   94:         else:
   95:             
   96:             
   97:             if root.left is None:
--------------------------------------------------------------------------------
[0.26019 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        none_type_0 = b_s_t_0.build(var_0)
        assert len(b_s_t_0) == 2
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 3
>       var_2 = b_s_t_0.remove(var_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:72: in remove
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d952a6b0>
root = <binarySearchTree2.Node object at 0x7f09d952a920>, value = '[]'

>   ???
E   NameError: name '_BST__remove' is not defined

binarySearchTree2:93: NameError
[36m   -[0m [# 235] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  107:             temp = minValueNode(root.right)
  108:             
  109:             root.value = temp.value
  110:             
[34m- 111:             root.right = self.__remove(root.right, temp.value)[0m
[32m+ 111:             root.right = __remove(root.right, temp.value)[0m
  112:         
  113:         return root
  114:     
  115:     def isValid(self):
--------------------------------------------------------------------------------
[0.15533 s] [31msurvived[0m
[36m   -[0m [# 236] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
[34m- 120:         self.root = self.__build(array, None, 0, len(array) - 1)[0m
[32m+ 120:         root = self.__build(array, None, 0, len(array) - 1)[0m
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 237] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
[34m- 120:         self.root = self.__build(array, None, 0, len(array) - 1)[0m
[32m+ 120:         self.root = __build(array, None, 0, len(array) - 1)[0m
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.17035 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
>       none_type_0 = b_s_t_0.build(list_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d96935b0>
array = [<binarySearchTree2.BST object at 0x7f09d96935b0>]

>   ???
E   NameError: name '_BST__build' is not defined

binarySearchTree2:120: NameError
[36m   -[0m [# 238] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
[34m- 132:             self.size += 1[0m
[32m+ 132:             size += 1[0m
  133:         else:
  134:             
  135:             
  136:             self.__add(root, array[mid])
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 239] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  132:             self.size += 1
  133:         else:
  134:             
  135:             
[34m- 136:             self.__add(root, array[mid])[0m
[32m+ 136:             __add(root, array[mid])[0m
  137:         
  138:         self.__build(array, root, left, mid - 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
--------------------------------------------------------------------------------
[0.26629 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_3

def test_case_3():
        bytes_0 = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(bytes_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d937ad10>
array = b'\xf8h\x06\xa8\xb2\xbam\xf5Z\xc2\xe2\xfc'
root = <binarySearchTree2.Node object at 0x7f09d937ae30>, left = 0, right = 4

>   ???
E   NameError: name '_BST__add' is not defined

binarySearchTree2:136: NameError
[36m   -[0m [# 240] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
[34m- 138:         self.__build(array, root, left, mid - 1)[0m
[32m+ 138:         __build(array, root, left, mid - 1)[0m
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[0.17535 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
>       none_type_0 = b_s_t_0.build(list_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d93b43d0>
array = [<binarySearchTree2.BST object at 0x7f09d93b43d0>]
root = <binarySearchTree2.Node object at 0x7f09d93b4520>, left = 0, right = 0

>   ???
E   NameError: name '_BST__build' is not defined

binarySearchTree2:138: NameError
[36m   -[0m [# 241] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
[34m- 139:         self.__build(array, root, mid + 1, right)[0m
[32m+ 139:         __build(array, root, mid + 1, right)[0m
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[0.17964 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        list_0 = [b_s_t_0]
>       none_type_0 = b_s_t_0.build(list_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d97f89a0>
array = [<binarySearchTree2.BST object at 0x7f09d97f89a0>]
root = <binarySearchTree2.Node object at 0x7f09d97fbbe0>, left = 0, right = 0

>   ???
E   NameError: name '_BST__build' is not defined

binarySearchTree2:139: NameError
[36m   -[0m [# 242] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
[34m- 164:             inOrder(self.root)[0m
[32m+ 164:             inOrder(root)[0m
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
--------------------------------------------------------------------------------
[0.17069 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.__str__()

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d95c7d60>, order = 'inOrder'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:164: NameError
[36m   -[0m [# 243] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
[34m- 167:             preOrder(self.root)[0m
[32m+ 167:             preOrder(root)[0m
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
--------------------------------------------------------------------------------
[0.19293 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_13

def test_case_13():
        str_0 = 'preOrder'
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.getOrder(str_0)

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:154: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d95c6a70>, order = 'preOrder'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:167: NameError
[36m   -[0m [# 244] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
[34m- 170:             postOrder(self.root)[0m
[32m+ 170:             postOrder(root)[0m
  171:             return traversal
  172:     
  173:     def __len__(self):
  174:         return self.size
--------------------------------------------------------------------------------
[0.15798 s] [31msurvived[0m
[36m   -[0m [# 245] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
[34m- 174:         return self.size[0m
[32m+ 174:         return size[0m
  175:     
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
--------------------------------------------------------------------------------
[0.17996 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_0

def test_case_0():
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d95c5570>

>   ???
E   NameError: name 'size' is not defined

binarySearchTree2:174: NameError
[36m   -[0m [# 246] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  179:         Returns:
  180:             String: String inorder representaion of BST.
  181:         '''
  182:         
[34m- 183:         return str(self.getOrder())[0m
[32m+ 183:         return str(getOrder())[0m
  184: 
  185: 
  186: if __name__ == '__main__':
  187:     
--------------------------------------------------------------------------------
[0.17652 s] [32mkilled[0m by DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.__str__()

DYNAMOSA/test_binarySearchTree2_DYNAMOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f09d93ffbb0>

>   ???
E   NameError: name 'getOrder' is not defined

binarySearchTree2:183: NameError
[36m   -[0m [# 247] ZIL binarySearchTree2: 
--------------------------------------------------------------------------------
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
[34m-  60:             current = current.left[0m
[32m+  60:             break[0m
   61:         
   62:         return current
   63:     
   64:     def remove(self, value):
--------------------------------------------------------------------------------
[0.15695 s] [31msurvived[0m
[36m   -[0m [# 248] ZIL binarySearchTree2: 
--------------------------------------------------------------------------------
   78:         def minValueNode(node):
   79:             current = node
   80:             
   81:             while current.left is not None:
[34m-  82:                 current = current.left[0m
[32m+  82:                 break[0m
   83:             
   84:             return current
   85:         
   86:         if root is None:
--------------------------------------------------------------------------------
[0.15685 s] [31msurvived[0m
[34m[*][0m Mutation score [85.05044 s]: [1m[34m55.8%[0m
[36m   -[0m all: 248
[36m   -[0m killed: 110 (44.4%)
[36m   -[0m survived: 87 (35.1%)
[36m   -[0m incompetent: 51 (20.6%)
[36m   -[0m timeout: 0 (0.0%)
