[*] Start mutation process:
   - targets: binarySearchTree2.py
   - tests: ./RANDOM
[*] 2254 tests passed:
   - test_binarySearchTree2_RANDOM [2.74235 s]
[*] Start mutants generation and execution:
   - [#   1] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         self.root = self.__build(array, None, 0, len(array) + 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[4.59417 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:139: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae499ec4c0>
array = [False, False, False, False]
root = <binarySearchTree2.Node object at 0x7fae499ee230>, left = 3, right = 5

>   ???
E   IndexError: list index out of range

binarySearchTree2:136: IndexError
   - [#   2] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
- 127:         mid = (left + right) // 2
+ 127:         mid = (left - right) // 2
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[4.68548 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
   - [#   3] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
- 127:         mid = (left + right) // 2
+ 127:         mid = (left + right) / 2
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[4.50873 s] incompetent

TypeError: binarySearchTree2:131: TypeError: list indices must be integers or slices, not float

   - [#   4] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
- 127:         mid = (left + right) // 2
+ 127:         mid = (left + right) * 2
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[4.37062 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae46784760>
array = [False, False, False, False], root = None, left = 0, right = 3

>   ???
E   IndexError: list index out of range

binarySearchTree2:131: IndexError
   - [#   5] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
- 138:         self.__build(array, root, left, mid - 1)
+ 138:         self.__build(array, root, left, mid + 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[4.58774 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
   - [#   6] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
+ 139:         self.__build(array, root, mid - 1, right)
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[4.63202 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:139: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae46756770>
array = [False, False, False, False]
root = <binarySearchTree2.Node object at 0x7fae46754130>, left = -5, right = -4

>   ???
E   IndexError: list index out of range

binarySearchTree2:136: IndexError
   - [#   7] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
-  23:             self.size += 1
+  23:             self.size -= 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
--------------------------------------------------------------------------------
[4.55300 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_1.add(b_s_t_2)
>       assert len(b_s_t_1) == 1
E       ValueError: __len__() should return >= 0

RANDOM/test_binarySearchTree2_RANDOM.py:56: ValueError
   - [#   8] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
-  31:                 self.size += 1
+  31:                 self.size -= 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
--------------------------------------------------------------------------------
[5.32905 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_400

def test_case_400():
        bool_0 = False
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.remove(bool_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.contains(b_s_t_1)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_2.__str__()
        assert var_2 == '[]'
        var_3 = b_s_t_2.__len__()
        assert var_3 == 0
        var_4 = b_s_t_1.contains(var_2)
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_5 = b_s_t_3.isValid()
        node_0 = module_0.Node(b_s_t_3)
        assert len(node_0.value) == 0
        var_6 = b_s_t_3.contains(var_5)
        bool_1 = False
        list_0 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_0)
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_7 = b_s_t_3.remove(var_6)
        bool_2 = False
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_8 = b_s_t_5.remove(bool_2)
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_9 = b_s_t_6.contains(b_s_t_6)
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_10 = b_s_t_7.isValid()
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_11 = b_s_t_8.isValid()
        node_2 = module_0.Node(b_s_t_8)
        assert len(node_2.value) == 0
        var_12 = b_s_t_8.contains(var_11)
        var_13 = b_s_t_8.__str__()
        assert var_13 == '[]'
        str_0 = 'binarySearchTree2'
        none_type_0 = b_s_t_5.build(str_0)
>       assert len(b_s_t_5) == 17
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:15070: AssertionError
   - [#   9] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
-  37:                 self.size += 1
+  37:                 self.size -= 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
--------------------------------------------------------------------------------
[4.50603 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       ValueError: __len__() should return >= 0

RANDOM/test_binarySearchTree2_RANDOM.py:237: ValueError
   - [#  10] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
   68:                 self.root = None
-  69:                 self.size -= 1
+  69:                 self.size += 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
   73:                 self.size -= 1
--------------------------------------------------------------------------------
[4.50819 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_117

def test_case_117():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder()
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.getOrder()
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.getOrder()
        var_4 = b_s_t_2.add(var_3)
        assert len(b_s_t_2) == 1
        node_0 = module_0.Node(var_3)
        assert node_0.value == []
        var_5 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 0
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:3344: AssertionError
   - [#  11] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
-  73:                 self.size -= 1
+  73:                 self.size += 1
   74:         else:
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
--------------------------------------------------------------------------------
[2.83119 s] survived
   - [#  12] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
- 132:             self.size += 1
+ 132:             self.size -= 1
  133:         else:
  134:             
  135:             
  136:             self.__add(root, array[mid])
--------------------------------------------------------------------------------
[4.56679 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [#  13] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
    4: 
    5: T = TypeVar('T')
    6: 
    7: class Node:
-   8:     def __init__(self, value: T):
-   9:         self.value = value
-  10:         self.left = None
-  11:         self.right = None
-  12: 
+   8:     @classmethod
+   9:     def __init__(self, value: T):
+  10:         self.value = value
+  11:         self.left = None
+  12:         self.right = None
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
--------------------------------------------------------------------------------
[4.68900 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_182

def test_case_182():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.isValid()
        var_1 = b_s_t_0.__len__()
        assert var_1 == 0
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.getOrder()
        var_3 = b_s_t_1.add(var_2)
        assert len(b_s_t_1) == 1
        set_0 = set()
        node_0 = module_0.Node(set_0)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_4 = b_s_t_2.getOrder()
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_5 = b_s_t_3.getOrder()
        var_6 = b_s_t_3.add(var_5)
        assert len(b_s_t_3) == 1
        node_1 = module_0.Node(var_5)
        assert node_1.value == []
        bool_0 = False
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_7 = b_s_t_4.remove(bool_0)
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        bool_1 = False
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_8 = b_s_t_7.remove(bool_1)
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        b_s_t_9 = module_0.BST()
        assert len(b_s_t_9) == 0
        var_9 = b_s_t_9.getOrder()
        b_s_t_10 = module_0.BST()
        assert len(b_s_t_10) == 0
        var_10 = b_s_t_10.getOrder()
        var_11 = b_s_t_3.__str__()
>       assert var_11 == '[[]]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:5658: AssertionError
   - [#  14] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
-  14:     def __init__(self):
-  15:         self.root = None
-  16:         self.size = 0
-  17:     
+  14:     @classmethod
+  15:     def __init__(self):
+  16:         self.root = None
+  17:         self.size = 0
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
--------------------------------------------------------------------------------
[2.83880 s] survived
   - [#  15] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
   17:     
-  18:     def add(self, value: T):
-  19:         if self.contains(value):
-  20:             return False
-  21:         elif self.root == None:
-  22:             self.root = Node(value)
-  23:             self.size += 1
-  24:         else:
-  25:             self.__add(self.root, value)
-  26:     
+  18:     @classmethod
+  19:     def add(self, value: T):
+  20:         if self.contains(value):
+  21:             return False
+  22:         elif self.root == None:
+  23:             self.root = Node(value)
+  24:             self.size += 1
+  25:         else:
+  26:             self.__add(self.root, value)
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
--------------------------------------------------------------------------------
[4.51022 s] incompetent

TypeError: binarySearchTree2:20: TypeError: BST.contains() missing 1 required positional argument: 'value'

   - [#  16] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
-  27:     def __add(self, root, value):
-  28:         if value < root.value:
-  29:             if root.left == None:
-  30:                 root.left = Node(value)
-  31:                 self.size += 1
-  32:             else:
-  33:                 self.__add(root.left, value)
-  34:         elif value >= root.value:
-  35:             if root.right == None:
-  36:                 root.right = Node(value)
-  37:                 self.size += 1
-  38:             else:
-  39:                 self.__add(root.right, value)
-  40:     
+  27:     @classmethod
+  28:     def __add(self, root, value):
+  29:         if value < root.value:
+  30:             if root.left == None:
+  31:                 root.left = Node(value)
+  32:                 self.size += 1
+  33:             else:
+  34:                 self.__add(root.left, value)
+  35:         elif value >= root.value:
+  36:             if root.right == None:
+  37:                 root.right = Node(value)
+  38:                 self.size += 1
+  39:             else:
+  40:                 self.__add(root.right, value)
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
--------------------------------------------------------------------------------
[4.61104 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>
root = <binarySearchTree2.Node object at 0x7fae4b2b6380>, value = False

>   ???
E   AttributeError: type object 'BST' has no attribute 'size'

binarySearchTree2:38: AttributeError
   - [#  17] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
-  41:     def contains(self, value):
-  42:         
-  43:         return self.__contains(self.root, value)
-  44:     
+  41:     @classmethod
+  42:     def contains(self, value):
+  43:         
+  44:         return self.__contains(self.root, value)
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
   48:         elif root.value == value:
--------------------------------------------------------------------------------
[4.55724 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
>       var_2 = b_s_t_1.add(b_s_t_2)

RANDOM/test_binarySearchTree2_RANDOM.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>
value = <binarySearchTree2.BST object at 0x7fae4ab9e290>

>   ???
E   AttributeError: type object 'BST' has no attribute 'root'

binarySearchTree2:44: AttributeError
   - [#  18] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
-  45:     def __contains(self, root, value):
-  46:         if root == None:
-  47:             return False
-  48:         elif root.value == value:
-  49:             return True
-  50:         
-  51:         elif value < root.value:
-  52:             return self.__contains(root.left, value)
-  53:         else:
-  54:             return self.__contains(root.right, value)
-  55:     
+  45:     @classmethod
+  46:     def __contains(self, root, value):
+  47:         if root == None:
+  48:             return False
+  49:         elif root.value == value:
+  50:             return True
+  51:         
+  52:         elif value < root.value:
+  53:             return self.__contains(root.left, value)
+  54:         else:
+  55:             return self.__contains(root.right, value)
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
--------------------------------------------------------------------------------
[2.86011 s] survived
   - [#  19] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
-  56:     def minValueNode(self, node):
-  57:         current = node
-  58:         
-  59:         while current.left is not None:
-  60:             current = current.left
-  61:         
-  62:         return current
-  63:     
+  56:     @classmethod
+  57:     def minValueNode(self, node):
+  58:         current = node
+  59:         
+  60:         while current.left is not None:
+  61:             current = current.left
+  62:         
+  63:         return current
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
--------------------------------------------------------------------------------
[2.81827 s] survived
   - [#  20] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   60:             current = current.left
   61:         
   62:         return current
   63:     
-  64:     def remove(self, value):
-  65:         
-  66:         if self.contains(value):
-  67:             if self.size == 1:
-  68:                 self.root = None
-  69:                 self.size -= 1
-  70:             else:
-  71:                 
-  72:                 self.__remove(self.root, value)
-  73:                 self.size -= 1
-  74:         else:
-  75:             pass
-  76:     
+  64:     @classmethod
+  65:     def remove(self, value):
+  66:         
+  67:         if self.contains(value):
+  68:             if self.size == 1:
+  69:                 self.root = None
+  70:                 self.size -= 1
+  71:             else:
+  72:                 
+  73:                 self.__remove(self.root, value)
+  74:                 self.size -= 1
+  75:         else:
+  76:             pass
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
   79:             current = node
   80:             
--------------------------------------------------------------------------------
[4.50856 s] incompetent

TypeError: binarySearchTree2:67: TypeError: BST.contains() missing 1 required positional argument: 'value'

   - [#  21] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
-  77:     def __remove(self, root, value: T):
-  78:         def minValueNode(node):
-  79:             current = node
-  80:             
-  81:             while current.left is not None:
-  82:                 current = current.left
-  83:             
-  84:             return current
-  85:         
-  86:         if root is None:
-  87:             return root
-  88:         
-  89:         if value < root.value:
-  90:             root.left = self.__remove(root.left, value)
-  91:         
-  92:         elif value > root.value:
-  93:             root.right = self.__remove(root.right, value)
-  94:         else:
-  95:             
+  77:     @classmethod
+  78:     def __remove(self, root, value: T):
+  79:         def minValueNode(node):
+  80:             current = node
+  81:             
+  82:             while current.left is not None:
+  83:                 current = current.left
+  84:             
+  85:             return current
+  86:         
+  87:         if root is None:
+  88:             return root
+  89:         
+  90:         if value < root.value:
+  91:             root.left = self.__remove(root.left, value)
+  92:         
+  93:         elif value > root.value:
+  94:             root.right = self.__remove(root.right, value)
+  95:         else:
   96:             
-  97:             if root.left is None:
-  98:                 temp = root.right
-  99:                 root = None
- 100:                 return temp
- 101:             
- 102:             elif root.right is None:
- 103:                 temp = root.left
- 104:                 root = None
- 105:                 return temp
- 106:             
- 107:             temp = minValueNode(root.right)
- 108:             
- 109:             root.value = temp.value
- 110:             
- 111:             root.right = self.__remove(root.right, temp.value)
- 112:         
- 113:         return root
- 114:     
+  97:             
+  98:             if root.left is None:
+  99:                 temp = root.right
+ 100:                 root = None
+ 101:                 return temp
+ 102:             
+ 103:             elif root.right is None:
+ 104:                 temp = root.left
+ 105:                 root = None
+ 106:                 return temp
+ 107:             
+ 108:             temp = minValueNode(root.right)
+ 109:             
+ 110:             root.value = temp.value
+ 111:             
+ 112:             root.right = self.__remove(root.right, temp.value)
+ 113:         
+ 114:         return root
  115:     def isValid(self):
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
--------------------------------------------------------------------------------
[2.88285 s] survived
   - [#  22] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
  113:         return root
  114:     
- 115:     def isValid(self):
- 116:         pass
- 117:     
+ 115:     @classmethod
+ 116:     def isValid(self):
+ 117:         pass
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
--------------------------------------------------------------------------------
[2.94444 s] survived
   - [#  23] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  114:     
  115:     def isValid(self):
  116:         pass
  117:     
- 118:     def build(self, array: list) -> None:
- 119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
- 121:     
+ 118:     @classmethod
+ 119:     def build(self, array: list) -> None:
+ 120:         
+ 121:         self.root = self.__build(array, None, 0, len(array) - 1)
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
  125:             return
--------------------------------------------------------------------------------
[4.42221 s] incompetent

TypeError: binarySearchTree2:121: TypeError: BST.__build() missing 1 required positional argument: 'right'

   - [#  24] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
- 122:     def __build(self, array: list, root, left: int, right: int):
- 123:         
- 124:         if left > right:
- 125:             return
- 126:         
- 127:         mid = (left + right) // 2
- 128:         
- 129:         if not root:
- 130:             
- 131:             root = Node(array[mid])
- 132:             self.size += 1
- 133:         else:
- 134:             
+ 122:     @classmethod
+ 123:     def __build(self, array: list, root, left: int, right: int):
+ 124:         
+ 125:         if left > right:
+ 126:             return
+ 127:         
+ 128:         mid = (left + right) // 2
+ 129:         
+ 130:         if not root:
+ 131:             
+ 132:             root = Node(array[mid])
+ 133:             self.size += 1
+ 134:         else:
  135:             
- 136:             self.__add(root, array[mid])
- 137:         
- 138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
- 140:         
- 141:         return root
- 142:     
+ 136:             
+ 137:             self.__add(root, array[mid])
+ 138:         
+ 139:         self.__build(array, root, left, mid - 1)
+ 140:         self.__build(array, root, mid + 1, right)
+ 141:         
+ 142:         return root
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
--------------------------------------------------------------------------------
[4.47255 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>, array = [False, False, False, False]
root = <binarySearchTree2.Node object at 0x7fae49aed930>, left = 0, right = 3

>   ???
E   AttributeError: type object 'BST' has no attribute 'size'

binarySearchTree2:133: AttributeError
   - [#  25] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
- 143:     def getOrder(self, order='inOrder'):
- 144:         def inOrder(root):
- 145:             if root:
- 146:                 inOrder(root.left)
- 147:                 traversal.append(root.value)
- 148:                 inOrder(root.right)
- 149:         
- 150:         def preOrder(root):
- 151:             if root:
- 152:                 traversal.append(root.value)
- 153:                 preOrder(root.left)
- 154:                 preOrder(root.right)
- 155:         
- 156:         def postOrder(root):
- 157:             if root:
- 158:                 preOrder(root.left)
- 159:                 preOrder(root.right)
- 160:                 traversal.append(root.value)
- 161:         
- 162:         traversal = []
- 163:         if order == 'inOrder':
- 164:             inOrder(self.root)
- 165:             return traversal
- 166:         elif order == 'preOrder':
- 167:             preOrder(self.root)
- 168:             return traversal
- 169:         elif order == 'postOrder':
- 170:             postOrder(self.root)
- 171:             return traversal
- 172:     
+ 143:     @classmethod
+ 144:     def getOrder(self, order='inOrder'):
+ 145:         def inOrder(root):
+ 146:             if root:
+ 147:                 inOrder(root.left)
+ 148:                 traversal.append(root.value)
+ 149:                 inOrder(root.right)
+ 150:         
+ 151:         def preOrder(root):
+ 152:             if root:
+ 153:                 traversal.append(root.value)
+ 154:                 preOrder(root.left)
+ 155:                 preOrder(root.right)
+ 156:         
+ 157:         def postOrder(root):
+ 158:             if root:
+ 159:                 preOrder(root.left)
+ 160:                 preOrder(root.right)
+ 161:                 traversal.append(root.value)
+ 162:         
+ 163:         traversal = []
+ 164:         if order == 'inOrder':
+ 165:             inOrder(self.root)
+ 166:             return traversal
+ 167:         elif order == 'preOrder':
+ 168:             preOrder(self.root)
+ 169:             return traversal
+ 170:         elif order == 'postOrder':
+ 171:             postOrder(self.root)
+ 172:             return traversal
  173:     def __len__(self):
  174:         return self.size
  175:     
  176:     def __str__(self):
--------------------------------------------------------------------------------
[4.68141 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
>       var_1 = b_s_t_1.__str__()

RANDOM/test_binarySearchTree2_RANDOM.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>, order = 'inOrder'

>   ???
E   AttributeError: type object 'BST' has no attribute 'root'

binarySearchTree2:165: AttributeError
   - [#  26] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
- 173:     def __len__(self):
- 174:         return self.size
- 175:     
+ 173:     @classmethod
+ 174:     def __len__(self):
+ 175:         return self.size
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
  179:         Returns:
--------------------------------------------------------------------------------
[4.51722 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0

RANDOM/test_binarySearchTree2_RANDOM.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>

>   ???
E   AttributeError: type object 'BST' has no attribute 'size'

binarySearchTree2:175: AttributeError
   - [#  27] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  172:     
  173:     def __len__(self):
  174:         return self.size
  175:     
- 176:     def __str__(self):
- 177:         '''Return String representation of BST values.
- 178: 
- 179:         Returns:
- 180:             String: String inorder representaion of BST.
- 181:         '''
- 182:         
- 183:         return str(self.getOrder())
- 184: 
+ 176:     @classmethod
+ 177:     def __str__(self):
+ 178:         '''Return String representation of BST values.
+ 179: 
+ 180:         Returns:
+ 181:             String: String inorder representaion of BST.
+ 182:         '''
+ 183:         
+ 184:         return str(self.getOrder())
  185: 
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
--------------------------------------------------------------------------------
[4.60215 s] incompetent

TypeError: binarySearchTree2:184: TypeError: BST.getOrder() missing 1 required positional argument: 'self'

   - [#  28] COD binarySearchTree2: 
--------------------------------------------------------------------------------
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
- 129:         if not root:
+ 129:         if root:
  130:             
  131:             root = Node(array[mid])
  132:             self.size += 1
  133:         else:
--------------------------------------------------------------------------------
[4.73756 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae499ef490>, root = None
value = False

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  29] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   15:         self.root = None
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
-  19:         if self.contains(value):
+  19:         if not (self.contains(value)):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
--------------------------------------------------------------------------------
[4.69933 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_1.add(b_s_t_2)
>       assert len(b_s_t_1) == 1
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:56: AssertionError
   - [#  30] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
-  21:         elif self.root == None:
+  21:         elif not (self.root == None):
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
--------------------------------------------------------------------------------
[4.67187 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
>       var_2 = b_s_t_1.add(b_s_t_2)

RANDOM/test_binarySearchTree2_RANDOM.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:25: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae46755d50>, root = None
value = <binarySearchTree2.BST object at 0x7fae467546d0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  31] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
-  28:         if value < root.value:
+  28:         if not (value < root.value):
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
--------------------------------------------------------------------------------
[5.14149 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_400

def test_case_400():
        bool_0 = False
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.remove(bool_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.contains(b_s_t_1)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_2.__str__()
        assert var_2 == '[]'
        var_3 = b_s_t_2.__len__()
        assert var_3 == 0
        var_4 = b_s_t_1.contains(var_2)
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_5 = b_s_t_3.isValid()
        node_0 = module_0.Node(b_s_t_3)
        assert len(node_0.value) == 0
        var_6 = b_s_t_3.contains(var_5)
        bool_1 = False
        list_0 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_0)
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_7 = b_s_t_3.remove(var_6)
        bool_2 = False
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_8 = b_s_t_5.remove(bool_2)
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_9 = b_s_t_6.contains(b_s_t_6)
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_10 = b_s_t_7.isValid()
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_11 = b_s_t_8.isValid()
        node_2 = module_0.Node(b_s_t_8)
        assert len(node_2.value) == 0
        var_12 = b_s_t_8.contains(var_11)
        var_13 = b_s_t_8.__str__()
        assert var_13 == '[]'
        str_0 = 'binarySearchTree2'
        none_type_0 = b_s_t_5.build(str_0)
>       assert len(b_s_t_5) == 17
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:15070: AssertionError
   - [#  32] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
-  29:             if root.left == None:
+  29:             if not (root.left == None):
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
--------------------------------------------------------------------------------
[4.94572 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_400

def test_case_400():
        bool_0 = False
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.remove(bool_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.contains(b_s_t_1)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_2.__str__()
        assert var_2 == '[]'
        var_3 = b_s_t_2.__len__()
        assert var_3 == 0
        var_4 = b_s_t_1.contains(var_2)
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_5 = b_s_t_3.isValid()
        node_0 = module_0.Node(b_s_t_3)
        assert len(node_0.value) == 0
        var_6 = b_s_t_3.contains(var_5)
        bool_1 = False
        list_0 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_0)
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_7 = b_s_t_3.remove(var_6)
        bool_2 = False
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_8 = b_s_t_5.remove(bool_2)
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_9 = b_s_t_6.contains(b_s_t_6)
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_10 = b_s_t_7.isValid()
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_11 = b_s_t_8.isValid()
        node_2 = module_0.Node(b_s_t_8)
        assert len(node_2.value) == 0
        var_12 = b_s_t_8.contains(var_11)
        var_13 = b_s_t_8.__str__()
        assert var_13 == '[]'
        str_0 = 'binarySearchTree2'
>       none_type_0 = b_s_t_5.build(str_0)

RANDOM/test_binarySearchTree2_RANDOM.py:15069: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:39: in __add
    ???
binarySearchTree2:39: in __add
    ???
binarySearchTree2:33: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49bbdd80>, root = None
value = 'b'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  33] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
-  34:         elif value >= root.value:
+  34:         elif not (value >= root.value):
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
--------------------------------------------------------------------------------
[4.46039 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [#  34] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
-  35:             if root.right == None:
+  35:             if not (root.right == None):
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
--------------------------------------------------------------------------------
[4.48660 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:39: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4aabcf10>, root = None
value = False

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  35] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   42:         
   43:         return self.__contains(self.root, value)
   44:     
   45:     def __contains(self, root, value):
-  46:         if root == None:
+  46:         if not (root == None):
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
--------------------------------------------------------------------------------
[4.64070 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
>       var_2 = b_s_t_1.add(b_s_t_2)

RANDOM/test_binarySearchTree2_RANDOM.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
binarySearchTree2:43: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49c6a620>, root = None
value = <binarySearchTree2.BST object at 0x7fae49c69000>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:48: AttributeError
   - [#  36] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
-  48:         elif root.value == value:
+  48:         elif not (root.value == value):
   49:             return True
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
--------------------------------------------------------------------------------
[4.79795 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_117

def test_case_117():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder()
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.getOrder()
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.getOrder()
        var_4 = b_s_t_2.add(var_3)
        assert len(b_s_t_2) == 1
        node_0 = module_0.Node(var_3)
        assert node_0.value == []
        var_5 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 0
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:3344: AssertionError
   - [#  37] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
-  51:         elif value < root.value:
+  51:         elif not (value < root.value):
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
--------------------------------------------------------------------------------
[2.88470 s] survived
   - [#  38] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   55:     
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
-  59:         while current.left is not None:
+  59:         while not (current.left is not None):
   60:             current = current.left
   61:         
   62:         return current
   63:     
--------------------------------------------------------------------------------
[4.71417 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_240

def test_case_240():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder()
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        node_2 = module_0.Node(list_1)
        none_type_0 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.remove(none_type_0)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.getOrder()
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        none_type_1 = b_s_t_1.build(b_s_t_3)
        none_type_2 = None
        b_s_t_4 = module_0.BST()
        var_4 = b_s_t_4.getOrder(none_type_2)
        bool_2 = False
        list_2 = [bool_2, bool_2, bool_2, bool_2]
        node_3 = module_0.Node(list_2)
        none_type_3 = None
        node_4 = module_0.Node(none_type_3)
        b_s_t_5 = module_0.BST()
        bool_3 = False
        b_s_t_6 = module_0.BST()
        var_5 = b_s_t_6.remove(bool_3)
        b_s_t_7 = module_0.BST()
        b_s_t_8 = module_0.BST()
        var_6 = b_s_t_8.getOrder()
        var_7 = b_s_t_8.add(var_6)
        assert len(b_s_t_8) == 1
        node_5 = module_0.Node(var_7)
        assert node_5.value is None
        b_s_t_9 = module_0.BST()
        var_8 = b_s_t_9.getOrder()
        var_9 = b_s_t_9.add(var_8)
        assert len(b_s_t_9) == 1
        bool_4 = False
        list_3 = [bool_4, bool_4, bool_4, bool_4]
        node_6 = module_0.Node(list_3)
        b_s_t_10 = module_0.BST()
>       var_10 = b_s_t_8.minValueNode(node_1)

RANDOM/test_binarySearchTree2_RANDOM.py:8200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4b2b5450>
node = <binarySearchTree2.Node object at 0x7fae4b2b6f50>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree2:59: AttributeError
   - [#  39] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   62:         return current
   63:     
   64:     def remove(self, value):
   65:         
-  66:         if self.contains(value):
+  66:         if not (self.contains(value)):
   67:             if self.size == 1:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
--------------------------------------------------------------------------------
[4.56837 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_51

def test_case_51():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        bool_1 = False
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.remove(bool_1)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        none_type_0 = None
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_1 = b_s_t_3.getOrder(none_type_0)
        none_type_1 = None
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_2 = b_s_t_4.getOrder(none_type_1)
        bool_2 = False
        list_1 = [bool_2, bool_2, bool_2, bool_2]
        node_1 = module_0.Node(list_1)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        bool_3 = False
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_3 = b_s_t_6.remove(bool_3)
        bool_4 = False
        list_2 = [bool_4, bool_4, bool_4, bool_4]
        node_3 = module_0.Node(list_2)
        none_type_3 = None
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_4 = b_s_t_7.getOrder(none_type_3)
        none_type_4 = None
        node_4 = module_0.Node(none_type_4)
        var_5 = b_s_t_7.isValid()
        var_6 = b_s_t_6.add(b_s_t_4)
>       assert len(b_s_t_6) == 1
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:1214: AssertionError
   - [#  40] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
-  67:             if self.size == 1:
+  67:             if not (self.size == 1):
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[3.10670 s] survived
   - [#  41] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
   79:             current = node
   80:             
-  81:             while current.left is not None:
+  81:             while not (current.left is not None):
   82:                 current = current.left
   83:             
   84:             return current
   85:         
--------------------------------------------------------------------------------
[2.84303 s] survived
   - [#  42] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   82:                 current = current.left
   83:             
   84:             return current
   85:         
-  86:         if root is None:
+  86:         if not (root is None):
   87:             return root
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
--------------------------------------------------------------------------------
[2.87639 s] survived
   - [#  43] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   85:         
   86:         if root is None:
   87:             return root
   88:         
-  89:         if value < root.value:
+  89:         if not (value < root.value):
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
--------------------------------------------------------------------------------
[2.79554 s] survived
   - [#  44] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
-  92:         elif value > root.value:
+  92:         elif not (value > root.value):
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
--------------------------------------------------------------------------------
[2.90514 s] survived
   - [#  45] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
-  97:             if root.left is None:
+  97:             if not (root.left is None):
   98:                 temp = root.right
   99:                 root = None
  100:                 return temp
  101:             
--------------------------------------------------------------------------------
[2.82710 s] survived
   - [#  46] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   98:                 temp = root.right
   99:                 root = None
  100:                 return temp
  101:             
- 102:             elif root.right is None:
+ 102:             elif not (root.right is None):
  103:                 temp = root.left
  104:                 root = None
  105:                 return temp
  106:             
--------------------------------------------------------------------------------
[2.81781 s] survived
   - [#  47] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
- 124:         if left > right:
+ 124:         if not (left > right):
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
--------------------------------------------------------------------------------
[4.53736 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [#  48] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
- 129:         if not root:
+ 129:         if not ((not root)):
  130:             
  131:             root = Node(array[mid])
  132:             self.size += 1
  133:         else:
--------------------------------------------------------------------------------
[4.54278 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4ae742b0>, root = None
value = False

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  49] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
- 145:             if root:
+ 145:             if not root:
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
  148:                 inOrder(root.right)
  149:         
--------------------------------------------------------------------------------
[4.57050 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
>       var_1 = b_s_t_1.__str__()

RANDOM/test_binarySearchTree2_RANDOM.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
binarySearchTree2:164: in getOrder
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree2:146: AttributeError
   - [#  50] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  147:                 traversal.append(root.value)
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
- 151:             if root:
+ 151:             if not root:
  152:                 traversal.append(root.value)
  153:                 preOrder(root.left)
  154:                 preOrder(root.right)
  155:         
--------------------------------------------------------------------------------
[2.83914 s] survived
   - [#  51] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  153:                 preOrder(root.left)
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
- 157:             if root:
+ 157:             if not root:
  158:                 preOrder(root.left)
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
--------------------------------------------------------------------------------
[2.87694 s] survived
   - [#  52] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
- 163:         if order == 'inOrder':
+ 163:         if not (order == 'inOrder'):
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[4.51227 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        var_1 = b_s_t_1.__str__()
>       assert var_1 == '[]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:144: AssertionError
   - [#  53] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
- 166:         elif order == 'preOrder':
+ 166:         elif not (order == 'preOrder'):
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[4.47037 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_17

def test_case_17():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        bool_2 = False
        list_2 = [bool_2, bool_2, bool_2, bool_2]
        node_4 = module_0.Node(list_2)
        none_type_4 = None
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_2 = b_s_t_3.getOrder(none_type_4)
        none_type_5 = None
        node_5 = module_0.Node(none_type_5)
        var_3 = b_s_t_3.isValid()
        var_4 = var_1.__str__()
>       assert var_4 == 'None'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:312: AssertionError
   - [#  54] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
- 169:         elif order == 'postOrder':
+ 169:         elif not (order == 'postOrder'):
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[4.40440 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_17

def test_case_17():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        bool_2 = False
        list_2 = [bool_2, bool_2, bool_2, bool_2]
        node_4 = module_0.Node(list_2)
        none_type_4 = None
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_2 = b_s_t_3.getOrder(none_type_4)
        none_type_5 = None
        node_5 = module_0.Node(none_type_5)
        var_3 = b_s_t_3.isValid()
        var_4 = var_1.__str__()
>       assert var_4 == 'None'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:312: AssertionError
   - [#  55] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
- 186: if __name__ == '__main__':
+ 186: if not (__name__ == '__main__'):
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[1, 2, 3] 3
[2, 3] 2
[2] 1
[] 0
[2.84054 s] survived
   - [#  56] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
    1: """Binary search tree, also called an ordered or sorted binary tree (BST), is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node's left subtree and less than those in its right subtree."""
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: T = TypeVar('mutpy')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[2.80338 s] survived
   - [#  57] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
    1: """Binary search tree, also called an ordered or sorted binary tree (BST), is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node's left subtree and less than those in its right subtree."""
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: T = TypeVar('')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[2.71679 s] survived
   - [#  58] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
-  16:         self.size = 0
+  16:         self.size = 1
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
--------------------------------------------------------------------------------
[4.38697 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:9: AssertionError
   - [#  59] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
-  23:             self.size += 1
+  23:             self.size += 2
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
--------------------------------------------------------------------------------
[4.40136 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_1.add(b_s_t_2)
>       assert len(b_s_t_1) == 1
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:56: AssertionError
   - [#  60] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
-  31:                 self.size += 1
+  31:                 self.size += 2
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
--------------------------------------------------------------------------------
[4.95882 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_400

def test_case_400():
        bool_0 = False
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.remove(bool_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.contains(b_s_t_1)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_2.__str__()
        assert var_2 == '[]'
        var_3 = b_s_t_2.__len__()
        assert var_3 == 0
        var_4 = b_s_t_1.contains(var_2)
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_5 = b_s_t_3.isValid()
        node_0 = module_0.Node(b_s_t_3)
        assert len(node_0.value) == 0
        var_6 = b_s_t_3.contains(var_5)
        bool_1 = False
        list_0 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_0)
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_7 = b_s_t_3.remove(var_6)
        bool_2 = False
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_8 = b_s_t_5.remove(bool_2)
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_9 = b_s_t_6.contains(b_s_t_6)
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_10 = b_s_t_7.isValid()
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_11 = b_s_t_8.isValid()
        node_2 = module_0.Node(b_s_t_8)
        assert len(node_2.value) == 0
        var_12 = b_s_t_8.contains(var_11)
        var_13 = b_s_t_8.__str__()
        assert var_13 == '[]'
        str_0 = 'binarySearchTree2'
        none_type_0 = b_s_t_5.build(str_0)
>       assert len(b_s_t_5) == 17
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:15070: AssertionError
   - [#  61] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
-  37:                 self.size += 1
+  37:                 self.size += 2
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
--------------------------------------------------------------------------------
[4.52696 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [#  62] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
-  67:             if self.size == 1:
+  67:             if self.size == 2:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[2.71869 s] survived
   - [#  63] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
   68:                 self.root = None
-  69:                 self.size -= 1
+  69:                 self.size -= 2
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
   73:                 self.size -= 1
--------------------------------------------------------------------------------
[4.56289 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_117

def test_case_117():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder()
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.getOrder()
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.getOrder()
        var_4 = b_s_t_2.add(var_3)
        assert len(b_s_t_2) == 1
        node_0 = module_0.Node(var_3)
        assert node_0.value == []
        var_5 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 0
E       ValueError: __len__() should return >= 0

RANDOM/test_binarySearchTree2_RANDOM.py:3344: ValueError
   - [#  64] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
-  73:                 self.size -= 1
+  73:                 self.size -= 2
   74:         else:
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
--------------------------------------------------------------------------------
[2.84034 s] survived
   - [#  65] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         self.root = self.__build(array, None, 1, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[4.59127 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [#  66] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         self.root = self.__build(array, None, 0, len(array) - 2)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[4.55007 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [#  67] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
- 127:         mid = (left + right) // 2
+ 127:         mid = (left + right) // 3
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[4.52109 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals & position)
   - [#  68] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
- 132:             self.size += 1
+ 132:             self.size += 2
  133:         else:
  134:             
  135:             
  136:             self.__add(root, array[mid])
--------------------------------------------------------------------------------
[4.75516 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [#  69] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
- 138:         self.__build(array, root, left, mid - 1)
+ 138:         self.__build(array, root, left, mid - 2)
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[4.41733 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [#  70] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
+ 139:         self.__build(array, root, mid + 2, right)
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[4.55738 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [#  71] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
- 143:     def getOrder(self, order='inOrder'):
+ 143:     def getOrder(self, order='mutpy'):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
--------------------------------------------------------------------------------
[4.52055 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        var_1 = b_s_t_1.__str__()
>       assert var_1 == '[]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:144: AssertionError
   - [#  72] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
- 143:     def getOrder(self, order='inOrder'):
+ 143:     def getOrder(self, order=''):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
--------------------------------------------------------------------------------
[4.45352 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        var_1 = b_s_t_1.__str__()
>       assert var_1 == '[]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:144: AssertionError
   - [#  73] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
- 163:         if order == 'inOrder':
+ 163:         if order == 'mutpy':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[4.44629 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        var_1 = b_s_t_1.__str__()
>       assert var_1 == '[]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:144: AssertionError
   - [#  74] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
- 163:         if order == 'inOrder':
+ 163:         if order == '':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[4.45347 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        var_1 = b_s_t_1.__str__()
>       assert var_1 == '[]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:144: AssertionError
   - [#  75] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
- 166:         elif order == 'preOrder':
+ 166:         elif order == 'mutpy':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[2.84707 s] survived
   - [#  76] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
- 166:         elif order == 'preOrder':
+ 166:         elif order == '':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[2.80262 s] survived
   - [#  77] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
- 169:         elif order == 'postOrder':
+ 169:         elif order == 'mutpy':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[2.82231 s] survived
   - [#  78] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
- 169:         elif order == 'postOrder':
+ 169:         elif order == '':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[2.81758 s] survived
   - [#  79] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
- 186: if __name__ == '__main__':
+ 186: if __name__ == 'mutpy':
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[2.85187 s] survived
   - [#  80] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
- 186: if __name__ == '__main__':
+ 186: if __name__ == '':
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[2.85209 s] survived
   - [#  81] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
  189:     
- 190:     tree.add(3)
+ 190:     tree.add(4)
  191:     tree.add(2)
  192:     tree.add(4)
  193:     
  194:     
--------------------------------------------------------------------------------
[2.85619 s] survived
   - [#  82] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
- 191:     tree.add(2)
+ 191:     tree.add(3)
  192:     tree.add(4)
  193:     
  194:     
  195:     
--------------------------------------------------------------------------------
[2.82554 s] survived
   - [#  83] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  188:     tree = BST()
  189:     
  190:     tree.add(3)
  191:     tree.add(2)
- 192:     tree.add(4)
+ 192:     tree.add(5)
  193:     
  194:     
  195:     
  196:     
--------------------------------------------------------------------------------
[2.84853 s] survived
   - [#  84] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
- 199:     tree2.build([1, 2, 3])
+ 199:     tree2.build([2, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[2.82758 s] survived
   - [#  85] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
- 199:     tree2.build([1, 2, 3])
+ 199:     tree2.build([1, 3, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[2.93860 s] survived
   - [#  86] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
- 199:     tree2.build([1, 2, 3])
+ 199:     tree2.build([1, 2, 4])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[2.91492 s] survived
   - [#  87] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  197:     
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
- 201:     tree2.remove(1)
+ 201:     tree2.remove(2)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
--------------------------------------------------------------------------------
[2.86153 s] survived
   - [#  88] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
- 203:     tree2.remove(3)
+ 203:     tree2.remove(4)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[2.87005 s] survived
   - [#  89] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
- 205:     tree2.remove(2)
+ 205:     tree2.remove(3)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[3.01528 s] survived
   - [#  90] OIL binarySearchTree2: 
--------------------------------------------------------------------------------
   57:         current = node
   58:         
   59:         while current.left is not None:
   60:             current = current.left
-  61:         
+  61:             break
   62:         return current
   63:     
   64:     def remove(self, value):
   65:         
--------------------------------------------------------------------------------
[2.90994 s] survived
   - [#  91] OIL binarySearchTree2: 
--------------------------------------------------------------------------------
   79:             current = node
   80:             
   81:             while current.left is not None:
   82:                 current = current.left
-  83:             
+  83:                 break
   84:             return current
   85:         
   86:         if root is None:
   87:             return root
--------------------------------------------------------------------------------
[2.90323 s] survived
   - [#  92] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
-  21:         elif self.root == None:
+  21:         elif self.root != None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
--------------------------------------------------------------------------------
[4.56559 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
>       var_2 = b_s_t_1.add(b_s_t_2)

RANDOM/test_binarySearchTree2_RANDOM.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:25: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4aafbd30>, root = None
value = <binarySearchTree2.BST object at 0x7fae4aaf9630>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  93] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
-  28:         if value < root.value:
+  28:         if value > root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
--------------------------------------------------------------------------------
[4.91672 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_400

def test_case_400():
        bool_0 = False
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.remove(bool_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.contains(b_s_t_1)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_2.__str__()
        assert var_2 == '[]'
        var_3 = b_s_t_2.__len__()
        assert var_3 == 0
        var_4 = b_s_t_1.contains(var_2)
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_5 = b_s_t_3.isValid()
        node_0 = module_0.Node(b_s_t_3)
        assert len(node_0.value) == 0
        var_6 = b_s_t_3.contains(var_5)
        bool_1 = False
        list_0 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_0)
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_7 = b_s_t_3.remove(var_6)
        bool_2 = False
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_8 = b_s_t_5.remove(bool_2)
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_9 = b_s_t_6.contains(b_s_t_6)
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_10 = b_s_t_7.isValid()
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_11 = b_s_t_8.isValid()
        node_2 = module_0.Node(b_s_t_8)
        assert len(node_2.value) == 0
        var_12 = b_s_t_8.contains(var_11)
        var_13 = b_s_t_8.__str__()
        assert var_13 == '[]'
        str_0 = 'binarySearchTree2'
        none_type_0 = b_s_t_5.build(str_0)
>       assert len(b_s_t_5) == 17
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:15070: AssertionError
   - [#  94] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
-  28:         if value < root.value:
+  28:         if value <= root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
--------------------------------------------------------------------------------
[2.79022 s] survived
   - [#  95] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
-  29:             if root.left == None:
+  29:             if root.left != None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
--------------------------------------------------------------------------------
[4.96698 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_400

def test_case_400():
        bool_0 = False
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.remove(bool_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.contains(b_s_t_1)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_2.__str__()
        assert var_2 == '[]'
        var_3 = b_s_t_2.__len__()
        assert var_3 == 0
        var_4 = b_s_t_1.contains(var_2)
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_5 = b_s_t_3.isValid()
        node_0 = module_0.Node(b_s_t_3)
        assert len(node_0.value) == 0
        var_6 = b_s_t_3.contains(var_5)
        bool_1 = False
        list_0 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_0)
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_7 = b_s_t_3.remove(var_6)
        bool_2 = False
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_8 = b_s_t_5.remove(bool_2)
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_9 = b_s_t_6.contains(b_s_t_6)
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_10 = b_s_t_7.isValid()
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_11 = b_s_t_8.isValid()
        node_2 = module_0.Node(b_s_t_8)
        assert len(node_2.value) == 0
        var_12 = b_s_t_8.contains(var_11)
        var_13 = b_s_t_8.__str__()
        assert var_13 == '[]'
        str_0 = 'binarySearchTree2'
>       none_type_0 = b_s_t_5.build(str_0)

RANDOM/test_binarySearchTree2_RANDOM.py:15069: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:39: in __add
    ???
binarySearchTree2:39: in __add
    ???
binarySearchTree2:33: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49bcb1f0>, root = None
value = 'b'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  96] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
-  34:         elif value >= root.value:
+  34:         elif value <= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
--------------------------------------------------------------------------------
[4.71788 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_187

def test_case_187():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        var_0 = b_s_t_0.__str__()
        assert var_0 == '[]'
        bool_1 = False
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.remove(bool_1)
        none_type_0 = None
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_2.getOrder(none_type_0)
        var_3 = b_s_t_1.getOrder()
        none_type_1 = None
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_4 = b_s_t_3.remove(none_type_1)
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        none_type_3 = b_s_t_2.build(var_0)
>       assert len(b_s_t_2) == 2
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:5822: AssertionError
   - [#  97] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
-  34:         elif value >= root.value:
+  34:         elif value > root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
--------------------------------------------------------------------------------
[4.45941 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [#  98] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
-  35:             if root.right == None:
+  35:             if root.right != None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
--------------------------------------------------------------------------------
[4.48269 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:39: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4abe9f90>, root = None
value = False

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  99] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   42:         
   43:         return self.__contains(self.root, value)
   44:     
   45:     def __contains(self, root, value):
-  46:         if root == None:
+  46:         if root != None:
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
--------------------------------------------------------------------------------
[4.42597 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
>       var_2 = b_s_t_1.add(b_s_t_2)

RANDOM/test_binarySearchTree2_RANDOM.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
binarySearchTree2:43: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49a15f90>, root = None
value = <binarySearchTree2.BST object at 0x7fae49a15270>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:48: AttributeError
   - [# 100] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
-  48:         elif root.value == value:
+  48:         elif root.value != value:
   49:             return True
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
--------------------------------------------------------------------------------
[4.71130 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_117

def test_case_117():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder()
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.getOrder()
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.getOrder()
        var_4 = b_s_t_2.add(var_3)
        assert len(b_s_t_2) == 1
        node_0 = module_0.Node(var_3)
        assert node_0.value == []
        var_5 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 0
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:3344: AssertionError
   - [# 101] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
-  51:         elif value < root.value:
+  51:         elif value > root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
--------------------------------------------------------------------------------
[2.86488 s] survived
   - [# 102] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
-  51:         elif value < root.value:
+  51:         elif value <= root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
--------------------------------------------------------------------------------
[2.87083 s] survived
   - [# 103] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
-  67:             if self.size == 1:
+  67:             if self.size != 1:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[2.81892 s] survived
   - [# 104] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   85:         
   86:         if root is None:
   87:             return root
   88:         
-  89:         if value < root.value:
+  89:         if value > root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
--------------------------------------------------------------------------------
[2.80693 s] survived
   - [# 105] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   85:         
   86:         if root is None:
   87:             return root
   88:         
-  89:         if value < root.value:
+  89:         if value <= root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
--------------------------------------------------------------------------------
[2.83068 s] survived
   - [# 106] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
-  92:         elif value > root.value:
+  92:         elif value < root.value:
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
--------------------------------------------------------------------------------
[2.72132 s] survived
   - [# 107] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
-  92:         elif value > root.value:
+  92:         elif value >= root.value:
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
--------------------------------------------------------------------------------
[2.78962 s] survived
   - [# 108] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
- 124:         if left > right:
+ 124:         if left < right:
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
--------------------------------------------------------------------------------
[4.47361 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [# 109] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
- 124:         if left > right:
+ 124:         if left >= right:
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
--------------------------------------------------------------------------------
[4.42626 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [# 110] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
- 163:         if order == 'inOrder':
+ 163:         if order != 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[4.63049 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        var_1 = b_s_t_1.__str__()
>       assert var_1 == '[]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:144: AssertionError
   - [# 111] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
- 166:         elif order == 'preOrder':
+ 166:         elif order != 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[4.61104 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_17

def test_case_17():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        bool_2 = False
        list_2 = [bool_2, bool_2, bool_2, bool_2]
        node_4 = module_0.Node(list_2)
        none_type_4 = None
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_2 = b_s_t_3.getOrder(none_type_4)
        none_type_5 = None
        node_5 = module_0.Node(none_type_5)
        var_3 = b_s_t_3.isValid()
        var_4 = var_1.__str__()
>       assert var_4 == 'None'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:312: AssertionError
   - [# 112] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
- 169:         elif order == 'postOrder':
+ 169:         elif order != 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[4.53025 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_17

def test_case_17():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        bool_2 = False
        list_2 = [bool_2, bool_2, bool_2, bool_2]
        node_4 = module_0.Node(list_2)
        none_type_4 = None
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_2 = b_s_t_3.getOrder(none_type_4)
        none_type_5 = None
        node_5 = module_0.Node(none_type_5)
        var_3 = b_s_t_3.isValid()
        var_4 = var_1.__str__()
>       assert var_4 == 'None'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:312: AssertionError
   - [# 113] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
- 186: if __name__ == '__main__':
+ 186: if __name__ != '__main__':
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[1, 2, 3] 3
[2, 3] 2
[2] 1
[] 0
[2.83465 s] survived
   - [# 114] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
    4: 
    5: T = TypeVar('T')
    6: 
    7: class Node:
-   8:     def __init__(self, value: T):
-   9:         self.value = value
-  10:         self.left = None
-  11:         self.right = None
-  12: 
+   8:     @staticmethod
+   9:     def __init__(self, value: T):
+  10:         self.value = value
+  11:         self.left = None
+  12:         self.right = None
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
--------------------------------------------------------------------------------
[4.49414 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/RANDOM/test_binarySearchTree2_RANDOM.py:14: TypeError: Node.__init__() missing 1 required positional argument: 'value'

   - [# 115] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
-  14:     def __init__(self):
-  15:         self.root = None
-  16:         self.size = 0
-  17:     
+  14:     @staticmethod
+  15:     def __init__(self):
+  16:         self.root = None
+  17:         self.size = 0
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
--------------------------------------------------------------------------------
[4.52414 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/RANDOM/test_binarySearchTree2_RANDOM.py:8: TypeError: BST.__init__() missing 1 required positional argument: 'self'

   - [# 116] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
   17:     
-  18:     def add(self, value: T):
-  19:         if self.contains(value):
-  20:             return False
-  21:         elif self.root == None:
-  22:             self.root = Node(value)
-  23:             self.size += 1
-  24:         else:
-  25:             self.__add(self.root, value)
-  26:     
+  18:     @staticmethod
+  19:     def add(self, value: T):
+  20:         if self.contains(value):
+  21:             return False
+  22:         elif self.root == None:
+  23:             self.root = Node(value)
+  24:             self.size += 1
+  25:         else:
+  26:             self.__add(self.root, value)
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
--------------------------------------------------------------------------------
[4.53082 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/RANDOM/test_binarySearchTree2_RANDOM.py:55: TypeError: BST.add() missing 1 required positional argument: 'value'

   - [# 117] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
-  27:     def __add(self, root, value):
-  28:         if value < root.value:
-  29:             if root.left == None:
-  30:                 root.left = Node(value)
-  31:                 self.size += 1
-  32:             else:
-  33:                 self.__add(root.left, value)
-  34:         elif value >= root.value:
-  35:             if root.right == None:
-  36:                 root.right = Node(value)
-  37:                 self.size += 1
-  38:             else:
-  39:                 self.__add(root.right, value)
-  40:     
+  27:     @staticmethod
+  28:     def __add(self, root, value):
+  29:         if value < root.value:
+  30:             if root.left == None:
+  31:                 root.left = Node(value)
+  32:                 self.size += 1
+  33:             else:
+  34:                 self.__add(root.left, value)
+  35:         elif value >= root.value:
+  36:             if root.right == None:
+  37:                 root.right = Node(value)
+  38:                 self.size += 1
+  39:             else:
+  40:                 self.__add(root.right, value)
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
--------------------------------------------------------------------------------
[4.46701 s] incompetent

TypeError: binarySearchTree2:136: TypeError: BST.__add() missing 1 required positional argument: 'value'

   - [# 118] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
-  41:     def contains(self, value):
-  42:         
-  43:         return self.__contains(self.root, value)
-  44:     
+  41:     @staticmethod
+  42:     def contains(self, value):
+  43:         
+  44:         return self.__contains(self.root, value)
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
   48:         elif root.value == value:
--------------------------------------------------------------------------------
[4.43812 s] incompetent

TypeError: binarySearchTree2:19: TypeError: BST.contains() missing 1 required positional argument: 'value'

   - [# 119] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
-  45:     def __contains(self, root, value):
-  46:         if root == None:
-  47:             return False
-  48:         elif root.value == value:
-  49:             return True
-  50:         
-  51:         elif value < root.value:
-  52:             return self.__contains(root.left, value)
-  53:         else:
-  54:             return self.__contains(root.right, value)
-  55:     
+  45:     @staticmethod
+  46:     def __contains(self, root, value):
+  47:         if root == None:
+  48:             return False
+  49:         elif root.value == value:
+  50:             return True
+  51:         
+  52:         elif value < root.value:
+  53:             return self.__contains(root.left, value)
+  54:         else:
+  55:             return self.__contains(root.right, value)
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
--------------------------------------------------------------------------------
[4.47964 s] incompetent

TypeError: binarySearchTree2:43: TypeError: BST.__contains() missing 1 required positional argument: 'value'

   - [# 120] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
-  56:     def minValueNode(self, node):
-  57:         current = node
-  58:         
-  59:         while current.left is not None:
-  60:             current = current.left
-  61:         
-  62:         return current
-  63:     
+  56:     @staticmethod
+  57:     def minValueNode(self, node):
+  58:         current = node
+  59:         
+  60:         while current.left is not None:
+  61:             current = current.left
+  62:         
+  63:         return current
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
--------------------------------------------------------------------------------
[4.80325 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/RANDOM/test_binarySearchTree2_RANDOM.py:8200: TypeError: BST.minValueNode() missing 1 required positional argument: 'node'

   - [# 121] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   60:             current = current.left
   61:         
   62:         return current
   63:     
-  64:     def remove(self, value):
-  65:         
-  66:         if self.contains(value):
-  67:             if self.size == 1:
-  68:                 self.root = None
-  69:                 self.size -= 1
-  70:             else:
-  71:                 
-  72:                 self.__remove(self.root, value)
-  73:                 self.size -= 1
-  74:         else:
-  75:             pass
-  76:     
+  64:     @staticmethod
+  65:     def remove(self, value):
+  66:         
+  67:         if self.contains(value):
+  68:             if self.size == 1:
+  69:                 self.root = None
+  70:                 self.size -= 1
+  71:             else:
+  72:                 
+  73:                 self.__remove(self.root, value)
+  74:                 self.size -= 1
+  75:         else:
+  76:             pass
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
   79:             current = node
   80:             
--------------------------------------------------------------------------------
[4.52292 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/RANDOM/test_binarySearchTree2_RANDOM.py:348: TypeError: BST.remove() missing 1 required positional argument: 'value'

   - [# 122] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
-  77:     def __remove(self, root, value: T):
-  78:         def minValueNode(node):
-  79:             current = node
-  80:             
-  81:             while current.left is not None:
-  82:                 current = current.left
-  83:             
-  84:             return current
-  85:         
-  86:         if root is None:
-  87:             return root
-  88:         
-  89:         if value < root.value:
-  90:             root.left = self.__remove(root.left, value)
-  91:         
-  92:         elif value > root.value:
-  93:             root.right = self.__remove(root.right, value)
-  94:         else:
-  95:             
+  77:     @staticmethod
+  78:     def __remove(self, root, value: T):
+  79:         def minValueNode(node):
+  80:             current = node
+  81:             
+  82:             while current.left is not None:
+  83:                 current = current.left
+  84:             
+  85:             return current
+  86:         
+  87:         if root is None:
+  88:             return root
+  89:         
+  90:         if value < root.value:
+  91:             root.left = self.__remove(root.left, value)
+  92:         
+  93:         elif value > root.value:
+  94:             root.right = self.__remove(root.right, value)
+  95:         else:
   96:             
-  97:             if root.left is None:
-  98:                 temp = root.right
-  99:                 root = None
- 100:                 return temp
- 101:             
- 102:             elif root.right is None:
- 103:                 temp = root.left
- 104:                 root = None
- 105:                 return temp
- 106:             
- 107:             temp = minValueNode(root.right)
- 108:             
- 109:             root.value = temp.value
- 110:             
- 111:             root.right = self.__remove(root.right, temp.value)
- 112:         
- 113:         return root
- 114:     
+  97:             
+  98:             if root.left is None:
+  99:                 temp = root.right
+ 100:                 root = None
+ 101:                 return temp
+ 102:             
+ 103:             elif root.right is None:
+ 104:                 temp = root.left
+ 105:                 root = None
+ 106:                 return temp
+ 107:             
+ 108:             temp = minValueNode(root.right)
+ 109:             
+ 110:             root.value = temp.value
+ 111:             
+ 112:             root.right = self.__remove(root.right, temp.value)
+ 113:         
+ 114:         return root
  115:     def isValid(self):
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
--------------------------------------------------------------------------------
[2.79941 s] survived
   - [# 123] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
  113:         return root
  114:     
- 115:     def isValid(self):
- 116:         pass
- 117:     
+ 115:     @staticmethod
+ 116:     def isValid(self):
+ 117:         pass
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
--------------------------------------------------------------------------------
[4.43252 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/RANDOM/test_binarySearchTree2_RANDOM.py:249: TypeError: BST.isValid() missing 1 required positional argument: 'self'

   - [# 124] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  114:     
  115:     def isValid(self):
  116:         pass
  117:     
- 118:     def build(self, array: list) -> None:
- 119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
- 121:     
+ 118:     @staticmethod
+ 119:     def build(self, array: list) -> None:
+ 120:         
+ 121:         self.root = self.__build(array, None, 0, len(array) - 1)
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
  125:             return
--------------------------------------------------------------------------------
[4.62554 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/RANDOM/test_binarySearchTree2_RANDOM.py:236: TypeError: BST.build() missing 1 required positional argument: 'array'

   - [# 125] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
- 122:     def __build(self, array: list, root, left: int, right: int):
- 123:         
- 124:         if left > right:
- 125:             return
- 126:         
- 127:         mid = (left + right) // 2
- 128:         
- 129:         if not root:
- 130:             
- 131:             root = Node(array[mid])
- 132:             self.size += 1
- 133:         else:
- 134:             
+ 122:     @staticmethod
+ 123:     def __build(self, array: list, root, left: int, right: int):
+ 124:         
+ 125:         if left > right:
+ 126:             return
+ 127:         
+ 128:         mid = (left + right) // 2
+ 129:         
+ 130:         if not root:
+ 131:             
+ 132:             root = Node(array[mid])
+ 133:             self.size += 1
+ 134:         else:
  135:             
- 136:             self.__add(root, array[mid])
- 137:         
- 138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
- 140:         
- 141:         return root
- 142:     
+ 136:             
+ 137:             self.__add(root, array[mid])
+ 138:         
+ 139:         self.__build(array, root, left, mid - 1)
+ 140:         self.__build(array, root, mid + 1, right)
+ 141:         
+ 142:         return root
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
--------------------------------------------------------------------------------
[4.59669 s] incompetent

TypeError: binarySearchTree2:120: TypeError: BST.__build() missing 1 required positional argument: 'right'

   - [# 126] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
- 143:     def getOrder(self, order='inOrder'):
- 144:         def inOrder(root):
- 145:             if root:
- 146:                 inOrder(root.left)
- 147:                 traversal.append(root.value)
- 148:                 inOrder(root.right)
- 149:         
- 150:         def preOrder(root):
- 151:             if root:
- 152:                 traversal.append(root.value)
- 153:                 preOrder(root.left)
- 154:                 preOrder(root.right)
- 155:         
- 156:         def postOrder(root):
- 157:             if root:
- 158:                 preOrder(root.left)
- 159:                 preOrder(root.right)
- 160:                 traversal.append(root.value)
- 161:         
- 162:         traversal = []
- 163:         if order == 'inOrder':
- 164:             inOrder(self.root)
- 165:             return traversal
- 166:         elif order == 'preOrder':
- 167:             preOrder(self.root)
- 168:             return traversal
- 169:         elif order == 'postOrder':
- 170:             postOrder(self.root)
- 171:             return traversal
- 172:     
+ 143:     @staticmethod
+ 144:     def getOrder(self, order='inOrder'):
+ 145:         def inOrder(root):
+ 146:             if root:
+ 147:                 inOrder(root.left)
+ 148:                 traversal.append(root.value)
+ 149:                 inOrder(root.right)
+ 150:         
+ 151:         def preOrder(root):
+ 152:             if root:
+ 153:                 traversal.append(root.value)
+ 154:                 preOrder(root.left)
+ 155:                 preOrder(root.right)
+ 156:         
+ 157:         def postOrder(root):
+ 158:             if root:
+ 159:                 preOrder(root.left)
+ 160:                 preOrder(root.right)
+ 161:                 traversal.append(root.value)
+ 162:         
+ 163:         traversal = []
+ 164:         if order == 'inOrder':
+ 165:             inOrder(self.root)
+ 166:             return traversal
+ 167:         elif order == 'preOrder':
+ 168:             preOrder(self.root)
+ 169:             return traversal
+ 170:         elif order == 'postOrder':
+ 171:             postOrder(self.root)
+ 172:             return traversal
  173:     def __len__(self):
  174:         return self.size
  175:     
  176:     def __str__(self):
--------------------------------------------------------------------------------
[4.49145 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.getOrder(none_type_0)

RANDOM/test_binarySearchTree2_RANDOM.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = None, order = 'inOrder'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'root'

binarySearchTree2:165: AttributeError
   - [# 127] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
- 173:     def __len__(self):
- 174:         return self.size
- 175:     
+ 173:     @staticmethod
+ 174:     def __len__(self):
+ 175:         return self.size
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
  179:         Returns:
--------------------------------------------------------------------------------
[4.48555 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/RANDOM/test_binarySearchTree2_RANDOM.py:9: TypeError: BST.__len__() missing 1 required positional argument: 'self'

   - [# 128] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  172:     
  173:     def __len__(self):
  174:         return self.size
  175:     
- 176:     def __str__(self):
- 177:         '''Return String representation of BST values.
- 178: 
- 179:         Returns:
- 180:             String: String inorder representaion of BST.
- 181:         '''
- 182:         
- 183:         return str(self.getOrder())
- 184: 
+ 176:     @staticmethod
+ 177:     def __str__(self):
+ 178:         '''Return String representation of BST values.
+ 179: 
+ 180:         Returns:
+ 181:             String: String inorder representaion of BST.
+ 182:         '''
+ 183:         
+ 184:         return str(self.getOrder())
  185: 
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
--------------------------------------------------------------------------------
[4.45562 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/RANDOM/test_binarySearchTree2_RANDOM.py:143: TypeError: BST.__str__() missing 1 required positional argument: 'self'

   - [# 129] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    1: """Binary search tree, also called an ordered or sorted binary tree (BST), is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node's left subtree and less than those in its right subtree."""
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: pass
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[0.00000 s] incompetent

NameError: name 'T' is not defined

   - [# 130] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    5: T = TypeVar('T')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
-   9:         self.value = value
+   9:         pass
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
--------------------------------------------------------------------------------
[4.59675 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4b3c85b0>
root = <binarySearchTree2.Node object at 0x7fae4b3cb790>, value = False

>   ???
E   AttributeError: 'Node' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [# 131] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
-  10:         self.left = None
+  10:         pass
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
--------------------------------------------------------------------------------
[4.58748 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_162

def test_case_162():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        bool_0 = False
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.remove(bool_0)
        none_type_1 = None
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_1 = b_s_t_2.getOrder(none_type_1)
        var_2 = b_s_t_1.getOrder()
        bool_1 = False
        list_0 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_0)
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_3 = b_s_t_3.getOrder()
        var_4 = b_s_t_3.add(var_3)
        assert len(b_s_t_3) == 1
        node_2 = module_0.Node(list_0)
        bool_2 = False
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_5 = b_s_t_4.remove(bool_2)
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_6 = b_s_t_6.getOrder()
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_7 = b_s_t_7.getOrder()
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_8 = b_s_t_8.getOrder()
        var_9 = b_s_t_8.add(var_8)
        assert len(b_s_t_8) == 1
        b_s_t_9 = module_0.BST()
        assert len(b_s_t_9) == 0
        var_10 = b_s_t_9.getOrder()
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        bool_3 = False
        b_s_t_10 = module_0.BST()
        assert len(b_s_t_10) == 0
        var_11 = b_s_t_10.remove(bool_3)
        b_s_t_11 = module_0.BST()
        assert len(b_s_t_11) == 0
        var_12 = b_s_t_11.getOrder()
        b_s_t_12 = module_0.BST()
        assert len(b_s_t_12) == 0
        var_13 = b_s_t_12.getOrder()
        var_14 = b_s_t_12.add(var_13)
        assert len(b_s_t_12) == 1
        node_4 = module_0.Node(var_13)
        assert node_4.value == []
>       var_15 = b_s_t_3.getOrder()

RANDOM/test_binarySearchTree2_RANDOM.py:4871: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:164: in getOrder
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root = <binarySearchTree2.Node object at 0x7fae4b3ce3b0>

>   ???
E   AttributeError: 'Node' object has no attribute 'left'

binarySearchTree2:146: AttributeError
   - [# 132] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
   10:         self.left = None
-  11:         self.right = None
+  11:         pass
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
--------------------------------------------------------------------------------
[4.50725 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49bcaf50>
root = <binarySearchTree2.Node object at 0x7fae49bca500>, value = False

>   ???
E   AttributeError: 'Node' object has no attribute 'right'

binarySearchTree2:35: AttributeError
   - [# 133] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
-  15:         self.root = None
+  15:         pass
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
--------------------------------------------------------------------------------
[4.41934 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
>       var_2 = b_s_t_1.add(b_s_t_2)

RANDOM/test_binarySearchTree2_RANDOM.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49bc8d00>
value = <binarySearchTree2.BST object at 0x7fae49bc9450>

>   ???
E   AttributeError: 'BST' object has no attribute 'root'

binarySearchTree2:43: AttributeError
   - [# 134] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
-  16:         self.size = 0
+  16:         pass
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
--------------------------------------------------------------------------------
[4.54328 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0

RANDOM/test_binarySearchTree2_RANDOM.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4679fca0>

>   ???
E   AttributeError: 'BST' object has no attribute 'size'

binarySearchTree2:174: AttributeError
   - [# 135] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
-  20:             return False
+  20:             pass
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
--------------------------------------------------------------------------------
[2.80987 s] survived
   - [# 136] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
-  22:             self.root = Node(value)
+  22:             pass
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
--------------------------------------------------------------------------------
[4.62439 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_117

def test_case_117():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder()
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.getOrder()
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.getOrder()
        var_4 = b_s_t_2.add(var_3)
        assert len(b_s_t_2) == 1
        node_0 = module_0.Node(var_3)
        assert node_0.value == []
        var_5 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 0
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:3344: AssertionError
   - [# 137] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
-  25:             self.__add(self.root, value)
+  25:             pass
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
--------------------------------------------------------------------------------
[2.81480 s] survived
   - [# 138] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
-  30:                 root.left = Node(value)
+  30:                 pass
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
--------------------------------------------------------------------------------
[2.83819 s] survived
   - [# 139] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
-  33:                 self.__add(root.left, value)
+  33:                 pass
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
--------------------------------------------------------------------------------
[4.96917 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_400

def test_case_400():
        bool_0 = False
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.remove(bool_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.contains(b_s_t_1)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_2.__str__()
        assert var_2 == '[]'
        var_3 = b_s_t_2.__len__()
        assert var_3 == 0
        var_4 = b_s_t_1.contains(var_2)
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_5 = b_s_t_3.isValid()
        node_0 = module_0.Node(b_s_t_3)
        assert len(node_0.value) == 0
        var_6 = b_s_t_3.contains(var_5)
        bool_1 = False
        list_0 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_0)
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_7 = b_s_t_3.remove(var_6)
        bool_2 = False
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_8 = b_s_t_5.remove(bool_2)
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_9 = b_s_t_6.contains(b_s_t_6)
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_10 = b_s_t_7.isValid()
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_11 = b_s_t_8.isValid()
        node_2 = module_0.Node(b_s_t_8)
        assert len(node_2.value) == 0
        var_12 = b_s_t_8.contains(var_11)
        var_13 = b_s_t_8.__str__()
        assert var_13 == '[]'
        str_0 = 'binarySearchTree2'
        none_type_0 = b_s_t_5.build(str_0)
>       assert len(b_s_t_5) == 17
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:15070: AssertionError
   - [# 140] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
-  36:                 root.right = Node(value)
+  36:                 pass
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
--------------------------------------------------------------------------------
[5.18704 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_727

def test_case_727():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.isValid()
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_1 = b_s_t_0.contains(var_0)
        assert var_1 is False
        set_0 = set()
        node_1 = module_0.Node(set_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_0 = b_s_t_1.build(set_0)
        var_2 = b_s_t_1.isValid()
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.isValid()
        node_2 = module_0.Node(b_s_t_2)
        assert len(node_2.value) == 0
        none_type_1 = None
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_4 = b_s_t_3.remove(none_type_1)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        bool_0 = True
        node_4 = module_0.Node(bool_0)
        none_type_3 = None
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_5 = b_s_t_4.remove(none_type_3)
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_6 = var_5.__str__()
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_7 = b_s_t_6.getOrder()
        var_8 = b_s_t_6.add(var_7)
        assert len(b_s_t_6) == 1
        node_5 = module_0.Node(var_8)
        assert node_5.value is None
        none_type_4 = None
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_9 = b_s_t_7.remove(none_type_4)
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_10 = b_s_t_8.getOrder()
        b_s_t_9 = module_0.BST()
        assert len(b_s_t_9) == 0
        none_type_5 = b_s_t_7.build(b_s_t_9)
        node_6 = module_0.Node(b_s_t_9)
        b_s_t_10 = module_0.BST()
        var_11 = b_s_t_10.getOrder()
        list_0 = [var_11, var_11]
        none_type_6 = b_s_t_10.build(list_0)
        assert len(b_s_t_10) == 2
        bool_1 = False
        b_s_t_11 = module_0.BST()
        var_12 = b_s_t_11.remove(bool_1)
        b_s_t_12 = module_0.BST()
        b_s_t_13 = module_0.BST()
        var_13 = b_s_t_13.getOrder()
        b_s_t_14 = module_0.BST()
        var_14 = b_s_t_14.getOrder()
        var_15 = b_s_t_10.__str__()
>       assert var_15 == '[[], []]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:29379: AssertionError
   - [# 141] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
-  39:                 self.__add(root.right, value)
+  39:                 pass
   40:     
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
--------------------------------------------------------------------------------
[4.53138 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [# 142] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
   42:         
-  43:         return self.__contains(self.root, value)
+  43:         pass
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
--------------------------------------------------------------------------------
[4.53807 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_1)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_1 = module_0.Node(list_0)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.contains(b_s_t_0)
>       assert var_1 is False
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:161: AssertionError
   - [# 143] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   43:         return self.__contains(self.root, value)
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
-  47:             return False
+  47:             pass
   48:         elif root.value == value:
   49:             return True
   50:         
   51:         elif value < root.value:
--------------------------------------------------------------------------------
[4.51637 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_1)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_1 = module_0.Node(list_0)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.contains(b_s_t_0)
>       assert var_1 is False
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:161: AssertionError
   - [# 144] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
   48:         elif root.value == value:
-  49:             return True
+  49:             pass
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
--------------------------------------------------------------------------------
[4.77625 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_117

def test_case_117():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder()
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.getOrder()
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.getOrder()
        var_4 = b_s_t_2.add(var_3)
        assert len(b_s_t_2) == 1
        node_0 = module_0.Node(var_3)
        assert node_0.value == []
        var_5 = b_s_t_0.remove(var_0)
>       assert len(b_s_t_0) == 0
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:3344: AssertionError
   - [# 145] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   48:         elif root.value == value:
   49:             return True
   50:         
   51:         elif value < root.value:
-  52:             return self.__contains(root.left, value)
+  52:             pass
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
   56:     def minValueNode(self, node):
--------------------------------------------------------------------------------
[2.94728 s] survived
   - [# 146] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
-  54:             return self.__contains(root.right, value)
+  54:             pass
   55:     
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
--------------------------------------------------------------------------------
[2.96611 s] survived
   - [# 147] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
   56:     def minValueNode(self, node):
-  57:         current = node
+  57:         pass
   58:         
   59:         while current.left is not None:
   60:             current = current.left
   61:         
--------------------------------------------------------------------------------
[4.66521 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_240

def test_case_240():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder()
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        node_2 = module_0.Node(list_1)
        none_type_0 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.remove(none_type_0)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.getOrder()
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        none_type_1 = b_s_t_1.build(b_s_t_3)
        none_type_2 = None
        b_s_t_4 = module_0.BST()
        var_4 = b_s_t_4.getOrder(none_type_2)
        bool_2 = False
        list_2 = [bool_2, bool_2, bool_2, bool_2]
        node_3 = module_0.Node(list_2)
        none_type_3 = None
        node_4 = module_0.Node(none_type_3)
        b_s_t_5 = module_0.BST()
        bool_3 = False
        b_s_t_6 = module_0.BST()
        var_5 = b_s_t_6.remove(bool_3)
        b_s_t_7 = module_0.BST()
        b_s_t_8 = module_0.BST()
        var_6 = b_s_t_8.getOrder()
        var_7 = b_s_t_8.add(var_6)
        assert len(b_s_t_8) == 1
        node_5 = module_0.Node(var_7)
        assert node_5.value is None
        b_s_t_9 = module_0.BST()
        var_8 = b_s_t_9.getOrder()
        var_9 = b_s_t_9.add(var_8)
        assert len(b_s_t_9) == 1
        bool_4 = False
        list_3 = [bool_4, bool_4, bool_4, bool_4]
        node_6 = module_0.Node(list_3)
        b_s_t_10 = module_0.BST()
>       var_10 = b_s_t_8.minValueNode(node_1)

RANDOM/test_binarySearchTree2_RANDOM.py:8200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49b043d0>
node = <binarySearchTree2.Node object at 0x7fae49b06cb0>

>   ???
E   UnboundLocalError: local variable 'current' referenced before assignment

binarySearchTree2:59: UnboundLocalError
   - [# 148] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
-  60:             current = current.left
+  60:             pass
   61:         
   62:         return current
   63:     
   64:     def remove(self, value):
--------------------------------------------------------------------------------
[2.80121 s] survived
   - [# 149] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   58:         
   59:         while current.left is not None:
   60:             current = current.left
   61:         
-  62:         return current
+  62:         pass
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
--------------------------------------------------------------------------------
[4.92450 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_240

def test_case_240():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder()
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        node_2 = module_0.Node(list_1)
        none_type_0 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.remove(none_type_0)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.getOrder()
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        none_type_1 = b_s_t_1.build(b_s_t_3)
        none_type_2 = None
        b_s_t_4 = module_0.BST()
        var_4 = b_s_t_4.getOrder(none_type_2)
        bool_2 = False
        list_2 = [bool_2, bool_2, bool_2, bool_2]
        node_3 = module_0.Node(list_2)
        none_type_3 = None
        node_4 = module_0.Node(none_type_3)
        b_s_t_5 = module_0.BST()
        bool_3 = False
        b_s_t_6 = module_0.BST()
        var_5 = b_s_t_6.remove(bool_3)
        b_s_t_7 = module_0.BST()
        b_s_t_8 = module_0.BST()
        var_6 = b_s_t_8.getOrder()
        var_7 = b_s_t_8.add(var_6)
        assert len(b_s_t_8) == 1
        node_5 = module_0.Node(var_7)
        assert node_5.value is None
        b_s_t_9 = module_0.BST()
        var_8 = b_s_t_9.getOrder()
        var_9 = b_s_t_9.add(var_8)
        assert len(b_s_t_9) == 1
        bool_4 = False
        list_3 = [bool_4, bool_4, bool_4, bool_4]
        node_6 = module_0.Node(list_3)
        b_s_t_10 = module_0.BST()
        var_10 = b_s_t_8.minValueNode(node_1)
>       assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:8201: AssertionError
   - [# 150] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
-  68:                 self.root = None
+  68:                 pass
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
--------------------------------------------------------------------------------
[2.95504 s] survived
   - [# 151] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
-  72:                 self.__remove(self.root, value)
+  72:                 pass
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
--------------------------------------------------------------------------------
[2.69108 s] survived
   - [# 152] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
-  79:             current = node
+  79:             pass
   80:             
   81:             while current.left is not None:
   82:                 current = current.left
   83:             
--------------------------------------------------------------------------------
[2.93113 s] survived
   - [# 153] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   78:         def minValueNode(node):
   79:             current = node
   80:             
   81:             while current.left is not None:
-  82:                 current = current.left
+  82:                 pass
   83:             
   84:             return current
   85:         
   86:         if root is None:
--------------------------------------------------------------------------------
[2.81055 s] survived
   - [# 154] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   80:             
   81:             while current.left is not None:
   82:                 current = current.left
   83:             
-  84:             return current
+  84:             pass
   85:         
   86:         if root is None:
   87:             return root
   88:         
--------------------------------------------------------------------------------
[2.89718 s] survived
   - [# 155] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   83:             
   84:             return current
   85:         
   86:         if root is None:
-  87:             return root
+  87:             pass
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
--------------------------------------------------------------------------------
[2.84111 s] survived
   - [# 156] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   86:         if root is None:
   87:             return root
   88:         
   89:         if value < root.value:
-  90:             root.left = self.__remove(root.left, value)
+  90:             pass
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
   94:         else:
--------------------------------------------------------------------------------
[2.82911 s] survived
   - [# 157] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
-  93:             root.right = self.__remove(root.right, value)
+  93:             pass
   94:         else:
   95:             
   96:             
   97:             if root.left is None:
--------------------------------------------------------------------------------
[2.82641 s] survived
   - [# 158] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   94:         else:
   95:             
   96:             
   97:             if root.left is None:
-  98:                 temp = root.right
+  98:                 pass
   99:                 root = None
  100:                 return temp
  101:             
  102:             elif root.right is None:
--------------------------------------------------------------------------------
[2.86834 s] survived
   - [# 159] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   95:             
   96:             
   97:             if root.left is None:
   98:                 temp = root.right
-  99:                 root = None
+  99:                 pass
  100:                 return temp
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
--------------------------------------------------------------------------------
[2.82765 s] survived
   - [# 160] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   96:             
   97:             if root.left is None:
   98:                 temp = root.right
   99:                 root = None
- 100:                 return temp
+ 100:                 pass
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
  104:                 root = None
--------------------------------------------------------------------------------
[2.89213 s] survived
   - [# 161] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   99:                 root = None
  100:                 return temp
  101:             
  102:             elif root.right is None:
- 103:                 temp = root.left
+ 103:                 pass
  104:                 root = None
  105:                 return temp
  106:             
  107:             temp = minValueNode(root.right)
--------------------------------------------------------------------------------
[2.88288 s] survived
   - [# 162] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  100:                 return temp
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
- 104:                 root = None
+ 104:                 pass
  105:                 return temp
  106:             
  107:             temp = minValueNode(root.right)
  108:             
--------------------------------------------------------------------------------
[2.80421 s] survived
   - [# 163] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
  104:                 root = None
- 105:                 return temp
+ 105:                 pass
  106:             
  107:             temp = minValueNode(root.right)
  108:             
  109:             root.value = temp.value
--------------------------------------------------------------------------------
[2.88452 s] survived
   - [# 164] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  103:                 temp = root.left
  104:                 root = None
  105:                 return temp
  106:             
- 107:             temp = minValueNode(root.right)
+ 107:             pass
  108:             
  109:             root.value = temp.value
  110:             
  111:             root.right = self.__remove(root.right, temp.value)
--------------------------------------------------------------------------------
[2.85019 s] survived
   - [# 165] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  105:                 return temp
  106:             
  107:             temp = minValueNode(root.right)
  108:             
- 109:             root.value = temp.value
+ 109:             pass
  110:             
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
  113:         return root
--------------------------------------------------------------------------------
[2.82348 s] survived
   - [# 166] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  107:             temp = minValueNode(root.right)
  108:             
  109:             root.value = temp.value
  110:             
- 111:             root.right = self.__remove(root.right, temp.value)
+ 111:             pass
  112:         
  113:         return root
  114:     
  115:     def isValid(self):
--------------------------------------------------------------------------------
[2.85223 s] survived
   - [# 167] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  109:             root.value = temp.value
  110:             
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
- 113:         return root
+ 113:         pass
  114:     
  115:     def isValid(self):
  116:         pass
  117:     
--------------------------------------------------------------------------------
[2.90379 s] survived
   - [# 168] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         pass
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[4.51083 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [# 169] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
- 125:             return
+ 125:             pass
  126:         
  127:         mid = (left + right) // 2
  128:         
  129:         if not root:
--------------------------------------------------------------------------------
[4.46488 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
   - [# 170] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
- 127:         mid = (left + right) // 2
+ 127:         pass
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[4.58654 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4ab7f400>
array = [False, False, False, False], root = None, left = 0, right = 3

>   ???
E   NameError: name 'mid' is not defined

binarySearchTree2:131: NameError
   - [# 171] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  127:         mid = (left + right) // 2
  128:         
  129:         if not root:
  130:             
- 131:             root = Node(array[mid])
+ 131:             pass
  132:             self.size += 1
  133:         else:
  134:             
  135:             
--------------------------------------------------------------------------------
[5.17185 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_727

def test_case_727():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.isValid()
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_1 = b_s_t_0.contains(var_0)
        assert var_1 is False
        set_0 = set()
        node_1 = module_0.Node(set_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_0 = b_s_t_1.build(set_0)
        var_2 = b_s_t_1.isValid()
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.isValid()
        node_2 = module_0.Node(b_s_t_2)
        assert len(node_2.value) == 0
        none_type_1 = None
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_4 = b_s_t_3.remove(none_type_1)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        bool_0 = True
        node_4 = module_0.Node(bool_0)
        none_type_3 = None
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_5 = b_s_t_4.remove(none_type_3)
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_6 = var_5.__str__()
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_7 = b_s_t_6.getOrder()
        var_8 = b_s_t_6.add(var_7)
        assert len(b_s_t_6) == 1
        node_5 = module_0.Node(var_8)
        assert node_5.value is None
        none_type_4 = None
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_9 = b_s_t_7.remove(none_type_4)
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_10 = b_s_t_8.getOrder()
        b_s_t_9 = module_0.BST()
        assert len(b_s_t_9) == 0
        none_type_5 = b_s_t_7.build(b_s_t_9)
        node_6 = module_0.Node(b_s_t_9)
        b_s_t_10 = module_0.BST()
        var_11 = b_s_t_10.getOrder()
        list_0 = [var_11, var_11]
        none_type_6 = b_s_t_10.build(list_0)
        assert len(b_s_t_10) == 2
        bool_1 = False
        b_s_t_11 = module_0.BST()
        var_12 = b_s_t_11.remove(bool_1)
        b_s_t_12 = module_0.BST()
        b_s_t_13 = module_0.BST()
        var_13 = b_s_t_13.getOrder()
        b_s_t_14 = module_0.BST()
        var_14 = b_s_t_14.getOrder()
        var_15 = b_s_t_10.__str__()
>       assert var_15 == '[[], []]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:29379: AssertionError
   - [# 172] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  132:             self.size += 1
  133:         else:
  134:             
  135:             
- 136:             self.__add(root, array[mid])
+ 136:             pass
  137:         
  138:         self.__build(array, root, left, mid - 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
--------------------------------------------------------------------------------
[4.47908 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [# 173] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
- 138:         self.__build(array, root, left, mid - 1)
+ 138:         pass
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[4.53291 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [# 174] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
+ 139:         pass
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[4.43949 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = b_s_t_1.build(list_0)
>       assert len(b_s_t_1) == 4
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:237: AssertionError
   - [# 175] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  137:         
  138:         self.__build(array, root, left, mid - 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
- 141:         return root
+ 141:         pass
  142:     
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
--------------------------------------------------------------------------------
[5.24259 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_727

def test_case_727():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.isValid()
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_1 = b_s_t_0.contains(var_0)
        assert var_1 is False
        set_0 = set()
        node_1 = module_0.Node(set_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_0 = b_s_t_1.build(set_0)
        var_2 = b_s_t_1.isValid()
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.isValid()
        node_2 = module_0.Node(b_s_t_2)
        assert len(node_2.value) == 0
        none_type_1 = None
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_4 = b_s_t_3.remove(none_type_1)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        bool_0 = True
        node_4 = module_0.Node(bool_0)
        none_type_3 = None
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_5 = b_s_t_4.remove(none_type_3)
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_6 = var_5.__str__()
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_7 = b_s_t_6.getOrder()
        var_8 = b_s_t_6.add(var_7)
        assert len(b_s_t_6) == 1
        node_5 = module_0.Node(var_8)
        assert node_5.value is None
        none_type_4 = None
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_9 = b_s_t_7.remove(none_type_4)
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_10 = b_s_t_8.getOrder()
        b_s_t_9 = module_0.BST()
        assert len(b_s_t_9) == 0
        none_type_5 = b_s_t_7.build(b_s_t_9)
        node_6 = module_0.Node(b_s_t_9)
        b_s_t_10 = module_0.BST()
        var_11 = b_s_t_10.getOrder()
        list_0 = [var_11, var_11]
        none_type_6 = b_s_t_10.build(list_0)
        assert len(b_s_t_10) == 2
        bool_1 = False
        b_s_t_11 = module_0.BST()
        var_12 = b_s_t_11.remove(bool_1)
        b_s_t_12 = module_0.BST()
        b_s_t_13 = module_0.BST()
        var_13 = b_s_t_13.getOrder()
        b_s_t_14 = module_0.BST()
        var_14 = b_s_t_14.getOrder()
        var_15 = b_s_t_10.__str__()
>       assert var_15 == '[[], []]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:29379: AssertionError
   - [# 176] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  142:     
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
- 146:                 inOrder(root.left)
+ 146:                 pass
  147:                 traversal.append(root.value)
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
--------------------------------------------------------------------------------
[2.81019 s] survived
   - [# 177] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
- 147:                 traversal.append(root.value)
+ 147:                 pass
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
  151:             if root:
--------------------------------------------------------------------------------
[4.64501 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_182

def test_case_182():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.isValid()
        var_1 = b_s_t_0.__len__()
        assert var_1 == 0
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.getOrder()
        var_3 = b_s_t_1.add(var_2)
        assert len(b_s_t_1) == 1
        set_0 = set()
        node_0 = module_0.Node(set_0)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_4 = b_s_t_2.getOrder()
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_5 = b_s_t_3.getOrder()
        var_6 = b_s_t_3.add(var_5)
        assert len(b_s_t_3) == 1
        node_1 = module_0.Node(var_5)
        assert node_1.value == []
        bool_0 = False
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_7 = b_s_t_4.remove(bool_0)
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        bool_1 = False
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_8 = b_s_t_7.remove(bool_1)
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        b_s_t_9 = module_0.BST()
        assert len(b_s_t_9) == 0
        var_9 = b_s_t_9.getOrder()
        b_s_t_10 = module_0.BST()
        assert len(b_s_t_10) == 0
        var_10 = b_s_t_10.getOrder()
        var_11 = b_s_t_3.__str__()
>       assert var_11 == '[[]]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:5658: AssertionError
   - [# 178] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
- 148:                 inOrder(root.right)
+ 148:                 pass
  149:         
  150:         def preOrder(root):
  151:             if root:
  152:                 traversal.append(root.value)
--------------------------------------------------------------------------------
[5.14836 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_727

def test_case_727():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.isValid()
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_1 = b_s_t_0.contains(var_0)
        assert var_1 is False
        set_0 = set()
        node_1 = module_0.Node(set_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_0 = b_s_t_1.build(set_0)
        var_2 = b_s_t_1.isValid()
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.isValid()
        node_2 = module_0.Node(b_s_t_2)
        assert len(node_2.value) == 0
        none_type_1 = None
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_4 = b_s_t_3.remove(none_type_1)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        bool_0 = True
        node_4 = module_0.Node(bool_0)
        none_type_3 = None
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_5 = b_s_t_4.remove(none_type_3)
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_6 = var_5.__str__()
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_7 = b_s_t_6.getOrder()
        var_8 = b_s_t_6.add(var_7)
        assert len(b_s_t_6) == 1
        node_5 = module_0.Node(var_8)
        assert node_5.value is None
        none_type_4 = None
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_9 = b_s_t_7.remove(none_type_4)
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_10 = b_s_t_8.getOrder()
        b_s_t_9 = module_0.BST()
        assert len(b_s_t_9) == 0
        none_type_5 = b_s_t_7.build(b_s_t_9)
        node_6 = module_0.Node(b_s_t_9)
        b_s_t_10 = module_0.BST()
        var_11 = b_s_t_10.getOrder()
        list_0 = [var_11, var_11]
        none_type_6 = b_s_t_10.build(list_0)
        assert len(b_s_t_10) == 2
        bool_1 = False
        b_s_t_11 = module_0.BST()
        var_12 = b_s_t_11.remove(bool_1)
        b_s_t_12 = module_0.BST()
        b_s_t_13 = module_0.BST()
        var_13 = b_s_t_13.getOrder()
        b_s_t_14 = module_0.BST()
        var_14 = b_s_t_14.getOrder()
        var_15 = b_s_t_10.__str__()
>       assert var_15 == '[[], []]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:29379: AssertionError
   - [# 179] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
  151:             if root:
- 152:                 traversal.append(root.value)
+ 152:                 pass
  153:                 preOrder(root.left)
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
--------------------------------------------------------------------------------
[2.84014 s] survived
   - [# 180] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  149:         
  150:         def preOrder(root):
  151:             if root:
  152:                 traversal.append(root.value)
- 153:                 preOrder(root.left)
+ 153:                 pass
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
  157:             if root:
--------------------------------------------------------------------------------
[2.81092 s] survived
   - [# 181] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  150:         def preOrder(root):
  151:             if root:
  152:                 traversal.append(root.value)
  153:                 preOrder(root.left)
- 154:                 preOrder(root.right)
+ 154:                 pass
  155:         
  156:         def postOrder(root):
  157:             if root:
  158:                 preOrder(root.left)
--------------------------------------------------------------------------------
[2.77015 s] survived
   - [# 182] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
  157:             if root:
- 158:                 preOrder(root.left)
+ 158:                 pass
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
--------------------------------------------------------------------------------
[2.78139 s] survived
   - [# 183] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  155:         
  156:         def postOrder(root):
  157:             if root:
  158:                 preOrder(root.left)
- 159:                 preOrder(root.right)
+ 159:                 pass
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
--------------------------------------------------------------------------------
[2.78118 s] survived
   - [# 184] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  156:         def postOrder(root):
  157:             if root:
  158:                 preOrder(root.left)
  159:                 preOrder(root.right)
- 160:                 traversal.append(root.value)
+ 160:                 pass
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
--------------------------------------------------------------------------------
[2.82621 s] survived
   - [# 185] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  158:                 preOrder(root.left)
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
- 162:         traversal = []
+ 162:         pass
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
--------------------------------------------------------------------------------
[4.53812 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
>       var_1 = b_s_t_1.__str__()

RANDOM/test_binarySearchTree2_RANDOM.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4b3fc730>, order = 'inOrder'

>   ???
E   NameError: name 'traversal' is not defined

binarySearchTree2:165: NameError
   - [# 186] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
- 164:             inOrder(self.root)
+ 164:             pass
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
--------------------------------------------------------------------------------
[4.71218 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_182

def test_case_182():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.isValid()
        var_1 = b_s_t_0.__len__()
        assert var_1 == 0
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.getOrder()
        var_3 = b_s_t_1.add(var_2)
        assert len(b_s_t_1) == 1
        set_0 = set()
        node_0 = module_0.Node(set_0)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_4 = b_s_t_2.getOrder()
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_5 = b_s_t_3.getOrder()
        var_6 = b_s_t_3.add(var_5)
        assert len(b_s_t_3) == 1
        node_1 = module_0.Node(var_5)
        assert node_1.value == []
        bool_0 = False
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_7 = b_s_t_4.remove(bool_0)
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        bool_1 = False
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_8 = b_s_t_7.remove(bool_1)
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        b_s_t_9 = module_0.BST()
        assert len(b_s_t_9) == 0
        var_9 = b_s_t_9.getOrder()
        b_s_t_10 = module_0.BST()
        assert len(b_s_t_10) == 0
        var_10 = b_s_t_10.getOrder()
        var_11 = b_s_t_3.__str__()
>       assert var_11 == '[[]]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:5658: AssertionError
   - [# 187] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
- 165:             return traversal
+ 165:             pass
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
--------------------------------------------------------------------------------
[4.44232 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        var_1 = b_s_t_1.__str__()
>       assert var_1 == '[]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:144: AssertionError
   - [# 188] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
- 167:             preOrder(self.root)
+ 167:             pass
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
--------------------------------------------------------------------------------
[2.87671 s] survived
   - [# 189] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
- 168:             return traversal
+ 168:             pass
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
--------------------------------------------------------------------------------
[2.92555 s] survived
   - [# 190] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
- 170:             postOrder(self.root)
+ 170:             pass
  171:             return traversal
  172:     
  173:     def __len__(self):
  174:         return self.size
--------------------------------------------------------------------------------
[2.83996 s] survived
   - [# 191] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
- 171:             return traversal
+ 171:             pass
  172:     
  173:     def __len__(self):
  174:         return self.size
  175:     
--------------------------------------------------------------------------------
[2.81500 s] survived
   - [# 192] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
- 174:         return self.size
+ 174:         pass
  175:     
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
--------------------------------------------------------------------------------
[4.49375 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/RANDOM/test_binarySearchTree2_RANDOM.py:9: TypeError: 'NoneType' object cannot be interpreted as an integer

   - [# 193] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  179:         Returns:
  180:             String: String inorder representaion of BST.
  181:         '''
  182:         
- 183:         return str(self.getOrder())
+ 183:         pass
  184: 
  185: 
  186: if __name__ == '__main__':
  187:     
--------------------------------------------------------------------------------
[4.44067 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        var_1 = b_s_t_1.__str__()
>       assert var_1 == '[]'
E       AssertionError

RANDOM/test_binarySearchTree2_RANDOM.py:144: AssertionError
   - [# 194] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  184: 
  185: 
  186: if __name__ == '__main__':
  187:     
- 188:     tree = BST()
+ 188:     pass
  189:     
  190:     tree.add(3)
  191:     tree.add(2)
  192:     tree.add(4)
--------------------------------------------------------------------------------
[2.94808 s] survived
   - [# 195] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
  189:     
- 190:     tree.add(3)
+ 190:     pass
  191:     tree.add(2)
  192:     tree.add(4)
  193:     
  194:     
--------------------------------------------------------------------------------
[2.92443 s] survived
   - [# 196] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
- 191:     tree.add(2)
+ 191:     pass
  192:     tree.add(4)
  193:     
  194:     
  195:     
--------------------------------------------------------------------------------
[2.85563 s] survived
   - [# 197] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  188:     tree = BST()
  189:     
  190:     tree.add(3)
  191:     tree.add(2)
- 192:     tree.add(4)
+ 192:     pass
  193:     
  194:     
  195:     
  196:     
--------------------------------------------------------------------------------
[2.92529 s] survived
   - [# 198] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  194:     
  195:     
  196:     
  197:     
- 198:     tree2 = BST()
+ 198:     pass
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[2.98555 s] survived
   - [# 199] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
- 199:     tree2.build([1, 2, 3])
+ 199:     pass
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[2.88468 s] survived
   - [# 200] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  196:     
  197:     
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
- 200:     print(tree2, tree2.size)
+ 200:     pass
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[3.02950 s] survived
   - [# 201] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  197:     
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
- 201:     tree2.remove(1)
+ 201:     pass
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
--------------------------------------------------------------------------------
[3.02060 s] survived
   - [# 202] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
- 202:     print(tree2, tree2.size)
+ 202:     pass
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[2.92661 s] survived
   - [# 203] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
- 203:     tree2.remove(3)
+ 203:     pass
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[2.94255 s] survived
   - [# 204] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
- 204:     print(tree2, tree2.size)
+ 204:     pass
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[2.86414 s] survived
   - [# 205] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
- 205:     tree2.remove(2)
+ 205:     pass
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[2.80435 s] survived
   - [# 206] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
- 206:     print(tree2, tree2.size)
+ 206:     pass
--------------------------------------------------------------------------------
[2.91877 s] survived
   - [# 207] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
    5: T = TypeVar('T')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
-   9:         self.value = value
+   9:         value = value
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 208] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
-  10:         self.left = None
+  10:         left = None
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 209] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
   10:         self.left = None
-  11:         self.right = None
+  11:         right = None
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 210] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
-  15:         self.root = None
+  15:         root = None
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 211] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
-  16:         self.size = 0
+  16:         size = 0
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 212] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   15:         self.root = None
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
-  19:         if self.contains(value):
+  19:         if contains(value):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
--------------------------------------------------------------------------------
[4.78703 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
>       var_2 = b_s_t_1.add(b_s_t_2)

RANDOM/test_binarySearchTree2_RANDOM.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49aee470>
value = <binarySearchTree2.BST object at 0x7fae49aed2d0>

>   ???
E   NameError: name 'contains' is not defined

binarySearchTree2:19: NameError
   - [# 213] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
-  21:         elif self.root == None:
+  21:         elif root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
--------------------------------------------------------------------------------
[4.42532 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
>       var_2 = b_s_t_1.add(b_s_t_2)

RANDOM/test_binarySearchTree2_RANDOM.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49c68790>
value = <binarySearchTree2.BST object at 0x7fae49c68d60>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:21: NameError
   - [# 214] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
-  22:             self.root = Node(value)
+  22:             root = Node(value)
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 215] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
-  23:             self.size += 1
+  23:             size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 216] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
-  25:             self.__add(self.root, value)
+  25:             __add(self.root, value)
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
--------------------------------------------------------------------------------
[2.95564 s] survived
   - [# 217] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
-  25:             self.__add(self.root, value)
+  25:             self.__add(root, value)
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
--------------------------------------------------------------------------------
[2.78617 s] survived
   - [# 218] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
-  31:                 self.size += 1
+  31:                 size += 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 219] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
-  33:                 self.__add(root.left, value)
+  33:                 __add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
--------------------------------------------------------------------------------
[4.88307 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_400

def test_case_400():
        bool_0 = False
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.remove(bool_0)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.contains(b_s_t_1)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_2 = b_s_t_2.__str__()
        assert var_2 == '[]'
        var_3 = b_s_t_2.__len__()
        assert var_3 == 0
        var_4 = b_s_t_1.contains(var_2)
        b_s_t_3 = module_0.BST()
        assert len(b_s_t_3) == 0
        var_5 = b_s_t_3.isValid()
        node_0 = module_0.Node(b_s_t_3)
        assert len(node_0.value) == 0
        var_6 = b_s_t_3.contains(var_5)
        bool_1 = False
        list_0 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_0)
        b_s_t_4 = module_0.BST()
        assert len(b_s_t_4) == 0
        var_7 = b_s_t_3.remove(var_6)
        bool_2 = False
        b_s_t_5 = module_0.BST()
        assert len(b_s_t_5) == 0
        var_8 = b_s_t_5.remove(bool_2)
        b_s_t_6 = module_0.BST()
        assert len(b_s_t_6) == 0
        var_9 = b_s_t_6.contains(b_s_t_6)
        b_s_t_7 = module_0.BST()
        assert len(b_s_t_7) == 0
        var_10 = b_s_t_7.isValid()
        b_s_t_8 = module_0.BST()
        assert len(b_s_t_8) == 0
        var_11 = b_s_t_8.isValid()
        node_2 = module_0.Node(b_s_t_8)
        assert len(node_2.value) == 0
        var_12 = b_s_t_8.contains(var_11)
        var_13 = b_s_t_8.__str__()
        assert var_13 == '[]'
        str_0 = 'binarySearchTree2'
>       none_type_0 = b_s_t_5.build(str_0)

RANDOM/test_binarySearchTree2_RANDOM.py:15069: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:39: in __add
    ???
binarySearchTree2:39: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4aaf9240>
root = <binarySearchTree2.Node object at 0x7fae4aaf9180>, value = 'e'

>   ???
E   NameError: name '_BST__add' is not defined

binarySearchTree2:33: NameError
   - [# 220] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
-  37:                 self.size += 1
+  37:                 size += 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 221] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
-  39:                 self.__add(root.right, value)
+  39:                 __add(root.right, value)
   40:     
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
--------------------------------------------------------------------------------
[4.56610 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49bcadd0>
root = <binarySearchTree2.Node object at 0x7fae49bcab90>, value = False

>   ???
E   NameError: name '_BST__add' is not defined

binarySearchTree2:39: NameError
   - [# 222] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
   42:         
-  43:         return self.__contains(self.root, value)
+  43:         return __contains(self.root, value)
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
--------------------------------------------------------------------------------
[4.49072 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
>       var_2 = b_s_t_1.add(b_s_t_2)

RANDOM/test_binarySearchTree2_RANDOM.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae46786050>
value = <binarySearchTree2.BST object at 0x7fae46785030>

>   ???
E   NameError: name '_BST__contains' is not defined

binarySearchTree2:43: NameError
   - [# 223] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
   42:         
-  43:         return self.__contains(self.root, value)
+  43:         return self.__contains(root, value)
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
--------------------------------------------------------------------------------
[4.55426 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_1 = b_s_t_1.getOrder(none_type_2)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_2 = module_0.Node(list_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
>       var_2 = b_s_t_1.add(b_s_t_2)

RANDOM/test_binarySearchTree2_RANDOM.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49b66470>
value = <binarySearchTree2.BST object at 0x7fae49b65a20>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:43: NameError
   - [# 224] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   48:         elif root.value == value:
   49:             return True
   50:         
   51:         elif value < root.value:
-  52:             return self.__contains(root.left, value)
+  52:             return __contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
   56:     def minValueNode(self, node):
--------------------------------------------------------------------------------
[2.81084 s] survived
   - [# 225] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
-  54:             return self.__contains(root.right, value)
+  54:             return __contains(root.right, value)
   55:     
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
--------------------------------------------------------------------------------
[2.80846 s] survived
   - [# 226] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   62:         return current
   63:     
   64:     def remove(self, value):
   65:         
-  66:         if self.contains(value):
+  66:         if contains(value):
   67:             if self.size == 1:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
--------------------------------------------------------------------------------
[4.61651 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_19

def test_case_19():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
>       var_1 = b_s_t_2.remove(node_0)

RANDOM/test_binarySearchTree2_RANDOM.py:348: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4679e410>
value = <binarySearchTree2.Node object at 0x7fae4679e2c0>

>   ???
E   NameError: name 'contains' is not defined

binarySearchTree2:66: NameError
   - [# 227] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
-  67:             if self.size == 1:
+  67:             if size == 1:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[4.67352 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_117

def test_case_117():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder()
        var_1 = b_s_t_0.add(var_0)
        assert len(b_s_t_0) == 1
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_2 = b_s_t_1.getOrder()
        b_s_t_2 = module_0.BST()
        assert len(b_s_t_2) == 0
        var_3 = b_s_t_2.getOrder()
        var_4 = b_s_t_2.add(var_3)
        assert len(b_s_t_2) == 1
        node_0 = module_0.Node(var_3)
        assert node_0.value == []
>       var_5 = b_s_t_0.remove(var_0)

RANDOM/test_binarySearchTree2_RANDOM.py:3343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae49c6b0d0>, value = []

>   ???
E   NameError: name 'size' is not defined

binarySearchTree2:67: NameError
   - [# 228] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
-  68:                 self.root = None
+  68:                 root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 229] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
   68:                 self.root = None
-  69:                 self.size -= 1
+  69:                 size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
   73:                 self.size -= 1
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 230] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
-  72:                 self.__remove(self.root, value)
+  72:                 __remove(self.root, value)
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
--------------------------------------------------------------------------------
[2.78891 s] survived
   - [# 231] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
-  72:                 self.__remove(self.root, value)
+  72:                 self.__remove(root, value)
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
--------------------------------------------------------------------------------
[2.82307 s] survived
   - [# 232] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
-  73:                 self.size -= 1
+  73:                 size -= 1
   74:         else:
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 233] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   86:         if root is None:
   87:             return root
   88:         
   89:         if value < root.value:
-  90:             root.left = self.__remove(root.left, value)
+  90:             root.left = __remove(root.left, value)
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
   94:         else:
--------------------------------------------------------------------------------
[2.83262 s] survived
   - [# 234] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
-  93:             root.right = self.__remove(root.right, value)
+  93:             root.right = __remove(root.right, value)
   94:         else:
   95:             
   96:             
   97:             if root.left is None:
--------------------------------------------------------------------------------
[2.82264 s] survived
   - [# 235] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  107:             temp = minValueNode(root.right)
  108:             
  109:             root.value = temp.value
  110:             
- 111:             root.right = self.__remove(root.right, temp.value)
+ 111:             root.right = __remove(root.right, temp.value)
  112:         
  113:         return root
  114:     
  115:     def isValid(self):
--------------------------------------------------------------------------------
[2.85164 s] survived
   - [# 236] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         root = self.__build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 237] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         self.root = __build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[4.51801 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4ac8aad0>
array = [False, False, False, False]

>   ???
E   NameError: name '_BST__build' is not defined

binarySearchTree2:120: NameError
   - [# 238] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
- 132:             self.size += 1
+ 132:             size += 1
  133:         else:
  134:             
  135:             
  136:             self.__add(root, array[mid])
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 239] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  132:             self.size += 1
  133:         else:
  134:             
  135:             
- 136:             self.__add(root, array[mid])
+ 136:             __add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
--------------------------------------------------------------------------------
[4.53115 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4b35c700>
array = [False, False, False, False]
root = <binarySearchTree2.Node object at 0x7fae4b35d5a0>, left = 0, right = 0

>   ???
E   NameError: name '_BST__add' is not defined

binarySearchTree2:136: NameError
   - [# 240] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
- 138:         self.__build(array, root, left, mid - 1)
+ 138:         __build(array, root, left, mid - 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[4.51529 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4b3fdd20>
array = [False, False, False, False]
root = <binarySearchTree2.Node object at 0x7fae4b3fe9e0>, left = 0, right = 3

>   ???
E   NameError: name '_BST__build' is not defined

binarySearchTree2:138: NameError
   - [# 241] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
+ 139:         __build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[4.53627 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_13

def test_case_13():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
>       none_type_3 = b_s_t_1.build(list_0)

RANDOM/test_binarySearchTree2_RANDOM.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae467859c0>
array = [False, False, False, False]
root = <binarySearchTree2.Node object at 0x7fae467845b0>, left = 0, right = 0

>   ???
E   NameError: name '_BST__build' is not defined

binarySearchTree2:139: NameError
   - [# 242] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
- 164:             inOrder(self.root)
+ 164:             inOrder(root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
--------------------------------------------------------------------------------
[4.56956 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
>       var_1 = b_s_t_1.__str__()

RANDOM/test_binarySearchTree2_RANDOM.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:183: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4ac93130>, order = 'inOrder'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:164: NameError
   - [# 243] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
- 167:             preOrder(self.root)
+ 167:             preOrder(root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
--------------------------------------------------------------------------------
[2.88389 s] survived
   - [# 244] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
- 170:             postOrder(self.root)
+ 170:             postOrder(root)
  171:             return traversal
  172:     
  173:     def __len__(self):
  174:         return self.size
--------------------------------------------------------------------------------
[2.77725 s] survived
   - [# 245] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
- 174:         return self.size
+ 174:         return size
  175:     
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
--------------------------------------------------------------------------------
[4.44553 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0

RANDOM/test_binarySearchTree2_RANDOM.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4ac88f10>

>   ???
E   NameError: name 'size' is not defined

binarySearchTree2:174: NameError
   - [# 246] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  179:         Returns:
  180:             String: String inorder representaion of BST.
  181:         '''
  182:         
- 183:         return str(self.getOrder())
+ 183:         return str(getOrder())
  184: 
  185: 
  186: if __name__ == '__main__':
  187:     
--------------------------------------------------------------------------------
[4.54482 s] killed by RANDOM/test_binarySearchTree2_RANDOM.py::test_case_8

def test_case_8():
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        node_0 = module_0.Node(list_0)
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.getOrder(none_type_0)
        bool_1 = False
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        node_1 = module_0.Node(list_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
>       var_1 = b_s_t_1.__str__()

RANDOM/test_binarySearchTree2_RANDOM.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7fae4ac0a740>

>   ???
E   NameError: name 'getOrder' is not defined

binarySearchTree2:183: NameError
   - [# 247] ZIL binarySearchTree2: 
--------------------------------------------------------------------------------
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
-  60:             current = current.left
+  60:             break
   61:         
   62:         return current
   63:     
   64:     def remove(self, value):
--------------------------------------------------------------------------------
[2.80231 s] survived
   - [# 248] ZIL binarySearchTree2: 
--------------------------------------------------------------------------------
   78:         def minValueNode(node):
   79:             current = node
   80:             
   81:             while current.left is not None:
-  82:                 current = current.left
+  82:                 break
   83:             
   84:             return current
   85:         
   86:         if root is None:
--------------------------------------------------------------------------------
[2.77265 s] survived
[*] Mutation score [936.69417 s]: 49.1%
   - all: 248
   - killed: 105 (42.3%)
   - survived: 109 (44.0%)
   - incompetent: 34 (13.7%)
   - timeout: 0 (0.0%)
