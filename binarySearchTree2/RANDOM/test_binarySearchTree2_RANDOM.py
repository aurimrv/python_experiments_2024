#Pyguin test cases converted from /home/auri/temp/lucca/python_experiments/binarySearchTree2/RANDOM/test_binarySearchTree2.py
import pytest
import binarySearchTree2 as module_0
import builtins as module_1

def test_case_0():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)

def test_case_1():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)

def test_case_2():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)

def test_case_3():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_4():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_1.add(b_s_t_2)
    assert len(b_s_t_1) == 1

def test_case_5():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_6():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_7():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_8():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'

def test_case_9():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_0)
    assert var_1 is False

def test_case_10():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.getOrder(var_0)

def test_case_11():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    int_0 = 152
    node_3 = module_0.Node(int_0)

def test_case_12():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_3)
    var_2 = b_s_t_1.add(none_type_3)
    assert len(b_s_t_1) == 1

def test_case_13():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = b_s_t_1.build(list_0)
    assert len(b_s_t_1) == 4

def test_case_14():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()

def test_case_15():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    var_2 = var_1.__str__()

def test_case_16():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    node_3 = module_0.Node(none_type_1)

def test_case_17():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_4 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    var_3 = b_s_t_3.isValid()
    var_4 = var_1.__str__()
    assert var_4 == 'None'

def test_case_18():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0

def test_case_19():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(node_0)

def test_case_20():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_2.getOrder()

def test_case_21():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.getOrder()

def test_case_22():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_3 = b_s_t_0.__str__()
    assert var_3 == '[]'

def test_case_23():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    none_type_4 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_4 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1

def test_case_24():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_4 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    var_3 = b_s_t_3.isValid()
    node_6 = module_0.Node(none_type_2)

def test_case_25():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_2 = b_s_t_2.isValid()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_4 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    node_6 = module_0.Node(none_type_5)

def test_case_26():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_2 = b_s_t_1.isValid()
    none_type_4 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_1.isValid()

def test_case_27():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_2 = b_s_t_1.isValid()
    none_type_4 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_28():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_29():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    none_type_5 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_5)
    node_6 = module_0.Node(node_4)

def test_case_30():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.add(none_type_3)
    assert len(b_s_t_2) == 1

def test_case_31():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_3 = b_s_t_4.isValid()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    none_type_6 = b_s_t_1.build(list_1)
    assert len(b_s_t_1) == 4

def test_case_32():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_3 = b_s_t_1.isValid()

def test_case_33():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = b_s_t_1.isValid()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0

def test_case_34():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_2 = b_s_t_0.remove(var_1)

def test_case_35():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_2 = module_0.Node(node_0)

def test_case_36():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(node_2)
    assert var_1 is False
    var_2 = var_1.__str__()

def test_case_37():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0

def test_case_38():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_1 = b_s_t_0.isValid()
    none_type_3 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_4)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_6 = module_0.Node(node_0)

def test_case_39():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)

def test_case_40():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_41():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_1 = b_s_t_0.isValid()
    none_type_3 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_3)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_4 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_4)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_42():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_1.isValid()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_4 = module_0.Node(none_type_0)

def test_case_43():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_2 = b_s_t_1.isValid()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_44():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    var_2 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1

def test_case_45():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_46():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    var_4 = b_s_t_5.isValid()
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_3)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'

def test_case_47():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_48():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_4)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    var_3 = b_s_t_3.isValid()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_3)
    bool_4 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_1.add(b_s_t_1)
    assert len(b_s_t_1) == 1

def test_case_49():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_2 = b_s_t_2.isValid()
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_2)
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_3.remove(node_2)

def test_case_50():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_2 = b_s_t_2.isValid()
    none_type_4 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_4)
    node_4 = module_0.Node(var_1)
    assert node_4.value is None

def test_case_51():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_3 = b_s_t_6.remove(bool_3)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_5 = b_s_t_7.isValid()
    var_6 = b_s_t_6.add(b_s_t_4)
    assert len(b_s_t_6) == 1

def test_case_52():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()

def test_case_53():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_1.isValid()

def test_case_54():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_1)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_4)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    var_5 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_55():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_56():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.contains(none_type_1)

def test_case_57():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_58():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)

def test_case_59():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.getOrder(var_1)

def test_case_60():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_4 = b_s_t_5.isValid()
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.remove(none_type_4)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    none_type_6 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder(none_type_6)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_61():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_3 = b_s_t_4.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder(none_type_4)
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder(none_type_5)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_5 = False
    var_8 = b_s_t_1.remove(bool_5)

def test_case_62():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_63():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_2)
    none_type_5 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_5)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    none_type_6 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder(none_type_6)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_64():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_3)
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_3)
    node_5 = module_0.Node(var_1)
    assert node_5.value == '[]'

def test_case_65():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_0.remove(none_type_1)

def test_case_66():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.add(node_1)
    assert len(b_s_t_1) == 1

def test_case_67():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(none_type_5)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_3)
    var_6 = b_s_t_8.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_3.contains(node_6)

def test_case_68():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder(none_type_4)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_3)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_0.getOrder(none_type_1)

def test_case_69():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_5 = var_4.__str__()
    assert var_5 == 'None'

def test_case_70():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_1)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_2)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_0.remove(b_s_t_3)

def test_case_71():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_72():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_1.remove(list_0)

def test_case_73():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder(none_type_1)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_1 = module_0.Node(list_1)
    var_6 = b_s_t_7.getOrder(var_1)

def test_case_74():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_5 = b_s_t_0.__len__()
    assert var_5 == 0

def test_case_75():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()

def test_case_76():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    node_3 = module_0.Node(var_1)
    assert node_3.value is None

def test_case_77():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_2)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'

def test_case_78():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    var_5 = b_s_t_1.__str__()
    assert var_5 == '[]'

def test_case_79():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_3 = b_s_t_3.isValid()
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_5 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_5)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_80():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    var_5 = b_s_t_5.isValid()
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    none_type_6 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.remove(none_type_6)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_8.remove(none_type_4)

def test_case_81():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder(none_type_4)
    bool_4 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.remove(bool_4)
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.remove(none_type_5)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    var_9 = b_s_t_6.remove(node_3)

def test_case_82():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.remove(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0

def test_case_83():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_3 = b_s_t_2.isValid()
    none_type_4 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_4)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    none_type_6 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder(none_type_6)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_84():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_2)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_3)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_3.add(b_s_t_0)
    assert len(b_s_t_3) == 1

def test_case_85():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_5 = b_s_t_5.isValid()
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_3)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder(none_type_4)
    var_7 = b_s_t_5.__len__()
    assert var_7 == 0

def test_case_86():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1

def test_case_87():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_4)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    bool_4 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.remove(bool_4)
    var_8 = b_s_t_1.getOrder(bool_0)

def test_case_88():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_89():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_3 = b_s_t_1.getOrder()

def test_case_90():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_2)
    var_6 = b_s_t_4.getOrder()

def test_case_91():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.remove(bool_3)
    var_5 = var_1.__str__()
    assert var_5 == 'None'

def test_case_92():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    var_5 = b_s_t_6.add(var_4)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'

def test_case_93():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.contains(none_type_2)

def test_case_94():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []

def test_case_95():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'

def test_case_96():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    dict_0 = {b_s_t_1: var_2, none_type_0: none_type_0, var_1: b_s_t_1}
    node_1 = module_0.Node(dict_0)
    assert len(node_1.value) == 2

def test_case_97():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_4)
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(bool_4)
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_5.remove(none_type_3)

def test_case_98():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value == []
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_2)
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_3)
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_5.isValid()

def test_case_99():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    bool_3 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_3 = module_0.Node(node_1)

def test_case_100():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'

def test_case_101():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_5.add(var_3)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.getOrder()
    var_7 = b_s_t_8.add(var_6)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    var_10 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.__len__()
    assert var_11 == 0

def test_case_102():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)

def test_case_103():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    var_6 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_104():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_6 = b_s_t_4.isValid()
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_3)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder(none_type_4)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    none_type_6 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_6)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_7 = b_s_t_8.build(b_s_t_10)
    node_7 = module_0.Node(none_type_1)

def test_case_105():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(none_type_2)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(bool_0)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder(none_type_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    b_s_t_6 = module_0.BST()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0

def test_case_106():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_2)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_1)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    var_9 = b_s_t_7.isValid()
    none_type_5 = b_s_t_1.build(var_0)

def test_case_107():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()

def test_case_108():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_3 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_3)
    bool_4 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_4)
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_4)
    var_6 = b_s_t_4.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_3)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_5)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    var_12 = b_s_t_10.add(var_11)
    assert len(b_s_t_10) == 1
    node_6 = module_0.Node(var_11)
    assert node_6.value == []
    var_13 = b_s_t_3.__len__()
    assert var_13 == 0

def test_case_109():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    bool_1 = False
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.remove(none_type_2)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.remove(bool_2)
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    bool_3 = False
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.remove(bool_3)
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder(none_type_3)
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_1.__str__()
    assert var_12 == '[]'

def test_case_110():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)

def test_case_111():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()

def test_case_112():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'

def test_case_113():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_114():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_4 = b_s_t_6.__str__()
    assert var_4 == '[]'
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    var_7 = b_s_t_8.add(var_6)
    assert len(b_s_t_8) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value == []
    b_s_t_9 = module_0.BST()
    bool_2 = False
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.remove(bool_2)
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder(none_type_3)
    var_10 = b_s_t_10.getOrder()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.getOrder()
    var_12 = b_s_t_3.isValid()

def test_case_115():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_1)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_7 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_116():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    bool_2 = False
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(bool_2)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder(none_type_5)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    b_s_t_8 = module_0.BST()
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder()
    var_9 = b_s_t_9.add(var_8)
    assert len(b_s_t_9) == 1
    node_5 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()

def test_case_117():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value == []
    var_5 = b_s_t_0.remove(var_0)
    assert len(b_s_t_0) == 0

def test_case_118():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_119():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_2 = b_s_t_4.remove(bool_0)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder(none_type_2)
    var_4 = b_s_t_4.getOrder()
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder(none_type_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    b_s_t_7 = module_0.BST()
    bool_2 = False
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.remove(bool_2)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.remove(none_type_5)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.getOrder()
    var_9 = b_s_t_10.add(var_8)
    assert len(b_s_t_10) == 1
    node_4 = module_0.Node(list_2)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    var_11 = b_s_t_3.remove(none_type_2)

def test_case_120():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    var_2 = b_s_t_0.contains(b_s_t_0)
    assert var_2 is False

def test_case_121():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'

def test_case_122():
    set_0 = set()
    node_0 = module_0.Node(set_0)

def test_case_123():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()

def test_case_124():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_1.isValid()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_3 = module_0.Node(list_2)
    var_4 = var_0.__str__()
    assert var_4 == '[]'

def test_case_125():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_6 = b_s_t_6.isValid()
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = b_s_t_7.build(b_s_t_9)
    var_9 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1

def test_case_126():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_7.add(var_6)
    assert len(b_s_t_7) == 1
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_9.add(var_9)
    assert len(b_s_t_9) == 1
    node_4 = module_0.Node(var_9)
    assert node_4.value == []
    var_11 = b_s_t_6.__str__()
    assert var_11 == '[]'

def test_case_127():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_5 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.getOrder()
    var_7 = b_s_t_1.getOrder()

def test_case_128():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_129():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_0)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0

def test_case_130():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0

def test_case_131():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'

def test_case_132():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_2)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = b_s_t_6.build(b_s_t_8)
    b_s_t_9 = module_0.BST()

def test_case_133():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_4.build(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.remove(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    var_7 = b_s_t_10.getOrder(none_type_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    var_8 = b_s_t_10.isValid()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder()
    var_10 = b_s_t_11.add(var_9)
    assert len(b_s_t_11) == 1
    node_4 = module_0.Node(list_2)
    var_11 = b_s_t_0.__len__()
    assert var_11 == 0

def test_case_134():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    var_3 = b_s_t_1.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_4)
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_3)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder(none_type_5)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_2)
    var_11 = var_0.__str__()

def test_case_135():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.remove(bool_2)
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder(none_type_1)
    var_6 = b_s_t_6.getOrder()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder(none_type_2)
    var_8 = b_s_t_1.add(b_s_t_4)
    assert len(b_s_t_1) == 1

def test_case_136():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)

def test_case_137():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_0.contains(none_type_0)
    assert var_3 is False

def test_case_138():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.isValid()
    node_1 = module_0.Node(b_s_t_11)
    assert len(node_1.value) == 0
    none_type_0 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_11 = b_s_t_13.remove(none_type_1)
    bool_4 = False
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_12 = b_s_t_14.remove(bool_4)
    var_13 = b_s_t_14.__str__()
    assert var_13 == '[]'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_14 = b_s_t_4.__str__()
    assert var_14 == '[]'

def test_case_139():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_4.getOrder(b_s_t_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    node_0 = module_0.Node(var_7)
    assert node_0.value == []
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_10.add(var_10)
    assert len(b_s_t_10) == 1
    node_1 = module_0.Node(b_s_t_6)
    assert len(node_1.value) == 0

def test_case_140():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_2)
    node_2 = module_0.Node(var_2)
    assert node_2.value is None

def test_case_141():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = b_s_t_3.isValid()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    var_6 = b_s_t_6.getOrder(b_s_t_5)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    var_9 = b_s_t_9.add(var_8)
    assert len(b_s_t_9) == 1
    node_3 = module_0.Node(var_8)
    assert node_3.value == []
    var_10 = b_s_t_0.contains(var_9)

def test_case_142():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value == []
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_2)
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_2)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    node_3 = module_0.Node(node_0)

def test_case_143():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    var_4 = b_s_t_2.getOrder()
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_7.add(var_6)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(none_type_4)
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(bool_3)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    bool_4 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.remove(bool_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_13.getOrder()
    bool_5 = False
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_14 = b_s_t_14.remove(bool_5)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0

def test_case_144():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_3 = module_0.Node(list_2)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder(none_type_0)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_3)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    set_0 = set()
    node_6 = module_0.Node(set_0)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_6.build(b_s_t_8)
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.remove(none_type_4)
    bool_5 = False
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.remove(bool_5)
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.isValid()
    node_7 = module_0.Node(b_s_t_11)
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.isValid()
    var_14 = b_s_t_2.remove(node_4)

def test_case_145():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0

def test_case_146():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_2 = module_0.Node(var_2)
    assert node_2.value == []

def test_case_147():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()

def test_case_148():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_1.isValid()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_2)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_4 = b_s_t_3.build(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.isValid()
    var_6 = b_s_t_6.__len__()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder(none_type_5)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    b_s_t_8 = module_0.BST()
    bool_3 = False
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.getOrder()
    var_11 = b_s_t_12.isValid()

def test_case_149():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_4 = b_s_t_2.isValid()
    var_5 = b_s_t_2.isValid()

def test_case_150():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_9.getOrder(b_s_t_8)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_12 = b_s_t_9.add(var_3)
    assert len(b_s_t_9) == 1

def test_case_151():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_0)
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_5.isValid()

def test_case_152():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_2)
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder(none_type_1)
    var_8 = b_s_t_6.getOrder()
    var_9 = var_7.__str__()
    assert var_9 == 'None'

def test_case_153():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_154():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_155():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = b_s_t_1.isValid()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_2)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = var_0.__str__()
    assert var_10 == '[]'

def test_case_156():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = var_1.__str__()
    assert var_3 == 'None'

def test_case_157():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    var_2 = var_0.__str__()
    assert var_2 == 'None'

def test_case_158():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.isValid()
    var_6 = b_s_t_7.__len__()
    assert var_6 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0

def test_case_159():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_5.getOrder(b_s_t_4)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_1)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(bool_2)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_9.add(var_11)
    assert len(b_s_t_9) == 1
    var_13 = b_s_t_0.remove(var_10)

def test_case_160():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    var_5 = b_s_t_2.contains(var_1)
    assert var_5 is True

def test_case_161():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_1 = module_0.Node(list_1)
    var_5 = b_s_t_5.isValid()
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder(none_type_0)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_2)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.isValid()
    node_4 = module_0.Node(b_s_t_9)
    assert len(node_4.value) == 0
    var_9 = b_s_t_1.isValid()

def test_case_162():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_1)
    var_2 = b_s_t_1.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(list_0)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    var_9 = b_s_t_8.add(var_8)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.getOrder()
    var_14 = b_s_t_12.add(var_13)
    assert len(b_s_t_12) == 1
    node_4 = module_0.Node(var_13)
    assert node_4.value == []
    var_15 = b_s_t_3.getOrder()

def test_case_163():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_2 = module_0.Node(b_s_t_1)
    assert len(node_2.value) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0

def test_case_164():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_0)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(list_0)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    bool_4 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_8.getOrder(b_s_t_7)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.isValid()
    var_12 = b_s_t_7.remove(b_s_t_8)

def test_case_165():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(bool_2)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder(none_type_3)
    var_8 = b_s_t_7.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.isValid()
    node_2 = module_0.Node(b_s_t_9)
    assert len(node_2.value) == 0
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_12 = b_s_t_13.getOrder()
    var_13 = b_s_t_12.getOrder(b_s_t_11)
    var_14 = b_s_t_11.isValid()

def test_case_166():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = b_s_t_1.build(var_2)

def test_case_167():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(var_6)
    assert node_3.value == []
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_8.getOrder(b_s_t_7)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_14.getOrder()
    var_16 = b_s_t_14.add(var_15)
    assert len(b_s_t_14) == 1
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0

def test_case_168():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    none_type_1 = b_s_t_3.build(b_s_t_1)

def test_case_169():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(list_1)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()
    node_5 = module_0.Node(b_s_t_9)
    assert len(node_5.value) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_7 = module_0.Node(list_3)
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    bool_6 = False
    list_4 = [bool_6, bool_6, bool_6, bool_6]
    node_8 = module_0.Node(list_4)
    var_12 = b_s_t_10.isValid()
    int_0 = -2178
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.contains(int_0)

def test_case_170():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_3)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    bool_4 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_6.getOrder(b_s_t_5)
    none_type_0 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(none_type_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_1 = b_s_t_8.build(b_s_t_10)
    var_12 = b_s_t_7.__str__()
    assert var_12 == '[]'

def test_case_171():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    node_1 = module_0.Node(var_1)
    assert node_1.value == []

def test_case_172():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_6 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_173():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(none_type_2)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(bool_0)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder(none_type_3)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    var_6 = b_s_t_5.isValid()
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    var_7 = b_s_t_0.isValid()

def test_case_174():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_3.getOrder(b_s_t_2)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(var_8)
    assert node_3.value == []
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_4 = b_s_t_8.build(b_s_t_10)
    none_type_5 = None
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.remove(none_type_5)
    bool_3 = False
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.remove(bool_3)
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.isValid()
    none_type_6 = None
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder(none_type_6)
    b_s_t_15 = module_0.BST()
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_1)
    var_17 = b_s_t_15.__str__()
    assert var_17 == '[]'
    var_18 = b_s_t_10.contains(var_10)

def test_case_175():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()

def test_case_176():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    var_5 = b_s_t_2.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(list_0)
    none_type_1 = b_s_t_1.build(var_0)

def test_case_177():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_2)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    var_4 = b_s_t_3.add(none_type_0)
    assert len(b_s_t_3) == 1

def test_case_178():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_5.build(b_s_t_7)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.isValid()
    var_9 = b_s_t_10.__len__()
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.getOrder()
    var_12 = b_s_t_12.add(var_11)
    assert len(b_s_t_12) == 1
    node_3 = module_0.Node(var_11)
    assert node_3.value == []
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    var_13 = b_s_t_14.isValid()
    node_5 = module_0.Node(b_s_t_14)
    node_6 = module_0.Node(var_13)

def test_case_179():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1

def test_case_180():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    node_2 = module_0.Node(list_0)

def test_case_181():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_2 = b_s_t_2.isValid()
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    list_1 = [node_3]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.add(list_1)
    assert len(b_s_t_3) == 1
    var_4 = b_s_t_0.isValid()

def test_case_182():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    var_6 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_5)
    assert node_1.value == []
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_3.__str__()
    assert var_11 == '[[]]'

def test_case_183():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_5 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    var_7 = b_s_t_3.add(var_6)
    assert len(b_s_t_3) == 1
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    var_10 = b_s_t_6.add(var_9)
    assert len(b_s_t_6) == 1
    node_5 = module_0.Node(var_9)
    assert node_5.value == []
    node_6 = module_0.Node(var_1)
    assert node_6.value == []

def test_case_184():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []
    var_5 = b_s_t_2.isValid()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    var_8 = b_s_t_5.isValid()
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(none_type_4)
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_3)
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder()
    var_13 = b_s_t_5.contains(b_s_t_5)

def test_case_185():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0

def test_case_186():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    node_2 = module_0.Node(none_type_0)

def test_case_187():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    var_3 = b_s_t_1.getOrder()
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_2.build(var_0)
    assert len(b_s_t_2) == 2

def test_case_188():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    list_0 = [node_0]
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.add(list_0)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder(none_type_3)
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.isValid()
    node_1 = module_0.Node(b_s_t_6)
    bool_0 = False
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.remove(bool_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.isValid()
    node_3 = module_0.Node(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder()
    var_8 = b_s_t_9.add(var_7)
    assert len(b_s_t_9) == 1
    set_0 = set()
    node_4 = module_0.Node(set_0)
    var_9 = b_s_t_8.getOrder(b_s_t_2)

def test_case_189():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    bool_3 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_3)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_2)
    var_6 = b_s_t_3.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_6.add(var_8)
    assert len(b_s_t_6) == 1
    node_4 = module_0.Node(var_8)
    assert node_4.value == []
    var_10 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    var_12 = b_s_t_4.__str__()
    assert var_12 == '[]'

def test_case_190():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()

def test_case_191():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.isValid()
    node_2 = module_0.Node(b_s_t_8)
    assert len(node_2.value) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    var_10 = b_s_t_10.add(var_9)
    assert len(b_s_t_10) == 1
    node_3 = module_0.Node(var_9)
    assert node_3.value == []
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_11 = b_s_t_10.isValid()

def test_case_192():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)

def test_case_193():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(list_0)

def test_case_194():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(none_type_3)
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.remove(bool_3)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.getOrder()
    var_10 = b_s_t_6.contains(b_s_t_3)

def test_case_195():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    var_6 = b_s_t_3.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder(none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_9 = b_s_t_6.isValid()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    var_11 = b_s_t_7.add(var_10)
    assert len(b_s_t_7) == 1
    node_7 = module_0.Node(list_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.isValid()
    node_8 = module_0.Node(b_s_t_9)
    assert len(node_8.value) == 0
    var_14 = b_s_t_6.contains(b_s_t_9)

def test_case_196():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    set_0 = set()
    node_3 = module_0.Node(set_0)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    var_4 = b_s_t_4.isValid()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_7 = module_0.Node(list_2)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    var_9 = b_s_t_6.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_9.add(var_11)
    assert len(b_s_t_9) == 1
    node_9 = module_0.Node(var_11)
    assert node_9.value == []
    var_13 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_5 = False
    list_4 = [bool_5, bool_5, bool_5, bool_5]
    node_10 = module_0.Node(list_4)
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.isValid()
    node_11 = module_0.Node(list_4)

def test_case_197():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_2.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.contains(var_3)
    assert var_7 is False

def test_case_198():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_5 = b_s_t_4.isValid()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_2 = [node_2]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.add(list_2)
    assert len(b_s_t_5) == 1
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(b_s_t_6)

def test_case_199():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value == []
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_7 = b_s_t_4.isValid()
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    list_2 = [node_4]
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.add(list_2)
    assert len(b_s_t_8) == 1
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    bool_4 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(bool_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.getOrder()
    var_14 = b_s_t_12.getOrder(node_1)

def test_case_200():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_201():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.remove(bool_1)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder(none_type_1)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = b_s_t_7.build(b_s_t_9)
    node_2 = module_0.Node(b_s_t_3)

def test_case_202():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_1)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_2)
    var_6 = b_s_t_4.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.isValid()
    node_4 = module_0.Node(b_s_t_8)
    assert len(node_4.value) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.isValid()
    var_10 = b_s_t_9.__len__()
    assert var_10 == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    bool_2 = False
    node_5 = module_0.Node(bool_2)
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.remove(none_type_4)
    bool_3 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.remove(bool_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_4 = True
    var_14 = b_s_t_11.add(bool_4)
    assert len(b_s_t_11) == 1

def test_case_203():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = var_2.__str__()
    assert var_6 == '[]'

def test_case_204():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False

def test_case_205():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    list_1 = [node_2]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.add(list_1)
    assert len(b_s_t_5) == 1
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    var_10 = b_s_t_6.add(var_9)
    assert len(b_s_t_6) == 1
    node_4 = module_0.Node(list_2)
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_3)
    var_14 = b_s_t_11.__str__()
    assert var_14 == '[]'
    bool_6 = False
    list_4 = [bool_6, bool_6, bool_6, bool_6]
    node_6 = module_0.Node(list_4)
    var_15 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_2 = b_s_t_12.build(list_3)
    assert len(b_s_t_12) == 4

def test_case_206():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    list_0 = [node_3]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.add(list_0)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_1)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_2)
    var_7 = b_s_t_6.isValid()
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_3)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(bool_2)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_4)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_5 = b_s_t_10.build(b_s_t_12)
    b_s_t_13 = module_0.BST()

def test_case_207():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_0)
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_3)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_2)
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_11 = b_s_t_8.isValid()
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder(none_type_3)
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_4 = module_0.Node(list_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.isValid()
    var_14 = b_s_t_11.__len__()
    assert var_14 == 0
    none_type_5 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.remove(none_type_5)
    none_type_6 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.getOrder(none_type_6)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0

def test_case_208():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    set_0 = set()
    node_2 = module_0.Node(set_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_5.getOrder(b_s_t_4)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    var_8 = b_s_t_7.__len__()
    assert var_8 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_5.__str__()
    assert var_10 == '[]'

def test_case_209():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_2 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    bool_3 = False
    node_5 = module_0.Node(bool_3)
    bool_4 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_4)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_3)
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_7 = module_0.Node(list_3)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_6 = False
    list_4 = [bool_6, bool_6, bool_6, bool_6]
    node_9 = module_0.Node(list_4)
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    bool_7 = False
    list_5 = [bool_7, bool_7, bool_7, bool_7]
    node_10 = module_0.Node(list_5)
    var_8 = b_s_t_7.isValid()
    var_9 = var_4.__str__()
    assert var_9 == '[]'

def test_case_210():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_0)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_2)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_1)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_6.build(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder(none_type_4)
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.isValid()
    node_2 = module_0.Node(b_s_t_12)
    bool_3 = False
    b_s_t_13 = module_0.BST()
    var_11 = b_s_t_13.remove(bool_3)
    b_s_t_14 = module_0.BST()
    b_s_t_15 = module_0.BST()
    var_12 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    var_13 = b_s_t_16.getOrder()
    none_type_5 = None
    b_s_t_17 = module_0.BST()
    var_14 = b_s_t_17.getOrder(none_type_5)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_1)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    b_s_t_18 = module_0.BST()
    var_15 = b_s_t_3.add(b_s_t_8)
    assert len(b_s_t_3) == 1

def test_case_211():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_0.getOrder()

def test_case_212():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_6.build(b_s_t_8)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder(none_type_3)
    bool_1 = False
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.remove(bool_1)
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder(none_type_4)
    var_10 = b_s_t_10.getOrder()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    none_type_5 = None
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.getOrder(none_type_5)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    none_type_6 = None
    node_2 = module_0.Node(none_type_6)
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_9.__len__()

def test_case_213():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_214():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(none_type_2)
    node_1 = module_0.Node(b_s_t_2)

def test_case_215():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value == []
    var_4 = b_s_t_2.isValid()
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_1)
    var_6 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1

def test_case_216():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_0 = [node_1]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.add(list_0)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(var_7)
    assert node_3.value == []
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    node_5 = module_0.Node(list_1)
    node_6 = module_0.Node(node_4)

def test_case_217():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_1 = [node_2]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.add(list_1)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(var_6)
    assert node_3.value == []
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_8.getOrder(b_s_t_7)
    node_4 = module_0.Node(var_2)

def test_case_218():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder(none_type_0)
    var_4 = b_s_t_5.__len__()
    assert var_4 == 0

def test_case_219():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_1)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    var_8 = var_2.__len__()
    assert var_8 == 0

def test_case_220():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    var_5 = b_s_t_5.contains(var_4)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(none_type_2)
    bool_1 = False
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(bool_1)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder(none_type_3)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()

def test_case_221():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    node_2 = module_0.Node(var_0)
    assert node_2.value == '[]'

def test_case_222():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None

def test_case_223():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_6 = b_s_t_3.contains(var_5)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_6.getOrder(b_s_t_5)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    var_12 = b_s_t_8.isValid()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder()
    var_14 = b_s_t_9.add(var_13)
    assert len(b_s_t_9) == 1
    node_7 = module_0.Node(list_2)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.isValid()
    var_17 = b_s_t_10.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_18 = b_s_t_12.isValid()
    var_19 = b_s_t_12.__len__()
    assert var_19 == 0
    var_20 = var_7.__str__()

def test_case_224():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_5 = b_s_t_4.getOrder(none_type_1)

def test_case_225():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_226():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(var_5)
    assert node_1.value == []
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(bool_2)
    none_type_1 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder(none_type_1)
    var_11 = b_s_t_9.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    bool_3 = False
    node_4 = module_0.Node(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.getOrder()
    var_14 = b_s_t_12.add(var_13)
    assert len(b_s_t_12) == 1
    node_5 = module_0.Node(var_14)
    assert node_5.value is None
    var_15 = b_s_t_2.contains(b_s_t_5)

def test_case_227():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    node_3 = module_0.Node(b_s_t_8)
    assert len(node_3.value) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    var_13 = b_s_t_10.add(var_12)
    assert len(b_s_t_10) == 1
    node_4 = module_0.Node(var_12)
    assert node_4.value == []
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.remove(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_3 = b_s_t_11.build(b_s_t_13)
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder()
    none_type_4 = None
    b_s_t_15 = module_0.BST()
    var_17 = b_s_t_15.getOrder(none_type_4)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    b_s_t_16 = module_0.BST()
    bool_3 = False
    b_s_t_17 = module_0.BST()
    var_18 = b_s_t_17.remove(bool_3)
    b_s_t_18 = module_0.BST()
    b_s_t_19 = module_0.BST()
    var_19 = b_s_t_19.getOrder()
    b_s_t_20 = module_0.BST()
    var_20 = b_s_t_20.getOrder()
    b_s_t_21 = module_0.BST()

def test_case_228():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_4.__str__()
    assert var_2 == '[]'
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(bool_3)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_2)
    var_5 = b_s_t_5.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_229():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_3 = b_s_t_1.isValid()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    var_6 = b_s_t_2.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    node_5 = module_0.Node(var_8)
    assert node_5.value == []
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.remove(none_type_0)
    node_6 = module_0.Node(none_type_0)

def test_case_230():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value == []
    var_4 = b_s_t_2.isValid()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_6.add(var_8)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_8)
    assert node_2.value == []
    none_type_0 = b_s_t_1.build(var_7)

def test_case_231():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_2 = False
    node_2 = module_0.Node(bool_2)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_4 = module_0.Node(b_s_t_4)
    assert len(node_4.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    node_5 = module_0.Node(b_s_t_7)
    assert len(node_5.value) == 0
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    node_7 = module_0.Node(b_s_t_8)
    assert len(node_7.value) == 0
    var_10 = b_s_t_8.contains(var_9)
    assert var_10 is False
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder(none_type_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_2)
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_1.__str__()
    assert var_12 == '[]'

def test_case_232():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value == []
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_6 = b_s_t_3.contains(var_5)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_233():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = b_s_t_1.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value == []
    var_7 = b_s_t_5.isValid()
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_8.add(var_10)
    assert len(b_s_t_8) == 1
    node_3 = module_0.Node(var_10)
    assert node_3.value == []
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_0 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder(none_type_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.isValid()
    node_4 = module_0.Node(b_s_t_11)
    assert len(node_4.value) == 0
    none_type_1 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.remove(none_type_1)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    none_type_2 = b_s_t_12.build(b_s_t_14)
    none_type_3 = None
    b_s_t_15 = module_0.BST()
    var_16 = b_s_t_15.remove(none_type_3)
    bool_3 = False
    b_s_t_16 = module_0.BST()
    var_17 = b_s_t_16.remove(bool_3)
    var_18 = b_s_t_16.__str__()
    assert var_18 == '[]'
    b_s_t_17 = module_0.BST()
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_2)
    var_19 = b_s_t_17.__str__()
    assert var_19 == '[]'
    b_s_t_18 = module_0.BST()

def test_case_234():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    var_6 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    node_2 = module_0.Node(var_8)
    assert node_2.value == []
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder(none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_11 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.isValid()
    node_5 = module_0.Node(b_s_t_7)
    assert len(node_5.value) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_4.contains(b_s_t_8)

def test_case_235():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    var_6 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_6)
    assert node_2.value is None
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    var_8 = b_s_t_4.add(var_7)
    assert len(b_s_t_4) == 1
    node_4 = module_0.Node(list_2)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.isValid()
    var_11 = b_s_t_5.isValid()
    bool_5 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(bool_5)
    none_type_0 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder(none_type_0)
    var_14 = b_s_t_7.getOrder()
    bool_6 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.remove(bool_6)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.getOrder()
    none_type_1 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_18 = b_s_t_13.remove(none_type_1)
    bool_7 = False
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_19 = b_s_t_14.remove(bool_7)
    var_20 = b_s_t_14.__str__()
    assert var_20 == '[]'
    bool_8 = False
    list_4 = [bool_8, bool_8, bool_8, bool_8]
    node_6 = module_0.Node(list_4)
    var_21 = b_s_t_14.getOrder()

def test_case_236():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.isValid()
    var_3 = b_s_t_4.__len__()
    assert var_3 == 0
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0

def test_case_237():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_4 = module_0.Node(var_4)
    assert node_4.value is None
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    var_6 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    bool_3 = False
    node_7 = module_0.Node(bool_3)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    node_9 = module_0.Node(var_9)
    assert node_9.value == []
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder(none_type_5)
    var_12 = b_s_t_2.isValid()

def test_case_238():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    bool_2 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.getOrder(b_s_t_2)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_5.build(b_s_t_7)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_4.contains(var_1)

def test_case_239():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_0)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(var_8)
    assert node_1.value is None
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    var_11 = b_s_t_6.isValid()
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.remove(bool_2)
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder()
    set_0 = set()
    node_3 = module_0.Node(set_0)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_1)
    bool_5 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.remove(bool_5)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    bytes_0 = b'M\xe5\xd8\xd2\x0b\xd2+\xfc\xfdT\xce\xfb`\xf0\xa1\x1e'
    var_17 = b_s_t_6.contains(bytes_0)

def test_case_240():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_2 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    bool_3 = False
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    var_7 = b_s_t_8.add(var_6)
    assert len(b_s_t_8) == 1
    node_5 = module_0.Node(var_7)
    assert node_5.value is None
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder()
    var_9 = b_s_t_9.add(var_8)
    assert len(b_s_t_9) == 1
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_3)
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_8.minValueNode(node_1)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert var_10.value == [False, False, False, False]
    assert var_10.left is None
    assert var_10.right is None

def test_case_241():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_0)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    var_9 = b_s_t_8.getOrder(b_s_t_7)
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.remove(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0

def test_case_242():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    var_6 = b_s_t_6.__len__()
    assert var_6 == 0
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_1)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder(none_type_4)
    var_9 = b_s_t_7.getOrder()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    var_11 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.isValid()
    node_8 = module_0.Node(b_s_t_10)
    assert len(node_8.value) == 0
    var_13 = b_s_t_10.contains(var_12)
    var_14 = b_s_t_6.__len__()
    assert var_14 == 0

def test_case_243():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_4.getOrder(b_s_t_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.isValid()
    node_1 = module_0.Node(b_s_t_8)
    assert len(node_1.value) == 0
    bool_1 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.remove(bool_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.getOrder()
    var_11 = b_s_t_9.isValid()

def test_case_244():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    set_0 = set()
    node_2 = module_0.Node(set_0)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.isValid()
    node_5 = module_0.Node(b_s_t_8)
    assert len(node_5.value) == 0
    var_9 = b_s_t_8.contains(var_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_6.isValid()

def test_case_245():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(var_5)
    assert node_1.value is None
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    var_8 = b_s_t_6.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_3)
    var_10 = b_s_t_8.isValid()
    bool_5 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(bool_5)
    none_type_1 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder(none_type_1)
    var_13 = b_s_t_9.getOrder()
    var_14 = var_8.__str__()

def test_case_246():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_7 = b_s_t_5.isValid()
    var_8 = b_s_t_3.contains(none_type_1)

def test_case_247():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_1 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    bool_4 = False
    node_3 = module_0.Node(bool_4)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_2)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    bool_6 = False
    list_3 = [bool_6, bool_6, bool_6, bool_6]
    node_6 = module_0.Node(list_3)
    var_9 = b_s_t_6.isValid()
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = b_s_t_7.build(b_s_t_9)
    bool_7 = False
    list_4 = [bool_7, bool_7, bool_7, bool_7]
    node_7 = module_0.Node(list_4)
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.isValid()
    var_14 = b_s_t_10.isValid()
    var_15 = b_s_t_5.getOrder()

def test_case_248():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    var_3 = b_s_t_1.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    var_7 = b_s_t_4.contains(var_6)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    var_12 = b_s_t_7.add(var_11)
    assert len(b_s_t_7) == 1
    node_4 = module_0.Node(var_11)
    assert node_4.value == []
    var_13 = b_s_t_7.isValid()
    var_14 = b_s_t_5.__str__()
    assert var_14 == '[[]]'

def test_case_249():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'

def test_case_250():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_0 = [node_1]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = b_s_t_4.build(b_s_t_6)
    var_7 = b_s_t_3.getOrder()

def test_case_251():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_3 = b_s_t_1.contains(var_2)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = var_0.__str__()
    assert var_5 == '[]'

def test_case_252():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    var_9 = b_s_t_8.isValid()
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    node_7 = module_0.Node(var_11)
    assert node_7.value is None
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_4)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.getOrder(none_type_4)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    var_13 = b_s_t_10.isValid()
    node_10 = module_0.Node(var_3)

def test_case_253():
    bool_0 = True
    node_0 = module_0.Node(bool_0)

def test_case_254():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value is None
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_5.getOrder(b_s_t_4)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_10 = b_s_t_7.isValid()
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.remove(bool_2)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.isValid()
    node_5 = module_0.Node(b_s_t_9)
    assert len(node_5.value) == 0
    var_13 = b_s_t_9.contains(var_12)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.isValid()
    node_6 = module_0.Node(b_s_t_12)
    assert len(node_6.value) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.getOrder()
    var_17 = b_s_t_13.add(var_16)
    assert len(b_s_t_13) == 1
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.isValid()
    node_7 = module_0.Node(b_s_t_14)
    assert len(node_7.value) == 0
    node_8 = module_0.Node(b_s_t_11)
    assert len(node_8.value) == 0

def test_case_255():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_4 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_7.add(var_6)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(var_6)
    assert node_3.value == []
    var_8 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    bool_3 = False
    node_4 = module_0.Node(bool_3)
    bool_4 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.remove(bool_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_13.getOrder()
    var_14 = b_s_t_13.add(var_13)
    assert len(b_s_t_13) == 1
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_14.isValid()
    none_type_1 = None
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_16 = b_s_t_15.remove(none_type_1)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_17 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    none_type_2 = b_s_t_15.build(b_s_t_17)
    none_type_3 = None
    b_s_t_18 = module_0.BST()
    var_18 = b_s_t_18.remove(none_type_3)
    bool_5 = False
    b_s_t_19 = module_0.BST()
    var_19 = b_s_t_19.remove(bool_5)
    var_20 = b_s_t_19.__str__()
    assert var_20 == '[]'
    var_21 = var_3.__len__()
    assert var_21 == 2

def test_case_256():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_7.add(var_6)
    assert len(b_s_t_7) == 1
    node_4 = module_0.Node(var_6)
    assert node_4.value == []
    var_8 = b_s_t_7.isValid()
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder(none_type_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.remove(none_type_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_4 = b_s_t_10.build(b_s_t_12)
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.getOrder()
    var_13 = b_s_t_13.add(var_12)
    assert len(b_s_t_13) == 1
    var_14 = b_s_t_4.getOrder(var_9)

def test_case_257():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_1)
    var_5 = b_s_t_2.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    bool_3 = False
    node_3 = module_0.Node(bool_3)
    bool_4 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(bool_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    list_1 = [node_4]
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.add(list_1)
    assert len(b_s_t_10) == 1
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    var_14 = b_s_t_11.add(var_13)
    assert len(b_s_t_11) == 1
    node_6 = module_0.Node(list_2)
    var_15 = b_s_t_6.__len__()
    assert var_15 == 0

def test_case_258():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.getOrder(b_s_t_2)
    var_6 = b_s_t_1.add(bool_0)
    assert len(b_s_t_1) == 1

def test_case_259():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'

def test_case_260():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    var_4 = b_s_t_4.contains(var_3)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(none_type_2)
    var_6 = b_s_t_0.contains(var_0)

def test_case_261():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_4 = module_0.Node(b_s_t_5)
    assert len(node_4.value) == 0
    none_type_2 = b_s_t_1.build(var_0)
    assert len(b_s_t_1) == 2

def test_case_262():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    var_4 = b_s_t_2.getOrder()
    var_5 = b_s_t_3.isValid()

def test_case_263():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.isValid()
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    list_0 = [node_0]
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.add(list_0)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_1)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_2)
    var_5 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(var_7)
    assert node_3.value == []
    bool_2 = False
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(bool_2)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(none_type_3)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.remove(bool_3)
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.getOrder(none_type_4)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_3)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.__str__()
    assert var_14 == '[]'

def test_case_264():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_2.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    list_1 = [node_2]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.add(list_1)
    assert len(b_s_t_5) == 1
    var_8 = b_s_t_1.isValid()

def test_case_265():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.isValid()
    var_2 = b_s_t_3.__len__()
    assert var_2 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value == []
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_1 = module_0.Node(var_8)
    assert node_1.value is None
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    var_12 = b_s_t_9.getOrder(b_s_t_8)
    var_13 = b_s_t_9.__len__()
    assert var_13 == 0

def test_case_266():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value == []
    var_5 = b_s_t_3.isValid()
    var_6 = b_s_t_0.add(var_3)
    assert len(b_s_t_0) == 1

def test_case_267():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_2.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_8 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.isValid()
    var_10 = b_s_t_6.__len__()
    assert var_10 == 0
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(bool_4)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder(none_type_3)
    var_13 = b_s_t_7.getOrder()
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.getOrder(none_type_4)
    node_5 = module_0.Node(var_5)

def test_case_268():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_2 = b_s_t_1.isValid()
    bool_3 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_3)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    var_5 = b_s_t_2.getOrder()
    bool_4 = True
    node_2 = module_0.Node(bool_4)
    none_type_1 = b_s_t_2.build(var_1)
    assert len(b_s_t_2) == 2

def test_case_269():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_270():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_271():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None

def test_case_272():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    var_5 = b_s_t_5.getOrder(b_s_t_4)
    node_4 = module_0.Node(var_5)
    assert node_4.value is None

def test_case_273():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_2)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_1)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_4 = True
    node_5 = module_0.Node(bool_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_6 = module_0.Node(list_2)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    bool_6 = False
    list_3 = [bool_6, bool_6, bool_6, bool_6]
    node_7 = module_0.Node(list_3)
    var_11 = b_s_t_9.isValid()
    set_0 = set()
    node_8 = module_0.Node(set_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.isValid()
    var_13 = b_s_t_10.__len__()
    assert var_13 == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0

def test_case_274():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(none_type_2)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(none_type_3)
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_5)
    var_5 = b_s_t_5.minValueNode(node_1)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_5.value).__module__}.{type(var_5.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_5.value) == 0
    assert var_5.left is None
    assert var_5.right is None
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder(none_type_4)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    b_s_t_7 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.isValid()
    var_9 = b_s_t_8.isValid()
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.getOrder()
    var_13 = b_s_t_12.add(var_12)
    assert len(b_s_t_12) == 1
    node_5 = module_0.Node(var_12)
    assert node_5.value == []
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.getOrder()
    var_16 = b_s_t_14.add(var_15)
    assert len(b_s_t_14) == 1
    node_6 = module_0.Node(var_15)
    assert node_6.value == []
    var_17 = b_s_t_14.isValid()
    var_18 = var_12.__len__()
    assert var_18 == 0

def test_case_275():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_276():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    var_4 = b_s_t_2.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    var_6 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1
    node_3 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    var_8 = b_s_t_5.isValid()
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(bool_2)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder(none_type_4)
    var_11 = b_s_t_6.getOrder()
    node_6 = module_0.Node(node_2)

def test_case_277():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_4 = module_0.Node(b_s_t_6)
    assert len(node_4.value) == 0
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_2)
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    int_0 = 857
    var_10 = b_s_t_0.add(int_0)
    assert len(b_s_t_0) == 1

def test_case_278():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_3 = b_s_t_2.remove(none_type_0)

def test_case_279():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_3.isValid()
    bool_4 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_7.getOrder(b_s_t_6)
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_4 = module_0.Node(list_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.remove(none_type_2)
    bool_6 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.remove(bool_6)
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'
    bool_7 = False
    list_4 = [bool_7, bool_7, bool_7, bool_7]
    node_5 = module_0.Node(list_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.getOrder()
    var_13 = b_s_t_12.add(var_12)
    assert len(b_s_t_12) == 1
    node_6 = module_0.Node(list_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_8 = False
    list_5 = [bool_8, bool_8, bool_8, bool_8]
    node_7 = module_0.Node(list_5)
    var_14 = b_s_t_13.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_7.contains(var_7)

def test_case_280():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_1 = [node_2]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.add(list_1)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(var_7)
    assert node_4.value is None
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    node_6 = module_0.Node(b_s_t_8)
    assert len(node_6.value) == 0
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder(none_type_3)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    bool_3 = False
    node_7 = module_0.Node(bool_3)
    node_8 = module_0.Node(b_s_t_11)
    assert len(node_8.value) == 0
    var_13 = b_s_t_11.minValueNode(node_8)
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_13.value).__module__}.{type(var_13.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_13.value) == 0
    assert var_13.left is None
    assert var_13.right is None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0

def test_case_281():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'

def test_case_282():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_2 = module_0.Node(none_type_0)

def test_case_283():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_4.build(b_s_t_6)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder(none_type_2)
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.isValid()
    node_1 = module_0.Node(b_s_t_9)
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.remove(none_type_3)
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder()
    bool_2 = False
    node_2 = module_0.Node(bool_2)
    node_3 = module_0.Node(b_s_t_11)
    var_10 = b_s_t_11.minValueNode(node_3)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_10.value).__module__}.{type(var_10.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_10.value) == 0
    assert var_10.left is None
    assert var_10.right is None
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.getOrder()
    var_13 = b_s_t_13.add(var_12)
    assert len(b_s_t_13) == 1
    node_4 = module_0.Node(var_12)
    assert node_4.value == []
    var_14 = b_s_t_13.isValid()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.getOrder()
    var_16 = var_0.__str__()

def test_case_284():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_1 = b_s_t_4.getOrder(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_2 = b_s_t_6.__str__()
    assert var_2 == '[]'
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_3 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_4 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_5 = b_s_t_10.getOrder()
    var_6 = b_s_t_0.__len__()
    assert var_6 == 0

def test_case_285():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_6)
    assert node_2.value == []
    var_8 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    bool_1 = False
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    node_3 = module_0.Node(var_7)
    assert node_3.value is None

def test_case_286():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_1.getOrder()

def test_case_287():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    list_1 = [node_4]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.add(list_1)
    assert len(b_s_t_5) == 1
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_2)
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_288():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_5 = b_s_t_3.minValueNode(node_3)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_5.value).__module__}.{type(var_5.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_5.value) == 0
    assert var_5.left is None
    assert var_5.right is None
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_4 = b_s_t_8.build(b_s_t_10)
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.getOrder()
    var_12 = b_s_t_11.add(var_11)
    assert len(b_s_t_11) == 1
    node_5 = module_0.Node(var_12)
    assert node_5.value is None
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    str_0 = 'j\n:YxE'
    int_0 = -1429
    tuple_0 = (b_s_t_6, str_0, int_0)
    node_7 = module_0.Node(tuple_0)

def test_case_289():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.getOrder(b_s_t_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_2 = module_0.Node(var_7)
    assert node_2.value is None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    list_1 = [node_3]
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.add(list_1)
    assert len(b_s_t_7) == 1
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_290():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    var_3 = b_s_t_2.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_291():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(none_type_0)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_1)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder(none_type_1)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.isValid()
    node_3 = module_0.Node(b_s_t_9)
    assert len(node_3.value) == 0
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.remove(none_type_4)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.isValid()
    var_11 = b_s_t_10.remove(var_4)

def test_case_292():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)

def test_case_293():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0

def test_case_294():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_1.__str__()
    assert var_6 == '[]'

def test_case_295():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.remove(none_type_3)
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(bool_3)
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.remove(var_5)

def test_case_296():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    var_9 = b_s_t_1.remove(var_0)

def test_case_297():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    list_0 = [node_1]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.add(list_0)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_5.add(var_3)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(var_3)
    assert node_3.value == []
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.add(var_5)
    assert len(b_s_t_6) == 1
    node_5 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_2)
    bool_1 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_1)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_3)
    var_10 = var_9.__str__()
    assert var_10 == '[]'

def test_case_298():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.remove(var_3)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_7 = b_s_t_2.add(node_2)
    assert len(b_s_t_2) == 1

def test_case_299():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()

def test_case_300():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    node_0 = module_0.Node(b_s_t_6)
    assert len(node_0.value) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'

def test_case_301():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    none_type_0 = None
    var_4 = b_s_t_2.add(none_type_0)
    assert len(b_s_t_2) == 1

def test_case_302():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    var_6 = b_s_t_4.remove(b_s_t_7)

def test_case_303():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_304():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_3)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_6 = b_s_t_5.isValid()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.remove(var_7)
    bool_5 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_5)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder(none_type_4)
    var_11 = b_s_t_7.getOrder()
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    list_4 = [node_8]
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.add(list_4)
    assert len(b_s_t_9) == 1
    none_type_6 = None
    node_9 = module_0.Node(none_type_6)
    var_13 = b_s_t_7.remove(none_type_3)

def test_case_305():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_3.getOrder(b_s_t_2)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_0)
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_2)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    var_10 = b_s_t_2.__len__()
    assert var_10 == 0

def test_case_306():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_0)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_0)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    var_7 = var_6.__str__()
    assert var_7 == '[]'

def test_case_307():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_4)
    assert node_2.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_308():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.remove(var_2)
    var_4 = b_s_t_1.getOrder()

def test_case_309():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()

def test_case_310():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    var_4 = b_s_t_2.isValid()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.remove(bool_1)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.getOrder(none_type_2)
    var_10 = b_s_t_6.getOrder()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.isValid()
    var_13 = b_s_t_8.isValid()
    bool_3 = False
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.isValid()
    var_18 = b_s_t_1.getOrder()

def test_case_311():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    var_4 = var_3.__str__()
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.getOrder(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_1.isValid()

def test_case_312():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    var_6 = b_s_t_6.isValid()
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.isValid()
    var_9 = b_s_t_7.isValid()
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_10 = module_0.BST()

def test_case_313():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_2.isValid()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = b_s_t_8.build(b_s_t_10)
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.getOrder()
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.getOrder()
    var_15 = b_s_t_14.add(var_14)
    assert len(b_s_t_14) == 1
    node_2 = module_0.Node(var_14)
    assert node_2.value == []
    var_16 = b_s_t_14.isValid()
    var_17 = var_10.__str__()
    assert var_17 == '[]'

def test_case_314():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.remove(none_type_2)
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.remove(bool_3)
    var_8 = b_s_t_9.__str__()
    assert var_8 == '[]'
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.remove(none_type_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.getOrder()
    bool_4 = False
    node_3 = module_0.Node(bool_4)
    node_4 = module_0.Node(b_s_t_11)
    assert len(node_4.value) == 0
    var_11 = b_s_t_11.minValueNode(node_4)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_11.value).__module__}.{type(var_11.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_11.value) == 0
    assert var_11.left is None
    assert var_11.right is None
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.isValid()
    var_13 = var_12.__str__()
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_13.remove(var_14)
    none_type_6 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.getOrder(none_type_6)
    var_17 = b_s_t_5.contains(b_s_t_5)
    node_7 = module_0.Node(var_17)

def test_case_315():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()

def test_case_316():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_317():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_1)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_5 = b_s_t_5.minValueNode(node_2)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_5.value).__module__}.{type(var_5.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_5.value) == 0
    assert var_5.left is None
    assert var_5.right is None
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_7 = b_s_t_6.isValid()
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_5)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_6 = b_s_t_7.build(b_s_t_9)
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    list_1 = [node_5]
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.add(list_1)
    assert len(b_s_t_10) == 1
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.isValid()
    bool_2 = False
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.remove(bool_2)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    var_13 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    var_14 = b_s_t_15.getOrder()
    var_15 = b_s_t_14.getOrder(b_s_t_13)
    b_s_t_16 = module_0.BST()
    var_16 = b_s_t_16.getOrder()
    var_17 = b_s_t_16.add(var_16)
    assert len(b_s_t_16) == 1
    b_s_t_17 = module_0.BST()
    var_18 = b_s_t_17.getOrder()
    var_19 = b_s_t_17.add(var_18)
    assert len(b_s_t_17) == 1
    node_6 = module_0.Node(var_19)
    assert node_6.value is None
    b_s_t_18 = module_0.BST()

def test_case_318():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.getOrder(b_s_t_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_7 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    node_5 = module_0.Node(list_3)
    bool_5 = False
    list_4 = [bool_5, bool_5, bool_5, bool_5]
    node_6 = module_0.Node(list_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_0 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(none_type_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    bool_6 = False
    node_7 = module_0.Node(bool_6)
    node_8 = module_0.Node(b_s_t_10)
    assert len(node_8.value) == 0
    var_13 = b_s_t_10.minValueNode(node_8)
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_13.value).__module__}.{type(var_13.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_13.value) == 0
    assert var_13.left is None
    assert var_13.right is None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder()
    var_16 = b_s_t_12.add(var_15)
    assert len(b_s_t_12) == 1
    node_9 = module_0.Node(var_15)
    assert node_9.value == []
    var_17 = b_s_t_1.__str__()
    assert var_17 == '[]'

def test_case_319():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(b_s_t_5)
    var_7 = b_s_t_5.minValueNode(node_3)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_7.value).__module__}.{type(var_7.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_7.value) == 0
    assert var_7.left is None
    assert var_7.right is None
    bool_2 = False
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    node_4 = module_0.Node(var_10)
    assert node_4.value is None
    bool_3 = False
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    bool_4 = False
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.remove(bool_4)
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.getOrder()
    none_type_3 = None
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.remove(none_type_3)
    bool_5 = False
    b_s_t_15 = module_0.BST()
    var_16 = b_s_t_15.remove(bool_5)
    var_17 = b_s_t_15.__str__()
    assert var_17 == '[]'
    b_s_t_16 = module_0.BST()
    bool_6 = False
    list_1 = [bool_6, bool_6, bool_6, bool_6]
    node_5 = module_0.Node(list_1)
    var_18 = b_s_t_16.__str__()
    assert var_18 == '[]'
    bool_7 = False
    b_s_t_17 = module_0.BST()
    var_19 = b_s_t_17.remove(bool_7)
    none_type_4 = None
    b_s_t_18 = module_0.BST()
    var_20 = b_s_t_18.getOrder(none_type_4)
    var_21 = b_s_t_17.getOrder()
    var_22 = b_s_t_1.remove(node_0)

def test_case_320():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    var_5 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    bool_4 = False
    node_3 = module_0.Node(bool_4)
    none_type_0 = b_s_t_2.build(var_4)
    assert len(b_s_t_2) == 2

def test_case_321():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)

def test_case_322():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_3 = b_s_t_2.minValueNode(node_1)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_3.value).__module__}.{type(var_3.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_3.value) == 0
    assert var_3.left is None
    assert var_3.right is None
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    var_7 = b_s_t_4.isValid()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = b_s_t_6.build(b_s_t_8)
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    bool_2 = False
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.getOrder()
    var_14 = b_s_t_11.getOrder(b_s_t_10)
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.isValid()
    var_16 = var_15.__str__()
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.isValid()
    node_4 = module_0.Node(b_s_t_14)
    var_18 = b_s_t_14.contains(var_17)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    b_s_t_15 = module_0.BST()
    var_19 = b_s_t_14.remove(var_18)
    bool_4 = True
    node_6 = module_0.Node(bool_4)
    b_s_t_16 = module_0.BST()
    var_20 = b_s_t_12.getOrder()

def test_case_323():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_2 = module_0.Node(b_s_t_1)
    assert len(node_2.value) == 0
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.remove(var_3)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_3)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder(none_type_2)
    var_8 = b_s_t_6.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.isValid()
    node_7 = module_0.Node(b_s_t_10)
    assert len(node_7.value) == 0
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder(none_type_4)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_1)
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_8.__str__()
    assert var_12 == '[]'

def test_case_324():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    var_5 = b_s_t_4.isValid()
    var_6 = b_s_t_3.isValid()

def test_case_325():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = var_0.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_5 = b_s_t_3.isValid()
    set_0 = set()
    node_4 = module_0.Node(set_0)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = b_s_t_4.build(b_s_t_6)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_8.remove(var_8)
    var_10 = var_5.__str__()
    var_11 = var_10.__len__()

def test_case_326():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()

def test_case_327():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_4 = b_s_t_2.isValid()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    assert len(node_5.value) == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_3 = b_s_t_5.build(b_s_t_7)
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(none_type_4)
    bool_3 = False
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(bool_3)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    none_type_5 = b_s_t_4.build(b_s_t_0)

def test_case_328():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    node_2 = module_0.Node(list_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_2.isValid()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_0)
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_3)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_329():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    var_6 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_330():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()

def test_case_331():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)

def test_case_332():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_0)
    var_5 = b_s_t_4.getOrder()
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_2)
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_0 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_9 = b_s_t_2.getOrder()

def test_case_333():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_1 = b_s_t_1.contains(var_0)
    assert var_1 is False
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_1.remove(var_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    none_type_1 = b_s_t_2.build(b_s_t_2)

def test_case_334():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_4.getOrder(b_s_t_3)
    bool_2 = True
    node_0 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(bool_3)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_0 = [node_1]
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.add(list_0)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    bool_4 = False
    node_2 = module_0.Node(bool_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_335():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    list_1 = [node_2]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.add(list_1)
    assert len(b_s_t_5) == 1
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(none_type_2)
    var_10 = b_s_t_1.__len__()
    assert var_10 == 0

def test_case_336():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_337():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_4 = b_s_t_3.minValueNode(node_2)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    var_5 = b_s_t_1.isValid()

def test_case_338():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value is None
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_3)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_1)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(b_s_t_7)
    assert len(node_5.value) == 0
    var_10 = b_s_t_7.minValueNode(node_5)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_10.value).__module__}.{type(var_10.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_10.value) == 0
    assert var_10.left is None
    assert var_10.right is None
    var_11 = var_1.__str__()

def test_case_339():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_2 = b_s_t_2.contains(var_1)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_1.__str__()
    assert var_6 == '[]'

def test_case_340():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.remove(var_3)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_1)
    var_7 = b_s_t_4.getOrder()
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.isValid()
    var_12 = var_11.__str__()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    var_14 = b_s_t_9.__str__()
    assert var_14 == '[]'

def test_case_341():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.contains(b_s_t_2)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    var_5 = b_s_t_3.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_1 = module_0.Node(var_7)
    assert node_1.value == []
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    var_12 = b_s_t_9.getOrder(b_s_t_8)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_1)
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_3 = module_0.Node(list_2)
    var_14 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.isValid()
    node_4 = module_0.Node(b_s_t_12)
    assert len(node_4.value) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.getOrder()
    var_17 = b_s_t_13.add(var_16)
    assert len(b_s_t_13) == 1
    node_5 = module_0.Node(var_17)
    assert node_5.value is None
    none_type_0 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.remove(none_type_0)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_19 = b_s_t_1.__str__()
    assert var_19 == '[]'

def test_case_342():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()

def test_case_343():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)

def test_case_344():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = b_s_t_1.contains(none_type_0)
    b_s_t_4 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.__len__()
    var_8 = b_s_t_4.__str__()
    assert var_8 == '[]'

def test_case_345():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_2.isValid()
    var_5 = var_1.__str__()
    assert var_5 == '[]'

def test_case_346():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value == []
    var_4 = b_s_t_3.isValid()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_7 = b_s_t_5.minValueNode(node_2)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_7.value).__module__}.{type(var_7.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_7.value) == 0
    assert var_7.left is None
    assert var_7.right is None
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_10 = b_s_t_7.contains(var_9)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.isValid()
    var_12 = b_s_t_8.__len__()
    assert var_12 == 0
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder()
    var_16 = b_s_t_11.getOrder(b_s_t_10)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_0)
    var_17 = b_s_t_13.__str__()
    assert var_17 == '[]'
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_1)
    var_18 = b_s_t_13.isValid()
    int_0 = 3176
    node_6 = module_0.Node(int_0)

def test_case_347():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0

def test_case_348():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0

def test_case_349():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_1.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(list_0)
    dict_0 = {}
    node_2 = module_0.Node(dict_0)

def test_case_350():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'

def test_case_351():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_352():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(none_type_0)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.remove(bool_1)
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder(none_type_1)
    var_6 = b_s_t_6.getOrder()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.isValid()
    var_9 = var_8.__str__()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.isValid()
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    var_12 = b_s_t_3.__len__()
    assert var_12 == 0

def test_case_353():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    var_6 = b_s_t_5.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_1 = module_0.Node(list_1)
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_2)
    var_8 = b_s_t_7.isValid()
    none_type_0 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_5 = True
    node_4 = module_0.Node(bool_5)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_6 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.remove(bool_6)
    none_type_2 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder(none_type_2)
    var_12 = b_s_t_11.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0

def test_case_354():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = var_0.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    node_5 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_6 = module_0.Node(b_s_t_6)
    assert len(node_6.value) == 0
    var_7 = b_s_t_6.contains(var_6)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_6.remove(var_7)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_355():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(bool_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    var_6 = b_s_t_6.isValid()
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder(none_type_3)
    var_8 = b_s_t_7.isValid()
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_2)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder(none_type_4)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    var_10 = b_s_t_8.isValid()
    var_11 = var_1.__len__()
    assert var_11 == 0

def test_case_356():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)

def test_case_357():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_1)
    var_3 = b_s_t_3.isValid()
    node_2 = module_0.Node(var_2)
    assert node_2.value is None

def test_case_358():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_3 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    var_5 = b_s_t_5.getOrder(b_s_t_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_3)
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    node_4 = module_0.Node(list_3)

def test_case_359():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_4 = b_s_t_2.minValueNode(node_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(set_0)
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0

def test_case_360():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_2)
    var_4 = b_s_t_3.isValid()
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_4 = b_s_t_4.build(b_s_t_6)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    b_s_t_7 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.isValid()
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.remove(none_type_5)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_6 = b_s_t_8.build(b_s_t_10)
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.isValid()
    node_5 = module_0.Node(b_s_t_11)
    var_13 = b_s_t_11.contains(var_12)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_11.remove(var_13)
    bool_4 = False
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.remove(bool_4)
    b_s_t_14 = module_0.BST()
    b_s_t_15 = module_0.BST()
    var_16 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    var_17 = b_s_t_16.getOrder()
    var_18 = b_s_t_15.getOrder(b_s_t_14)
    b_s_t_17 = module_0.BST()
    var_19 = b_s_t_17.isValid()
    var_20 = b_s_t_17.__len__()
    var_21 = b_s_t_5.__len__()

def test_case_361():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_4 = b_s_t_2.minValueNode(node_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.contains(b_s_t_7)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    node_2 = module_0.Node(var_10)
    assert node_2.value is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_9.remove(var_11)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    none_type_5 = None
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.getOrder(none_type_5)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    var_14 = b_s_t_10.isValid()
    none_type_7 = None
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.getOrder(none_type_7)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_1)
    none_type_8 = None
    node_7 = module_0.Node(none_type_8)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.getOrder()
    var_18 = b_s_t_14.add(var_17)
    assert len(b_s_t_14) == 1
    node_8 = module_0.Node(var_17)
    assert node_8.value == []
    var_19 = b_s_t_14.isValid()
    b_s_t_15 = module_0.BST()
    var_20 = b_s_t_15.__str__()
    assert var_20 == '[]'
    var_21 = b_s_t_14.isValid()

def test_case_362():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.contains(b_s_t_4)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    var_7 = b_s_t_7.contains(var_6)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(none_type_4)
    bool_2 = False
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.remove(bool_2)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.isValid()
    var_12 = var_11.__str__()
    bool_3 = False
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.getOrder()
    var_16 = b_s_t_13.getOrder(b_s_t_12)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_1)
    b_s_t_15 = module_0.BST()
    var_17 = b_s_t_15.getOrder()
    var_18 = b_s_t_15.add(var_17)
    assert len(b_s_t_15) == 1
    node_4 = module_0.Node(list_1)
    b_s_t_16 = module_0.BST()
    var_19 = b_s_t_16.getOrder()
    none_type_5 = None
    b_s_t_17 = module_0.BST()
    var_20 = b_s_t_17.remove(none_type_5)
    b_s_t_18 = module_0.BST()
    var_21 = b_s_t_18.getOrder()
    b_s_t_19 = module_0.BST()
    none_type_6 = b_s_t_17.build(b_s_t_19)
    var_22 = b_s_t_3.isValid()

def test_case_363():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value == []
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_0)
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_1)
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = b_s_t_8.build(set_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.isValid()
    node_3 = module_0.Node(b_s_t_9)
    assert len(node_3.value) == 0
    var_12 = b_s_t_9.contains(var_11)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_9.remove(var_12)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    list_1 = [node_5]
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.add(list_1)
    assert len(b_s_t_11) == 1
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder(none_type_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0

def test_case_364():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    var_3 = b_s_t_1.isValid()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_2.build(b_s_t_4)
    var_6 = b_s_t_2.contains(none_type_2)
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.isValid()
    node_4 = module_0.Node(b_s_t_5)
    var_8 = b_s_t_5.contains(var_7)
    b_s_t_6 = module_0.BST()
    var_9 = b_s_t_6.getOrder()
    var_10 = b_s_t_6.add(var_9)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    var_11 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.getOrder()
    var_13 = b_s_t_8.add(var_12)
    assert len(b_s_t_8) == 1
    node_5 = module_0.Node(var_12)
    assert node_5.value == []
    var_14 = b_s_t_8.isValid()
    bool_3 = False
    b_s_t_9 = module_0.BST()
    var_15 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_16 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_12.getOrder()
    var_18 = b_s_t_11.getOrder(b_s_t_10)
    b_s_t_13 = module_0.BST()

def test_case_365():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_1.isValid()
    var_5 = b_s_t_1.__len__()
    assert var_5 == 0

def test_case_366():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_3.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    var_6 = var_5.__str__()
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    node_5 = module_0.Node(b_s_t_7)
    assert len(node_5.value) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    bool_4 = False
    node_6 = module_0.Node(bool_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder(none_type_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.isValid()
    node_7 = module_0.Node(b_s_t_11)
    assert len(node_7.value) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.isValid()
    node_8 = module_0.Node(b_s_t_12)
    assert len(node_8.value) == 0
    var_12 = b_s_t_12.contains(var_11)
    assert var_12 is False
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_9 = module_0.Node(list_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_12.remove(var_12)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0

def test_case_367():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    b_s_t_4 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder(none_type_2)
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.isValid()
    node_1 = module_0.Node(b_s_t_7)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.remove(none_type_3)
    bool_1 = False
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.remove(bool_1)
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'
    b_s_t_10 = module_0.BST()

def test_case_368():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_0)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_2)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_3)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_1)
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_0.__len__()
    assert var_7 == 0

def test_case_369():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_2.build(b_s_t_4)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_4 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_5 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_6 = b_s_t_9.__str__()
    assert var_6 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_7 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.getOrder()
    bool_4 = False
    node_4 = module_0.Node(bool_4)
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.remove(none_type_4)
    b_s_t_12 = module_0.BST()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_13 = module_0.BST()
    var_10 = b_s_t_13.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_13.remove(var_10)
    var_12 = b_s_t_10.getOrder()

def test_case_370():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_371():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    var_7 = b_s_t_5.__len__()
    assert var_7 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    var_9 = var_8.__str__()
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    none_type_1 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.remove(none_type_1)
    none_type_2 = b_s_t_6.build(var_12)

def test_case_372():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    none_type_2 = b_s_t_4.build(set_0)
    var_3 = b_s_t_4.remove(none_type_2)

def test_case_373():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    set_1 = set()
    node_2 = module_0.Node(set_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    list_0 = [node_4]
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.add(list_0)
    assert len(b_s_t_6) == 1
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_6 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_7 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_8 = b_s_t_12.getOrder(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_9 = b_s_t_7.minValueNode(node_4)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert var_9.value is None
    assert var_9.left is None
    assert var_9.right is None

def test_case_374():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_7 = b_s_t_3.contains(none_type_0)
    bool_0 = False
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.remove(bool_0)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    var_11 = var_7.__str__()

def test_case_375():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(var_4)
    assert node_4.value == []
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder(none_type_3)
    var_10 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_8.isValid()
    var_13 = var_3.__len__()
    assert var_13 == 0

def test_case_376():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_6 = b_s_t_5.contains(var_5)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_6.build(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_1)
    var_9 = b_s_t_7.isValid()
    bool_4 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(bool_4)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder(none_type_3)
    var_12 = b_s_t_8.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    var_15 = b_s_t_11.add(var_14)
    assert len(b_s_t_11) == 1
    node_7 = module_0.Node(var_14)
    assert node_7.value == []
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_8 = module_0.Node(list_2)
    var_16 = b_s_t_12.__str__()
    assert var_16 == '[]'
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_12.__len__()
    assert var_17 == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_5.add(none_type_2)
    assert len(b_s_t_5) == 1
    assert len(node_2.value) == 1

def test_case_377():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    var_5 = b_s_t_2.add(var_4)
    assert len(b_s_t_2) == 1
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.__len__()
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.contains(b_s_t_9)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.remove(bool_3)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_15 = b_s_t_11.isValid()
    var_16 = var_12.__str__()

def test_case_378():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder(none_type_2)
    var_6 = b_s_t_5.isValid()
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_4 = b_s_t_6.build(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_9.add(var_9)
    assert len(b_s_t_9) == 1
    b_s_t_10 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_10.__len__()
    b_s_t_12 = module_0.BST()
    none_type_6 = None
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.getOrder(none_type_6)
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.isValid()
    node_2 = module_0.Node(b_s_t_14)
    node_3 = module_0.Node(var_9)
    assert node_3.value == []

def test_case_379():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    var_4 = b_s_t_4.contains(var_3)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.remove(var_6)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.isValid()
    var_9 = b_s_t_6.__len__()
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.getOrder()
    var_12 = b_s_t_8.add(var_11)
    assert len(b_s_t_8) == 1
    node_2 = module_0.Node(var_12)
    assert node_2.value is None
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    none_type_3 = b_s_t_9.build(set_0)
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.isValid()
    var_14 = var_13.__str__()
    b_s_t_11 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    var_15 = b_s_t_11.__str__()
    assert var_15 == '[]'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_11.__len__()
    none_type_5 = None
    b_s_t_13 = module_0.BST()
    var_17 = b_s_t_13.remove(none_type_5)
    b_s_t_14 = module_0.BST()
    var_18 = b_s_t_12.__len__()

def test_case_380():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    var_1 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    var_6 = b_s_t_5.__len__()

def test_case_381():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_1.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    var_6 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_382():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_5 = b_s_t_2.contains(var_4)
    assert var_5 is False
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_2.remove(var_5)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_7.getOrder(b_s_t_6)
    none_type_0 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(none_type_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_4 = True
    node_4 = module_0.Node(bool_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_1 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.remove(none_type_1)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    none_type_2 = b_s_t_12.build(b_s_t_14)
    var_14 = b_s_t_12.contains(none_type_1)
    b_s_t_15 = module_0.BST()
    var_15 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    var_16 = b_s_t_16.getOrder()
    var_17 = b_s_t_16.add(var_16)
    assert len(b_s_t_16) == 1
    node_5 = module_0.Node(var_16)
    assert node_5.value == []
    var_18 = b_s_t_16.isValid()
    b_s_t_17 = module_0.BST()
    var_19 = b_s_t_17.getOrder()
    var_20 = b_s_t_15.__len__()

def test_case_383():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(bool_0)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder(none_type_0)
    var_8 = b_s_t_3.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.isValid()
    var_10 = b_s_t_5.__len__()
    assert var_10 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder()
    var_14 = b_s_t_9.add(var_13)
    assert len(b_s_t_9) == 1
    node_1 = module_0.Node(var_14)
    assert node_1.value is None
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0

def test_case_384():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    list_2 = [node_3]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.add(list_2)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    bool_2 = False
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1
    node_5 = module_0.Node(list_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_385():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    list_0 = [node_2]
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.add(list_0)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_386():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.remove(var_3)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value == []
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.isValid()
    var_9 = var_8.__str__()
    node_2 = module_0.Node(b_s_t_3)

def test_case_387():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = b_s_t_0.getOrder()

def test_case_388():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    bool_2 = True
    node_3 = module_0.Node(bool_2)

def test_case_389():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_6 = b_s_t_6.isValid()
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_5 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.getOrder(none_type_5)
    var_11 = b_s_t_12.isValid()
    none_type_6 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_12 = b_s_t_13.getOrder(none_type_6)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_13 = var_4.__str__()
    assert var_13 == '[]'

def test_case_390():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = var_2.__str__()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    var_8 = b_s_t_6.isValid()
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_3)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'

def test_case_391():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_2 = b_s_t_1.isValid()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0

def test_case_392():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(var_5)
    assert node_1.value == []
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_1)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_7.build(b_s_t_9)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    none_type_5 = b_s_t_10.build(b_s_t_12)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.isValid()
    var_14 = b_s_t_13.__len__()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.isValid()
    none_type_6 = None
    b_s_t_15 = module_0.BST()
    var_16 = b_s_t_15.remove(none_type_6)
    b_s_t_16 = module_0.BST()
    var_17 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    none_type_7 = b_s_t_15.build(b_s_t_17)
    var_18 = b_s_t_15.contains(none_type_6)
    b_s_t_18 = module_0.BST()

def test_case_393():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_0)
    var_6 = b_s_t_3.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_394():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)

def test_case_395():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.contains(b_s_t_5)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    list_1 = [node_4]
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.add(list_1)
    assert len(b_s_t_6) == 1
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    bool_3 = False
    node_5 = module_0.Node(bool_3)
    node_6 = module_0.Node(b_s_t_8)
    assert len(node_6.value) == 0
    var_9 = b_s_t_8.minValueNode(node_6)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_9.value).__module__}.{type(var_9.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_9.value) == 0
    assert var_9.left is None
    assert var_9.right is None
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.remove(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = b_s_t_9.build(b_s_t_11)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_8.__len__()

def test_case_396():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.add(list_0)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_6.build(set_0)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder(none_type_3)
    var_8 = b_s_t_7.isValid()
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_5 = b_s_t_8.build(b_s_t_10)
    var_11 = b_s_t_8.contains(none_type_4)
    var_12 = b_s_t_1.getOrder()
    var_13 = var_12.__len__()
    assert var_13 == 0

def test_case_397():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_2 = False
    node_2 = module_0.Node(bool_2)
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    var_4 = b_s_t_2.minValueNode(node_3)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    assert len(node_5.value) == 0
    var_6 = b_s_t_4.contains(var_5)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_398():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    var_4 = b_s_t_1.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_10 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder(none_type_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.isValid()
    node_3 = module_0.Node(b_s_t_12)
    assert len(node_3.value) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_13.isValid()
    var_14 = var_13.__str__()
    bool_4 = False
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_14.remove(bool_4)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_16 = b_s_t_15.contains(b_s_t_15)
    bool_5 = False
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_17 = b_s_t_16.remove(bool_5)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    var_18 = b_s_t_18.getOrder()
    b_s_t_19 = module_0.BST()
    assert len(b_s_t_19) == 0
    var_19 = b_s_t_19.getOrder()
    var_20 = b_s_t_18.getOrder(b_s_t_17)
    b_s_t_20 = module_0.BST()
    assert len(b_s_t_20) == 0

def test_case_399():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_6 = b_s_t_5.isValid()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.remove(var_7)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = b_s_t_7.build(b_s_t_9)
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    bool_3 = False
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.remove(bool_3)
    none_type_5 = None
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.getOrder(none_type_5)
    var_14 = b_s_t_10.getOrder()
    var_15 = b_s_t_5.contains(var_8)

def test_case_400():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    var_6 = b_s_t_3.contains(var_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_3.remove(var_6)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.contains(b_s_t_6)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.isValid()
    node_2 = module_0.Node(b_s_t_8)
    assert len(node_2.value) == 0
    var_12 = b_s_t_8.contains(var_11)
    var_13 = b_s_t_8.__str__()
    assert var_13 == '[]'
    str_0 = 'binarySearchTree2'
    none_type_0 = b_s_t_5.build(str_0)
    assert len(b_s_t_5) == 17

def test_case_401():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_4)
    assert node_2.value is None
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    var_6 = b_s_t_8.__str__()
    assert var_6 == '[]'
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_8.__len__()
    assert var_7 == 0
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    var_9 = b_s_t_10.add(var_8)
    assert len(b_s_t_10) == 1
    node_9 = module_0.Node(list_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.getOrder()
    var_11 = b_s_t_12.add(var_10)
    assert len(b_s_t_12) == 1
    bool_5 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_12 = b_s_t_13.remove(bool_5)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_13 = b_s_t_14.contains(b_s_t_14)
    var_14 = b_s_t_8.__str__()
    assert var_14 == '[]'

def test_case_402():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_403():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    var_7 = var_2.__str__()
    assert var_7 == '[]'

def test_case_404():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_3.remove(var_5)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(b_s_t_0)

def test_case_405():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()

def test_case_406():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    var_5 = b_s_t_2.add(var_4)
    assert len(b_s_t_2) == 1
    node_3 = module_0.Node(list_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_2.getOrder()
    var_7 = var_6.__str__()
    assert var_7 == '[[]]'

def test_case_407():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    node_0 = module_0.Node(var_1)

def test_case_408():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.minValueNode(node_1)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert var_8.value == [False, False, False, False]
    assert var_8.left is None
    assert var_8.right is None

def test_case_409():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.remove(var_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_410():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.contains(none_type_0)

def test_case_411():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_0.isValid()

def test_case_412():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_1.__str__()
    assert var_4 == '[]'

def test_case_413():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)

def test_case_414():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value is None
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_3.add(b_s_t_0)
    assert len(b_s_t_3) == 1

def test_case_415():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(bool_2)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = b_s_t_6.build(b_s_t_8)
    var_6 = b_s_t_6.contains(none_type_3)
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.isValid()
    node_4 = module_0.Node(b_s_t_10)
    var_9 = b_s_t_10.contains(var_8)
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.isValid()
    node_5 = module_0.Node(b_s_t_11)
    var_12 = b_s_t_11.contains(var_11)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_1)
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_11.remove(var_12)
    b_s_t_13 = module_0.BST()
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_2)
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.isValid()
    var_15 = b_s_t_5.__str__()
    assert var_15 == '[]'

def test_case_416():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value == []
    var_5 = b_s_t_2.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.isValid()
    var_7 = var_6.__str__()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_417():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_1 = [node_2]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.add(list_1)
    assert len(b_s_t_5) == 1
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = var_5.__str__()
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.remove(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_4 = b_s_t_8.build(b_s_t_10)
    var_9 = b_s_t_8.contains(none_type_3)
    bool_4 = True
    node_5 = module_0.Node(bool_4)
    b_s_t_11 = module_0.BST()
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_12.remove(var_10)
    none_type_6 = None
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.remove(none_type_6)
    b_s_t_14 = module_0.BST()
    var_13 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    none_type_7 = b_s_t_13.build(b_s_t_15)
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_7 = module_0.Node(list_2)
    b_s_t_16 = module_0.BST()
    var_14 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    var_15 = b_s_t_17.isValid()
    var_16 = b_s_t_16.isValid()
    var_17 = b_s_t_3.remove(node_3)

def test_case_418():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_6 = b_s_t_3.isValid()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_0)
    bool_4 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_4)
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_3 = module_0.Node(list_3)
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_6.isValid()
    node_4 = module_0.Node(b_s_t_3)
    assert len(node_4.value) == 0

def test_case_419():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'

def test_case_420():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    none_type_4 = b_s_t_4.build(set_0)
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_5.add(var_3)
    assert len(b_s_t_5) == 1
    var_5 = b_s_t_2.isValid()

def test_case_421():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    var_8 = b_s_t_5.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_3)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    bool_5 = False
    list_4 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_4)
    var_10 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.isValid()
    node_6 = module_0.Node(b_s_t_8)
    assert len(node_6.value) == 0
    var_12 = b_s_t_8.contains(var_11)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder()
    var_14 = b_s_t_9.add(var_13)
    assert len(b_s_t_9) == 1
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_422():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    var_4 = b_s_t_4.minValueNode(node_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.remove(var_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_6.__len__()
    assert var_8 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_423():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    var_5 = b_s_t_3.contains(var_3)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_3 = module_0.Node(b_s_t_6)
    assert len(node_3.value) == 0
    var_8 = b_s_t_6.contains(var_7)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_7.build(set_0)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_424():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    var_7 = var_6.__str__()
    assert var_7 == 'None'
    node_1 = module_0.Node(var_0)
    assert node_1.value == []

def test_case_425():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.isValid()

def test_case_426():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_1.remove(var_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(b_s_t_6)
    assert len(node_5.value) == 0
    var_9 = b_s_t_6.minValueNode(node_5)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_9.value).__module__}.{type(var_9.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_9.value) == 0
    assert var_9.left is None
    assert var_9.right is None
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = b_s_t_7.build(b_s_t_9)
    var_12 = b_s_t_7.contains(none_type_3)
    b_s_t_10 = module_0.BST()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    none_type_5 = None
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.remove(none_type_5)
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    none_type_6 = b_s_t_11.build(b_s_t_13)
    var_16 = var_15.__str__()
    assert var_16 == '[]'
    none_type_7 = b_s_t_11.build(b_s_t_13)
    none_type_8 = None
    node_7 = module_0.Node(none_type_8)
    b_s_t_14 = module_0.BST()
    var_17 = var_16.__str__()
    assert var_17 == '[]'

def test_case_427():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'

def test_case_428():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_3 = b_s_t_1.isValid()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_2.build(b_s_t_4)
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    none_type_4 = b_s_t_2.build(b_s_t_4)
    none_type_5 = None
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.getOrder(none_type_5)
    var_8 = b_s_t_5.isValid()
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    b_s_t_6 = module_0.BST()
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    none_type_7 = b_s_t_9.build(set_0)
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.getOrder()
    var_10 = b_s_t_10.add(var_9)
    assert len(b_s_t_10) == 1
    node_7 = module_0.Node(var_10)
    assert node_7.value is None
    b_s_t_11 = module_0.BST()

def test_case_429():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.add(list_0)
    assert len(b_s_t_1) == 1
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.remove(var_2)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.contains(b_s_t_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_3)
    var_8 = b_s_t_7.isValid()
    var_9 = b_s_t_5.remove(list_0)

def test_case_430():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_2)
    var_4 = b_s_t_1.getOrder()
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_3)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    node_2 = module_0.Node(var_3)
    assert node_2.value is None

def test_case_431():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_1)
    var_6 = b_s_t_3.getOrder()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = var_1.__str__()
    assert var_8 == '[]'

def test_case_432():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    list_0 = [var_0, var_0]
    none_type_0 = b_s_t_0.build(list_0)
    assert len(b_s_t_0) == 2

def test_case_433():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_434():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder()
    var_12 = b_s_t_8.add(var_11)
    assert len(b_s_t_8) == 1
    var_13 = var_12.__str__()
    assert var_13 == 'None'
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.remove(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_2 = b_s_t_9.build(b_s_t_11)
    var_16 = b_s_t_8.isValid()

def test_case_435():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    var_5 = var_4.__str__()
    assert var_5 == 'None'
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    bool_2 = True
    node_0 = module_0.Node(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_8.contains(b_s_t_2)

def test_case_436():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_2 = module_0.Node(list_1)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    list_2 = [node_3]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.add(list_2)
    assert len(b_s_t_1) == 1
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_4.getOrder(b_s_t_3)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_6.build(b_s_t_8)
    bool_3 = False
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    bool_4 = False
    b_s_t_14 = module_0.BST()
    var_12 = b_s_t_14.remove(bool_4)
    b_s_t_15 = module_0.BST()
    b_s_t_16 = module_0.BST()
    var_13 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    var_14 = b_s_t_17.getOrder()
    b_s_t_18 = module_0.BST()
    var_15 = b_s_t_18.isValid()
    b_s_t_19 = module_0.BST()
    var_16 = b_s_t_19.getOrder()
    b_s_t_20 = module_0.BST()
    var_17 = b_s_t_20.getOrder()
    var_18 = b_s_t_20.add(var_17)
    assert len(b_s_t_20) == 1
    node_4 = module_0.Node(var_17)
    assert node_4.value == []
    node_5 = module_0.Node(bool_0)

def test_case_437():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_5.__len__()
    assert var_5 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    node_0 = module_0.Node(b_s_t_7)
    assert len(node_0.value) == 0
    var_9 = b_s_t_7.contains(var_8)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    node_1 = module_0.Node(b_s_t_8)
    assert len(node_1.value) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_438():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_2.__str__()
    assert var_7 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_9 = b_s_t_5.isValid()
    var_10 = b_s_t_2.getOrder()

def test_case_439():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)

def test_case_440():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.contains(b_s_t_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_1 = module_0.Node(list_1)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_2)
    var_9 = b_s_t_6.isValid()
    bool_5 = True
    node_3 = module_0.Node(bool_5)
    bool_6 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_6)
    none_type_0 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder(none_type_0)
    var_12 = b_s_t_7.getOrder()
    bool_7 = False
    list_3 = [bool_7, bool_7, bool_7, bool_7]
    node_4 = module_0.Node(list_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.isValid()
    var_15 = b_s_t_9.isValid()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_3.isValid()

def test_case_441():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)

def test_case_442():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    var_6 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    var_8 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder()
    bool_3 = False
    node_4 = module_0.Node(bool_3)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    var_11 = b_s_t_6.add(var_10)
    assert len(b_s_t_6) == 1
    node_6 = module_0.Node(list_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.isValid()
    node_7 = module_0.Node(b_s_t_7)
    assert len(node_7.value) == 0
    var_13 = b_s_t_7.contains(var_12)
    bool_5 = False
    list_4 = [bool_5, bool_5, bool_5, bool_5]
    node_8 = module_0.Node(list_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_14 = b_s_t_7.remove(var_13)
    bool_6 = False
    list_5 = [bool_6, bool_6, bool_6, bool_6]
    node_9 = module_0.Node(list_5)
    none_type_0 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.getOrder(none_type_0)
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    var_16 = b_s_t_9.isValid()
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_17 = b_s_t_10.remove(none_type_2)
    bool_7 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_18 = b_s_t_11.remove(bool_7)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_19 = b_s_t_12.contains(b_s_t_12)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_20 = b_s_t_13.__str__()
    assert var_20 == '[]'
    var_21 = b_s_t_13.__len__()
    assert var_21 == 0
    var_22 = b_s_t_12.contains(var_20)
    var_23 = b_s_t_7.isValid()

def test_case_443():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_3.contains(var_5)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.isValid()
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder(none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_11 = b_s_t_6.isValid()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = b_s_t_7.build(b_s_t_9)
    var_14 = b_s_t_7.contains(none_type_3)
    b_s_t_10 = module_0.BST()
    none_type_5 = None
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.getOrder(none_type_5)
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_12.isValid()
    node_6 = module_0.Node(b_s_t_12)
    node_7 = module_0.Node(var_0)
    assert node_7.value == []

def test_case_444():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_4.getOrder(b_s_t_3)
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    bool_3 = False
    node_1 = module_0.Node(bool_3)
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    var_7 = b_s_t_7.minValueNode(node_2)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_7.value).__module__}.{type(var_7.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_7.value) == 0
    assert var_7.left is None
    assert var_7.right is None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    list_1 = [var_8, var_8]
    none_type_1 = b_s_t_8.build(list_1)
    assert len(b_s_t_8) == 2
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    bool_4 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.remove(bool_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder()
    var_12 = b_s_t_11.add(var_11)
    assert len(b_s_t_11) == 1
    var_13 = var_12.__str__()
    assert var_13 == 'None'
    bool_5 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.remove(bool_5)
    bool_6 = False
    list_2 = [bool_6, bool_6, bool_6, bool_6]
    node_3 = module_0.Node(list_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.isValid()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.__str__()
    var_17 = b_s_t_5.__len__()
    assert var_17 == 0

def test_case_445():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    list_0 = [node_1]
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.add(list_0)
    assert len(b_s_t_6) == 1
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.isValid()
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.remove(none_type_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_5 = b_s_t_9.build(b_s_t_11)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_12 = module_0.BST()
    none_type_6 = b_s_t_12.build(set_0)
    var_9 = b_s_t_11.add(list_0)
    assert len(b_s_t_11) == 1

def test_case_446():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    set_0 = set()
    node_3 = module_0.Node(set_0)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_2)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_1)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_9.__len__()
    assert var_13 == 0
    var_14 = b_s_t_8.contains(var_12)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_15 = b_s_t_2.add(var_12)
    assert len(b_s_t_2) == 1

def test_case_447():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_4.__len__()
    assert var_3 == 0
    bool_0 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_6.__len__()
    assert var_6 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    var_9 = b_s_t_9.add(var_8)
    assert len(b_s_t_9) == 1
    node_3 = module_0.Node(var_8)
    assert node_3.value == []
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.isValid()
    node_4 = module_0.Node(b_s_t_10)
    assert len(node_4.value) == 0
    var_11 = b_s_t_10.contains(var_10)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_10.remove(var_11)
    bool_3 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.remove(bool_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_14 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_15 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_16 = b_s_t_4.add(b_s_t_12)
    assert len(b_s_t_4) == 1

def test_case_448():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2

def test_case_449():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(none_type_0)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.remove(bool_1)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    bool_3 = True
    node_1 = module_0.Node(bool_3)
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    var_9 = b_s_t_9.getOrder(b_s_t_8)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0

def test_case_450():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    list_0 = [var_0, var_0]
    none_type_0 = b_s_t_0.build(list_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    assert var_3 is False
    var_4 = b_s_t_2.__str__()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0

def test_case_451():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_3)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_7.getOrder(b_s_t_6)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    var_10 = b_s_t_10.add(var_9)
    assert len(b_s_t_10) == 1
    var_11 = var_1.__len__()
    assert var_11 == 0

def test_case_452():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_3.contains(var_5)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.isValid()
    var_10 = b_s_t_5.isValid()
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_3 = module_0.Node(list_3)
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_12.isValid()
    var_16 = var_8.__len__()
    assert var_16 == 0

def test_case_453():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_6 = b_s_t_4.minValueNode(node_3)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_6.value).__module__}.{type(var_6.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_6.value) == 0
    assert var_6.left is None
    assert var_6.right is None
    node_4 = module_0.Node(none_type_1)

def test_case_454():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_0 = module_0.Node(var_5)
    assert node_0.value == []
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_3.__str__()
    assert var_8 == '[]'
    bool_0 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(bool_0)
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_8)
    assert len(node_2.value) == 0
    var_12 = b_s_t_8.minValueNode(node_2)
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_12.value).__module__}.{type(var_12.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_12.value) == 0
    assert var_12.left is None
    assert var_12.right is None
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.isValid()
    node_3 = module_0.Node(b_s_t_14)
    assert len(node_3.value) == 0
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_17 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_18 = b_s_t_16.getOrder()
    var_19 = b_s_t_16.add(var_18)
    assert len(b_s_t_16) == 1
    node_4 = module_0.Node(var_18)
    assert node_4.value == []
    var_20 = b_s_t_16.isValid()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_5 = module_0.Node(bytes_0)

def test_case_455():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_456():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_457():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = var_4.__str__()
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_2)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_3)
    var_8 = b_s_t_5.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_8.__len__()
    assert var_11 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    var_15 = b_s_t_11.add(var_14)
    assert len(b_s_t_11) == 1
    var_16 = var_15.__str__()
    assert var_16 == 'None'
    bool_4 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.remove(bool_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_18 = b_s_t_13.contains(b_s_t_13)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_19 = b_s_t_14.__str__()
    assert var_19 == '[]'
    var_20 = b_s_t_14.__len__()
    assert var_20 == 0
    var_21 = b_s_t_13.contains(var_19)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    list_0 = [node_4]
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_22 = b_s_t_15.add(list_0)
    assert len(b_s_t_15) == 1
    var_23 = var_3.__str__()
    assert var_23 == '[]'

def test_case_458():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    bool_2 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    var_5 = b_s_t_3.isValid()
    var_6 = b_s_t_2.__str__()
    assert var_6 == '[]'

def test_case_459():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = var_1.__str__()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_6.build(b_s_t_8)
    var_8 = b_s_t_6.contains(none_type_2)
    bool_2 = False
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_11.__len__()
    node_3 = module_0.Node(b_s_t_11)

def test_case_460():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_461():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = b_s_t_1.build(b_s_t_1)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    var_1 = b_s_t_2.remove(none_type_3)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    none_type_4 = b_s_t_2.build(b_s_t_4)
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    none_type_5 = b_s_t_2.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.isValid()
    var_5 = var_4.__str__()
    none_type_6 = None
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(none_type_6)
    bool_0 = False
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(bool_0)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    bool_1 = False
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    none_type_7 = None
    node_1 = module_0.Node(none_type_7)
    list_0 = [node_1]
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.add(list_0)
    assert len(b_s_t_11) == 1
    var_12 = b_s_t_10.contains(var_3)

def test_case_462():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_3 = b_s_t_6.getOrder(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_4 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_5 = b_s_t_9.isValid()
    node_2 = module_0.Node(b_s_t_9)
    assert len(node_2.value) == 0
    var_6 = b_s_t_9.contains(var_5)
    var_7 = b_s_t_9.__str__()
    assert var_7 == '[]'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.getOrder()
    var_10 = b_s_t_11.add(var_9)
    assert len(b_s_t_11) == 1
    node_3 = module_0.Node(var_9)
    assert node_3.value == []
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    bool_1 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_13.remove(bool_1)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_14 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_15 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    var_16 = b_s_t_7.__len__()
    assert var_16 == 0

def test_case_463():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    var_4 = b_s_t_2.minValueNode(node_3)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    node_4 = module_0.Node(var_3)
    assert node_4.value == []

def test_case_464():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    list_2 = [var_3, var_3]
    none_type_4 = b_s_t_3.build(list_2)
    assert len(b_s_t_3) == 2
    none_type_5 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_5)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_6 = b_s_t_4.build(b_s_t_6)
    var_6 = b_s_t_4.contains(none_type_5)
    node_4 = module_0.Node(node_1)

def test_case_465():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    var_6 = b_s_t_0.__str__()
    assert var_6 == '[]'

def test_case_466():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_5.build(b_s_t_7)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    none_type_2 = b_s_t_8.build(set_0)
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_7 = b_s_t_10.getOrder()
    var_8 = b_s_t_10.add(var_7)
    assert len(b_s_t_10) == 1
    node_1 = module_0.Node(var_7)
    assert node_1.value == []
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    b_s_t_12 = module_0.BST()

def test_case_467():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.add(list_0)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.__len__()
    assert var_5 == 1

def test_case_468():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    var_3 = var_0.__str__()

def test_case_469():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_2 = b_s_t_2.contains(var_1)
    assert var_2 is False
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    list_0 = [node_2]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.add(list_0)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_5 = b_s_t_4.contains(var_4)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_4.remove(var_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_5 = module_0.Node(b_s_t_6)
    assert len(node_5.value) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_2)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    node_7 = module_0.Node(node_3)

def test_case_470():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'

def test_case_471():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    var_4 = b_s_t_1.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    var_6 = var_5.__str__()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    list_0 = [node_0]
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.add(list_0)
    assert len(b_s_t_8) == 1
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    list_2 = [var_11, var_11]
    none_type_2 = b_s_t_9.build(list_2)
    assert len(b_s_t_9) == 2
    var_12 = b_s_t_4.add(bool_0)
    assert len(b_s_t_4) == 1

def test_case_472():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'

def test_case_473():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    var_4 = b_s_t_3.contains(var_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_3.remove(var_4)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.isValid()
    var_9 = b_s_t_7.__len__()
    bool_1 = False
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.remove(bool_1)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder(none_type_3)
    var_12 = b_s_t_8.getOrder()
    b_s_t_10 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    none_type_4 = b_s_t_10.build(var_13)
    assert len(b_s_t_10) == 2
    bool_3 = False
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    none_type_5 = None
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.remove(none_type_5)
    bool_4 = False
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.remove(bool_4)
    var_17 = b_s_t_14.__str__()
    assert var_17 == '[]'
    var_18 = b_s_t_14.add(none_type_2)
    assert len(b_s_t_14) == 1

def test_case_474():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_0 = b_s_t_1.build(var_2)
    assert len(b_s_t_1) == 2
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_475():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = b_s_t_1.build(var_2)
    assert len(b_s_t_1) == 2
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_3.contains(var_5)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    var_10 = b_s_t_5.__str__()
    assert var_10 == '[]'
    var_11 = var_8.__str__()
    assert var_11 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_12 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    var_14 = b_s_t_7.contains(var_13)
    var_15 = b_s_t_7.__str__()
    assert var_15 == '[]'
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_16 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_17 = b_s_t_9.contains(b_s_t_9)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_18 = b_s_t_10.remove(bool_3)
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_19 = b_s_t_11.getOrder(none_type_2)
    var_20 = b_s_t_10.getOrder()
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_21 = b_s_t_12.getOrder(none_type_3)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_22 = b_s_t_14.isValid()
    var_23 = var_22.__str__()
    node_5 = module_0.Node(b_s_t_5)
    assert len(node_5.value) == 0

def test_case_476():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_5)
    assert node_1.value == []
    var_7 = b_s_t_4.isValid()
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.contains(b_s_t_6)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_7.__len__()
    assert var_11 == 0
    var_12 = b_s_t_6.contains(var_10)
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.contains(b_s_t_9)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_4 = True
    node_3 = module_0.Node(bool_4)
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.remove(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = var_15.__str__()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_5 = False
    list_1 = [bool_5, bool_5, bool_5, bool_5]
    node_4 = module_0.Node(list_1)
    var_17 = b_s_t_12.__str__()
    assert var_17 == '[]'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_18 = b_s_t_12.__len__()
    assert var_18 == 0
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    node_7 = module_0.Node(list_0)

def test_case_477():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = var_2.__str__()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_5 = module_0.Node(b_s_t_5)
    assert len(node_5.value) == 0
    var_5 = b_s_t_5.contains(var_4)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_5.remove(var_5)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder(none_type_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.isValid()
    node_7 = module_0.Node(b_s_t_9)
    assert len(node_7.value) == 0
    var_9 = b_s_t_3.isValid()

def test_case_478():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_479():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    list_0 = [var_0, var_0]
    none_type_0 = b_s_t_0.build(list_0)
    assert len(b_s_t_0) == 2
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_4 = b_s_t_3.contains(var_3)
    assert var_4 is False
    var_5 = b_s_t_3.__str__()
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    var_10 = b_s_t_6.add(var_9)
    assert len(b_s_t_6) == 1
    node_4 = module_0.Node(var_9)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_480():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    var_6 = b_s_t_6.getOrder(b_s_t_5)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder(none_type_2)
    b_s_t_9 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_8 = b_s_t_9.__str__()
    assert var_8 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    var_9 = b_s_t_9.isValid()
    bool_4 = False
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.remove(bool_4)
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    bool_5 = False
    b_s_t_15 = module_0.BST()
    var_13 = b_s_t_15.remove(bool_5)
    b_s_t_16 = module_0.BST()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_6 = True
    node_4 = module_0.Node(bool_6)
    none_type_4 = None
    b_s_t_17 = module_0.BST()
    var_14 = b_s_t_17.remove(none_type_4)
    b_s_t_18 = module_0.BST()
    var_15 = var_14.__str__()
    var_16 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1

def test_case_481():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_2)
    var_5 = b_s_t_4.getOrder()
    bool_2 = False
    node_4 = module_0.Node(bool_2)

def test_case_482():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_483():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    var_8 = var_2.__str__()
    assert var_8 == '[]'
    node_0 = module_0.Node(var_8)
    assert node_0.value == '[]'

def test_case_484():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    var_5 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_7 = b_s_t_3.contains(var_6)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.contains(b_s_t_5)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_6.remove(var_10)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.isValid()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    list_0 = [node_4]
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.add(list_0)
    assert len(b_s_t_8) == 1
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.remove(bool_2)
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder(none_type_2)
    var_16 = b_s_t_9.getOrder()
    bool_3 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_17 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0

def test_case_485():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = b_s_t_4.build(set_0)
    var_4 = b_s_t_1.getOrder()

def test_case_486():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)

def test_case_487():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_0)
    var_4 = b_s_t_4.isValid()
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_1)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    var_9 = b_s_t_9.add(var_8)
    assert len(b_s_t_9) == 1
    node_1 = module_0.Node(var_8)
    assert node_1.value == []
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = b_s_t_11.build(b_s_t_11)
    b_s_t_12 = module_0.BST()

def test_case_488():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_5.__len__()
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder(none_type_4)
    var_6 = b_s_t_7.isValid()
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    b_s_t_8 = module_0.BST()
    none_type_6 = b_s_t_8.build(b_s_t_8)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder()
    var_8 = b_s_t_9.add(var_7)
    assert len(b_s_t_9) == 1
    node_5 = module_0.Node(list_1)
    none_type_7 = None
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.getOrder(none_type_7)
    var_10 = b_s_t_1.add(b_s_t_6)
    assert len(b_s_t_1) == 1

def test_case_489():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_6 = b_s_t_3.contains(none_type_0)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.isValid()
    node_1 = module_0.Node(b_s_t_7)
    var_9 = b_s_t_7.contains(var_8)
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    bool_1 = False
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.getOrder()
    var_14 = b_s_t_10.getOrder(b_s_t_9)
    b_s_t_12 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    var_15 = b_s_t_12.__str__()
    assert var_15 == '[]'
    none_type_2 = b_s_t_12.build(var_15)
    assert len(b_s_t_12) == 2
    none_type_3 = None
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.getOrder(none_type_3)
    none_type_4 = None
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.remove(none_type_4)
    b_s_t_15 = module_0.BST()
    var_18 = b_s_t_15.getOrder()
    bool_3 = False
    node_3 = module_0.Node(bool_3)
    node_4 = module_0.Node(b_s_t_15)
    var_19 = b_s_t_15.minValueNode(node_4)
    assert f'{type(var_19).__module__}.{type(var_19).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_19.value).__module__}.{type(var_19.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_19.value) == 0
    assert var_19.left is None
    assert var_19.right is None
    b_s_t_16 = module_0.BST()
    var_20 = b_s_t_16.getOrder()
    bool_4 = False
    node_5 = module_0.Node(bool_4)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    var_21 = b_s_t_14.remove(var_11)

def test_case_490():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_1.remove(var_2)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.contains(b_s_t_5)
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    var_9 = b_s_t_3.remove(b_s_t_7)

def test_case_491():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    var_3 = b_s_t_2.isValid()
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.isValid()
    var_7 = b_s_t_6.__len__()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(none_type_4)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_5 = b_s_t_8.build(b_s_t_10)
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    none_type_6 = b_s_t_8.build(b_s_t_10)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.isValid()
    var_12 = var_11.__str__()
    var_13 = b_s_t_7.add(b_s_t_3)
    assert len(b_s_t_7) == 1

def test_case_492():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    var_5 = b_s_t_0.isValid()

def test_case_493():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_4 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    var_6 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1
    node_3 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    var_10 = b_s_t_6.add(var_9)
    assert len(b_s_t_6) == 1
    var_11 = var_10.__str__()
    assert var_11 == 'None'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_12 = b_s_t_7.__str__()
    assert var_12 == '[]'
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_7.__len__()
    assert var_13 == 0
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_494():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.contains(b_s_t_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    var_5 = b_s_t_2.contains(var_3)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    var_7 = b_s_t_3.getOrder()

def test_case_495():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_0 = module_0.Node(var_5)
    assert node_0.value == []
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_8.getOrder(b_s_t_7)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    none_type_0 = b_s_t_10.build(var_11)
    assert len(b_s_t_10) == 2
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0

def test_case_496():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = var_4.__str__()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_3)
    var_8 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_4 = module_0.Node(b_s_t_7)
    assert len(node_4.value) == 0
    var_10 = b_s_t_7.contains(var_9)
    var_11 = b_s_t_1.remove(none_type_2)

def test_case_497():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_2)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_3 = b_s_t_5.build(b_s_t_7)
    var_9 = b_s_t_5.contains(none_type_2)
    none_type_4 = b_s_t_2.build(var_6)
    assert len(b_s_t_2) == 2
    assert len(node_2.value) == 2

def test_case_498():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_5.build(b_s_t_7)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.getOrder(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    b_s_t_9 = module_0.BST()
    none_type_5 = None
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.remove(none_type_5)
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.getOrder()
    list_1 = [var_13, var_13]
    none_type_6 = b_s_t_12.build(list_1)
    assert len(b_s_t_12) == 2
    none_type_7 = None
    node_2 = module_0.Node(none_type_7)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_8 = None
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.remove(none_type_8)
    b_s_t_14 = module_0.BST()
    var_15 = var_14.__str__()
    var_16 = b_s_t_12.isValid()

def test_case_499():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_7.getOrder(b_s_t_6)
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_3 = b_s_t_9.build(b_s_t_11)
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    none_type_4 = None
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.getOrder(none_type_4)
    var_13 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_1 = module_0.Node(list_0)
    var_14 = b_s_t_13.__str__()
    assert var_14 == '[]'
    none_type_5 = b_s_t_13.build(var_14)
    assert len(b_s_t_13) == 2
    var_15 = b_s_t_5.__str__()
    assert var_15 == '[]'

def test_case_500():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_3.getOrder(b_s_t_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = b_s_t_6.build(b_s_t_6)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.remove(none_type_4)
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    node_4 = module_0.Node(b_s_t_8)
    var_7 = b_s_t_8.minValueNode(node_4)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_7.value).__module__}.{type(var_7.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_7.value) == 0
    assert var_7.left is None
    assert var_7.right is None
    var_8 = b_s_t_8.add(var_3)
    assert len(b_s_t_8) == 1
    assert len(node_4.value) == 1
    assert len(var_7.value) == 1

def test_case_501():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    var_8 = b_s_t_5.contains(var_7)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    var_9 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_3 = b_s_t_6.build(b_s_t_8)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_9.add(var_11)
    assert len(b_s_t_9) == 1
    node_4 = module_0.Node(list_0)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    none_type_5 = b_s_t_10.build(b_s_t_12)
    var_15 = b_s_t_10.contains(none_type_4)
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.isValid()
    node_5 = module_0.Node(b_s_t_13)
    var_17 = b_s_t_13.contains(var_16)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_1)
    b_s_t_14 = module_0.BST()
    var_18 = b_s_t_13.remove(var_17)
    b_s_t_15 = module_0.BST()

def test_case_502():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    var_7 = b_s_t_5.getOrder(var_1)

def test_case_503():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0

def test_case_504():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value is None
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    var_9 = b_s_t_7.getOrder(b_s_t_6)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_505():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    var_10 = b_s_t_8.__len__()
    assert var_10 == 0
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    bool_3 = False
    node_5 = module_0.Node(bool_3)
    node_6 = module_0.Node(b_s_t_10)
    assert len(node_6.value) == 0
    var_13 = b_s_t_10.minValueNode(node_6)
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_13.value).__module__}.{type(var_13.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_13.value) == 0
    assert var_13.left is None
    assert var_13.right is None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0

def test_case_506():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    list_0 = [var_1, var_1]
    none_type_1 = b_s_t_1.build(list_0)
    assert len(b_s_t_1) == 2
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_507():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_1 = module_0.Node(b_s_t_0)
    assert len(node_1.value) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    list_0 = [var_4, var_4]
    none_type_1 = b_s_t_6.build(list_0)
    assert len(b_s_t_6) == 2
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_8.build(b_s_t_10)
    var_8 = var_7.__str__()
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.remove(none_type_4)
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(b_s_t_12)
    var_11 = b_s_t_12.minValueNode(node_3)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_11.value).__module__}.{type(var_11.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_11.value) == 0
    assert var_11.left is None
    assert var_11.right is None
    var_12 = var_3.__str__()

def test_case_508():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    list_1 = [var_3, var_3]
    none_type_1 = b_s_t_4.build(list_1)
    assert len(b_s_t_4) == 2
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    var_4 = b_s_t_5.__str__()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_5.__len__()
    assert var_5 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_7.add(var_6)
    assert len(b_s_t_7) == 1
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.isValid()
    node_4 = module_0.Node(b_s_t_9)
    assert len(node_4.value) == 0
    var_10 = b_s_t_9.contains(var_9)
    var_11 = b_s_t_9.__str__()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    var_14 = b_s_t_11.add(var_13)
    assert len(b_s_t_11) == 1
    node_5 = module_0.Node(var_13)
    var_15 = b_s_t_11.isValid()
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.isValid()
    var_17 = b_s_t_13.__len__()
    assert var_17 == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0

def test_case_509():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_2)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_4 = b_s_t_5.build(b_s_t_7)
    var_8 = b_s_t_5.contains(none_type_3)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_7.isValid()

def test_case_510():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_2 = b_s_t_4.__str__()
    assert var_2 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    none_type_1 = b_s_t_5.build(var_3)
    assert len(b_s_t_5) == 2
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_6.__len__()
    assert var_5 == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder(none_type_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    list_3 = [var_7, var_7]
    none_type_4 = b_s_t_9.build(list_3)
    assert len(b_s_t_9) == 2
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.__str__()
    var_9 = b_s_t_10.__len__()
    assert var_9 == 0
    var_10 = b_s_t_10.__str__()
    var_11 = b_s_t_9.getOrder()

def test_case_511():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    var_6 = var_5.__str__()
    assert var_6 == 'None'
    var_7 = b_s_t_2.contains(var_6)

def test_case_512():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    var_1 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    b_s_t_4 = module_0.BST()
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_5.add(var_3)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder()
    list_1 = [var_8, var_8]
    none_type_4 = b_s_t_9.build(list_1)
    assert len(b_s_t_9) == 2
    b_s_t_10 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_9 = b_s_t_10.__str__()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    var_10 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.getOrder()
    var_12 = b_s_t_11.add(var_11)
    assert len(b_s_t_11) == 1
    node_6 = module_0.Node(var_12)
    assert node_6.value is None
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.getOrder()
    bool_4 = False
    node_7 = module_0.Node(bool_4)
    var_14 = b_s_t_4.isValid()

def test_case_513():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_4)
    assert node_2.value is None
    var_5 = var_2.__str__()

def test_case_514():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_3)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_2)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    var_13 = b_s_t_10.add(var_12)
    assert len(b_s_t_10) == 1
    var_14 = var_13.__str__()
    assert var_14 == 'None'
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_5 = b_s_t_11.build(b_s_t_11)
    bool_4 = False
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.remove(bool_4)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    var_17 = b_s_t_15.getOrder()
    none_type_6 = None
    b_s_t_16 = module_0.BST()
    var_18 = b_s_t_16.remove(none_type_6)
    b_s_t_17 = module_0.BST()

def test_case_515():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = var_2.__str__()
    assert var_5 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    var_10 = b_s_t_10.add(var_9)
    assert len(b_s_t_10) == 1
    node_2 = module_0.Node(var_9)
    assert node_2.value == []
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.isValid()
    node_3 = module_0.Node(b_s_t_13)
    assert len(node_3.value) == 0
    var_15 = b_s_t_13.contains(var_14)
    var_16 = b_s_t_13.__str__()
    assert var_16 == '[]'
    bool_1 = False
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_17 = b_s_t_14.remove(bool_1)
    none_type_2 = None
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_18 = b_s_t_15.getOrder(none_type_2)
    var_19 = b_s_t_14.getOrder()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    none_type_3 = None
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_20 = b_s_t_16.getOrder(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_21 = b_s_t_16.isValid()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_1)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_22 = b_s_t_17.getOrder()
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    var_23 = b_s_t_18.isValid()
    var_24 = b_s_t_17.isValid()
    var_25 = b_s_t_15.__str__()
    assert var_25 == '[]'

def test_case_516():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.getOrder(none_type_0)
    var_4 = var_2.__len__()
    assert var_4 == 2

def test_case_517():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_518():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_5.build(b_s_t_7)
    var_5 = b_s_t_5.contains(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    var_7 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.isValid()
    node_2 = module_0.Node(b_s_t_10)
    var_10 = b_s_t_10.contains(var_9)
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_0.minValueNode(node_1)
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'binarySearchTree2.Node'
    assert var_12.value is None
    assert var_12.left is None
    assert var_12.right is None

def test_case_519():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'

def test_case_520():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.isValid()
    var_3 = var_2.__str__()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_5.build(set_0)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_8.remove(var_5)
    var_7 = var_0.__str__()
    assert var_7 == '[]'

def test_case_521():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value == []
    var_6 = b_s_t_4.isValid()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_5.build(b_s_t_5)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_3 = b_s_t_6.build(b_s_t_8)
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    none_type_4 = b_s_t_6.build(b_s_t_8)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    node_3 = module_0.Node(list_0)
    var_12 = b_s_t_9.contains(var_4)
    assert var_12 is True

def test_case_522():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.contains(b_s_t_7)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_8.__len__()
    assert var_9 == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_9.add(var_11)
    assert len(b_s_t_9) == 1
    node_4 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.remove(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder()
    bool_3 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.remove(bool_3)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.getOrder()
    var_17 = b_s_t_14.add(var_16)
    assert len(b_s_t_14) == 1
    var_18 = var_17.__str__()
    assert var_18 == 'None'
    var_19 = b_s_t_0.__len__()
    assert var_19 == 0

def test_case_523():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_524():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_3.remove(var_5)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_525():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.remove(var_1)
    var_3 = b_s_t_1.contains(b_s_t_1)

def test_case_526():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.remove(var_7)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_8.add(var_10)
    assert len(b_s_t_8) == 1
    node_1 = module_0.Node(var_10)
    assert node_1.value == []
    var_12 = b_s_t_8.isValid()
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.remove(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.getOrder()
    bool_2 = False
    node_2 = module_0.Node(bool_2)
    node_3 = module_0.Node(b_s_t_10)
    assert len(node_3.value) == 0
    var_15 = b_s_t_10.minValueNode(node_3)
    assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_15.value).__module__}.{type(var_15.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_15.value) == 0
    assert var_15.left is None
    assert var_15.right is None
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.getOrder()
    var_17 = b_s_t_11.add(var_16)
    assert len(b_s_t_11) == 1
    node_5 = module_0.Node(list_0)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0

def test_case_527():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.minValueNode(node_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_3.value).__module__}.{type(var_3.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_3.value) == 0
    assert var_3.left is None
    assert var_3.right is None
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_8.build(b_s_t_8)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder(none_type_3)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    none_type_5 = b_s_t_10.build(b_s_t_12)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    b_s_t_13 = module_0.BST()
    var_10 = b_s_t_13.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_13.remove(var_10)
    node_5 = module_0.Node(var_4)

def test_case_528():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = var_2.__str__()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_0)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.__len__()
    assert var_8 == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    bool_4 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.remove(bool_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    var_13 = b_s_t_9.add(var_12)
    assert len(b_s_t_9) == 1
    var_14 = var_13.__str__()
    assert var_14 == 'None'
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.__str__()
    assert var_15 == '[]'
    bool_5 = True
    node_6 = module_0.Node(bool_5)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.__len__()
    assert var_16 == 0
    var_17 = b_s_t_8.remove(bool_0)

def test_case_529():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.isValid()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_0.__len__()
    assert var_5 == 0

def test_case_530():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_4.getOrder(b_s_t_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_0 = module_0.Node(b_s_t_6)
    assert len(node_0.value) == 0
    var_7 = b_s_t_6.contains(var_6)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    node_1 = module_0.Node(var_9)
    assert node_1.value == []
    var_11 = b_s_t_8.isValid()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.isValid()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    list_1 = [node_3]
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.add(list_1)
    assert len(b_s_t_10) == 1
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    bool_2 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.remove(bool_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.getOrder()
    var_17 = b_s_t_13.add(var_16)
    assert len(b_s_t_13) == 1
    var_18 = var_17.__str__()
    assert var_18 == 'None'
    dict_0 = {}
    var_19 = b_s_t_5.remove(dict_0)

def test_case_531():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    var_7 = var_6.__str__()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.isValid()
    node_0 = module_0.Node(b_s_t_5)
    assert len(node_0.value) == 0
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder(none_type_0)
    var_10 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    var_12 = b_s_t_7.add(var_11)
    assert len(b_s_t_7) == 1
    node_1 = module_0.Node(var_12)
    assert node_1.value is None
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_3.getOrder()

def test_case_532():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    var_1 = b_s_t_1.contains(var_0)
    assert var_1 is False
    bool_0 = False
    b_s_t_2 = module_0.BST()
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_4.getOrder(b_s_t_3)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.isValid()
    var_8 = var_7.__str__()
    b_s_t_9 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_9.__len__()
    bool_3 = False
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    none_type_5 = None
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.getOrder(none_type_5)
    var_13 = b_s_t_7.isValid()

def test_case_533():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_3.contains(var_5)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(b_s_t_5)
    str_0 = '\t~xX$S\rQLR=dkM'
    var_8 = b_s_t_1.contains(str_0)

def test_case_534():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = b_s_t_1.build(var_1)
    assert len(b_s_t_1) == 2
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = var_2.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = var_6.__str__()
    str_0 = 'zd,F(|4$'
    node_3 = module_0.Node(str_0)

def test_case_535():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    none_type_2 = b_s_t_4.build(var_6)
    assert len(b_s_t_4) == 2
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    bool_4 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.remove(bool_4)
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder(none_type_3)
    var_12 = b_s_t_9.getOrder()
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.remove(none_type_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder()
    bool_5 = False
    node_2 = module_0.Node(bool_5)
    node_3 = module_0.Node(b_s_t_12)
    assert len(node_3.value) == 0
    var_15 = b_s_t_12.minValueNode(node_3)
    assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_15.value).__module__}.{type(var_15.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_15.value) == 0
    assert var_15.left is None
    assert var_15.right is None
    bool_6 = False
    list_2 = [bool_6, bool_6, bool_6, bool_6]
    node_4 = module_0.Node(list_2)
    none_type_5 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.getOrder(none_type_5)
    var_17 = b_s_t_9.__len__()
    assert var_17 == 0

def test_case_536():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.contains(b_s_t_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_5.__len__()
    assert var_5 == 0
    var_6 = b_s_t_4.contains(var_4)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_8.build(b_s_t_10)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    b_s_t_12 = module_0.BST()
    none_type_4 = None
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.getOrder(none_type_4)
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_2.getOrder()

def test_case_537():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []
    var_5 = b_s_t_3.isValid()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_6.getOrder(b_s_t_5)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_8.__len__()
    assert var_11 == 0
    var_12 = b_s_t_8.__str__()
    assert var_12 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_538():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_3 = b_s_t_2.contains(none_type_1)
    var_4 = var_3.__str__()

def test_case_539():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    var_7 = var_6.__str__()
    var_8 = b_s_t_0.__str__()
    assert var_8 == '[]'

def test_case_540():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0

def test_case_541():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.__len__()
    assert var_0 == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    bool_3 = True
    node_3 = module_0.Node(bool_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__len__()
    assert var_2 == 0
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(var_2)
    assert node_5.value == 0
    bool_4 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_5 = True
    node_6 = module_0.Node(bool_5)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_7 = b_s_t_10.contains(b_s_t_10)
    var_8 = b_s_t_3.remove(var_7)

def test_case_542():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_543():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()

def test_case_544():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_3 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_6.build(b_s_t_8)
    var_5 = b_s_t_6.contains(none_type_1)
    var_6 = b_s_t_0.contains(none_type_2)

def test_case_545():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    none_type_3 = b_s_t_5.build(b_s_t_7)
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    none_type_4 = b_s_t_5.build(b_s_t_7)
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.remove(none_type_5)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_9)
    var_12 = b_s_t_9.minValueNode(node_2)
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_12.value).__module__}.{type(var_12.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_12.value) == 0
    assert var_12.left is None
    assert var_12.right is None
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_10.__len__()
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'
    var_16 = var_13.__str__()
    assert var_16 == '[]'
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    none_type_6 = None
    b_s_t_11 = module_0.BST()
    var_17 = b_s_t_11.getOrder(none_type_6)
    var_18 = b_s_t_11.isValid()
    var_19 = var_18.__str__()

def test_case_546():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = var_3.__str__()
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.contains(b_s_t_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.__len__()
    assert var_8 == 0
    var_9 = b_s_t_5.contains(var_7)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder()
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder(none_type_2)
    var_14 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.getOrder()
    var_17 = b_s_t_11.add(var_16)
    assert len(b_s_t_11) == 1
    node_5 = module_0.Node(var_16)
    assert node_5.value == []
    var_18 = var_5.__str__()

def test_case_547():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_3 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_4 = True
    node_4 = module_0.Node(bool_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_3)
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder(none_type_0)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_6 = b_s_t_7.isValid()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_8.build(b_s_t_10)
    var_9 = b_s_t_8.contains(none_type_2)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    var_11 = b_s_t_11.add(var_10)
    assert len(b_s_t_11) == 1
    node_7 = module_0.Node(var_11)
    assert node_7.value is None
    node_8 = module_0.Node(none_type_3)

def test_case_548():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.minValueNode(node_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_3.value).__module__}.{type(var_3.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_3.value) == 0
    assert var_3.left is None
    assert var_3.right is None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_1)
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(var_8)
    assert node_3.value == []
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_6.__str__()
    assert var_11 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    list_1 = [var_12, var_12]
    none_type_2 = b_s_t_9.build(list_1)
    assert len(b_s_t_9) == 2
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_10.build(set_0)
    var_13 = b_s_t_10.__str__()
    var_14 = b_s_t_2.add(b_s_t_2)
    assert len(b_s_t_2) == 1
    assert len(node_2.value) == 1
    assert len(var_3.value) == 1

def test_case_549():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_0 = b_s_t_2.build(var_3)
    assert len(b_s_t_2) == 2
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(set_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.isValid()
    node_3 = module_0.Node(b_s_t_8)
    assert len(node_3.value) == 0
    var_8 = b_s_t_8.contains(var_7)
    var_9 = b_s_t_2.minValueNode(node_1)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert var_9.value == [False, False, False, False]
    assert var_9.left is None
    assert var_9.right is None

def test_case_550():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    none_type_3 = b_s_t_2.build(b_s_t_4)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    none_type_4 = b_s_t_5.build(set_0)
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.__len__()
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    node_4 = module_0.Node(var_6)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'

def test_case_551():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.getOrder(none_type_2)
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.isValid()
    node_0 = module_0.Node(b_s_t_5)
    bool_0 = False
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.remove(bool_0)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder(none_type_3)
    var_7 = b_s_t_6.getOrder()
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_8.remove(var_8)
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(none_type_5)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    none_type_6 = b_s_t_9.build(b_s_t_11)
    var_12 = b_s_t_10.contains(none_type_4)

def test_case_552():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_553():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_6 = b_s_t_3.minValueNode(node_2)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_6.value).__module__}.{type(var_6.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_6.value) == 0
    assert var_6.left is None
    assert var_6.right is None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    var_8 = b_s_t_4.__len__()
    assert var_8 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    var_12 = b_s_t_7.add(var_11)
    assert len(b_s_t_7) == 1
    var_13 = var_12.__str__()
    assert var_13 == 'None'
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_14 = b_s_t_8.remove(none_type_1)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.__len__()
    assert var_15 == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(var_15)
    assert node_5.value == 0
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_16 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.getOrder(none_type_3)
    bool_4 = False
    list_0 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_0)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_18 = b_s_t_8.add(node_4)
    assert len(b_s_t_8) == 1

def test_case_554():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_3 = b_s_t_1.build(b_s_t_3)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    var_7 = b_s_t_6.contains(var_6)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_6.remove(var_7)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    none_type_4 = b_s_t_8.build(set_0)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    none_type_6 = None
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.remove(none_type_6)
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_10.add(none_type_2)
    assert len(b_s_t_10) == 1

def test_case_555():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    var_3 = b_s_t_1.getOrder()
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.contains(b_s_t_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.contains(b_s_t_7)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_8.__len__()
    assert var_10 == 0
    var_11 = b_s_t_7.contains(var_9)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    bool_4 = False
    node_3 = module_0.Node(bool_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.isValid()
    node_4 = module_0.Node(b_s_t_12)
    assert len(node_4.value) == 0
    var_15 = b_s_t_2.__len__()
    assert var_15 == 0

def test_case_556():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_0)
    var_5 = b_s_t_1.__len__()
    assert var_5 == 1

def test_case_557():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value == []
    var_5 = b_s_t_2.isValid()
    node_1 = module_0.Node(var_3)
    assert node_1.value == []

def test_case_558():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_3 = b_s_t_3.build(b_s_t_5)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    var_6 = b_s_t_7.contains(var_5)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_8.remove(var_7)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    none_type_6 = b_s_t_9.build(set_0)
    bool_0 = False
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.remove(bool_0)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.contains(b_s_t_11)
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_12.__len__()
    var_13 = b_s_t_11.contains(var_11)
    bool_1 = False
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.remove(bool_1)
    none_type_7 = None
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.getOrder(none_type_7)
    var_16 = b_s_t_13.getOrder()
    b_s_t_15 = module_0.BST()
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    b_s_t_16 = module_0.BST()
    none_type_9 = b_s_t_16.build(b_s_t_16)
    b_s_t_17 = module_0.BST()

def test_case_559():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_8.add(var_7)
    assert len(b_s_t_8) == 1
    node_4 = module_0.Node(var_7)
    assert node_4.value == []
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_9.__len__()
    assert var_10 == 0
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    var_13 = var_7.__str__()
    assert var_13 == '[]'

def test_case_560():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.isValid()
    var_8 = b_s_t_4.isValid()
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = b_s_t_6.build(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_9.__len__()
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.getOrder(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.getOrder()
    list_2 = [var_14, var_14]
    none_type_4 = b_s_t_12.build(list_2)
    assert len(b_s_t_12) == 2
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder()
    var_17 = b_s_t_14.add(var_16)
    assert len(b_s_t_14) == 1
    node_3 = module_0.Node(var_16)
    bool_3 = False
    b_s_t_15 = module_0.BST()
    var_18 = b_s_t_15.remove(bool_3)
    b_s_t_16 = module_0.BST()
    var_19 = b_s_t_16.contains(b_s_t_16)
    b_s_t_17 = module_0.BST()
    var_20 = b_s_t_17.__str__()
    var_21 = b_s_t_17.__len__()
    var_22 = b_s_t_16.contains(var_20)
    var_23 = b_s_t_11.__len__()

def test_case_561():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_4.getOrder(b_s_t_3)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()
    node_0 = module_0.Node(b_s_t_9)
    assert len(node_0.value) == 0
    var_11 = b_s_t_9.contains(var_10)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_9.remove(var_11)
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.__len__()
    assert var_13 == 0
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    node_4 = module_0.Node(var_13)
    assert node_4.value == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder()
    var_15 = b_s_t_12.add(var_14)
    assert len(b_s_t_12) == 1
    node_5 = module_0.Node(var_15)
    assert node_5.value is None
    node_6 = module_0.Node(var_12)

def test_case_562():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_7 = b_s_t_3.contains(var_6)
    assert var_7 is False
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.remove(none_type_0)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.remove(bool_1)
    var_10 = b_s_t_5.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_5.getOrder(node_1)

def test_case_563():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_0 = module_0.Node(var_6)
    assert node_0.value == []
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_3.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder()
    var_13 = b_s_t_8.add(var_12)
    assert len(b_s_t_8) == 1
    var_14 = var_13.__str__()
    assert var_14 == 'None'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_1 = b_s_t_9.build(set_0)
    var_15 = b_s_t_9.__str__()
    assert var_15 == '[]'
    set_1 = set()
    node_2 = module_0.Node(set_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = b_s_t_10.build(set_1)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.getOrder()
    var_17 = b_s_t_11.add(var_16)
    assert len(b_s_t_11) == 1
    node_4 = module_0.Node(list_0)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_18 = b_s_t_12.isValid()
    node_5 = module_0.Node(b_s_t_12)
    assert len(node_5.value) == 0
    var_19 = var_14.__str__()
    assert var_19 == 'None'

def test_case_564():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    var_5 = b_s_t_3.getOrder()
    var_6 = var_5.__len__()
    assert var_6 == 0

def test_case_565():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    var_5 = b_s_t_3.contains(var_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_3 = module_0.Node(var_7)
    assert node_3.value == []
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_4 = module_0.Node(b_s_t_7)
    assert len(node_4.value) == 0
    var_10 = b_s_t_7.contains(var_9)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_7.remove(var_10)
    bool_4 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.remove(bool_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    bool_5 = False
    node_6 = module_0.Node(bool_5)
    bool_6 = False
    list_2 = [bool_6, bool_6, bool_6, bool_6]
    node_7 = module_0.Node(list_2)
    none_type_1 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder(none_type_1)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    var_15 = b_s_t_12.isValid()
    var_16 = b_s_t_3.__len__()
    assert var_16 == 0

def test_case_566():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_567():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(bool_2)
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_0)
    var_5 = b_s_t_5.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_7.__len__()
    assert var_7 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_568():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)

def test_case_569():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.contains(b_s_t_5)
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_8 = b_s_t_7.contains(var_7)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    bool_4 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(bool_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_12 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_13 = b_s_t_14.getOrder()
    var_14 = b_s_t_14.add(var_13)
    assert len(b_s_t_14) == 1
    node_5 = module_0.Node(var_13)
    assert node_5.value == []
    bool_5 = False
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_15 = b_s_t_15.remove(bool_5)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_16 = b_s_t_16.contains(b_s_t_16)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_17 = b_s_t_17.__str__()
    assert var_17 == '[]'
    var_18 = b_s_t_17.__len__()
    assert var_18 == 0
    var_19 = b_s_t_16.contains(var_17)
    var_20 = var_2.__str__()
    assert var_20 == '[]'

def test_case_570():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    var_5 = b_s_t_6.add(var_4)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_4)
    assert node_2.value == []
    var_6 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(var_8)
    assert node_3.value is None
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_8.build(set_0)
    bool_1 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(bool_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_2 = False
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_12 = b_s_t_14.remove(bool_2)
    none_type_4 = None
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_13 = b_s_t_15.getOrder(none_type_4)
    var_14 = b_s_t_14.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_15 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_16 = b_s_t_17.getOrder()
    var_17 = b_s_t_17.add(var_16)
    assert len(b_s_t_17) == 1
    node_5 = module_0.Node(var_16)
    assert node_5.value == []
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    var_18 = b_s_t_18.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_16.__str__()
    assert var_19 == '[]'
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_19 = module_0.BST()
    assert len(b_s_t_19) == 0
    var_20 = b_s_t_19.__len__()
    assert var_20 == 0
    node_7 = module_0.Node(var_16)
    assert node_7.value == []

def test_case_571():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    var_4 = b_s_t_3.contains(var_3)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    list_0 = [node_1]
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.add(list_0)
    assert len(b_s_t_4) == 1
    bool_0 = False
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.remove(bool_0)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_4 = b_s_t_6.build(b_s_t_8)
    node_2 = module_0.Node(b_s_t_8)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.isValid()
    var_11 = b_s_t_9.isValid()
    b_s_t_11 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_12 = b_s_t_11.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.isValid()
    node_5 = module_0.Node(b_s_t_13)
    var_16 = b_s_t_13.contains(var_15)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_13.remove(var_16)
    var_18 = b_s_t_11.__str__()
    assert var_18 == '[]'

def test_case_572():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    node_2 = module_0.Node(list_0)
    set_1 = set()
    node_3 = module_0.Node(set_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_573():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None

def test_case_574():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_0.remove(node_0)

def test_case_575():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_1)
    var_5 = b_s_t_2.getOrder()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    bool_4 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.remove(bool_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.contains(b_s_t_10)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.isValid()
    node_4 = module_0.Node(b_s_t_11)
    assert len(node_4.value) == 0
    var_13 = b_s_t_11.contains(var_12)
    none_type_2 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.remove(none_type_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    none_type_3 = b_s_t_12.build(b_s_t_14)
    node_5 = module_0.Node(b_s_t_14)
    var_16 = b_s_t_10.getOrder()

def test_case_576():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    b_s_t_6 = module_0.BST()

def test_case_577():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_1 = False
    node_0 = module_0.Node(bool_1)
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_7.__len__()
    assert var_6 == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_578():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_5.build(set_0)
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.isValid()
    var_10 = var_9.__str__()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_7.build(b_s_t_9)
    node_2 = module_0.Node(b_s_t_9)
    b_s_t_10 = module_0.BST()

def test_case_579():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_2)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_1)
    var_5 = b_s_t_3.getOrder()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    list_0 = [node_3]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.add(list_0)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    var_12 = b_s_t_0.isValid()

def test_case_580():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.contains(b_s_t_5)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.__len__()
    assert var_9 == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(var_9)
    assert node_3.value == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_581():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'

def test_case_582():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_6 = b_s_t_3.isValid()

def test_case_583():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_1.build(var_0)
    assert len(b_s_t_1) == 2
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False

def test_case_584():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(set_0)
    var_0 = b_s_t_2.__str__()
    assert var_0 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.minValueNode(node_2)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'binarySearchTree2.Node'
    assert var_1.value == [False, False, False, False]
    assert var_1.left is None
    assert var_1.right is None
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_3 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    complex_0 = -359.59143 + 3330.9239j
    var_5 = b_s_t_8.remove(complex_0)

def test_case_585():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0

def test_case_586():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_2)
    none_type_0 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder(none_type_0)
    var_9 = b_s_t_7.getOrder()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_3 = True
    node_3 = module_0.Node(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.__len__()
    assert var_10 == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(var_10)
    assert node_5.value == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    var_13 = b_s_t_11.add(var_12)
    assert len(b_s_t_11) == 1
    node_6 = module_0.Node(var_12)
    assert node_6.value == []
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.isValid()
    node_7 = module_0.Node(b_s_t_13)
    assert len(node_7.value) == 0
    var_16 = b_s_t_13.contains(var_15)
    var_17 = b_s_t_13.__str__()
    assert var_17 == '[]'
    bool_4 = True
    node_8 = module_0.Node(bool_4)
    var_18 = b_s_t_0.isValid()

def test_case_587():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_1)
    var_5 = b_s_t_2.isValid()
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    var_8 = b_s_t_3.contains(none_type_2)
    bool_0 = False
    b_s_t_6 = module_0.BST()
    var_9 = b_s_t_6.remove(bool_0)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.getOrder()
    var_13 = var_12.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_4.getOrder(b_s_t_4)

def test_case_588():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_5 = b_s_t_2.contains(none_type_1)
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    list_0 = [node_0]
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.add(list_0)
    assert len(b_s_t_5) == 1
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_7)
    var_9 = b_s_t_7.minValueNode(node_2)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_9.value).__module__}.{type(var_9.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_9.value) == 0
    assert var_9.left is None
    assert var_9.right is None
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_8.__len__()
    bool_4 = False
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.remove(bool_4)
    b_s_t_11 = module_0.BST()
    none_type_6 = None
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.remove(none_type_6)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_6 = module_0.Node(list_3)
    var_14 = b_s_t_14.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_14.isValid()
    b_s_t_15 = module_0.BST()
    var_16 = b_s_t_15.getOrder()
    list_4 = []
    none_type_7 = b_s_t_14.build(list_4)

def test_case_589():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()

def test_case_590():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    none_type_5 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_5)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = var_3.__str__()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_6 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder(none_type_6)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.isValid()
    node_7 = module_0.Node(b_s_t_8)
    assert len(node_7.value) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    var_9 = b_s_t_10.add(var_8)
    assert len(b_s_t_10) == 1
    node_8 = module_0.Node(var_8)
    assert node_8.value == []
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    bool_4 = True
    node_9 = module_0.Node(bool_4)
    bool_5 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.remove(bool_5)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_13.contains(b_s_t_13)
    var_14 = b_s_t_3.__str__()
    assert var_14 == '[]'

def test_case_591():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_3 = module_0.Node(var_5)
    assert node_3.value is None
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(b_s_t_4)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    var_7 = b_s_t_2.add(node_2)
    assert len(b_s_t_2) == 1

def test_case_592():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    var_5 = b_s_t_1.__len__()
    assert var_5 == 0
    node_0 = module_0.Node(var_5)
    assert node_0.value == 0

def test_case_593():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    none_type_3 = b_s_t_3.build(b_s_t_5)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_4 = b_s_t_3.build(b_s_t_5)
    bool_0 = False
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.remove(bool_0)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    bool_1 = False
    b_s_t_11 = module_0.BST()
    var_8 = b_s_t_11.remove(bool_1)
    b_s_t_12 = module_0.BST()
    var_9 = b_s_t_12.contains(b_s_t_12)
    b_s_t_13 = module_0.BST()
    var_10 = b_s_t_13.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_13.__len__()
    var_12 = b_s_t_12.contains(var_10)
    var_13 = var_9.__str__()

def test_case_594():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    node_0 = module_0.Node(b_s_t_5)
    assert len(node_0.value) == 0
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = var_7.__str__()

def test_case_595():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_8.__len__()
    assert var_8 == 0
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_3 = b_s_t_9.build(b_s_t_11)
    node_3 = module_0.Node(b_s_t_11)
    none_type_4 = None
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.remove(none_type_4)
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    none_type_5 = b_s_t_12.build(b_s_t_14)
    var_13 = b_s_t_12.contains(none_type_4)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    none_type_7 = None
    b_s_t_15 = module_0.BST()
    var_14 = b_s_t_15.getOrder(none_type_7)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    none_type_8 = None
    node_6 = module_0.Node(none_type_8)
    b_s_t_16 = module_0.BST()
    var_15 = b_s_t_13.add(none_type_5)
    assert len(b_s_t_13) == 1

def test_case_596():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1

def test_case_597():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    var_4 = b_s_t_2.isValid()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.isValid()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.minValueNode(node_3)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert var_11.value == [False, False, False, False]
    assert var_11.left is None
    assert var_11.right is None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_598():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'

def test_case_599():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    b_s_t_4 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    var_5 = b_s_t_5.contains(b_s_t_1)

def test_case_600():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_5.build(set_0)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.minValueNode(node_3)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert var_10.value == [False, False, False, False]
    assert var_10.left is None
    assert var_10.right is None
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_9.build(b_s_t_9)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    var_12 = b_s_t_10.add(var_11)
    assert len(b_s_t_10) == 1
    node_6 = module_0.Node(list_2)
    set_1 = set()
    node_7 = module_0.Node(set_1)
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.isValid()
    var_16 = b_s_t_6.getOrder()

def test_case_601():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(set_0)
    node_1 = module_0.Node(node_0)

def test_case_602():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.remove(none_type_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    none_type_4 = b_s_t_3.build(b_s_t_5)
    none_type_5 = None
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.remove(none_type_5)
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_6 = b_s_t_6.build(b_s_t_8)
    var_6 = b_s_t_6.contains(none_type_5)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_7 = None
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder(none_type_7)
    none_type_8 = None
    node_2 = module_0.Node(none_type_8)
    var_8 = b_s_t_9.isValid()
    node_3 = module_0.Node(none_type_8)

def test_case_603():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.__len__()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(var_0)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    var_1 = b_s_t_2.__len__()
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(none_type_3)
    b_s_t_4 = module_0.BST()
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.contains(b_s_t_5)
    bool_3 = False
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_5 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_7 = b_s_t_11.getOrder()
    list_0 = [var_7, var_7]
    none_type_4 = b_s_t_11.build(list_0)
    assert len(b_s_t_11) == 2
    node_6 = module_0.Node(bool_1)

def test_case_604():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.__len__()
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    node_4 = module_0.Node(var_0)

def test_case_605():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    list_0 = [var_0, var_0]
    none_type_0 = b_s_t_0.build(list_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_1)
    var_1 = b_s_t_1.__str__()
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_2)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_2 = False
    node_2 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    var_8 = var_7.__str__()
    assert var_8 == 'None'
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[[]]'

def test_case_606():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_1 = b_s_t_3.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_3.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.minValueNode(node_3)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert var_3.value == [False, False, False, False]
    assert var_3.left is None
    assert var_3.right is None
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_3)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder(none_type_2)
    var_7 = b_s_t_5.getOrder()
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    var_8 = var_0.__str__()

def test_case_607():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_5 = b_s_t_2.contains(none_type_0)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.__len__()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    node_6 = module_0.Node(var_7)
    bool_4 = False
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.remove(bool_4)
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_10.add(var_10)
    assert len(b_s_t_10) == 1
    node_7 = module_0.Node(var_10)
    assert node_7.value == []
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    node_8 = module_0.Node(b_s_t_2)
    assert len(node_8.value) == 0

def test_case_608():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_1.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.getOrder()
    set_1 = set()
    node_3 = module_0.Node(set_1)
    b_s_t_7 = module_0.BST()
    none_type_2 = b_s_t_7.build(set_1)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_7.isValid()

def test_case_609():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'binarySearchTree2.Node'
    assert var_1.value == [False, False, False, False]
    assert var_1.left is None
    assert var_1.right is None
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.contains(b_s_t_3)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = b_s_t_4.build(set_0)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_1)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    var_6 = b_s_t_8.__str__()
    assert var_6 == '[]'
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_3)
    var_7 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.isValid()
    node_7 = module_0.Node(b_s_t_9)
    assert len(node_7.value) == 0
    var_9 = b_s_t_9.contains(var_8)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_5 = False
    list_4 = [bool_5, bool_5, bool_5, bool_5]
    node_8 = module_0.Node(list_4)
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    node_9 = module_0.Node(node_6)

def test_case_610():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    node_1 = module_0.Node(b_s_t_3)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    none_type_2 = b_s_t_4.build(set_0)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    bool_1 = False
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()

def test_case_611():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = var_3.__str__()
    assert var_6 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    var_10 = b_s_t_6.add(var_9)
    assert len(b_s_t_6) == 1
    var_11 = var_10.__str__()
    assert var_11 == 'None'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.__str__()
    assert var_12 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.remove(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = var_13.__str__()
    bool_3 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_17 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_18 = b_s_t_16.getOrder()
    bool_4 = False
    node_3 = module_0.Node(bool_4)
    none_type_3 = None
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_19 = b_s_t_17.remove(none_type_3)
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    var_20 = b_s_t_18.getOrder()
    b_s_t_19 = module_0.BST()
    assert len(b_s_t_19) == 0
    none_type_4 = b_s_t_17.build(b_s_t_19)
    var_21 = b_s_t_17.contains(none_type_3)
    b_s_t_20 = module_0.BST()
    var_22 = b_s_t_20.isValid()
    node_4 = module_0.Node(b_s_t_20)
    var_23 = b_s_t_20.contains(var_22)
    bool_5 = False
    b_s_t_21 = module_0.BST()
    var_24 = b_s_t_21.remove(bool_5)
    none_type_5 = None
    b_s_t_22 = module_0.BST()
    var_25 = b_s_t_22.getOrder(none_type_5)
    var_26 = b_s_t_21.getOrder()
    node_5 = module_0.Node(var_16)
    assert node_5.value == []

def test_case_612():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_4.build(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    set_1 = set()
    node_4 = module_0.Node(set_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder(none_type_4)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.isValid()
    var_13 = b_s_t_11.__len__()
    assert var_13 == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder()
    var_15 = b_s_t_11.__len__()
    assert var_15 == 0
    var_16 = b_s_t_5.minValueNode(node_1)
    assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'binarySearchTree2.Node'
    assert var_16.value == [False, False, False, False]
    assert var_16.left is None
    assert var_16.right is None

def test_case_613():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_614():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    none_type_3 = b_s_t_3.build(b_s_t_5)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    b_s_t_6 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder()
    list_1 = [var_9, var_9]
    none_type_4 = b_s_t_8.build(list_1)
    assert len(b_s_t_8) == 2
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    node_1 = module_0.Node(var_11)
    assert node_1.value is None
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.getOrder()
    var_13 = var_12.__str__()
    var_14 = b_s_t_2.getOrder()

def test_case_615():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_3 = b_s_t_6.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_6.__len__()
    assert var_4 == 0
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    var_6 = var_3.__str__()
    assert var_6 == '[]'
    none_type_2 = b_s_t_1.build(list_0)
    assert len(b_s_t_1) == 4

def test_case_616():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_4.getOrder(b_s_t_3)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_6.build(b_s_t_6)
    var_6 = b_s_t_4.isValid()

def test_case_617():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    var_6 = b_s_t_4.isValid()
    var_7 = var_4.__len__()
    assert var_7 == 2

def test_case_618():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_1.__str__()
    assert var_5 == '[]'
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_4.build(b_s_t_6)
    var_8 = b_s_t_4.contains(none_type_0)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    b_s_t_9 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder()
    var_15 = b_s_t_11.add(var_14)
    assert len(b_s_t_11) == 1
    node_3 = module_0.Node(var_14)
    assert node_3.value == []
    set_0 = set()
    node_4 = module_0.Node(set_0)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    b_s_t_12 = module_0.BST()
    none_type_3 = None
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.remove(none_type_3)
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    none_type_4 = b_s_t_13.build(b_s_t_15)
    node_6 = module_0.Node(b_s_t_15)
    var_18 = b_s_t_4.__len__()
    assert var_18 == 0

def test_case_619():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.isValid()
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    var_1 = b_s_t_2.contains(var_0)
    assert var_1 is False
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.contains(b_s_t_4)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.isValid()
    node_4 = module_0.Node(b_s_t_7)
    assert len(node_4.value) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.getOrder()
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.getOrder()
    var_11 = b_s_t_11.add(var_10)
    assert len(b_s_t_11) == 1
    var_12 = var_11.__str__()
    assert var_12 == 'None'
    bool_4 = True
    node_5 = module_0.Node(bool_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.isValid()
    var_14 = b_s_t_0.isValid()

def test_case_620():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.remove(bool_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_1)
    var_2 = b_s_t_2.getOrder()
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.add(var_5)
    assert len(b_s_t_6) == 1
    node_1 = module_0.Node(var_5)
    assert node_1.value == []
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_3)
    bool_1 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_1)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    node_3 = module_0.Node(list_0)
    var_12 = b_s_t_5.__str__()
    assert var_12 == '[]'

def test_case_621():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1

def test_case_622():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    var_4 = b_s_t_4.contains(var_3)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_1)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_1)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_2)
    var_9 = b_s_t_6.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.isValid()
    node_2 = module_0.Node(b_s_t_13)
    assert len(node_2.value) == 0
    var_15 = b_s_t_13.contains(var_14)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_17 = b_s_t_15.getOrder()
    var_18 = b_s_t_15.add(var_17)
    assert len(b_s_t_15) == 1
    node_3 = module_0.Node(var_17)
    assert node_3.value == []
    var_19 = b_s_t_15.isValid()
    var_20 = b_s_t_5.__str__()
    assert var_20 == '[]'

def test_case_623():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.contains(b_s_t_3)
    var_3 = b_s_t_1.isValid()

def test_case_624():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_3.isValid()
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_2)
    var_6 = var_3.__str__()

def test_case_625():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0

def test_case_626():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_3.remove(var_1)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_5.build(set_0)
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    node_5 = module_0.Node(none_type_1)

def test_case_627():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    var_7 = b_s_t_5.contains(var_6)
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    var_11 = b_s_t_6.isValid()
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = b_s_t_8.build(b_s_t_10)
    var_14 = b_s_t_8.contains(none_type_1)
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.isValid()
    var_16 = b_s_t_11.__len__()
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_12.getOrder()
    var_18 = b_s_t_11.__len__()
    b_s_t_13 = module_0.BST()
    var_19 = b_s_t_13.__str__()
    assert var_19 == '[]'
    var_20 = b_s_t_13.__len__()
    var_21 = b_s_t_13.__str__()
    assert var_21 == '[]'
    b_s_t_14 = module_0.BST()

def test_case_628():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = var_2.__str__()
    assert var_5 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(set_0)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = b_s_t_4.build(b_s_t_6)
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    none_type_4 = b_s_t_4.build(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.getOrder()
    var_11 = b_s_t_7.add(var_10)
    assert len(b_s_t_7) == 1
    set_1 = set()
    node_1 = module_0.Node(set_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    node_4 = module_0.Node(var_4)
    assert node_4.value == '[]'

def test_case_629():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_3.__len__()
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(none_type_3)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    none_type_4 = b_s_t_4.build(b_s_t_6)
    var_7 = b_s_t_4.contains(none_type_3)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder()
    list_0 = [var_8, var_8]
    none_type_5 = b_s_t_7.build(list_0)
    assert len(b_s_t_7) == 2
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_1)
    none_type_6 = None
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder(none_type_6)
    none_type_7 = None
    node_1 = module_0.Node(none_type_7)
    var_10 = b_s_t_8.isValid()
    none_type_8 = None
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.remove(none_type_8)
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    none_type_9 = b_s_t_9.build(b_s_t_11)
    b_s_t_12 = module_0.BST()
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_2)
    var_13 = b_s_t_12.__str__()
    bool_2 = False
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_3)
    var_14 = b_s_t_12.isValid()
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    node_5 = module_0.Node(none_type_5)

def test_case_630():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    node_0 = module_0.Node(var_0)

def test_case_631():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(var_9)
    assert node_3.value is None
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    list_2 = [var_13, var_13]
    none_type_2 = b_s_t_10.build(list_2)
    assert len(b_s_t_10) == 2
    none_type_3 = b_s_t_2.build(var_1)

def test_case_632():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    none_type_4 = None
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder(none_type_4)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.__len__()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    var_11 = b_s_t_11.add(var_10)
    assert len(b_s_t_11) == 1
    node_2 = module_0.Node(var_10)
    assert node_2.value == []
    bool_2 = False
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.remove(bool_2)
    none_type_5 = None
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.getOrder(none_type_5)
    var_14 = b_s_t_12.getOrder()
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.getOrder()
    bool_3 = False
    node_3 = module_0.Node(bool_3)
    b_s_t_15 = module_0.BST()

def test_case_633():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.isValid()
    var_1 = var_0.__str__()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_4 = b_s_t_4.contains(var_3)
    assert var_4 is False
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_4.remove(var_4)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_6.build(b_s_t_8)
    node_5 = module_0.Node(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    b_s_t_10 = module_0.BST()
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    list_2 = [node_7]
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.add(list_2)
    assert len(b_s_t_11) == 1
    var_10 = var_8.__str__()

def test_case_634():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    var_7 = var_6.__str__()
    assert var_7 == 'None'
    bool_2 = True
    node_0 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_8)
    assert node_2.value == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_0)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.isValid()
    node_4 = module_0.Node(b_s_t_8)
    assert len(node_4.value) == 0
    var_13 = b_s_t_8.contains(var_12)
    var_14 = b_s_t_8.__str__()
    assert var_14 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.getOrder()
    list_1 = [var_15, var_15]
    none_type_2 = b_s_t_9.build(list_1)
    assert len(b_s_t_9) == 2
    bool_4 = True
    node_5 = module_0.Node(bool_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_16 = b_s_t_10.__len__()
    assert var_16 == 0
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_17 = b_s_t_11.getOrder(none_type_3)
    var_18 = var_10.__str__()

def test_case_635():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = var_2.__str__()
    assert var_5 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    var_8 = b_s_t_4.add(var_7)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_7)
    assert node_2.value == []
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_3.__str__()
    assert var_10 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.isValid()
    var_12 = b_s_t_6.__len__()
    assert var_12 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.getOrder()
    var_14 = b_s_t_6.__len__()
    assert var_14 == 0
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_15 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_16 = b_s_t_9.contains(b_s_t_9)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_17 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_18 = b_s_t_11.getOrder()
    var_19 = b_s_t_11.add(var_18)
    assert len(b_s_t_11) == 1
    node_3 = module_0.Node(var_18)
    assert node_3.value == []
    none_type_1 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_20 = b_s_t_12.remove(none_type_1)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_21 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    none_type_2 = b_s_t_12.build(b_s_t_14)
    var_22 = var_21.__str__()
    assert var_22 == '[]'
    b_s_t_15 = module_0.BST()
    var_23 = b_s_t_15.isValid()
    var_24 = b_s_t_15.__len__()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    b_s_t_16 = module_0.BST()

def test_case_636():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    var_6 = var_5.__str__()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_9.add(var_11)
    assert len(b_s_t_9) == 1
    var_13 = var_12.__str__()
    assert var_13 == 'None'
    bool_3 = True
    node_3 = module_0.Node(bool_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0

def test_case_637():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_0)
    assert node_1.value == '[]'

def test_case_638():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    node_1 = module_0.Node(none_type_0)

def test_case_639():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.getOrder()

def test_case_640():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.remove(var_3)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.contains(var_2)

def test_case_641():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    var_5 = b_s_t_5.isValid()
    var_6 = var_4.__str__()
    assert var_6 == '[]'

def test_case_642():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.getOrder()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    assert var_5 is False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    var_7 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_2)
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    none_type_0 = None
    node_7 = module_0.Node(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    var_11 = b_s_t_7.__len__()
    assert var_11 == 0
    node_8 = module_0.Node(list_1)

def test_case_643():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_4.getOrder(b_s_t_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_9 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.isValid()
    var_13 = b_s_t_8.isValid()
    node_5 = module_0.Node(b_s_t_2)
    assert len(node_5.value) == 0

def test_case_644():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'

def test_case_645():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.getOrder(b_s_t_2)
    var_6 = var_5.__str__()
    assert var_6 == 'None'

def test_case_646():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    list_0 = [var_0, var_0]
    none_type_0 = b_s_t_0.build(list_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    var_5 = b_s_t_5.contains(var_4)
    assert var_5 is False
    var_6 = b_s_t_5.__str__()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_9 = b_s_t_7.isValid()
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = b_s_t_8.build(set_0)
    var_10 = b_s_t_8.__str__()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    bool_2 = False
    node_6 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__str__()
    var_13 = b_s_t_3.__len__()
    assert var_13 == 0

def test_case_647():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    var_2 = var_1.__str__()
    assert var_2 == '[]'

def test_case_648():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_4 = b_s_t_2.minValueNode(node_2)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    var_8 = b_s_t_3.__len__()
    assert var_8 == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    node_6 = module_0.Node(var_9)
    assert node_6.value == 0
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.isValid()
    node_8 = module_0.Node(b_s_t_10)
    assert len(node_8.value) == 0
    var_14 = b_s_t_10.contains(var_13)
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_3.add(b_s_t_0)
    assert len(b_s_t_3) == 1

def test_case_649():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_0 = module_0.Node(var_6)
    assert node_0.value == []
    var_8 = b_s_t_5.isValid()
    node_1 = module_0.Node(var_3)
    assert node_1.value == []

def test_case_650():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    var_3 = b_s_t_3.contains(var_2)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    tuple_0 = (var_4,)
    node_3 = module_0.Node(tuple_0)
    assert node_3.value == ('[]',)

def test_case_651():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value == []
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    list_0 = [var_6, var_6]
    none_type_1 = b_s_t_6.build(list_0)
    assert len(b_s_t_6) == 2
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_1)
    node_4 = module_0.Node(node_2)

def test_case_652():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_1.isValid()
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    var_8 = b_s_t_3.contains(var_6)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.isValid()
    var_10 = b_s_t_5.__str__()
    assert var_10 == '[]'

def test_case_653():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_5 = b_s_t_3.add(none_type_2)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    assert len(node_5.value) == 0
    var_7 = b_s_t_4.contains(var_6)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_4.remove(var_7)
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_9.getOrder()
    bool_4 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.remove(bool_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.getOrder()
    bool_5 = True
    node_7 = module_0.Node(bool_5)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.getOrder()
    var_17 = b_s_t_14.add(var_16)
    assert len(b_s_t_14) == 1
    node_8 = module_0.Node(var_17)
    assert node_8.value is None
    var_18 = b_s_t_6.contains(b_s_t_8)

def test_case_654():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_655():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(b_s_t_2)
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    var_0 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    var_1 = b_s_t_3.contains(var_0)
    assert var_1 is False
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    none_type_4 = b_s_t_4.build(b_s_t_4)
    var_2 = b_s_t_4.__str__()
    assert var_2 == '[]'
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    bool_0 = True
    node_6 = module_0.Node(bool_0)
    none_type_6 = None
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.remove(none_type_6)
    b_s_t_6 = module_0.BST()
    var_4 = var_3.__str__()
    node_7 = module_0.Node(b_s_t_3)

def test_case_656():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    assert var_3 is False
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()

def test_case_657():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__len__()
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_6 = b_s_t_4.minValueNode(node_0)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert var_6.value == [False, False, False, False]
    assert var_6.left is None
    assert var_6.right is None
    var_7 = b_s_t_1.__len__()

def test_case_658():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()

def test_case_659():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_0)
    node_1 = module_0.Node(none_type_0)

def test_case_660():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = b_s_t_4.build(set_0)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_10 = b_s_t_6.add(none_type_1)
    assert len(b_s_t_6) == 1
    node_6 = module_0.Node(var_5)

def test_case_661():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value is None
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_662():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_0)
    assert node_1.value == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = b_s_t_1.build(b_s_t_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    var_2 = b_s_t_2.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    bool_1 = False
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(none_type_5)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_6 = b_s_t_8.build(b_s_t_10)
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    none_type_7 = b_s_t_8.build(b_s_t_10)
    bool_2 = False
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.remove(bool_2)
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.contains(b_s_t_12)
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.isValid()
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.isValid()
    node_5 = module_0.Node(b_s_t_14)
    var_15 = b_s_t_14.contains(var_14)
    var_16 = b_s_t_14.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_3.__len__()

def test_case_663():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_4 = b_s_t_1.add(list_0)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.getOrder()
    var_6 = b_s_t_2.add(var_5)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value is None
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_7 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    node_2 = module_0.Node(b_s_t_5)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_9 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_4 = b_s_t_6.build(b_s_t_8)
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    none_type_5 = b_s_t_6.build(b_s_t_8)
    var_12 = b_s_t_3.__str__()
    assert var_12 == '[]'

def test_case_664():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_2.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_1 = b_s_t_2.isValid()
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    var_5 = b_s_t_5.getOrder(b_s_t_4)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.isValid()
    var_8 = b_s_t_7.isValid()
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_2 = b_s_t_9.build(b_s_t_11)
    node_4 = module_0.Node(b_s_t_11)
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.getOrder()
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    bool_4 = False
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.remove(bool_4)
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_3)
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.minValueNode(node_5)
    assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'binarySearchTree2.Node'
    assert var_14.value == [False, False, False, False]
    assert var_14.left is None
    assert var_14.right is None
    var_15 = b_s_t_14.add(var_14)
    assert len(b_s_t_14) == 1
    var_16 = b_s_t_1.__str__()
    assert var_16 == '[]'

def test_case_665():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_2 = b_s_t_2.isValid()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_2 = [node_2]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.add(list_2)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_5 = b_s_t_4.contains(var_4)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(b_s_t_5)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    node_7 = module_0.Node(var_4)

def test_case_666():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    none_type_3 = b_s_t_3.build(b_s_t_5)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_4 = b_s_t_3.build(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.isValid()
    node_0 = module_0.Node(b_s_t_6)
    var_6 = b_s_t_6.contains(var_5)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_6.remove(var_6)
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(none_type_5)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    none_type_6 = None
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder(none_type_6)
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.isValid()
    node_2 = module_0.Node(b_s_t_12)
    none_type_7 = None
    b_s_t_13 = module_0.BST()
    var_11 = b_s_t_13.remove(none_type_7)
    b_s_t_14 = module_0.BST()
    var_12 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    none_type_8 = b_s_t_13.build(b_s_t_15)
    node_3 = module_0.Node(b_s_t_15)
    var_13 = b_s_t_14.getOrder(b_s_t_4)

def test_case_667():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_668():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()

def test_case_669():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_1)
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = var_5.__str__()
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = var_3.__str__()
    var_13 = var_12.__str__()

def test_case_670():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.contains(b_s_t_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.__len__()
    assert var_8 == 0
    var_9 = b_s_t_5.contains(var_7)
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.isValid()
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.remove(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_3 = b_s_t_10.build(b_s_t_12)
    var_14 = var_13.__str__()
    assert var_14 == '[]'
    none_type_4 = b_s_t_10.build(b_s_t_12)
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.isValid()
    var_16 = b_s_t_13.__len__()
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.getOrder()
    var_18 = b_s_t_13.__len__()
    b_s_t_15 = module_0.BST()

def test_case_671():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.contains(b_s_t_4)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value == []
    var_8 = b_s_t_6.isValid()
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    var_12 = b_s_t_9.getOrder(b_s_t_8)
    var_13 = var_5.__len__()
    assert var_13 == 0

def test_case_672():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.contains(b_s_t_3)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    var_8 = b_s_t_9.add(var_7)
    assert len(b_s_t_9) == 1
    node_4 = module_0.Node(var_7)
    assert node_4.value == []
    var_9 = b_s_t_9.isValid()
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_12 = b_s_t_13.getOrder()
    var_13 = b_s_t_12.getOrder(b_s_t_11)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_14 = b_s_t_14.isValid()
    node_5 = module_0.Node(b_s_t_14)
    assert len(node_5.value) == 0
    var_15 = b_s_t_14.contains(var_14)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    none_type_3 = b_s_t_15.build(b_s_t_15)
    var_16 = b_s_t_15.__str__()
    assert var_16 == '[]'
    b_s_t_16 = module_0.BST()

def test_case_673():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0

def test_case_674():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    list_0 = [none_type_0]
    var_0 = b_s_t_0.remove(list_0)

def test_case_675():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    var_6 = b_s_t_2.add(b_s_t_3)
    assert len(b_s_t_2) == 1

def test_case_676():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.contains(b_s_t_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    var_7 = b_s_t_4.contains(var_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.isValid()
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(none_type_1)
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.remove(bool_3)
    var_12 = b_s_t_8.__str__()
    assert var_12 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_9.__len__()
    assert var_14 == 0
    var_15 = b_s_t_9.__str__()
    assert var_15 == '[]'
    var_16 = var_13.__str__()
    assert var_16 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_10.build(b_s_t_10)
    b_s_t_11 = module_0.BST()
    var_17 = b_s_t_11.isValid()
    var_18 = b_s_t_11.__len__()
    b_s_t_12 = module_0.BST()
    var_19 = b_s_t_12.getOrder()
    var_20 = b_s_t_11.__len__()
    var_21 = b_s_t_6.remove(none_type_2)

def test_case_677():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    var_5 = b_s_t_8.__len__()
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.remove(none_type_2)
    b_s_t_10 = module_0.BST()
    none_type_3 = b_s_t_7.build(b_s_t_1)

def test_case_678():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = var_0.__str__()
    var_2 = b_s_t_0.contains(b_s_t_0)
    assert var_2 is False

def test_case_679():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.add(none_type_1)
    assert len(b_s_t_1) == 1
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    var_10 = b_s_t_3.getOrder()

def test_case_680():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_3 = module_0.Node(b_s_t_1)
    assert len(node_3.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0

def test_case_681():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_5 = b_s_t_0.add(var_4)
    assert len(b_s_t_0) == 1

def test_case_682():
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)

def test_case_683():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.isValid()
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_2)
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_3)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_684():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.remove(var_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_1 = b_s_t_2.build(var_3)
    assert len(b_s_t_2) == 2
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    list_1 = [node_2]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.add(list_1)
    assert len(b_s_t_3) == 1
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_5.build(set_0)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    node_5 = module_0.Node(var_7)
    assert node_5.value == []
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()
    var_11 = var_10.__str__()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_2 = False
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_3)
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    node_7 = module_0.Node(var_11)

def test_case_685():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder()
    var_2 = b_s_t_3.add(var_1)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    bool_0 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_1 = b_s_t_10.build(set_0)
    var_8 = b_s_t_10.__str__()
    assert var_8 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.isValid()
    var_10 = var_1.__str__()
    assert var_10 == '[]'

def test_case_686():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0

def test_case_687():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_1.__str__()
    assert var_6 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(bool_2)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    list_2 = [node_4]
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.add(list_2)
    assert len(b_s_t_9) == 1
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_10.remove(var_12)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.isValid()
    node_6 = module_0.Node(b_s_t_11)
    assert len(node_6.value) == 0
    var_15 = b_s_t_11.contains(var_14)
    var_16 = b_s_t_11.__len__()
    assert var_16 == 0
    var_17 = b_s_t_2.__len__()
    assert var_17 == 1

def test_case_688():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.isValid()
    var_1 = var_0.__str__()
    var_2 = b_s_t_1.contains(b_s_t_1)
    assert var_2 is False
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_1.remove(b_s_t_0)

def test_case_689():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    tuple_0 = ()
    var_7 = b_s_t_4.add(tuple_0)
    assert len(b_s_t_4) == 1

def test_case_690():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__str__()
    assert var_1 == '[]'

def test_case_691():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.__len__()
    assert var_9 == 0
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    var_11 = var_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_3.contains(node_5)

def test_case_692():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = var_1.__str__()
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.contains(b_s_t_5)
    bool_4 = False
    list_0 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    list_1 = [var_7, var_7]
    none_type_3 = b_s_t_7.build(list_1)
    assert len(b_s_t_7) == 2
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(none_type_4)
    var_9 = b_s_t_7.getOrder(bool_1)

def test_case_693():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    list_0 = [node_3]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.add(list_0)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_4 = module_0.Node(var_3)
    assert node_4.value is None
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_2)
    var_6 = b_s_t_3.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.__len__()
    assert var_8 == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = var_7.__str__()
    assert var_10 == '[]'
    set_0 = set()
    node_5 = module_0.Node(set_0)
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_694():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_2)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_4 = module_0.Node(var_3)
    assert node_4.value is None
    set_0 = set()
    node_5 = module_0.Node(set_0)
    var_4 = var_2.__len__()
    assert var_4 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    var_6 = b_s_t_4.add(none_type_4)
    assert len(b_s_t_4) == 1
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.contains(b_s_t_6)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    var_10 = b_s_t_7.__len__()
    assert var_10 == 0
    var_11 = b_s_t_6.contains(var_9)
    node_7 = module_0.Node(b_s_t_1)
    assert len(node_7.value) == 0

def test_case_695():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.contains(b_s_t_4)
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    node_3 = module_0.Node(b_s_t_1)
    assert len(node_3.value) == 0

def test_case_696():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    var_2 = b_s_t_1.isValid()

def test_case_697():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    list_0 = [none_type_0]
    var_0 = b_s_t_0.remove(list_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.minValueNode(node_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_3.value).__module__}.{type(var_3.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_3.value) == 0
    assert var_3.left is None
    assert var_3.right is None
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_7.__len__()
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    set_0 = set()
    node_5 = module_0.Node(set_0)
    set_1 = set()
    node_6 = module_0.Node(set_1)
    b_s_t_8 = module_0.BST()
    none_type_5 = b_s_t_8.build(set_1)
    list_1 = [node_1, none_type_4, b_s_t_0, none_type_2]
    var_8 = b_s_t_8.remove(list_1)

def test_case_698():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = var_2.__str__()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(var_4)
    assert node_6.value == 0
    none_type_5 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    bool_3 = False
    node_7 = module_0.Node(bool_3)
    node_8 = module_0.Node(b_s_t_6)
    assert len(node_8.value) == 0
    var_7 = b_s_t_6.minValueNode(node_8)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_7.value).__module__}.{type(var_7.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_7.value) == 0
    assert var_7.left is None
    assert var_7.right is None
    var_8 = b_s_t_3.contains(var_2)

def test_case_699():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_2)
    assert node_2.value == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    list_0 = [none_type_2]
    var_6 = b_s_t_5.remove(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()

def test_case_700():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_6.__len__()
    assert var_5 == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = var_4.__str__()
    assert var_7 == '[]'
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_1 = module_0.Node(bytes_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    none_type_0 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder(none_type_0)
    var_12 = b_s_t_9.isValid()
    var_13 = b_s_t_6.contains(b_s_t_1)

def test_case_701():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0

def test_case_702():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.contains(b_s_t_4)
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_1 = module_0.Node(bytes_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_5 = b_s_t_5.add(none_type_1)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.minValueNode(node_3)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert var_7.value == [False, False, False, False]
    assert var_7.left is None
    assert var_7.right is None
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_8.build(b_s_t_10)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.__len__()
    none_type_4 = None
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.remove(none_type_4)
    var_12 = b_s_t_6.getOrder(var_5)

def test_case_703():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_2.contains(var_1)
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_5 = b_s_t_3.add(none_type_0)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_4)
    assert node_2.value == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__len__()
    assert var_7 == 0
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    node_6 = module_0.Node(var_7)
    assert node_6.value == 0
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.isValid()
    node_7 = module_0.Node(b_s_t_11)
    assert len(node_7.value) == 0
    var_14 = b_s_t_11.contains(var_13)
    bool_4 = False
    list_0 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_0)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_11.remove(var_14)
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    var_16 = b_s_t_9.remove(var_11)

def test_case_704():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.isValid()
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    node_2 = module_0.Node(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.isValid()
    var_9 = var_8.__str__()
    b_s_t_7 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_7.__len__()
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.isValid()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    list_2 = [node_6]
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.add(list_2)
    assert len(b_s_t_10) == 1
    var_14 = b_s_t_5.__str__()
    assert var_14 == '[]'

def test_case_705():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_0.isValid()

def test_case_706():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value == []
    var_5 = b_s_t_2.isValid()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = b_s_t_3.build(set_0)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_707():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_0 = b_s_t_2.build(var_2)
    assert len(b_s_t_2) == 2
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    var_5 = b_s_t_3.contains(none_type_1)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.contains(b_s_t_8)
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.isValid()
    node_4 = module_0.Node(b_s_t_9)
    var_10 = b_s_t_9.contains(var_9)
    var_11 = b_s_t_9.__len__()
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_10.__len__()
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_11 = module_0.BST()
    none_type_5 = b_s_t_11.build(b_s_t_11)
    node_6 = module_0.Node(none_type_4)
    b_s_t_12 = module_0.BST()
    node_7 = module_0.Node(b_s_t_12)
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.__str__()
    assert var_15 == '[]'
    b_s_t_14 = module_0.BST()
    none_type_6 = b_s_t_4.build(list_0)
    assert len(b_s_t_4) == 4

def test_case_708():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(b_s_t_2)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    var_4 = b_s_t_3.getOrder()
    list_0 = [var_4, var_4]
    none_type_3 = b_s_t_3.build(list_0)
    assert len(b_s_t_3) == 2
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_4 = module_0.BST()
    none_type_5 = b_s_t_4.build(b_s_t_4)
    var_5 = b_s_t_0.contains(b_s_t_1)

def test_case_709():
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bytes_0)

def test_case_710():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(b_s_t_3)
    node_2 = module_0.Node(none_type_0)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    none_type_3 = b_s_t_4.build(b_s_t_6)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    none_type_4 = b_s_t_7.build(set_0)
    b_s_t_8 = module_0.BST()

def test_case_711():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_3 = b_s_t_3.build(b_s_t_5)
    b_s_t_6 = module_0.BST()

def test_case_712():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.contains(b_s_t_3)
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0

def test_case_713():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    node_1 = module_0.Node(b_s_t_4)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder(none_type_2)
    var_6 = b_s_t_5.isValid()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    var_8 = var_7.__str__()
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.isValid()
    node_5 = module_0.Node(b_s_t_8)
    var_10 = b_s_t_8.contains(var_9)
    var_11 = b_s_t_8.__len__()
    b_s_t_9 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_0)
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_1)
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_2)
    var_15 = b_s_t_10.isValid()
    var_16 = b_s_t_10.contains(none_type_4)

def test_case_714():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    assert var_3 is False
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_715():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.isValid()
    var_1 = var_0.__str__()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    var_2 = b_s_t_2.remove(none_type_3)
    b_s_t_3 = module_0.BST()
    var_3 = var_2.__str__()
    none_type_4 = None
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(none_type_4)
    b_s_t_5 = module_0.BST()
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.contains(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_7.__len__()
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = var_6.__str__()
    assert var_9 == '[]'
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.remove(none_type_5)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_6 = b_s_t_8.build(b_s_t_10)
    node_4 = module_0.Node(b_s_t_10)
    var_12 = var_6.__len__()
    assert var_12 == 2

def test_case_716():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_1.isValid()
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.getOrder()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    var_10 = var_9.__str__()
    assert var_10 == 'None'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_11 = b_s_t_6.__str__()
    assert var_11 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder()
    var_14 = b_s_t_8.add(var_13)
    assert len(b_s_t_8) == 1
    node_5 = module_0.Node(var_13)
    assert node_5.value == []
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.getOrder()
    bool_4 = False
    node_6 = module_0.Node(bool_4)
    none_type_1 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_16 = b_s_t_10.remove(none_type_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_17 = b_s_t_11.getOrder()
    bool_5 = False
    node_7 = module_0.Node(bool_5)
    node_8 = module_0.Node(b_s_t_11)
    assert len(node_8.value) == 0
    var_18 = b_s_t_11.minValueNode(node_8)
    assert f'{type(var_18).__module__}.{type(var_18).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_18.value).__module__}.{type(var_18.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_18.value) == 0
    assert var_18.left is None
    assert var_18.right is None
    var_19 = var_0.__str__()

def test_case_717():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    var_3 = var_2.__str__()
    var_4 = b_s_t_2.contains(b_s_t_2)
    assert var_4 is False
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_3 = module_0.Node(b_s_t_6)
    assert len(node_3.value) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_8 = b_s_t_7.add(none_type_3)
    assert len(b_s_t_7) == 1
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_5 = b_s_t_8.build(b_s_t_10)
    var_11 = b_s_t_8.contains(none_type_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.isValid()
    var_14 = b_s_t_11.isValid()
    none_type_6 = b_s_t_1.build(var_3)
    assert len(b_s_t_1) == 4

def test_case_718():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_3.isValid()
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_4 = module_0.Node(b_s_t_6)
    assert len(node_4.value) == 0
    var_7 = b_s_t_6.contains(var_6)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_6.remove(var_7)
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_8.build(set_0)
    var_9 = var_2.__str__()
    assert var_9 == '[]'

def test_case_719():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = var_2.__str__()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.remove(var_4)
    var_6 = b_s_t_1.contains(var_4)

def test_case_720():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.contains(b_s_t_4)
    var_7 = var_1.__len__()
    assert var_7 == 0

def test_case_721():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    list_1 = [node_2]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.add(list_1)
    assert len(b_s_t_2) == 1
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_5 = b_s_t_4.add(none_type_2)
    assert len(b_s_t_4) == 1
    node_5 = module_0.Node(var_4)
    assert node_5.value == '[]'
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_5.build(set_0)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    var_11 = var_10.__str__()
    assert var_11 == 'None'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.minValueNode(node_7)
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'binarySearchTree2.Node'
    assert var_12.value == [False, False, False, False]
    assert var_12.left is None
    assert var_12.right is None
    none_type_4 = b_s_t_0.build(var_4)
    assert len(b_s_t_0) == 2

def test_case_722():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_4 = b_s_t_1.contains(var_3)
    assert var_4 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_1.remove(var_4)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.isValid()
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = b_s_t_4.build(set_0)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_1)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_1)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    var_13 = b_s_t_9.isValid()

def test_case_723():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False

def test_case_724():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_0 = b_s_t_2.build(var_3)
    assert len(b_s_t_2) == 2
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_8 = b_s_t_4.isValid()
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_2.isValid()

def test_case_725():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_1.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.isValid()
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    node_4 = module_0.Node(b_s_t_4)
    assert len(node_4.value) == 0
    var_8 = b_s_t_4.minValueNode(node_4)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_8.value).__module__}.{type(var_8.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_8.value) == 0
    assert var_8.left is None
    assert var_8.right is None
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_3 = b_s_t_5.build(b_s_t_7)
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    none_type_4 = b_s_t_5.build(b_s_t_7)
    b_s_t_8 = module_0.BST()
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.getOrder(none_type_5)
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.isValid()
    node_5 = module_0.Node(b_s_t_10)
    bool_3 = False
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    var_17 = b_s_t_15.isValid()
    node_6 = module_0.Node(b_s_t_15)
    var_18 = b_s_t_15.contains(var_17)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_2)
    b_s_t_16 = module_0.BST()
    var_19 = b_s_t_15.remove(var_18)
    node_8 = module_0.Node(var_3)
    assert node_8.value == '[]'

def test_case_726():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_6 = b_s_t_9.getOrder()
    list_1 = [var_6, var_6]
    none_type_0 = b_s_t_9.build(list_1)
    assert len(b_s_t_9) == 2
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_727():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = var_5.__str__()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_5 = module_0.Node(var_8)
    assert node_5.value is None
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(none_type_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_5 = b_s_t_7.build(b_s_t_9)
    node_6 = module_0.Node(b_s_t_9)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    list_0 = [var_11, var_11]
    none_type_6 = b_s_t_10.build(list_0)
    assert len(b_s_t_10) == 2
    bool_1 = False
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.remove(bool_1)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.getOrder()
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[[], []]'

def test_case_728():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_3 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = var_2.__str__()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_5 = module_0.Node(var_5)
    assert node_5.value == []
    var_7 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.isValid()
    var_9 = var_8.__str__()
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder(none_type_4)
    var_11 = b_s_t_6.isValid()
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.getOrder(none_type_5)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder()
    var_14 = b_s_t_9.add(var_13)
    assert len(b_s_t_9) == 1
    node_8 = module_0.Node(var_14)
    assert node_8.value is None
    set_0 = set()
    node_9 = module_0.Node(set_0)
    var_15 = var_13.__len__()
    assert var_15 == 0
    none_type_7 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_16 = b_s_t_10.remove(none_type_7)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_4 = True
    node_10 = module_0.Node(bool_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.contains(b_s_t_12)
    var_18 = b_s_t_2.__len__()
    assert var_18 == 0

def test_case_729():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(var_0)

def test_case_730():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_2 = module_0.Node(b_s_t_1)
    assert len(node_2.value) == 0
    none_type_1 = b_s_t_0.build(list_1)
    assert len(b_s_t_0) == 6

def test_case_731():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.isValid()

def test_case_732():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert var_2.value == [False, False, False, False]
    assert var_2.left is None
    assert var_2.right is None
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    node_2 = module_0.Node(none_type_0)

def test_case_733():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    var_7 = var_6.__str__()
    var_8 = b_s_t_4.contains(b_s_t_4)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_2 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.remove(bool_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_12 = b_s_t_13.getOrder()
    var_13 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_14 = b_s_t_14.getOrder()
    var_15 = b_s_t_14.add(var_14)
    assert len(b_s_t_14) == 1
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_16 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_17 = b_s_t_16.getOrder()
    var_18 = b_s_t_16.add(var_17)
    assert len(b_s_t_16) == 1
    node_2 = module_0.Node(var_17)
    assert node_2.value == []
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_19 = b_s_t_17.__str__()
    assert var_19 == '[]'
    var_20 = b_s_t_15.__str__()
    assert var_20 == '[]'
    none_type_1 = b_s_t_3.build(b_s_t_7)

def test_case_734():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.__len__()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.isValid()
    var_8 = b_s_t_6.__len__()
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_6.__len__()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.getOrder()
    var_13 = b_s_t_9.add(var_12)
    assert len(b_s_t_9) == 1
    node_5 = module_0.Node(var_12)
    assert node_5.value == []
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_8.__str__()
    assert var_15 == '[]'
    bool_3 = False
    b_s_t_11 = module_0.BST()
    var_16 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_17 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_18 = b_s_t_14.getOrder()
    var_19 = b_s_t_13.getOrder(b_s_t_12)
    var_20 = b_s_t_6.remove(b_s_t_5)

def test_case_735():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.getOrder()
    list_0 = [var_3, var_3]
    none_type_0 = b_s_t_1.build(list_0)
    assert len(b_s_t_1) == 2
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_1)
    var_5 = b_s_t_2.__str__()

def test_case_736():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_2.minValueNode(node_1)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert var_11.value is True
    assert var_11.left is None
    assert var_11.right is None

def test_case_737():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)

def test_case_738():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_739():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = var_8.__str__()
    assert var_11 == '[]'
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(bytes_0)
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_10.isValid()
    node_4 = module_0.Node(var_9)
    assert node_4.value == 0

def test_case_740():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[[]]'

def test_case_741():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    node_1 = module_0.Node(b_s_t_7)
    assert len(node_1.value) == 0
    var_8 = b_s_t_7.contains(var_7)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    var_11 = b_s_t_7.add(none_type_0)
    assert len(b_s_t_7) == 1
    assert len(node_1.value) == 1

def test_case_742():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(node_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    list_0 = [node_3]
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.add(list_0)
    assert len(b_s_t_3) == 1
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.isValid()
    bool_1 = False
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    var_7 = b_s_t_7.getOrder(b_s_t_6)
    b_s_t_9 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_8 = b_s_t_9.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_9.isValid()
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_2.__str__()
    assert var_11 == '[]'

def test_case_743():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_0 = module_0.Node(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_1 = b_s_t_3.build(var_3)
    assert len(b_s_t_3) == 2
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_5 = module_0.Node(b_s_t_7)
    assert len(node_5.value) == 0
    var_8 = b_s_t_6.contains(node_5)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    list_3 = [node_6]
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.add(list_3)
    assert len(b_s_t_8) == 1
    node_7 = module_0.Node(none_type_0)

def test_case_744():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_745():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(var_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_1.__len__()
    assert var_4 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    var_6 = var_5.__str__()
    var_7 = b_s_t_3.contains(b_s_t_3)
    assert var_7 is False
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    node_1 = module_0.Node(var_3)
    assert node_1.value == []

def test_case_746():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    bool_2 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_2.isValid()
    var_6 = var_5.__str__()

def test_case_747():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    b_s_t_3 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.isValid()
    var_6 = var_5.__str__()
    var_7 = b_s_t_4.contains(b_s_t_4)
    b_s_t_6 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_6.__len__()
    var_10 = b_s_t_4.__len__()

def test_case_748():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.isValid()
    var_4 = var_3.__str__()
    var_5 = b_s_t_3.contains(b_s_t_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.minValueNode(node_0)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert var_6.value == [False, False, False, False]
    assert var_6.left is None
    assert var_6.right is None
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.__len__()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(var_11)
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.getOrder()
    var_13 = var_12.__str__()
    assert var_13 == '[]'
    var_14 = var_13.__str__()
    assert var_14 == '[]'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    list_1 = [node_4]
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.add(list_1)
    assert len(b_s_t_12) == 1
    node_5 = module_0.Node(var_8)

def test_case_749():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.isValid()
    var_7 = b_s_t_7.isValid()
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_8 = b_s_t_9.__str__()
    assert var_8 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_9 = b_s_t_9.isValid()
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_10 = module_0.BST()
    none_type_2 = b_s_t_10.build(set_1)
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.remove(none_type_3)
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.__str__()
    assert var_11 == '[]'
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.getOrder()
    list_3 = [var_12, var_12]
    none_type_4 = b_s_t_13.build(list_3)
    assert len(b_s_t_13) == 2
    bool_4 = False
    b_s_t_14 = module_0.BST()
    var_13 = b_s_t_14.remove(bool_4)
    none_type_5 = None
    b_s_t_15 = module_0.BST()
    var_14 = b_s_t_15.getOrder(none_type_5)
    var_15 = b_s_t_14.getOrder()
    var_16 = b_s_t_1.add(list_3)
    assert len(b_s_t_1) == 1

def test_case_750():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    var_8 = var_7.__str__()
    assert var_8 == 'None'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_5.isValid()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_0 = b_s_t_6.build(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    var_13 = var_12.__str__()
    assert var_13 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_14 = b_s_t_8.isValid()
    node_2 = module_0.Node(b_s_t_8)
    assert len(node_2.value) == 0
    var_15 = b_s_t_8.contains(var_14)
    set_1 = set()
    node_3 = module_0.Node(set_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_1 = b_s_t_9.build(set_1)
    var_16 = b_s_t_9.isValid()
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_17 = b_s_t_10.remove(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_18 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_3 = b_s_t_10.build(b_s_t_12)
    var_19 = b_s_t_10.contains(none_type_2)
    bool_2 = False
    b_s_t_13 = module_0.BST()
    var_20 = b_s_t_13.remove(bool_2)
    b_s_t_14 = module_0.BST()
    b_s_t_15 = module_0.BST()
    var_21 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    var_22 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_18 = module_0.BST()
    list_1 = [none_type_4]
    var_23 = b_s_t_18.remove(list_1)
    b_s_t_19 = module_0.BST()
    var_24 = b_s_t_19.isValid()
    node_5 = module_0.Node(var_7)
    assert node_5.value is None

def test_case_751():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value is None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = var_8.__len__()
    assert var_10 == 0

def test_case_752():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(list_1)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'

def test_case_753():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    node_1 = module_0.Node(none_type_0)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    var_2 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    none_type_3 = b_s_t_2.build(b_s_t_4)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    b_s_t_5 = module_0.BST()
    none_type_5 = b_s_t_5.build(b_s_t_5)
    none_type_6 = None
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder(none_type_6)
    var_6 = b_s_t_6.isValid()
    none_type_7 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(none_type_7)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    none_type_8 = b_s_t_7.build(b_s_t_9)
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_10.__len__()
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    b_s_t_11 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_12 = b_s_t_11.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    none_type_9 = None
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.getOrder(none_type_9)
    b_s_t_15 = module_0.BST()
    var_16 = b_s_t_15.isValid()
    node_4 = module_0.Node(b_s_t_15)
    node_5 = module_0.Node(none_type_4)

def test_case_754():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_5 = b_s_t_2.contains(node_1)
    assert var_5 is False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = var_6.__str__()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    node_4 = module_0.Node(var_8)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    node_5 = module_0.Node(var_10)
    assert node_5.value == []
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.getOrder()
    var_15 = b_s_t_13.add(var_14)
    assert len(b_s_t_13) == 1
    node_6 = module_0.Node(var_14)
    assert node_6.value == []
    var_16 = b_s_t_13.isValid()
    none_type_2 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_17 = b_s_t_14.remove(none_type_2)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_18 = b_s_t_15.__str__()
    assert var_18 == '[]'
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0

def test_case_755():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    var_4 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_7 = module_0.Node(b_s_t_7)
    assert len(node_7.value) == 0
    var_6 = b_s_t_6.contains(node_7)
    assert var_6 is False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_4)
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    none_type_3 = b_s_t_8.build(var_7)
    assert len(b_s_t_8) == 2
    node_9 = module_0.Node(none_type_0)

def test_case_756():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    none_type_3 = b_s_t_3.build(b_s_t_5)
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.isValid()
    var_9 = var_7.__len__()
    assert var_9 == 2

def test_case_757():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1

def test_case_758():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_759():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_8.getOrder(b_s_t_7)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_7.getOrder(b_s_t_1)

def test_case_760():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_2.__str__()
    assert var_7 == '[]'
    bool_0 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_0)
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = b_s_t_6.build(b_s_t_8)
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    node_2 = module_0.Node(var_5)
    assert node_2.value is None

def test_case_761():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_8 = b_s_t_7.add(none_type_2)
    assert len(b_s_t_7) == 1
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.remove(none_type_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_5 = b_s_t_11.build(b_s_t_13)
    var_16 = var_15.__str__()
    assert var_16 == '[]'
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.getOrder()
    list_2 = [var_17, var_17]
    none_type_6 = b_s_t_14.build(list_2)
    assert len(b_s_t_14) == 2
    var_18 = b_s_t_8.getOrder()

def test_case_762():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_5)
    assert node_1.value == []
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    list_0 = [node_2]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.add(list_0)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(var_9)
    assert node_3.value == []
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_6.__str__()
    assert var_12 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_1)
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_9.__len__()
    assert var_14 == 0
    set_1 = set()
    node_6 = module_0.Node(set_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_3 = b_s_t_11.build(set_1)
    var_15 = b_s_t_1.__str__()
    assert var_15 == '[]'

def test_case_763():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)

def test_case_764():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value is None
    none_type_0 = b_s_t_1.build(b_s_t_1)

def test_case_765():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_6.__len__()
    assert var_6 == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = var_5.__str__()
    assert var_8 == '[]'
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(none_type_2)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(bool_2)
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(bool_3)
    var_12 = b_s_t_3.add(bool_1)
    assert len(b_s_t_3) == 1

def test_case_766():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'

def test_case_767():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    node_4 = module_0.Node(b_s_t_7)
    assert len(node_4.value) == 0
    var_8 = b_s_t_7.contains(var_7)
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = b_s_t_8.build(set_0)
    var_9 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()
    var_11 = b_s_t_8.add(list_0)
    assert len(b_s_t_8) == 1
    var_12 = var_11.__str__()
    assert var_12 == 'None'

def test_case_768():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_6 = b_s_t_3.add(none_type_0)
    assert len(b_s_t_3) == 1
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.minValueNode(node_1)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert var_7.value == [False, False, False, False]
    assert var_7.left is None
    assert var_7.right is None
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_5.build(b_s_t_7)
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    none_type_3 = b_s_t_5.build(b_s_t_7)
    var_11 = b_s_t_5.contains(var_5)

def test_case_769():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1

def test_case_770():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    bytes_0 = b'K\xe8m:\xf2&\x11\xdf'
    node_1 = module_0.Node(bytes_0)

def test_case_771():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_2 = b_s_t_1.add(none_type_0)
    assert len(b_s_t_1) == 1
    node_2 = module_0.Node(var_1)
    assert node_2.value == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = var_3.__str__()
    var_5 = b_s_t_2.contains(b_s_t_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_3 = module_0.Node(var_6)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(node_4)

def test_case_772():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(var_6)
    assert node_5.value == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_3.getOrder(node_6)

def test_case_773():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(node_3)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    var_8 = b_s_t_0.getOrder()

def test_case_774():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_4.build(b_s_t_4)
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.remove(none_type_4)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    none_type_5 = b_s_t_5.build(b_s_t_7)
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    none_type_6 = b_s_t_5.build(b_s_t_7)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_8.__len__()
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_12 = var_2.__str__()
    assert var_12 == '[]'

def test_case_775():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.isValid()
    node_1 = module_0.Node(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_8 = b_s_t_7.add(none_type_3)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(var_7)
    assert node_3.value == '[]'
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(none_type_4)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_5 = b_s_t_8.build(b_s_t_10)
    node_4 = module_0.Node(b_s_t_10)
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.isValid()
    node_5 = module_0.Node(b_s_t_11)
    var_12 = b_s_t_11.contains(var_11)
    bool_1 = False
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.remove(bool_1)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    var_15 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    b_s_t_17 = module_0.BST()
    var_16 = b_s_t_17.isValid()
    node_6 = module_0.Node(b_s_t_17)
    var_17 = b_s_t_17.contains(var_16)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    b_s_t_18 = module_0.BST()
    none_type_7 = b_s_t_18.build(b_s_t_18)
    var_18 = b_s_t_18.__str__()
    assert var_18 == '[]'
    b_s_t_19 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_0)
    var_19 = b_s_t_19.__str__()
    assert var_19 == '[]'
    var_20 = b_s_t_19.isValid()
    var_21 = var_14.__str__()
    assert var_21 == '[]'

def test_case_776():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_3.build(var_2)
    assert len(b_s_t_3) == 2
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.getOrder()
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    none_type_4 = b_s_t_5.build(b_s_t_7)
    var_7 = b_s_t_5.contains(none_type_3)
    bool_1 = False
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.contains(b_s_t_9)
    var_10 = var_2.__len__()
    assert var_10 == 2

def test_case_777():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    node_0 = module_0.Node(bool_0)

def test_case_778():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_779():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.remove(var_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_780():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    var_5 = b_s_t_4.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_1 = module_0.Node(b_s_t_6)
    assert len(node_1.value) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_7.remove(var_7)
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_781():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.add(b_s_t_3)
    assert len(b_s_t_4) == 1

def test_case_782():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.getOrder()
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.contains(b_s_t_6)
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_1 = b_s_t_7.build(b_s_t_9)
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.remove(none_type_2)
    b_s_t_11 = module_0.BST()
    bool_3 = True
    node_0 = module_0.Node(bool_3)
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.contains(b_s_t_12)
    var_12 = b_s_t_11.__str__()
    assert var_12 == '[]'
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.remove(bytes_0)
    b_s_t_14 = module_0.BST()

def test_case_783():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.contains(b_s_t_5)
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(bool_0)

def test_case_784():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    var_5 = b_s_t_4.contains(var_4)
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_0)
    var_8 = b_s_t_5.isValid()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_6.build(set_0)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    node_2 = module_0.Node(none_type_0)

def test_case_785():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.contains(b_s_t_4)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_1)
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    var_7 = b_s_t_3.__len__()
    assert var_7 == 0

def test_case_786():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder(none_type_1)
    var_9 = b_s_t_5.isValid()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    list_2 = [none_type_2]
    var_10 = b_s_t_6.remove(list_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_7.remove(var_11)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder()
    var_14 = b_s_t_8.add(var_13)
    assert len(b_s_t_8) == 1
    node_6 = module_0.Node(var_14)
    assert node_6.value is None
    set_0 = set()
    node_7 = module_0.Node(set_0)
    var_15 = var_13.__len__()
    assert var_15 == 0
    bool_3 = True
    node_8 = module_0.Node(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    set_1 = set()
    node_9 = module_0.Node(set_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_4 = b_s_t_10.build(set_1)
    var_16 = b_s_t_10.__str__()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0

def test_case_787():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    var_4 = b_s_t_5.contains(var_3)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_6.build(b_s_t_6)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    bool_0 = False
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.remove(bool_0)
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.getOrder()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_11 = module_0.BST()
    none_type_3 = b_s_t_11.build(b_s_t_11)
    node_4 = module_0.Node(none_type_2)
    b_s_t_12 = module_0.BST()
    var_9 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    node_5 = module_0.Node(b_s_t_13)
    var_10 = b_s_t_12.contains(node_5)
    b_s_t_14 = module_0.BST()
    var_11 = b_s_t_14.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_6.isValid()

def test_case_788():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_789():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    var_3 = b_s_t_1.__len__()

def test_case_790():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    var_13 = b_s_t_10.getOrder()
    bool_4 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.remove(bool_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.contains(b_s_t_12)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_13.__len__()
    assert var_17 == 0
    var_18 = b_s_t_12.contains(var_16)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_19 = b_s_t_14.remove(bytes_0)
    var_20 = b_s_t_11.remove(bool_0)

def test_case_791():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_4 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.contains(b_s_t_2)
    node_0 = module_0.Node(bool_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    var_8 = b_s_t_4.__len__()
    assert var_8 == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.minValueNode(node_3)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert var_9.value == [False, False, False, False]
    assert var_9.left is None
    assert var_9.right is None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_11 = b_s_t_6.add(none_type_0)
    assert len(b_s_t_6) == 1
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_4 = True
    node_5 = module_0.Node(bool_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.contains(b_s_t_9)
    var_14 = b_s_t_9.__str__()
    assert var_14 == '[]'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    var_16 = var_15.__str__()
    assert var_16 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_17 = b_s_t_11.isValid()
    node_6 = module_0.Node(b_s_t_11)
    assert len(node_6.value) == 0
    node_7 = module_0.Node(b_s_t_3)
    assert len(node_7.value) == 0

def test_case_792():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()

def test_case_793():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_7 = b_s_t_5.add(none_type_1)
    assert len(b_s_t_5) == 1
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_794():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_7.add(var_6)
    assert len(b_s_t_7) == 1
    node_1 = module_0.Node(var_7)
    assert node_1.value is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_8 = var_6.__len__()
    assert var_8 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = var_9.__str__()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.isValid()
    node_3 = module_0.Node(b_s_t_9)
    assert len(node_3.value) == 0
    var_12 = b_s_t_9.contains(var_11)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = b_s_t_10.build(b_s_t_10)
    var_13 = b_s_t_10.__str__()
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.isValid()
    node_5 = module_0.Node(b_s_t_11)
    b_s_t_12 = module_0.BST()
    node_6 = module_0.Node(b_s_t_12)
    b_s_t_13 = module_0.BST()

def test_case_795():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    var_2 = b_s_t_0.getOrder()

def test_case_796():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    var_10 = b_s_t_7.contains(var_9)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_7.remove(var_10)
    var_12 = b_s_t_8.isValid()

def test_case_797():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_798():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    var_2 = b_s_t_2.isValid()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_5.remove(var_3)
    none_type_5 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_5)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.contains(b_s_t_8)
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    none_type_6 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.remove(none_type_6)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.contains(b_s_t_11)
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.__len__()
    assert var_10 == 0
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    node_8 = module_0.Node(var_10)
    assert node_8.value == 0
    node_9 = module_0.Node(node_2)

def test_case_799():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_2.__str__()
    assert var_7 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_10 = b_s_t_6.add(none_type_1)
    assert len(b_s_t_6) == 1
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0

def test_case_800():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(bytes_0)
    b_s_t_4 = module_0.BST()

def test_case_801():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = b_s_t_1.contains(none_type_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    b_s_t_8 = module_0.BST()
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.__str__()
    assert var_7 == '[]'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_8 = b_s_t_11.getOrder()
    list_1 = [var_8, var_8]
    none_type_5 = b_s_t_11.build(list_1)
    assert len(b_s_t_11) == 2
    b_s_t_12 = module_0.BST()
    var_9 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    node_5 = module_0.Node(b_s_t_13)
    var_10 = b_s_t_12.contains(node_5)
    none_type_6 = b_s_t_12.build(var_9)

def test_case_802():
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_1 = module_0.Node(b_s_t_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_3.build(var_2)
    assert len(b_s_t_3) == 2
    var_3 = b_s_t_0.contains(list_1)

def test_case_803():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = var_3.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    node_5 = module_0.Node(b_s_t_7)
    assert len(node_5.value) == 0
    var_9 = b_s_t_5.getOrder()
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = b_s_t_8.build(b_s_t_10)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    none_type_3 = b_s_t_8.build(b_s_t_10)
    var_13 = b_s_t_7.isValid()

def test_case_804():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.contains(b_s_t_2)
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_1)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_5.build(b_s_t_5)
    node_2 = module_0.Node(none_type_2)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_5 = b_s_t_6.build(b_s_t_8)
    var_8 = b_s_t_6.contains(none_type_4)
    bool_2 = False
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.remove(bool_2)
    var_10 = b_s_t_2.isValid()

def test_case_805():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    node_2 = module_0.Node(var_0)

def test_case_806():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    var_6 = b_s_t_5.contains(var_5)
    var_7 = b_s_t_5.__len__()
    assert var_7 == 0
    var_8 = var_2.__len__()
    assert var_8 == 2

def test_case_807():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    node_4 = module_0.Node(b_s_t_2)
    assert len(node_4.value) == 0
    var_5 = b_s_t_2.contains(var_4)
    var_6 = b_s_t_2.__len__()
    assert var_6 == 0
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_3 = b_s_t_3.build(b_s_t_3)
    node_6 = module_0.Node(none_type_2)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    b_s_t_4 = module_0.BST()
    var_7 = b_s_t_4.__len__()
    var_8 = b_s_t_4.add(var_7)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.remove(none_type_5)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    none_type_7 = None
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.remove(none_type_7)
    b_s_t_10 = module_0.BST()
    var_13 = var_12.__str__()
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_10 = module_0.Node(bytes_0)
    b_s_t_11 = module_0.BST()

def test_case_808():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    node_1 = module_0.Node(b_s_t_5)
    var_6 = b_s_t_4.contains(node_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.remove(var_7)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    none_type_4 = b_s_t_7.build(b_s_t_9)
    var_11 = b_s_t_7.contains(none_type_3)
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    node_3 = module_0.Node(b_s_t_11)
    var_13 = b_s_t_10.contains(node_3)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_14 = b_s_t_13.__str__()
    assert var_14 == '[]'
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_13.__len__()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    b_s_t_15 = module_0.BST()
    var_16 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    var_17 = b_s_t_16.isValid()
    var_18 = b_s_t_15.isValid()
    var_19 = b_s_t_11.add(none_type_0)
    assert len(b_s_t_11) == 1
    assert len(node_3.value) == 1

def test_case_809():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_4.__len__()
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_4.__len__()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    var_8 = var_7.__str__()
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(none_type_4)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_5 = b_s_t_8.build(b_s_t_10)
    none_type_6 = None
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.getOrder(none_type_6)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_7 = None
    node_4 = module_0.Node(none_type_7)
    b_s_t_12 = module_0.BST()
    bool_2 = False
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.remove(bool_2)
    b_s_t_14 = module_0.BST()
    var_13 = b_s_t_14.contains(b_s_t_14)
    node_5 = module_0.Node(bool_2)
    b_s_t_15 = module_0.BST()
    var_14 = b_s_t_15.isValid()
    var_15 = var_14.__str__()
    node_6 = module_0.Node(var_11)
    assert node_6.value is None

def test_case_810():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_1.__len__()
    assert var_4 == 0

def test_case_811():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    list_1 = [var_1, var_1]
    none_type_1 = b_s_t_1.build(list_1)
    assert len(b_s_t_1) == 2
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = var_3.__str__()
    node_1 = module_0.Node(none_type_0)

def test_case_812():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.__str__()
    assert var_2 == '[]'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_3 = b_s_t_4.add(none_type_2)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_2)
    assert node_2.value == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_9.remove(var_9)
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_6.contains(var_11)

def test_case_813():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    var_3 = b_s_t_0.remove(none_type_0)

def test_case_814():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.isValid()
    node_2 = module_0.Node(var_0)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.remove(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.__len__()
    assert var_2 == 0
    var_3 = b_s_t_4.add(var_2)
    assert len(b_s_t_4) == 1
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_4)
    var_5 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    set_0 = set()
    node_4 = module_0.Node(set_0)
    var_7 = b_s_t_5.remove(none_type_4)
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = var_6.__str__()
    assert var_9 == '[]'

def test_case_815():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_4)
    assert node_2.value == []
    var_6 = b_s_t_3.isValid()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_4.build(b_s_t_6)
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    var_10 = var_1.__str__()
    assert var_10 == '[]'

def test_case_816():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0

def test_case_817():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.isValid()
    var_4 = var_3.__str__()
    var_5 = b_s_t_4.contains(b_s_t_4)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.getOrder()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    set_1 = {b_s_t_5}
    var_8 = b_s_t_6.contains(set_1)

def test_case_818():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value == []
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_1.isValid()

def test_case_819():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = var_2.__str__()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_820():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    node_2 = module_0.Node(none_type_0)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    var_1 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(b_s_t_3)
    var_3 = b_s_t_3.minValueNode(node_4)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_3.value).__module__}.{type(var_3.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_3.value) == 0
    assert var_3.left is None
    assert var_3.right is None
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    node_5 = module_0.Node(b_s_t_5)
    var_5 = b_s_t_4.contains(node_5)
    b_s_t_6 = module_0.BST()
    bool_2 = False
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    bool_3 = False
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.contains(b_s_t_10)
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder()
    var_10 = b_s_t_11.add(var_9)
    assert len(b_s_t_11) == 1
    node_6 = module_0.Node(var_10)
    assert node_6.value is None
    set_0 = set()
    node_7 = module_0.Node(set_0)
    var_11 = var_9.__len__()
    assert var_11 == 0
    bool_4 = False
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.remove(bool_4)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    var_13 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    var_14 = b_s_t_15.getOrder()
    var_15 = b_s_t_14.getOrder(b_s_t_13)
    var_16 = b_s_t_7.add(var_12)
    assert len(b_s_t_7) == 1

def test_case_821():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.getOrder()

def test_case_822():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    b_s_t_2 = module_0.BST()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()

def test_case_823():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_6 = b_s_t_3.contains(var_5)
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_4.remove(var_8)
    var_10 = b_s_t_4.getOrder()
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_11 = b_s_t_5.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_824():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_0)
    var_6 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    var_8 = b_s_t_3.remove(none_type_0)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    var_11 = b_s_t_7.add(var_10)
    assert len(b_s_t_7) == 1
    node_2 = module_0.Node(var_11)
    assert node_2.value is None
    set_1 = set()
    node_3 = module_0.Node(set_1)
    var_12 = var_10.__len__()
    assert var_12 == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.__len__()
    assert var_13 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.getOrder(none_type_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.isValid()
    node_5 = module_0.Node(b_s_t_11)
    assert len(node_5.value) == 0
    none_type_5 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.remove(none_type_5)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_13.__str__()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0

def test_case_825():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_4 = b_s_t_2.isValid()
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_2 = module_0.Node(bytes_0)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    list_1 = [none_type_3]
    var_6 = b_s_t_4.remove(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_826():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_2 = b_s_t_2.contains(node_2)
    assert var_2 is False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_6.build(set_0)
    var_3 = b_s_t_6.__str__()
    assert var_3 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_4 = b_s_t_8.isValid()
    var_5 = var_4.__str__()
    var_6 = b_s_t_7.contains(b_s_t_7)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.minValueNode(node_5)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert var_7.value == [False, False, False, False]
    assert var_7.left is None
    assert var_7.right is None
    var_8 = b_s_t_9.add(var_7)
    assert len(b_s_t_9) == 1
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.isValid()
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.getOrder(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_4 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_11 = b_s_t_13.remove(none_type_4)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_12 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    none_type_5 = b_s_t_13.build(b_s_t_15)
    var_13 = b_s_t_13.contains(none_type_4)
    node_8 = module_0.Node(var_6)

def test_case_827():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_2.contains(var_1)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(set_0)
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_1.remove(b_s_t_0)

def test_case_828():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = var_1.__str__()
    var_3 = b_s_t_1.contains(b_s_t_1)
    assert var_3 is False
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    list_1 = [var_5, var_5]
    none_type_0 = b_s_t_4.build(list_1)
    assert len(b_s_t_4) == 2
    node_2 = module_0.Node(var_2)

def test_case_829():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    list_0 = [none_type_1]
    var_6 = b_s_t_4.remove(list_0)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    var_10 = b_s_t_4.getOrder()

def test_case_830():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_1 = b_s_t_1.add(none_type_2)
    assert len(b_s_t_1) == 1
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    var_2 = b_s_t_2.getOrder(none_type_3)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    set_0 = set()
    node_3 = module_0.Node(set_0)
    var_5 = b_s_t_2.remove(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_6 = b_s_t_4.minValueNode(node_4)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert var_6.value == [False, False, False, False]
    assert var_6.left is None
    assert var_6.right is None
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    var_10 = b_s_t_6.minValueNode(node_5)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_11 = b_s_t_7.remove(none_type_4)
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    none_type_5 = b_s_t_7.build(b_s_t_9)
    var_13 = b_s_t_7.contains(none_type_4)
    set_1 = set()
    node_6 = module_0.Node(set_1)
    b_s_t_10 = module_0.BST()
    none_type_6 = b_s_t_10.build(set_1)
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    node_7 = module_0.Node(b_s_t_12)
    var_15 = b_s_t_11.contains(node_7)
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_1.__str__()
    assert var_16 == '[None]'

def test_case_831():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.contains(b_s_t_7)
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.isValid()
    node_3 = module_0.Node(b_s_t_8)
    assert len(node_3.value) == 0
    var_8 = b_s_t_8.contains(var_7)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_9.build(b_s_t_9)
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    bool_3 = False
    b_s_t_14 = module_0.BST()
    var_12 = b_s_t_14.remove(bool_3)
    b_s_t_15 = module_0.BST()
    b_s_t_16 = module_0.BST()
    var_13 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    var_14 = b_s_t_17.getOrder()
    var_15 = b_s_t_16.getOrder(b_s_t_15)
    node_6 = module_0.Node(none_type_0)

def test_case_832():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.remove(var_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_3.__len__()
    assert var_7 == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_6.getOrder()
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder()
    bool_2 = False
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(b_s_t_8)
    assert len(node_6.value) == 0
    var_13 = b_s_t_8.minValueNode(node_6)
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_13.value).__module__}.{type(var_13.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_13.value) == 0
    assert var_13.left is None
    assert var_13.right is None
    var_14 = b_s_t_7.__len__()
    assert var_14 == 0

def test_case_833():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.isValid()
    var_1 = var_0.__str__()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    var_2 = b_s_t_2.__len__()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.remove(var_4)
    b_s_t_4 = module_0.BST()
    var_6 = b_s_t_4.__len__()
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.isValid()
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.remove(bool_0)
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    b_s_t_7 = module_0.BST()

def test_case_834():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(var_5)
    assert node_4.value == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1
    node_5 = module_0.Node(var_7)
    assert node_5.value == []
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_4.__str__()
    assert var_10 == '[]'
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    node_8 = module_0.Node(b_s_t_10)
    assert len(node_8.value) == 0
    var_13 = b_s_t_9.contains(node_8)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_9 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_2 = None
    node_10 = module_0.Node(none_type_2)
    list_2 = [node_10]
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.add(list_2)
    assert len(b_s_t_12) == 1
    set_0 = set()
    node_11 = module_0.Node(set_0)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_3 = b_s_t_13.build(set_0)
    var_15 = b_s_t_13.__str__()
    assert var_15 == '[]'
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0

def test_case_835():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_0)
    assert node_1.value == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.isValid()
    node_4 = module_0.Node(b_s_t_3)
    assert len(node_4.value) == 0
    var_7 = b_s_t_3.contains(var_6)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_4.build(b_s_t_4)
    var_8 = b_s_t_4.__str__()
    assert var_8 == '[]'
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_5 = module_0.BST()
    var_9 = b_s_t_5.remove(bytes_0)
    b_s_t_6 = module_0.BST()

def test_case_836():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_2.__str__()
    assert var_7 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    none_type_3 = b_s_t_7.build(var_9)
    assert len(b_s_t_7) == 2
    none_type_4 = b_s_t_5.build(var_9)
    assert len(b_s_t_5) == 2

def test_case_837():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    var_6 = var_5.__str__()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_7.getOrder(b_s_t_6)
    node_0 = module_0.Node(var_6)

def test_case_838():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_5.getOrder(b_s_t_4)
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.contains(b_s_t_8)
    node_2 = module_0.Node(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.isValid()
    node_3 = module_0.Node(var_9)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.remove(none_type_2)
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.remove(none_type_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_13 = b_s_t_14.contains(b_s_t_14)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_14 = b_s_t_15.isValid()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_15 = b_s_t_16.isValid()
    node_5 = module_0.Node(b_s_t_16)
    assert len(node_5.value) == 0
    var_16 = b_s_t_16.contains(var_15)
    var_17 = b_s_t_16.__str__()
    assert var_17 == '[]'
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_18 = b_s_t_17.isValid()
    node_6 = module_0.Node(b_s_t_17)
    assert len(node_6.value) == 0
    var_19 = b_s_t_17.contains(var_18)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    none_type_5 = b_s_t_18.build(b_s_t_18)
    var_20 = b_s_t_18.__str__()
    assert var_20 == '[]'
    b_s_t_19 = module_0.BST()

def test_case_839():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_2)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_1)
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_4 = True
    node_3 = module_0.Node(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.contains(b_s_t_8)
    node_4 = module_0.Node(node_3)

def test_case_840():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(var_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    none_type_3 = b_s_t_4.build(b_s_t_6)
    var_5 = b_s_t_4.contains(none_type_2)
    bool_0 = False
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.remove(bool_0)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder(none_type_4)
    var_8 = b_s_t_7.getOrder()
    none_type_5 = b_s_t_3.build(var_4)

def test_case_841():
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bytes_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert var_2.value is True
    assert var_2.left is None
    assert var_2.right is None

def test_case_842():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.contains(node_1)
    assert var_2 is False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_0 = [node_2]
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.add(list_0)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_843():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_2 = module_0.Node(var_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value is None
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    list_2 = [node_4]
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.add(list_2)
    assert len(b_s_t_7) == 1
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_8.__len__()
    assert var_10 == 0
    var_11 = b_s_t_8.isValid()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_9.remove(var_12)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.remove(bytes_0)
    var_15 = var_7.__len__()
    assert var_15 == 0

def test_case_844():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = var_3.__str__()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_6 = b_s_t_3.contains(var_5)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    node_7 = module_0.Node(b_s_t_7)
    assert len(node_7.value) == 0
    var_11 = b_s_t_7.contains(var_10)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_8.build(b_s_t_8)
    var_12 = b_s_t_8.__str__()
    assert var_12 == '[]'
    b_s_t_9 = module_0.BST()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_9 = module_0.Node(list_1)
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_9.__len__()
    node_11 = module_0.Node(var_7)
    assert node_11.value == '[]'

def test_case_845():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder(none_type_3)
    b_s_t_4 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_4 = b_s_t_4.build(var_4)
    assert len(b_s_t_4) == 2
    b_s_t_5 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.__len__()

def test_case_846():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    node_1 = module_0.Node(node_0)

def test_case_847():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__str__()
    assert var_1 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = b_s_t_1.isValid()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bytes_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_8 = b_s_t_7.add(none_type_4)
    assert len(b_s_t_7) == 1
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_848():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(node_1)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(var_3)
    assert node_3.value == []
    bool_0 = False
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(bool_0)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_7.getOrder(b_s_t_6)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_10 = b_s_t_9.isValid()
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_12.__len__()
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    b_s_t_13 = module_0.BST()

def test_case_849():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    var_6 = b_s_t_2.__len__()
    assert var_6 == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = b_s_t_4.build(b_s_t_6)
    node_1 = module_0.Node(b_s_t_6)
    b_s_t_7 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.isValid()
    node_3 = module_0.Node(b_s_t_9)
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.remove(b_s_t_4)

def test_case_850():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_2 = b_s_t_1.build(b_s_t_3)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.__len__()
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(none_type_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder(none_type_5)
    none_type_6 = None
    node_2 = module_0.Node(none_type_6)
    var_9 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.isValid()
    node_3 = module_0.Node(b_s_t_10)
    var_12 = b_s_t_10.contains(var_11)
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.isValid()
    node_4 = module_0.Node(b_s_t_11)
    var_15 = b_s_t_11.contains(var_14)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_11.remove(var_15)
    b_s_t_13 = module_0.BST()
    var_17 = b_s_t_13.__str__()
    assert var_17 == '[]'
    b_s_t_14 = module_0.BST()
    b_s_t_15 = module_0.BST()
    node_6 = module_0.Node(b_s_t_15)
    var_18 = b_s_t_13.isValid()

def test_case_851():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    var_5 = b_s_t_2.contains(node_0)
    assert var_5 is False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_7)
    assert node_1.value is None
    bool_0 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_0)
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder(none_type_0)
    var_10 = b_s_t_5.getOrder()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_5.isValid()

def test_case_852():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_1)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    var_6 = b_s_t_7.add(var_5)
    assert len(b_s_t_7) == 1
    node_4 = module_0.Node(var_5)
    assert node_4.value == []
    var_7 = b_s_t_7.isValid()
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.contains(b_s_t_9)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_10.__len__()
    assert var_11 == 0
    var_12 = b_s_t_9.contains(var_10)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    var_14 = var_13.__str__()
    assert var_14 == '[]'
    var_15 = var_14.__str__()
    assert var_15 == '[]'
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.remove(none_type_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_17 = b_s_t_14.isValid()
    node_6 = module_0.Node(b_s_t_14)
    assert len(node_6.value) == 0
    var_18 = b_s_t_14.contains(var_17)
    set_2 = set()
    node_7 = module_0.Node(set_2)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    none_type_4 = b_s_t_15.build(set_2)
    var_19 = b_s_t_15.isValid()
    node_8 = module_0.Node(none_type_4)

def test_case_853():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    assert var_4 is False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    list_1 = [var_5, var_5]
    none_type_0 = b_s_t_3.build(list_1)
    assert len(b_s_t_3) == 2
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    var_8 = b_s_t_4.getOrder()
    var_9 = b_s_t_5.contains(var_0)

def test_case_854():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_1.isValid()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.remove(var_4)
    var_6 = b_s_t_2.getOrder()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    list_2 = [none_type_1]
    var_7 = b_s_t_3.remove(list_2)
    var_8 = var_1.__str__()
    assert var_8 == '[]'

def test_case_855():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    none_type_1 = b_s_t_3.build(var_2)
    assert len(b_s_t_3) == 2
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value is None
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_7.__len__()
    assert var_7 == 0
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_8.remove(var_9)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.isValid()
    node_5 = module_0.Node(b_s_t_9)
    assert len(node_5.value) == 0
    var_12 = b_s_t_9.contains(var_11)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_9.remove(var_12)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.isValid()
    var_15 = var_14.__str__()
    var_16 = b_s_t_12.contains(b_s_t_12)
    var_17 = b_s_t_7.__len__()
    assert var_17 == 0

def test_case_856():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0

def test_case_857():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_7 = b_s_t_6.add(none_type_0)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_6)
    assert node_2.value == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_7.build(b_s_t_7)
    node_4 = module_0.Node(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.minValueNode(node_5)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert var_8.value == [False, False, False, False]
    assert var_8.left is None
    assert var_8.right is None
    var_9 = b_s_t_8.add(var_8)
    assert len(b_s_t_8) == 1
    bool_2 = False
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    var_13 = var_12.__len__()
    assert var_13 == 0

def test_case_858():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_1 = b_s_t_1.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_4 = b_s_t_2.contains(node_2)
    node_3 = module_0.Node(node_2)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    node_6 = module_0.Node(var_5)
    assert node_6.value == 0
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    set_0 = set()
    node_8 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_0)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder()
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.remove(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_3.build(b_s_t_0)

def test_case_859():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    node_1 = module_0.Node(none_type_0)
    var_0 = b_s_t_0.remove(node_1)

def test_case_860():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_4.build(b_s_t_6)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    node_1 = module_0.Node(b_s_t_10)
    var_7 = b_s_t_9.contains(node_1)
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()
    var_8 = b_s_t_12.isValid()
    node_2 = module_0.Node(b_s_t_12)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(node_4)
    b_s_t_13 = module_0.BST()

def test_case_861():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_4 = b_s_t_3.add(none_type_2)
    assert len(b_s_t_3) == 1
    node_4 = module_0.Node(var_3)
    assert node_4.value == '[]'
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    list_1 = [none_type_4]
    var_6 = b_s_t_5.remove(list_1)
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_5 = b_s_t_6.build(set_0)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_862():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    node_1 = module_0.Node(bool_0)

def test_case_863():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_2 = module_0.Node(b_s_t_1)
    assert len(node_2.value) == 0
    var_3 = b_s_t_1.contains(var_2)
    var_4 = b_s_t_1.__len__()
    assert var_4 == 0
    node_3 = module_0.Node(bool_0)

def test_case_864():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.getOrder(b_s_t_2)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_5.build(b_s_t_7)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.contains(b_s_t_9)
    node_1 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.isValid()
    var_11 = b_s_t_10.__len__()
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.getOrder()
    var_13 = b_s_t_10.__len__()
    var_14 = b_s_t_10.add(node_1)
    assert len(b_s_t_10) == 1

def test_case_865():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    var_4 = b_s_t_1.getOrder()
    var_5 = b_s_t_0.__str__()
    assert var_5 == '[]'

def test_case_866():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    node_1 = module_0.Node(none_type_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_1 = b_s_t_3.getOrder(none_type_2)
    b_s_t_4 = module_0.BST()
    var_2 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    var_3 = b_s_t_4.contains(var_2)
    assert var_3 is False
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    none_type_4 = b_s_t_5.build(b_s_t_5)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_2.isValid()

def test_case_867():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    var_3 = b_s_t_1.isValid()
    var_4 = b_s_t_0.contains(var_1)
    assert var_4 is False

def test_case_868():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.__len__()
    assert var_1 == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = b_s_t_4.build(set_0)
    var_2 = b_s_t_4.__str__()
    assert var_2 == '[]'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.isValid()
    node_4 = module_0.Node(b_s_t_7)
    assert len(node_4.value) == 0
    var_5 = b_s_t_7.contains(var_4)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_8.build(b_s_t_8)
    node_6 = module_0.Node(none_type_2)
    var_6 = b_s_t_8.remove(node_6)
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder()
    bool_2 = False
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.remove(bool_2)
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder()
    var_10 = b_s_t_11.add(var_9)
    assert len(b_s_t_11) == 1
    var_11 = var_10.__str__()
    assert var_11 == 'None'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_12.remove(var_12)
    var_14 = b_s_t_12.getOrder()
    var_15 = b_s_t_4.add(none_type_3)
    assert len(b_s_t_4) == 1

def test_case_869():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_1 = module_0.Node(var_2)
    assert node_1.value == []

def test_case_870():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.contains(b_s_t_5)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = True
    node_3 = module_0.Node(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.contains(b_s_t_8)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    var_13 = var_12.__str__()
    assert var_13 == '[]'
    bool_4 = True
    node_4 = module_0.Node(bool_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    node_6 = module_0.Node(node_5)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = b_s_t_11.build(b_s_t_11)
    node_8 = module_0.Node(none_type_3)
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_9.getOrder()

def test_case_871():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    var_3 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    assert len(node_0.value) == 1

def test_case_872():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.__len__()
    assert var_3 == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_5.build(set_0)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.isValid()
    var_9 = b_s_t_7.isValid()
    node_6 = module_0.Node(bool_1)
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.remove(none_type_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_5 = b_s_t_9.build(b_s_t_11)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    none_type_6 = b_s_t_9.build(b_s_t_11)
    b_s_t_12 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    var_13 = b_s_t_12.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.getOrder()
    var_16 = b_s_t_8.__str__()
    assert var_16 == '[]'

def test_case_873():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    var_6 = b_s_t_2.getOrder()
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_5.build(b_s_t_7)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    none_type_4 = b_s_t_8.build(b_s_t_8)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    node_3 = module_0.Node(node_2)
    var_9 = b_s_t_1.getOrder()

def test_case_874():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(var_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'binarySearchTree2.Node'
    assert var_1.value == [False, False, False, False]
    assert var_1.left is None
    assert var_1.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_5.__len__()
    assert var_5 == 0
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    list_2 = [node_4]
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.add(list_2)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_7.__len__()
    assert var_8 == 0
    var_9 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_875():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.isValid()
    var_4 = var_3.__str__()
    var_5 = b_s_t_4.contains(b_s_t_4)
    set_1 = set()
    node_2 = module_0.Node(set_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_6.build(set_1)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.contains(b_s_t_9)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.__len__()
    assert var_9 == 0
    var_10 = b_s_t_7.__len__()
    assert var_10 == 0

def test_case_876():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_0 = [node_1]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.add(list_0)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    var_7 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder()
    var_10 = b_s_t_5.add(var_9)
    assert len(b_s_t_5) == 1
    node_2 = module_0.Node(var_9)
    assert node_2.value == []
    node_3 = module_0.Node(node_0)

def test_case_877():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    var_8 = b_s_t_3.contains(var_6)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    list_0 = [none_type_0]
    var_9 = b_s_t_5.remove(list_0)
    var_10 = b_s_t_5.getOrder()

def test_case_878():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    var_7 = b_s_t_2.__len__()
    assert var_7 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    var_9 = b_s_t_4.contains(node_1)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_0 = b_s_t_6.build(set_0)
    bool_0 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.contains(b_s_t_8)
    node_3 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.remove(none_type_1)
    bool_1 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.remove(bool_1)
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.getOrder()
    var_16 = b_s_t_11.add(var_15)
    assert len(b_s_t_11) == 1
    node_4 = module_0.Node(var_13)

def test_case_879():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    var_6 = var_5.__str__()
    var_7 = b_s_t_3.contains(b_s_t_3)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    bool_1 = False
    node_0 = module_0.Node(bool_1)
    node_1 = module_0.Node(b_s_t_6)
    assert len(node_1.value) == 0
    var_10 = b_s_t_6.minValueNode(node_1)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_10.value).__module__}.{type(var_10.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_10.value) == 0
    assert var_10.left is None
    assert var_10.right is None
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_7.__len__()
    assert var_12 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_0)
    var_13 = b_s_t_8.__str__()
    assert var_13 == '[]'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_8.__len__()
    assert var_14 == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.isValid()
    node_5 = module_0.Node(b_s_t_10)
    assert len(node_5.value) == 0
    var_16 = b_s_t_10.contains(var_15)
    var_17 = b_s_t_10.__len__()
    assert var_17 == 0
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_6 = module_0.Node(bytes_0)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_18 = b_s_t_11.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_11.remove(var_18)
    var_20 = b_s_t_11.getOrder()
    var_21 = b_s_t_11.remove(var_5)

def test_case_880():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    var_5 = b_s_t_2.add(var_4)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value is None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    node_6 = module_0.Node(var_8)
    assert node_6.value == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.isValid()
    var_10 = b_s_t_6.__len__()
    assert var_10 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    var_12 = b_s_t_6.__len__()
    assert var_12 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.__len__()
    assert var_13 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    node_7 = module_0.Node(b_s_t_10)
    assert len(node_7.value) == 0
    var_15 = b_s_t_9.contains(node_7)
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_8 = module_0.Node(bytes_0)
    node_9 = module_0.Node(list_0)

def test_case_881():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_3.__len__()
    assert var_8 == 0

def test_case_882():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_1 = b_s_t_0.contains(node_1)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_0 = [node_2]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.add(list_0)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value == []
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    var_8 = b_s_t_6.isValid()
    node_5 = module_0.Node(bool_0)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    var_9 = var_3.__str__()
    assert var_9 == '[]'

def test_case_883():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_1 = b_s_t_1.build(var_1)
    assert len(b_s_t_1) == 2
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_3 = b_s_t_2.build(b_s_t_2)
    node_2 = module_0.Node(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    list_2 = [node_4]
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.add(list_2)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.__len__()
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    list_3 = [var_6, var_6]
    none_type_5 = b_s_t_5.build(list_3)
    assert len(b_s_t_5) == 2
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.isValid()
    node_5 = module_0.Node(var_7)
    b_s_t_7 = module_0.BST()

def test_case_884():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.isValid()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    none_type_4 = b_s_t_5.build(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(var_7)
    assert node_3.value == []
    var_9 = b_s_t_7.isValid()
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.remove(none_type_5)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_6 = b_s_t_8.build(b_s_t_10)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_11.contains(node_1)

def test_case_885():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_0.add(b_s_t_1)
    assert len(b_s_t_0) == 1
    assert len(node_0.value) == 1

def test_case_886():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    var_5 = b_s_t_4.contains(node_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.isValid()
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.getOrder()
    none_type_0 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder(none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(bool_2)
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__len__()
    assert var_12 == 0
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    node_7 = module_0.Node(var_12)
    assert node_7.value == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0

def test_case_887():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.remove(var_5)
    var_7 = b_s_t_3.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.isValid()
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_8.isValid()
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder(none_type_2)
    var_14 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'
    set_0 = set()
    node_4 = module_0.Node(set_0)
    var_16 = b_s_t_9.remove(none_type_2)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_17 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_18 = b_s_t_12.isValid()
    var_19 = b_s_t_11.isValid()
    node_6 = module_0.Node(bool_4)
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_4 = b_s_t_13.build(b_s_t_13)
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_8 = module_0.Node(list_3)
    b_s_t_14 = module_0.BST()
    var_20 = b_s_t_14.minValueNode(node_8)
    assert f'{type(var_20).__module__}.{type(var_20).__qualname__}' == 'binarySearchTree2.Node'
    assert var_20.value == [False, False, False, False]
    assert var_20.left is None
    assert var_20.right is None
    var_21 = b_s_t_2.__len__()
    assert var_21 == 1

def test_case_888():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_0)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_2)
    var_6 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_8 = b_s_t_4.remove(none_type_2)
    var_9 = b_s_t_1.getOrder()
    var_10 = var_9.__len__()
    assert var_10 == 0

def test_case_889():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_2)
    assert node_2.value is None
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0

def test_case_890():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_5 = b_s_t_2.add(none_type_1)
    assert len(b_s_t_2) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value == '[]'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_3)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_2)
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_0)
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.getOrder()
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_1)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder(none_type_4)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    var_14 = b_s_t_8.isValid()
    bool_5 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.remove(bool_5)
    bool_6 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_16 = b_s_t_10.remove(bool_6)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_18 = b_s_t_13.getOrder()
    var_19 = b_s_t_12.getOrder(b_s_t_11)
    var_20 = b_s_t_7.__len__()
    assert var_20 == 0

def test_case_891():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = var_4.__str__()
    var_6 = b_s_t_3.getOrder()

def test_case_892():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.contains(b_s_t_6)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_7.build(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_8.__len__()
    assert var_8 == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_9.remove(var_9)
    var_11 = b_s_t_9.getOrder()
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__len__()
    assert var_12 == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_11.__len__()
    assert var_14 == 0
    var_15 = b_s_t_11.__str__()
    assert var_15 == '[]'
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.isValid()
    node_4 = module_0.Node(var_16)
    var_17 = b_s_t_2.add(var_13)
    assert len(b_s_t_2) == 1

def test_case_893():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_4 = b_s_t_3.contains(var_3)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_7 = b_s_t_4.contains(node_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_8 = b_s_t_2.__len__()
    assert var_8 == 0

def test_case_894():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    list_0 = [node_1]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.add(list_0)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    node_2 = module_0.Node(var_6)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.minValueNode(node_3)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert var_7.value == [False, False, False, False]
    assert var_7.left is None
    assert var_7.right is None
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    list_3 = [node_5]
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.add(list_3)
    assert len(b_s_t_7) == 1
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    node_6 = module_0.Node(b_s_t_8)
    assert len(node_6.value) == 0
    var_10 = b_s_t_8.contains(var_9)
    var_11 = b_s_t_8.__len__()
    assert var_11 == 0
    var_12 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    assert len(node_6.value) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.isValid()
    node_7 = module_0.Node(b_s_t_9)
    assert len(node_7.value) == 0
    var_14 = b_s_t_9.contains(var_13)
    bool_3 = False
    list_4 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_9.remove(var_14)
    var_16 = b_s_t_1.remove(b_s_t_5)

def test_case_895():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.contains(b_s_t_8)
    node_3 = module_0.Node(bool_1)
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_4 = module_0.Node(bytes_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    list_1 = [none_type_3]
    var_7 = b_s_t_9.remove(list_1)
    var_8 = b_s_t_1.isValid()

def test_case_896():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    var_1 = b_s_t_1.isValid()
    var_2 = var_0.__len__()
    assert var_2 == 2

def test_case_897():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    node_1 = module_0.Node(node_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_3 = b_s_t_2.add(none_type_0)
    assert len(b_s_t_2) == 1
    node_3 = module_0.Node(var_2)
    assert node_3.value == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_4 = module_0.Node(b_s_t_3)
    assert len(node_4.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_3.remove(var_5)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    var_10 = b_s_t_6.isValid()
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_8.build(b_s_t_8)
    node_8 = module_0.Node(none_type_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_9 = module_0.Node(list_2)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_9.add(var_11)
    assert len(b_s_t_9) == 1
    node_10 = module_0.Node(list_2)
    bool_4 = True
    node_11 = module_0.Node(bool_4)
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.remove(bool_4)
    var_14 = b_s_t_8.getOrder()

def test_case_898():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    var_4 = b_s_t_1.getOrder()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = b_s_t_9.build(set_0)
    var_8 = b_s_t_9.__str__()
    assert var_8 == '[]'
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.remove(none_type_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.contains(b_s_t_12)
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'
    set_1 = set()
    node_4 = module_0.Node(set_1)
    node_5 = module_0.Node(var_2)

def test_case_899():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_5 = b_s_t_1.remove(none_type_0)
    set_1 = set()
    node_2 = module_0.Node(set_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_3.getOrder()
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_10 = b_s_t_4.contains(none_type_1)
    b_s_t_7 = module_0.BST()
    var_11 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.getOrder()
    var_13 = b_s_t_8.add(var_12)
    assert len(b_s_t_8) == 1
    node_3 = module_0.Node(var_12)
    assert node_3.value == []
    node_4 = module_0.Node(var_10)

def test_case_900():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_0)
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_6 = b_s_t_5.add(none_type_1)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(var_5)
    assert node_4.value == '[]'
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = var_1.__str__()

def test_case_901():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    node_2 = module_0.Node(b_s_t_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_6.__len__()
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_1.__str__()
    assert var_8 == '[]'

def test_case_902():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(b_s_t_2)
    node_2 = module_0.Node(none_type_0)
    var_3 = b_s_t_2.remove(node_2)
    var_4 = b_s_t_1.contains(b_s_t_1)

def test_case_903():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.minValueNode(node_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert var_3.value == [False, False, False, False]
    assert var_3.left is None
    assert var_3.right is None
    var_4 = b_s_t_5.add(var_3)
    assert len(b_s_t_5) == 1
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder()
    var_8 = b_s_t_9.add(var_7)
    assert len(b_s_t_9) == 1
    node_3 = module_0.Node(var_7)
    assert node_3.value == []
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_12 = module_0.BST()
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.isValid()
    var_13 = b_s_t_3.isValid()

def test_case_904():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = var_2.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    var_8 = var_7.__str__()
    assert var_8 == 'None'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    var_10 = b_s_t_5.add(var_9)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_905():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_5 = b_s_t_2.contains(var_4)
    var_6 = b_s_t_2.__str__()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_7 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.contains(b_s_t_5)
    var_9 = b_s_t_5.__str__()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    list_0 = [none_type_1]
    var_10 = b_s_t_6.remove(list_0)
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.__str__()
    var_12 = b_s_t_7.getOrder()
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_2 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.remove(bool_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.contains(b_s_t_12)
    var_15 = b_s_t_3.getOrder()

def test_case_906():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(b_s_t_4)
    assert len(node_4.value) == 0
    var_6 = b_s_t_4.minValueNode(node_4)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_6.value).__module__}.{type(var_6.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_6.value) == 0
    assert var_6.left is None
    assert var_6.right is None
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_5.build(set_0)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    var_9 = var_8.__str__()

def test_case_907():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    node_1 = module_0.Node(node_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.getOrder(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_6 = b_s_t_9.isValid()
    node_4 = module_0.Node(b_s_t_9)
    assert len(node_4.value) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    var_9 = b_s_t_10.add(var_8)
    assert len(b_s_t_10) == 1
    var_10 = var_4.__str__()
    assert var_10 == 'None'

def test_case_908():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.getOrder()
    list_0 = [var_3, var_3]
    none_type_0 = b_s_t_1.build(list_0)
    assert len(b_s_t_1) == 2
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_6 = var_4.__str__()

def test_case_909():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_5.__len__()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_7.__len__()
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.isValid()
    node_4 = module_0.Node(b_s_t_9)
    var_10 = b_s_t_9.contains(var_9)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.isValid()
    var_13 = var_12.__str__()
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.remove(none_type_3)
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    none_type_4 = b_s_t_11.build(b_s_t_13)
    var_16 = b_s_t_11.contains(none_type_3)
    b_s_t_14 = module_0.BST()

def test_case_910():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_6 = b_s_t_3.remove(none_type_1)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.contains(b_s_t_6)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    none_type_2 = b_s_t_7.build(var_9)
    assert len(b_s_t_7) == 2
    var_10 = b_s_t_1.remove(var_3)

def test_case_911():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    list_0 = [var_4, var_4]
    none_type_0 = b_s_t_3.build(list_0)
    assert len(b_s_t_3) == 2
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    var_7 = b_s_t_4.isValid()
    node_2 = module_0.Node(bool_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_10 = b_s_t_7.contains(var_9)
    var_11 = b_s_t_7.__len__()
    assert var_11 == 0
    var_12 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    assert len(node_3.value) == 1
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.contains(b_s_t_10)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.minValueNode(node_5)
    assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'binarySearchTree2.Node'
    assert var_15.value == [False, False, False, False]
    assert var_15.left is None
    assert var_15.right is None
    var_16 = b_s_t_11.add(var_15)
    assert len(b_s_t_11) == 1
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.getOrder()
    bool_3 = False
    node_6 = module_0.Node(bool_3)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_3 = b_s_t_13.build(b_s_t_13)
    b_s_t_14 = module_0.BST()

def test_case_912():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.isValid()
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    node_4 = module_0.Node(var_8)

def test_case_913():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_4 = b_s_t_3.contains(var_3)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(set_0)
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.isValid()
    var_12 = b_s_t_8.__len__()
    assert var_12 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder()
    var_14 = b_s_t_8.__len__()
    assert var_14 == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    bool_3 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.getOrder()
    var_18 = b_s_t_12.add(var_17)
    assert len(b_s_t_12) == 1
    var_19 = var_18.__str__()
    assert var_19 == 'None'
    bool_4 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_20 = b_s_t_13.remove(bool_4)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_21 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_22 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    none_type_2 = None
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    var_23 = b_s_t_18.remove(none_type_2)
    b_s_t_19 = module_0.BST()
    assert len(b_s_t_19) == 0
    var_24 = b_s_t_19.getOrder()
    b_s_t_20 = module_0.BST()
    assert len(b_s_t_20) == 0
    none_type_3 = b_s_t_18.build(b_s_t_20)
    var_25 = var_24.__str__()
    assert var_25 == '[]'
    none_type_4 = b_s_t_18.build(b_s_t_20)
    bool_5 = False
    b_s_t_21 = module_0.BST()
    var_26 = b_s_t_21.remove(bool_5)
    b_s_t_22 = module_0.BST()
    b_s_t_23 = module_0.BST()
    var_27 = b_s_t_23.getOrder()
    b_s_t_24 = module_0.BST()
    var_28 = b_s_t_24.getOrder()
    var_29 = b_s_t_23.getOrder(b_s_t_22)
    var_30 = b_s_t_17.__len__()

def test_case_914():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_4 = b_s_t_4.minValueNode(node_2)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_3 = b_s_t_5.build(b_s_t_7)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    node_3 = module_0.Node(none_type_2)

def test_case_915():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = var_2.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    var_8 = var_7.__str__()
    assert var_8 == 'None'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_11 = b_s_t_7.contains(var_10)
    var_12 = b_s_t_7.__str__()
    assert var_12 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.isValid()
    var_14 = b_s_t_8.__len__()
    assert var_14 == 0
    var_15 = var_14.__str__()
    assert var_15 == '0'

def test_case_916():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    list_0 = [node_1]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.add(list_0)
    assert len(b_s_t_3) == 1
    var_3 = b_s_t_0.getOrder()

def test_case_917():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_2.isValid()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(b_s_t_4)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.__str__()
    assert var_8 == '[]'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_9 = b_s_t_9.add(none_type_4)
    assert len(b_s_t_9) == 1
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    node_5 = module_0.Node(b_s_t_11)
    var_11 = b_s_t_10.contains(node_5)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_12.remove(var_12)
    var_14 = b_s_t_5.isValid()

def test_case_918():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    none_type_2 = b_s_t_1.build(var_0)
    assert len(b_s_t_1) == 2
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    node_4 = module_0.Node(node_3)
    b_s_t_2 = module_0.BST()
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_5 = module_0.Node(var_2)
    assert node_5.value == []
    var_4 = b_s_t_3.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.isValid()
    var_7 = b_s_t_4.isValid()
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.getOrder()
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    b_s_t_7 = module_0.BST()
    var_11 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.getOrder()
    var_13 = var_12.__str__()
    assert var_13 == '[]'
    node_7 = module_0.Node(var_3)
    assert node_7.value is None

def test_case_919():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_4 = b_s_t_6.build(b_s_t_8)
    var_7 = b_s_t_6.contains(none_type_3)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_9 = module_0.BST()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.remove(bytes_0)
    var_9 = b_s_t_8.add(var_0)
    assert len(b_s_t_8) == 1

def test_case_920():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.contains(b_s_t_8)
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_0)
    var_9 = b_s_t_10.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_8.__len__()
    assert var_11 == 0

def test_case_921():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.minValueNode(node_1)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert var_5.value == [False, False, False, False]
    assert var_5.left is None
    assert var_5.right is None
    var_6 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_8 = b_s_t_4.contains(var_7)
    var_9 = b_s_t_4.__len__()
    assert var_9 == 0
    var_10 = b_s_t_4.add(var_7)
    assert len(b_s_t_4) == 1
    assert len(node_2.value) == 1
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_922():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_4 = b_s_t_1.contains(var_3)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(b_s_t_2)
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    b_s_t_3 = module_0.BST()
    var_6 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    var_7 = b_s_t_3.contains(var_6)
    var_8 = b_s_t_3.__len__()
    b_s_t_4 = module_0.BST()
    var_9 = b_s_t_4.getOrder()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    set_0 = set()
    node_5 = module_0.Node(set_0)

def test_case_923():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.remove(none_type_0)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.contains(b_s_t_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    var_10 = b_s_t_6.add(var_9)
    assert len(b_s_t_6) == 1
    node_0 = module_0.Node(var_9)
    assert node_0.value == []
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_5.__str__()
    assert var_12 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder()
    var_14 = var_13.__str__()
    assert var_14 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.isValid()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_16 = b_s_t_10.minValueNode(node_1)
    assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'binarySearchTree2.Node'
    assert var_16.value == [False, False, False, False]
    assert var_16.left is None
    assert var_16.right is None
    node_2 = module_0.Node(node_0)

def test_case_924():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.isValid()
    var_5 = b_s_t_3.getOrder()

def test_case_925():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(b_s_t_2)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    var_4 = var_2.__len__()
    assert var_4 == 2

def test_case_926():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = var_3.__str__()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_3 = module_0.Node(var_6)
    assert node_3.value == []
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_0.remove(b_s_t_2)

def test_case_927():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.isValid()

def test_case_928():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_929():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.isValid()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.contains(b_s_t_4)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_8 = b_s_t_5.contains(var_7)
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_6.__len__()
    assert var_11 == 0
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_8.remove(var_12)
    var_14 = b_s_t_2.remove(var_9)
    var_15 = var_14.__str__()

def test_case_930():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_6.remove(var_4)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder(none_type_4)
    var_7 = b_s_t_7.isValid()
    bool_1 = False
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_11 = b_s_t_13.isValid()
    node_2 = module_0.Node(b_s_t_13)
    var_12 = b_s_t_13.contains(var_11)
    var_13 = b_s_t_13.__len__()
    var_14 = b_s_t_13.add(var_11)
    assert len(b_s_t_13) == 1
    assert len(node_2.value) == 1
    var_15 = b_s_t_2.__len__()

def test_case_931():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    var_7 = b_s_t_6.contains(var_6)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_3 = b_s_t_7.build(set_0)
    var_8 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    none_type_4 = b_s_t_8.build(var_9)
    assert len(b_s_t_8) == 2
    node_5 = module_0.Node(node_2)

def test_case_932():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    none_type_3 = b_s_t_4.build(b_s_t_6)
    bool_1 = False
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_9.getOrder(b_s_t_8)
    var_12 = b_s_t_6.contains(b_s_t_4)

def test_case_933():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    var_5 = var_4.__str__()
    assert var_5 == 'None'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.isValid()
    var_8 = b_s_t_4.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__len__()
    assert var_9 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    var_11 = var_10.__str__()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = b_s_t_9.build(b_s_t_9)
    node_4 = module_0.Node(none_type_1)
    var_12 = b_s_t_9.remove(node_4)
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_10 = module_0.BST()
    none_type_3 = b_s_t_10.build(set_0)
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_11.__len__()
    var_15 = b_s_t_11.__str__()
    assert var_15 == '[]'
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_12.remove(bytes_0)
    var_17 = b_s_t_5.remove(var_6)

def test_case_934():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_2)
    assert node_2.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_1)
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.isValid()
    node_5 = module_0.Node(b_s_t_11)
    assert len(node_5.value) == 0
    var_11 = b_s_t_11.contains(var_10)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_3 = b_s_t_12.build(b_s_t_12)
    var_12 = b_s_t_12.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_5.add(var_1)
    assert len(b_s_t_5) == 1

def test_case_935():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    var_1 = b_s_t_0.__str__()
    assert var_1 == '[]'

def test_case_936():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = var_1.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    var_6 = b_s_t_3.contains(node_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(var_8)
    assert node_1.value is None
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    var_10 = b_s_t_4.__len__()
    assert var_10 == 0

def test_case_937():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.isValid()
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_0 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder(none_type_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.isValid()
    node_2 = module_0.Node(b_s_t_10)
    assert len(node_2.value) == 0
    var_10 = b_s_t_8.getOrder()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.isValid()
    var_13 = b_s_t_11.isValid()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_14 = b_s_t_14.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_14.getOrder()
    node_5 = module_0.Node(var_10)
    assert node_5.value == []

def test_case_938():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_1.__str__()
    assert var_5 == '[]'
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.contains(b_s_t_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    var_10 = b_s_t_5.contains(var_8)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.isValid()
    var_12 = var_11.__str__()
    var_13 = b_s_t_7.contains(b_s_t_7)
    bool_1 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.remove(bool_1)
    none_type_0 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder(none_type_0)
    var_16 = b_s_t_9.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_17 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    node_2 = module_0.Node(b_s_t_12)
    assert len(node_2.value) == 0
    var_18 = b_s_t_11.contains(node_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_19 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    node_3 = module_0.Node(b_s_t_14)
    assert len(node_3.value) == 0
    var_20 = b_s_t_13.contains(node_3)
    node_4 = module_0.Node(node_3)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    bool_3 = False
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_21 = b_s_t_16.remove(bool_3)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    var_22 = b_s_t_18.getOrder()
    b_s_t_19 = module_0.BST()
    assert len(b_s_t_19) == 0
    var_23 = b_s_t_19.getOrder()
    b_s_t_20 = module_0.BST()
    assert len(b_s_t_20) == 0
    none_type_1 = None
    b_s_t_21 = module_0.BST()
    assert len(b_s_t_21) == 0
    var_24 = b_s_t_21.remove(none_type_1)
    b_s_t_22 = module_0.BST()
    assert len(b_s_t_22) == 0
    bool_4 = True
    node_6 = module_0.Node(bool_4)
    b_s_t_23 = module_0.BST()
    assert len(b_s_t_23) == 0
    var_25 = b_s_t_23.contains(b_s_t_23)
    var_26 = b_s_t_23.__str__()
    assert var_26 == '[]'
    var_27 = b_s_t_12.__len__()
    assert var_27 == 0

def test_case_939():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.getOrder()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.minValueNode(node_1)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert var_11.value == [False, False, False, False]
    assert var_11.left is None
    assert var_11.right is None
    b_s_t_9 = module_0.BST()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    set_1 = set()
    node_3 = module_0.Node(set_1)
    b_s_t_10 = module_0.BST()
    none_type_3 = b_s_t_10.build(set_1)
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    none_type_4 = b_s_t_3.build(b_s_t_5)

def test_case_940():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.isValid()
    none_type_2 = b_s_t_0.build(list_1)
    assert len(b_s_t_0) == 4

def test_case_941():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_5 = b_s_t_3.contains(node_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_6.build(set_0)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    var_8 = var_7.__str__()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()
    var_11 = b_s_t_8.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_3 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_14 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_15 = b_s_t_15.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_15.__len__()
    assert var_16 == 0
    var_17 = b_s_t_15.__str__()
    assert var_17 == '[]'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    bool_4 = True
    node_6 = module_0.Node(bool_4)
    none_type_4 = None
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_18 = b_s_t_16.remove(none_type_4)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_19 = var_18.__str__()
    bool_5 = True
    node_7 = module_0.Node(bool_5)
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    var_20 = b_s_t_18.__str__()
    assert var_20 == '[]'
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    b_s_t_19 = module_0.BST()
    assert len(b_s_t_19) == 0
    var_21 = b_s_t_16.isValid()

def test_case_942():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    var_8 = var_5.__str__()
    assert var_8 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.minValueNode(node_1)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert var_9.value == [False, False, False, False]
    assert var_9.left is None
    assert var_9.right is None
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.remove(bool_2)
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder(none_type_0)
    var_12 = b_s_t_6.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.isValid()
    node_2 = module_0.Node(b_s_t_9)
    assert len(node_2.value) == 0
    var_15 = b_s_t_9.contains(var_14)
    var_16 = b_s_t_9.__str__()
    assert var_16 == '[]'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_943():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_2 = b_s_t_3.contains(var_1)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    var_6 = b_s_t_6.getOrder(b_s_t_5)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.isValid()
    var_8 = var_7.__str__()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_0 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder(none_type_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.isValid()
    node_2 = module_0.Node(b_s_t_11)
    assert len(node_2.value) == 0
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'

def test_case_944():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bytes_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    none_type_3 = b_s_t_2.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_1 = module_0.Node(var_7)
    assert node_1.value == []
    var_9 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.getOrder()
    var_11 = b_s_t_7.add(var_10)
    assert len(b_s_t_7) == 1
    node_2 = module_0.Node(var_11)
    assert node_2.value is None
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.isValid()
    var_13 = b_s_t_8.__len__()
    b_s_t_9 = module_0.BST()
    var_14 = b_s_t_9.getOrder()
    var_15 = b_s_t_8.__len__()
    b_s_t_10 = module_0.BST()
    var_16 = b_s_t_10.getOrder()
    var_17 = var_16.__str__()
    assert var_17 == '[]'
    var_18 = var_17.__str__()
    assert var_18 == '[]'
    b_s_t_11 = module_0.BST()
    var_19 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    node_3 = module_0.Node(b_s_t_12)
    var_20 = b_s_t_11.contains(node_3)
    b_s_t_13 = module_0.BST()
    none_type_4 = None
    b_s_t_14 = module_0.BST()
    var_21 = b_s_t_14.remove(none_type_4)
    b_s_t_15 = module_0.BST()
    node_4 = module_0.Node(var_20)

def test_case_945():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    node_1 = module_0.Node(b_s_t_7)
    assert len(node_1.value) == 0
    var_8 = b_s_t_7.contains(var_7)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_8.build(b_s_t_8)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_9.__len__()
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    var_13 = var_10.__str__()
    assert var_13 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.isValid()
    var_16 = b_s_t_10.isValid()
    node_4 = module_0.Node(bool_1)
    var_17 = b_s_t_2.__str__()
    assert var_17 == '[]'

def test_case_946():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = b_s_t_6.build(b_s_t_8)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder(none_type_2)
    var_9 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    node_0 = module_0.Node(b_s_t_10)
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.remove(none_type_3)
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.isValid()
    node_1 = module_0.Node(b_s_t_12)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_15 = module_0.BST()
    b_s_t_16 = module_0.BST()
    var_13 = b_s_t_16.isValid()
    node_4 = module_0.Node(b_s_t_16)
    var_14 = b_s_t_16.contains(var_13)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    b_s_t_17 = module_0.BST()
    var_15 = b_s_t_16.remove(var_14)
    var_16 = b_s_t_3.remove(bool_0)

def test_case_947():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)
    b_s_t_3 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder()
    list_1 = [var_7, var_7]
    none_type_2 = b_s_t_6.build(list_1)
    assert len(b_s_t_6) == 2
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    none_type_4 = b_s_t_7.build(b_s_t_7)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    node_5 = module_0.Node(b_s_t_9)
    var_9 = b_s_t_8.contains(node_5)
    b_s_t_10 = module_0.BST()
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.__len__()
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    node_8 = module_0.Node(var_10)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_9 = module_0.Node(list_2)
    bool_5 = True
    node_10 = module_0.Node(bool_5)
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.__str__()
    none_type_6 = None
    node_11 = module_0.Node(none_type_6)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    var_12 = b_s_t_14.__len__()

def test_case_948():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_949():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    node_0 = module_0.Node(b_s_t_4)
    var_5 = var_2.__str__()
    assert var_5 == '[]'

def test_case_950():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.contains(b_s_t_6)
    node_3 = module_0.Node(var_3)
    assert node_3.value == '[]'

def test_case_951():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_952():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    var_6 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    var_11 = var_10.__str__()
    assert var_11 == 'None'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_0 = b_s_t_8.build(set_0)
    var_12 = b_s_t_8.__str__()
    assert var_12 == '[]'
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_3 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.remove(bool_3)
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder(none_type_3)
    var_16 = b_s_t_11.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_13.isValid()
    bool_4 = True
    node_5 = module_0.Node(bool_4)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.remove(bool_4)
    var_19 = b_s_t_14.__len__()
    assert var_19 == 0
    bool_5 = True
    node_6 = module_0.Node(bool_5)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_20 = b_s_t_15.__len__()
    assert var_20 == 0
    none_type_4 = None
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_21 = b_s_t_16.remove(none_type_4)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_22 = b_s_t_17.__str__()
    assert var_22 == '[]'
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    set_1 = set()
    node_7 = module_0.Node(set_1)
    var_23 = b_s_t_0.__str__()
    assert var_23 == '[]'

def test_case_953():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    list_0 = [none_type_0]
    var_0 = b_s_t_0.remove(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_1.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(node_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.remove(var_6)
    var_8 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder()
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.contains(b_s_t_8)
    var_13 = b_s_t_7.__str__()
    assert var_13 == '[]'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_11.remove(var_14)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    node_8 = module_0.Node(b_s_t_13)
    assert len(node_8.value) == 0
    var_17 = b_s_t_12.contains(node_8)
    node_9 = module_0.Node(node_8)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0

def test_case_954():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(node_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    node_4 = module_0.Node(b_s_t_9)
    assert len(node_4.value) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    var_9 = b_s_t_10.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_9.add(b_s_t_10)
    assert len(b_s_t_9) == 1
    assert len(node_4.value) == 1
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    node_6 = module_0.Node(b_s_t_12)
    assert len(node_6.value) == 0
    var_13 = b_s_t_11.contains(node_6)
    node_7 = module_0.Node(node_6)
    bool_3 = True
    node_8 = module_0.Node(bool_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_14 = b_s_t_14.isValid()
    node_9 = module_0.Node(b_s_t_14)
    assert len(node_9.value) == 0
    var_15 = b_s_t_14.contains(var_14)
    none_type_1 = None
    node_10 = module_0.Node(none_type_1)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    none_type_2 = b_s_t_15.build(b_s_t_15)
    var_16 = b_s_t_15.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_13.__len__()

def test_case_955():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.contains(b_s_t_4)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.contains(b_s_t_6)
    node_1 = module_0.Node(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_9.add(var_9)
    assert len(b_s_t_9) == 1
    var_11 = var_10.__str__()
    assert var_11 == 'None'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_10.__len__()
    assert var_13 == 0
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_2 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder(none_type_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.isValid()
    node_2 = module_0.Node(b_s_t_13)
    assert len(node_2.value) == 0
    var_17 = b_s_t_11.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.isValid()
    var_19 = b_s_t_14.__len__()
    assert var_19 == 0
    bool_4 = True
    node_3 = module_0.Node(bool_4)
    var_20 = b_s_t_7.__str__()
    assert var_20 == '[]'

def test_case_956():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    list_0 = [var_5, var_5]
    none_type_1 = b_s_t_3.build(list_0)
    assert len(b_s_t_3) == 2
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_3 = module_0.Node(b_s_t_6)
    assert len(node_3.value) == 0
    var_8 = b_s_t_6.contains(var_7)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_6.remove(var_8)
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_8.build(set_1)
    var_10 = b_s_t_2.__str__()

def test_case_957():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.getOrder(none_type_0)
    var_4 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_6 = b_s_t_1.remove(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_3.build(b_s_t_3)
    node_3 = module_0.Node(none_type_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    var_7 = b_s_t_4.__len__()
    b_s_t_5 = module_0.BST()
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_9 = b_s_t_5.add(none_type_4)
    assert len(b_s_t_5) == 1
    node_6 = module_0.Node(var_8)
    assert node_6.value == '[]'
    none_type_5 = None
    b_s_t_6 = module_0.BST()
    var_10 = b_s_t_6.remove(none_type_5)
    b_s_t_7 = module_0.BST()
    var_11 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_6 = b_s_t_6.build(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.getOrder()
    var_13 = var_12.__str__()
    assert var_13 == '[]'
    var_14 = var_13.__str__()
    assert var_14 == '[]'
    b_s_t_10 = module_0.BST()
    var_15 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    node_7 = module_0.Node(b_s_t_11)
    var_16 = b_s_t_10.contains(node_7)
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_1.isValid()

def test_case_958():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(set_0)
    var_0 = b_s_t_0.contains(none_type_0)
    assert var_0 is False

def test_case_959():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_0)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bytes_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    var_7 = var_6.__str__()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.isValid()
    var_10 = b_s_t_5.isValid()
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(bool_1)
    var_12 = var_11.__str__()

def test_case_960():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_5.getOrder(b_s_t_4)
    bool_2 = True
    node_0 = module_0.Node(bool_2)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_7.build(b_s_t_7)
    node_2 = module_0.Node(none_type_0)
    var_9 = b_s_t_7.remove(node_2)
    bool_3 = False
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.remove(bool_3)
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder(none_type_2)
    var_12 = b_s_t_8.getOrder()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.remove(bytes_0)
    bool_4 = False
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.remove(bool_4)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder()
    bool_5 = False
    list_0 = [bool_5, bool_5, bool_5, bool_5]
    node_3 = module_0.Node(list_0)
    b_s_t_15 = module_0.BST()
    var_17 = b_s_t_15.minValueNode(node_3)
    assert f'{type(var_17).__module__}.{type(var_17).__qualname__}' == 'binarySearchTree2.Node'
    assert var_17.value == [False, False, False, False]
    assert var_17.left is None
    assert var_17.right is None
    var_18 = b_s_t_15.add(var_17)
    assert len(b_s_t_15) == 1
    var_19 = b_s_t_11.isValid()

def test_case_961():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_0)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_0)
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_6 = b_s_t_4.remove(none_type_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.__len__()
    assert var_8 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_4 = module_0.Node(b_s_t_7)
    assert len(node_4.value) == 0
    var_10 = b_s_t_7.contains(var_9)
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = b_s_t_8.build(set_1)
    var_11 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    var_14 = b_s_t_8.remove(b_s_t_3)

def test_case_962():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_7 = b_s_t_10.contains(b_s_t_10)
    var_8 = b_s_t_10.__str__()
    assert var_8 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    list_0 = [node_3]
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.add(list_0)
    assert len(b_s_t_11) == 1
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_12.__len__()
    assert var_11 == 0
    var_12 = b_s_t_12.isValid()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_13.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_13.remove(var_13)
    var_15 = b_s_t_13.getOrder()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    list_1 = [none_type_4]
    var_16 = b_s_t_14.remove(list_1)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_17 = b_s_t_15.isValid()
    node_6 = module_0.Node(b_s_t_15)
    assert len(node_6.value) == 0
    var_18 = b_s_t_15.contains(var_17)
    var_19 = b_s_t_12.isValid()

def test_case_963():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(set_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_3 = b_s_t_3.build(b_s_t_3)
    node_2 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    var_4 = b_s_t_4.contains(var_3)
    var_5 = b_s_t_4.__len__()
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.remove(none_type_4)
    b_s_t_6 = module_0.BST()
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder(none_type_5)
    var_8 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    set_1 = set()
    node_4 = module_0.Node(set_1)
    var_10 = b_s_t_7.remove(none_type_5)
    bool_1 = False
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.remove(bool_1)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.getOrder()
    var_14 = b_s_t_11.getOrder(b_s_t_10)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.isValid()
    var_17 = b_s_t_13.isValid()
    b_s_t_15 = module_0.BST()
    var_18 = b_s_t_15.isValid()
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_16 = module_0.BST()
    var_19 = b_s_t_16.remove(bool_3)
    var_20 = b_s_t_16.__len__()
    assert var_20 == 0
    node_7 = module_0.Node(var_20)
    assert node_7.value == 0

def test_case_964():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    var_2 = b_s_t_1.contains(var_0)
    assert var_2 is False

def test_case_965():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    node_1 = module_0.Node(b_s_t_5)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()

def test_case_966():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.contains(b_s_t_3)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_3 = b_s_t_6.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_7 = b_s_t_10.contains(b_s_t_10)
    var_8 = b_s_t_10.__str__()
    assert var_8 == '[]'
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.__str__()
    assert var_9 == '[]'
    bool_4 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.remove(bool_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_11 = b_s_t_14.__len__()
    assert var_11 == 0
    var_12 = b_s_t_1.__str__()
    assert var_12 == '[]'

def test_case_967():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_0)
    assert node_1.value == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = b_s_t_4.build(b_s_t_6)
    var_6 = b_s_t_4.contains(none_type_2)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.isValid()
    node_4 = module_0.Node(var_8)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_9.__len__()
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    var_12 = var_9.__str__()
    assert var_12 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.getOrder(none_type_4)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    var_14 = b_s_t_10.isValid()
    none_type_6 = None
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.getOrder(none_type_6)
    var_16 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    var_17 = b_s_t_12.__str__()
    assert var_17 == '[]'
    var_18 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()
    var_19 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_20 = b_s_t_14.getOrder()
    list_2 = [var_20, var_20]
    none_type_7 = b_s_t_14.build(list_2)
    assert len(b_s_t_14) == 2
    none_type_8 = b_s_t_8.build(b_s_t_3)

def test_case_968():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_3 = b_s_t_1.build(b_s_t_3)
    none_type_4 = None
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(none_type_4)
    b_s_t_5 = module_0.BST()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.contains(b_s_t_6)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_1.__len__()
    assert var_7 == 0

def test_case_969():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_0.add(b_s_t_1)
    assert len(b_s_t_0) == 1
    assert len(node_0.value) == 1
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(b_s_t_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.minValueNode(node_4)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert var_4.value == [False, False, False, False]
    assert var_4.left is None
    assert var_4.right is None
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    bool_3 = False
    node_5 = module_0.Node(bool_3)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(bytes_0)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.isValid()
    bool_4 = True
    node_6 = module_0.Node(bool_4)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(bool_4)
    var_10 = b_s_t_8.__len__()
    assert var_10 == 0
    b_s_t_9 = module_0.BST()

def test_case_970():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    var_2 = b_s_t_0.__len__()
    assert var_2 == 1

def test_case_971():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__len__()
    assert var_9 == 0
    var_10 = b_s_t_7.contains(var_8)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.contains(b_s_t_11)
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.isValid()
    node_3 = module_0.Node(b_s_t_12)
    assert len(node_3.value) == 0
    var_15 = b_s_t_12.contains(var_14)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_3 = b_s_t_13.build(set_0)
    var_16 = b_s_t_13.isValid()
    none_type_4 = b_s_t_12.build(b_s_t_2)

def test_case_972():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    node_1 = module_0.Node(none_type_0)
    var_0 = b_s_t_0.remove(node_1)
    b_s_t_1 = module_0.BST()
    var_1 = b_s_t_1.getOrder()
    list_0 = [var_1, var_1]
    none_type_2 = b_s_t_1.build(list_0)
    assert len(b_s_t_1) == 2
    b_s_t_2 = module_0.BST()
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    var_4 = b_s_t_3.contains(var_3)
    var_5 = b_s_t_3.__str__()
    b_s_t_4 = module_0.BST()
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder(none_type_3)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.isValid()
    node_3 = module_0.Node(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.__str__()
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    list_1 = [node_4]
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.add(list_1)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    var_11 = var_10.__str__()
    var_12 = var_11.__str__()
    none_type_5 = b_s_t_4.build(var_1)

def test_case_973():
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_0 = module_0.Node(bytes_0)

def test_case_974():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.contains(b_s_t_6)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_2)
    var_9 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()
    var_11 = var_10.__str__()
    var_12 = b_s_t_8.contains(b_s_t_8)
    bool_1 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.remove(bool_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.__str__()
    assert var_16 == '[]'
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    var_17 = b_s_t_14.add(none_type_3)
    assert len(b_s_t_14) == 1
    var_18 = b_s_t_14.__len__()
    assert var_18 == 1
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0

def test_case_975():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    var_2 = var_1.__str__()
    assert var_2 == '0'

def test_case_976():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = b_s_t_2.build(set_0)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0

def test_case_977():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.add(b_s_t_6)
    assert len(b_s_t_5) == 1
    assert len(node_1.value) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(bool_2)
    var_11 = b_s_t_8.__len__()
    assert var_11 == 0
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    list_1 = [none_type_1]
    var_12 = b_s_t_9.remove(list_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.isValid()
    node_5 = module_0.Node(var_13)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    var_14 = b_s_t_11.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_11.__str__()
    assert var_15 == '[]'
    bool_4 = True
    node_7 = module_0.Node(bool_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_12.__len__()
    assert var_17 == 0
    var_18 = b_s_t_0.remove(b_s_t_4)

def test_case_978():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.__str__()
    assert var_1 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_5.add(var_3)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    var_5 = b_s_t_5.isValid()
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_4.contains(none_type_1)

def test_case_979():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    var_9 = b_s_t_6.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder(none_type_1)
    var_11 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    set_0 = set()
    node_4 = module_0.Node(set_0)
    var_13 = b_s_t_9.remove(none_type_1)
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_2 = b_s_t_11.build(set_1)
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.remove(none_type_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_14.contains(b_s_t_14)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0

def test_case_980():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bytes_0)
    bytes_1 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_2 = module_0.Node(bytes_1)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    bool_3 = False
    node_5 = module_0.Node(bool_3)
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0

def test_case_981():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(node_0)
    assert var_0 is False
    var_1 = var_0.__str__()

def test_case_982():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    node_1 = module_0.Node(node_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_4 = module_0.Node(b_s_t_5)
    assert len(node_4.value) == 0
    var_4 = b_s_t_4.contains(node_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_8.build(set_0)
    var_5 = b_s_t_7.contains(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_6 = b_s_t_9.getOrder()
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.__str__()
    assert var_9 == '[]'
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.remove(none_type_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_11 = b_s_t_13.contains(b_s_t_13)
    var_12 = b_s_t_12.__str__()
    assert var_12 == '[]'
    node_8 = module_0.Node(none_type_3)

def test_case_983():
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_5 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = b_s_t_0.build(var_0)

def test_case_984():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_6 = module_0.Node(b_s_t_4)
    assert len(node_6.value) == 0
    var_7 = b_s_t_4.contains(var_6)
    assert var_7 is False
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_4.remove(var_7)
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_6.build(b_s_t_6)
    node_9 = module_0.Node(none_type_1)
    var_9 = b_s_t_0.contains(b_s_t_2)

def test_case_985():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_0.add(b_s_t_1)
    assert len(b_s_t_0) == 1
    assert len(node_0.value) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_986():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    var_2 = var_1.__str__()
    assert var_2 == '0'
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.contains(b_s_t_4)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_1)
    var_7 = b_s_t_5.isValid()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bytes_0)
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_8.build(b_s_t_10)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.__len__()
    var_15 = b_s_t_12.contains(var_13)
    var_16 = b_s_t_8.isValid()

def test_case_987():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bytes_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.remove(var_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_6 = b_s_t_5.add(none_type_1)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    var_9 = b_s_t_8.isValid()
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder(none_type_2)
    var_11 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    set_0 = set()
    node_5 = module_0.Node(set_0)
    var_13 = b_s_t_9.remove(none_type_2)
    bool_4 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.remove(bool_4)
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder(none_type_3)
    var_16 = b_s_t_11.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0

def test_case_988():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_2 = b_s_t_4.__str__()
    assert var_2 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_3 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    bool_3 = False
    node_5 = module_0.Node(bool_3)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_6.remove(var_5)
    bool_4 = True
    node_7 = module_0.Node(bool_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_9.add(var_9)
    assert len(b_s_t_9) == 1
    node_8 = module_0.Node(var_9)
    assert node_8.value == []
    var_11 = b_s_t_9.isValid()
    set_0 = set()
    node_9 = module_0.Node(set_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_4 = b_s_t_10.build(set_0)
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_11.__len__()
    assert var_14 == 0
    var_15 = b_s_t_11.__str__()
    assert var_15 == '[]'
    var_16 = var_13.__str__()
    assert var_16 == '[]'
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0

def test_case_989():
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_0 = module_0.Node(bytes_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_2 = b_s_t_4.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.add(b_s_t_4)
    assert len(b_s_t_3) == 1
    assert len(node_2.value) == 1
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_1)
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_1)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_2.__str__()
    assert var_10 == '[]'

def test_case_990():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = var_4.__str__()
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.contains(b_s_t_6)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    var_10 = var_9.__str__()
    var_11 = b_s_t_7.contains(b_s_t_7)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.isValid()
    node_5 = module_0.Node(b_s_t_9)
    assert len(node_5.value) == 0
    var_13 = b_s_t_9.contains(var_12)
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_10.build(set_0)
    var_14 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.__len__()
    assert var_15 == 0
    none_type_4 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.remove(none_type_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    none_type_5 = b_s_t_12.build(b_s_t_14)
    var_18 = b_s_t_12.contains(none_type_4)
    b_s_t_15 = module_0.BST()
    var_19 = b_s_t_15.getOrder()
    var_20 = var_19.__str__()
    assert var_20 == '[]'
    var_21 = var_20.__str__()
    assert var_21 == '[]'
    none_type_6 = None
    b_s_t_16 = module_0.BST()
    var_22 = b_s_t_16.remove(none_type_6)
    b_s_t_17 = module_0.BST()
    var_23 = b_s_t_17.getOrder()
    bool_3 = False
    node_7 = module_0.Node(bool_3)
    node_8 = module_0.Node(b_s_t_17)
    var_24 = b_s_t_17.minValueNode(node_8)
    assert f'{type(var_24).__module__}.{type(var_24).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_24.value).__module__}.{type(var_24.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_24.value) == 0
    assert var_24.left is None
    assert var_24.right is None
    var_25 = b_s_t_4.isValid()

def test_case_991():
    str_0 = ''
    node_0 = module_0.Node(str_0)

def test_case_992():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = var_2.__str__()
    var_4 = b_s_t_1.contains(b_s_t_1)
    var_5 = b_s_t_1.getOrder()

def test_case_993():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bytes_0)
    str_0 = ''
    node_1 = module_0.Node(str_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.contains(b_s_t_6)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    list_1 = [none_type_2]
    var_8 = b_s_t_8.remove(list_1)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.__len__()
    assert var_11 == 0
    var_12 = var_4.__str__()

def test_case_994():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(node_0)
    assert var_0 is False
    var_1 = var_0.__str__()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bytes_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_0)
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    var_8 = b_s_t_5.minValueNode(node_3)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_8.value).__module__}.{type(var_8.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_8.value) == 0
    assert var_8.left is None
    assert var_8.right is None
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder(none_type_2)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(none_type_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__len__()
    assert var_12 == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.isValid()
    node_7 = module_0.Node(b_s_t_11)
    assert len(node_7.value) == 0
    var_14 = b_s_t_11.contains(var_13)
    var_15 = b_s_t_11.__len__()
    assert var_15 == 0
    bool_3 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.remove(bool_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_13.contains(b_s_t_13)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_14.__len__()
    assert var_19 == 0
    var_20 = b_s_t_13.contains(var_18)
    var_21 = b_s_t_10.__len__()
    assert var_21 == 0

def test_case_995():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    var_3 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    assert len(node_0.value) == 1
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_4 = b_s_t_1.__len__()
    assert var_4 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(var_4)
    assert node_3.value == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.getOrder()
    var_6 = b_s_t_2.add(var_5)
    assert len(b_s_t_2) == 1
    node_5 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_3.__str__()
    assert var_8 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_9 = b_s_t_4.minValueNode(node_7)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert var_9.value == [False, False, False, False]
    assert var_9.left is None
    assert var_9.right is None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_10 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.getOrder()
    var_12 = b_s_t_6.add(var_11)
    assert len(b_s_t_6) == 1
    node_8 = module_0.Node(var_12)
    assert node_8.value is None
    set_0 = set()
    node_9 = module_0.Node(set_0)
    var_13 = var_11.__len__()
    assert var_13 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_14 = b_s_t_7.isValid()
    bool_4 = True
    node_10 = module_0.Node(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_15 = b_s_t_8.remove(bool_4)
    var_16 = b_s_t_8.__len__()
    assert var_16 == 0
    str_0 = ''
    node_11 = module_0.Node(str_0)
    set_1 = set()
    node_12 = module_0.Node(set_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_1 = b_s_t_9.build(set_1)
    var_17 = b_s_t_9.__str__()
    node_13 = module_0.Node(b_s_t_3)
    assert len(node_13.value) == 0

def test_case_996():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.remove(var_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.contains(b_s_t_4)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_2)
    var_7 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    set_0 = set()
    node_3 = module_0.Node(set_0)
    var_9 = b_s_t_5.remove(none_type_2)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    node_4 = module_0.Node(b_s_t_11)
    assert len(node_4.value) == 0
    var_13 = b_s_t_10.contains(node_4)
    node_5 = module_0.Node(node_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.isValid()
    node_6 = module_0.Node(b_s_t_12)
    assert len(node_6.value) == 0
    var_15 = b_s_t_12.contains(var_14)
    var_16 = b_s_t_12.__len__()
    assert var_16 == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_13.getOrder()
    var_18 = var_17.__str__()
    assert var_18 == '[]'
    none_type_4 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_19 = b_s_t_14.remove(none_type_4)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_20 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    none_type_5 = b_s_t_14.build(b_s_t_16)
    var_21 = b_s_t_14.contains(none_type_4)
    var_22 = b_s_t_4.contains(node_2)

def test_case_997():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.isValid()
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.isValid()
    node_4 = module_0.Node(b_s_t_5)
    assert len(node_4.value) == 0
    var_10 = b_s_t_5.contains(var_9)
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_0 = b_s_t_6.build(set_1)
    var_11 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    var_12 = b_s_t_7.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_7.__str__()
    assert var_13 == '[]'
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_14 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    node_7 = module_0.Node(b_s_t_11)
    assert len(node_7.value) == 0
    var_16 = b_s_t_10.contains(node_7)
    node_8 = module_0.Node(var_10)

def test_case_998():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert var_2.value == [False, False, False, False]
    assert var_2.left is None
    assert var_2.right is None
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_6 = b_s_t_2.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    var_9 = b_s_t_5.isValid()
    node_5 = module_0.Node(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    var_11 = var_10.__str__()
    var_12 = b_s_t_7.contains(b_s_t_7)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = b_s_t_9.build(b_s_t_9)
    node_7 = module_0.Node(none_type_1)
    var_13 = b_s_t_9.remove(node_7)
    bool_3 = True
    node_8 = module_0.Node(bool_3)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder()
    list_3 = [var_14, var_14]
    none_type_3 = b_s_t_11.build(list_3)
    assert len(b_s_t_11) == 2
    bool_4 = False
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.remove(bool_4)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    var_17 = b_s_t_15.getOrder()
    var_18 = b_s_t_14.getOrder(b_s_t_13)
    var_19 = var_8.__str__()

def test_case_999():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_4.build(set_0)
    var_3 = b_s_t_3.contains(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(list_0)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[[]]'

def test_case_1000():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.remove(none_type_2)
    b_s_t_2 = module_0.BST()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    var_1 = b_s_t_3.contains(b_s_t_3)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    none_type_4 = b_s_t_5.build(set_0)
    var_3 = b_s_t_4.contains(none_type_3)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    b_s_t_6 = module_0.BST()
    none_type_6 = b_s_t_6.build(b_s_t_6)
    node_5 = module_0.Node(none_type_5)
    var_4 = b_s_t_6.remove(node_5)
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    list_0 = [var_5, var_5]
    none_type_7 = b_s_t_7.build(list_0)
    assert len(b_s_t_7) == 2
    var_6 = b_s_t_3.remove(var_3)

def test_case_1001():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_4.build(b_s_t_6)
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    none_type_2 = b_s_t_4.build(b_s_t_6)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    b_s_t_9 = module_0.BST()
    none_type_5 = b_s_t_9.build(b_s_t_9)
    node_3 = module_0.Node(none_type_4)
    var_12 = b_s_t_9.remove(node_3)
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.isValid()
    node_4 = module_0.Node(var_13)
    bool_1 = False
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.remove(bool_1)
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.__len__()
    var_16 = var_15.__str__()
    b_s_t_13 = module_0.BST()
    var_17 = b_s_t_13.isValid()
    var_18 = var_17.__str__()
    var_19 = var_12.__str__()

def test_case_1002():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_3 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    list_2 = [var_5, var_5]
    none_type_0 = b_s_t_3.build(list_2)
    assert len(b_s_t_3) == 2
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_6.add(var_8)
    assert len(b_s_t_6) == 1
    node_4 = module_0.Node(var_8)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    var_10 = b_s_t_7.__str__()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_7.__len__()
    assert var_11 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.isValid()
    node_7 = module_0.Node(b_s_t_11)
    assert len(node_7.value) == 0
    var_14 = b_s_t_9.getOrder()
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_5 = True
    node_9 = module_0.Node(bool_5)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.__len__()
    assert var_15 == 0
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    node_11 = module_0.Node(var_15)
    assert node_11.value == 0
    var_16 = var_15.__str__()
    assert var_16 == '0'
    var_17 = var_16.__str__()
    assert var_17 == '0'

def test_case_1003():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    none_type_3 = b_s_t_2.build(b_s_t_2)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_3 = module_0.BST()
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder()
    bool_0 = False
    node_4 = module_0.Node(bool_0)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    var_6 = b_s_t_7.add(var_5)
    assert len(b_s_t_7) == 1
    node_6 = module_0.Node(var_5)
    assert node_6.value == []
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    list_0 = [node_7]
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.add(list_0)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder()
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.isValid()
    var_11 = var_10.__str__()
    var_12 = b_s_t_10.contains(b_s_t_10)
    var_13 = b_s_t_10.contains(bool_0)

def test_case_1004():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_1005():
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_1 = module_0.Node(b_s_t_0)
    assert len(node_1.value) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    b_s_t_4 = module_0.BST()
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_5.add(var_3)
    assert len(b_s_t_5) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    bool_0 = False
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(bool_0)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder(none_type_2)
    var_9 = b_s_t_7.getOrder()
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    var_12 = b_s_t_10.add(var_11)
    assert len(b_s_t_10) == 1
    node_3 = module_0.Node(var_11)
    assert node_3.value == []
    bool_1 = False
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.remove(bool_1)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.getOrder()
    var_16 = b_s_t_14.getOrder()
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_15 = module_0.BST()
    none_type_3 = b_s_t_15.build(set_0)
    var_17 = b_s_t_15.__str__()
    assert var_17 == '[]'
    b_s_t_16 = module_0.BST()
    var_18 = b_s_t_16.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_16.__len__()
    b_s_t_17 = module_0.BST()
    none_type_4 = None
    b_s_t_18 = module_0.BST()
    var_20 = b_s_t_18.getOrder(none_type_4)
    b_s_t_19 = module_0.BST()
    var_21 = b_s_t_19.isValid()
    node_5 = module_0.Node(b_s_t_19)
    b_s_t_20 = module_0.BST()
    var_22 = b_s_t_20.isValid()

def test_case_1006():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    none_type_4 = b_s_t_3.build(b_s_t_5)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.__len__()
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.getOrder()
    list_0 = [var_9, var_9]
    none_type_6 = b_s_t_7.build(list_0)
    assert len(b_s_t_7) == 2
    b_s_t_8 = module_0.BST()
    none_type_7 = None
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder(none_type_7)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.isValid()
    node_3 = module_0.Node(b_s_t_10)
    var_12 = b_s_t_8.getOrder()
    b_s_t_11 = module_0.BST()
    none_type_8 = None
    node_4 = module_0.Node(none_type_8)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    b_s_t_14 = module_0.BST()
    var_13 = b_s_t_14.__str__()
    var_14 = b_s_t_14.__len__()
    bool_3 = False
    b_s_t_15 = module_0.BST()
    var_15 = b_s_t_15.remove(bool_3)
    b_s_t_16 = module_0.BST()
    node_7 = module_0.Node(b_s_t_3)
    assert len(node_7.value) == 0

def test_case_1007():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_5 = b_s_t_2.isValid()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_3 = b_s_t_4.build(var_7)
    assert len(b_s_t_4) == 2
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    node_6 = module_0.Node(b_s_t_6)
    assert len(node_6.value) == 0
    var_9 = b_s_t_5.contains(node_6)
    var_10 = b_s_t_1.contains(bool_1)

def test_case_1008():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value is None
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.contains(b_s_t_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    var_6 = b_s_t_3.isValid()
    var_7 = var_6.__str__()

def test_case_1009():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    var_3 = b_s_t_0.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_6.__len__()
    assert var_10 == 0
    var_11 = b_s_t_6.__str__()
    assert var_11 == '[]'
    var_12 = var_9.__str__()
    assert var_12 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.getOrder()
    var_14 = b_s_t_7.add(var_13)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_15 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_16 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_8.build(b_s_t_10)
    var_17 = b_s_t_8.contains(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    var_18 = b_s_t_11.minValueNode(node_4)
    assert f'{type(var_18).__module__}.{type(var_18).__qualname__}' == 'binarySearchTree2.Node'
    assert var_18.value == [False, False, False, False]
    assert var_18.left is None
    assert var_18.right is None
    var_19 = b_s_t_3.__str__()
    assert var_19 == '[]'

def test_case_1010():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.remove(var_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_6)
    assert node_2.value == []
    var_8 = b_s_t_4.isValid()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.minValueNode(node_3)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert var_9.value == [False, False, False, False]
    assert var_9.left is None
    assert var_9.right is None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    node_5 = module_0.Node(b_s_t_8)
    assert len(node_5.value) == 0
    var_12 = b_s_t_7.contains(node_5)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_6.remove(b_s_t_4)

def test_case_1011():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_5 = b_s_t_4.contains(var_4)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.isValid()
    node_4 = module_0.Node(b_s_t_5)
    assert len(node_4.value) == 0
    var_8 = b_s_t_5.contains(var_7)
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_0 = b_s_t_6.build(set_0)
    var_9 = b_s_t_6.isValid()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_6 = module_0.Node(bytes_0)
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    str_0 = ''
    node_7 = module_0.Node(str_0)
    none_type_2 = b_s_t_4.build(var_6)
    assert len(b_s_t_4) == 2
    assert len(node_3.value) == 2

def test_case_1012():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.isValid()
    var_1 = b_s_t_2.__len__()
    assert var_1 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_0)
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    var_6 = b_s_t_5.contains(node_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.__len__()
    assert var_7 == 0
    var_8 = b_s_t_8.add(var_7)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_10.add(var_10)
    assert len(b_s_t_10) == 1
    node_4 = module_0.Node(var_10)
    assert node_4.value == []
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    node_5 = module_0.Node(b_s_t_7)
    assert len(node_5.value) == 0

def test_case_1013():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_1.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    assert len(node_0.value) == 1
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_0)
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(b_s_t_5)
    node_3 = module_0.Node(none_type_1)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.contains(b_s_t_7)
    node_4 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()

def test_case_1014():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(var_3)
    assert node_3.value == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    var_4 = b_s_t_6.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    node_7 = module_0.Node(node_6)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.isValid()
    var_8 = var_7.__str__()
    var_9 = b_s_t_8.contains(b_s_t_8)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_12 = b_s_t_13.getOrder()
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    set_0 = set()
    node_9 = module_0.Node(set_0)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    none_type_5 = b_s_t_15.build(set_0)
    var_13 = b_s_t_14.contains(none_type_4)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    none_type_6 = None
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_14 = b_s_t_17.getOrder(none_type_6)
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    var_15 = b_s_t_18.isValid()
    node_10 = module_0.Node(b_s_t_18)
    assert len(node_10.value) == 0
    b_s_t_19 = module_0.BST()
    assert len(b_s_t_19) == 0
    var_16 = b_s_t_19.getOrder()
    b_s_t_20 = module_0.BST()
    assert len(b_s_t_20) == 0
    node_11 = module_0.Node(b_s_t_20)
    assert len(node_11.value) == 0
    var_17 = b_s_t_19.contains(node_11)
    node_12 = module_0.Node(var_11)
    assert node_12.value == []

def test_case_1015():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__len__()
    assert var_5 == 0
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_5 = b_s_t_7.build(b_s_t_9)
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    none_type_6 = b_s_t_7.build(b_s_t_9)
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()

def test_case_1016():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder(none_type_2)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.isValid()
    node_0 = module_0.Node(b_s_t_6)
    var_7 = b_s_t_4.getOrder()
    var_8 = b_s_t_5.remove(b_s_t_3)

def test_case_1017():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(set_0)
    var_4 = b_s_t_1.contains(none_type_0)
    assert var_4 is False
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_3 = b_s_t_3.build(b_s_t_3)
    node_3 = module_0.Node(none_type_2)
    var_5 = b_s_t_3.remove(node_3)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_4 = module_0.Node(bytes_0)
    b_s_t_4 = module_0.BST()
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_5 = module_0.Node(var_7)
    assert node_5.value is None
    b_s_t_5 = module_0.BST()
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    var_9 = b_s_t_5.add(none_type_4)
    assert len(b_s_t_5) == 1
    var_10 = b_s_t_2.isValid()

def test_case_1018():
    complex_0 = 2277.72696 + 1912.08647j
    bytes_0 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_0 = {complex_0, bytes_0, bytes_0, complex_0}
    node_0 = module_0.Node(set_0)

def test_case_1019():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    var_4 = b_s_t_1.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_1020():
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bytes_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.remove(var_1)
    var_3 = b_s_t_1.getOrder()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(var_6)
    assert node_3.value == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.isValid()
    node_4 = module_0.Node(b_s_t_8)
    assert len(node_4.value) == 0
    var_9 = b_s_t_6.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_5 = b_s_t_10.build(b_s_t_12)
    var_12 = b_s_t_10.contains(none_type_4)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    b_s_t_13 = module_0.BST()
    none_type_7 = b_s_t_13.build(b_s_t_13)
    node_6 = module_0.Node(none_type_6)
    var_13 = b_s_t_13.remove(node_6)
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.getOrder()
    list_0 = [var_14, var_14]
    none_type_8 = b_s_t_14.build(list_0)
    assert len(b_s_t_14) == 2
    b_s_t_15 = module_0.BST()
    var_15 = b_s_t_15.__str__()
    var_16 = b_s_t_15.__len__()
    var_17 = b_s_t_15.__str__()
    b_s_t_16 = module_0.BST()
    var_18 = b_s_t_16.isValid()
    b_s_t_17 = module_0.BST()
    var_19 = b_s_t_17.isValid()
    node_7 = module_0.Node(b_s_t_17)
    var_20 = b_s_t_17.contains(var_19)
    var_21 = b_s_t_17.__str__()
    str_0 = 'b}@pV%=ey'
    node_8 = module_0.Node(str_0)

def test_case_1021():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0

def test_case_1022():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    var_6 = b_s_t_2.remove(b_s_t_3)

def test_case_1023():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = var_2.__str__()
    assert var_5 == '[]'
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    var_8 = var_7.__str__()
    assert var_8 == '0'
    complex_0 = 2277.72696 + 1912.08647j
    bytes_0 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_0 = {complex_0, bytes_0, bytes_0, complex_0}
    node_1 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.remove(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    var_14 = b_s_t_11.add(var_13)
    assert len(b_s_t_11) == 1
    node_3 = module_0.Node(var_13)
    assert node_3.value == []
    var_15 = var_2.__len__()
    assert var_15 == 2

def test_case_1024():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_2 = module_0.Node(var_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_3 = b_s_t_3.contains(var_2)
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    var_5 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    assert len(node_3.value) == 1
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.contains(b_s_t_5)
    node_4 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    var_9 = b_s_t_6.add(none_type_1)
    assert len(b_s_t_6) == 1
    var_10 = b_s_t_6.__len__()
    assert var_10 == 1
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_7.build(b_s_t_9)
    node_6 = module_0.Node(b_s_t_9)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.getOrder(none_type_4)
    var_14 = b_s_t_10.isValid()
    var_15 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1

def test_case_1025():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.isValid()

def test_case_1026():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_4 = b_s_t_2.__str__()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_4.build(b_s_t_4)
    node_6 = module_0.Node(none_type_2)
    var_6 = b_s_t_4.remove(node_6)
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.remove(none_type_4)
    b_s_t_6 = module_0.BST()
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.contains(b_s_t_7)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.isValid()
    var_10 = var_9.__str__()
    b_s_t_9 = module_0.BST()
    node_8 = module_0.Node(b_s_t_9)
    node_9 = module_0.Node(node_0)

def test_case_1027():
    str_0 = ''
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    var_2 = b_s_t_5.getOrder()
    var_3 = b_s_t_5.add(var_2)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_4 = b_s_t_7.isValid()
    node_5 = module_0.Node(b_s_t_7)
    var_5 = b_s_t_7.contains(var_4)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    none_type_4 = b_s_t_8.build(b_s_t_8)
    var_6 = b_s_t_8.__str__()
    assert var_6 == '[]'
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.isValid()
    var_8 = var_7.__str__()
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    var_11 = b_s_t_11.add(var_10)
    assert len(b_s_t_11) == 1
    node_7 = module_0.Node(var_10)
    assert node_7.value == []
    var_12 = b_s_t_9.isValid()

def test_case_1028():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_2 = b_s_t_1.add(none_type_0)
    assert len(b_s_t_1) == 1
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.contains(b_s_t_8)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.remove(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = b_s_t_9.build(b_s_t_11)
    var_12 = b_s_t_9.contains(none_type_3)
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.isValid()
    var_14 = b_s_t_12.__len__()
    node_4 = module_0.Node(var_5)
    assert node_4.value == '[]'

def test_case_1029():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_5 = b_s_t_2.contains(node_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_2 = module_0.Node(node_0)

def test_case_1030():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    var_8 = b_s_t_4.__len__()
    assert var_8 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder()
    var_10 = b_s_t_4.__len__()
    assert var_10 == 0
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.remove(bool_2)
    var_12 = b_s_t_6.__len__()
    assert var_12 == 0
    set_0 = set()
    node_2 = module_0.Node(set_0)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.remove(bytes_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_14 = b_s_t_8.isValid()
    node_3 = module_0.Node(b_s_t_8)
    assert len(node_3.value) == 0
    var_15 = b_s_t_8.contains(var_14)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_16 = b_s_t_8.remove(var_15)
    var_17 = b_s_t_1.__str__()
    assert var_17 == '[]'

def test_case_1031():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    var_4 = b_s_t_4.contains(var_3)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    node_1 = module_0.Node(node_0)

def test_case_1032():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.getOrder()

def test_case_1033():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    node_1 = module_0.Node(bool_1)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.contains(b_s_t_5)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_6.remove(var_5)
    var_7 = b_s_t_6.getOrder()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.isValid()
    var_9 = b_s_t_1.remove(var_5)

def test_case_1034():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_2.__str__()
    assert var_7 == '[]'
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.isValid()
    node_1 = module_0.Node(b_s_t_8)
    assert len(node_1.value) == 0
    var_13 = b_s_t_8.contains(var_12)
    var_14 = b_s_t_8.__len__()
    assert var_14 == 0
    var_15 = b_s_t_8.add(var_12)
    assert len(b_s_t_8) == 1
    assert len(node_1.value) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_16 = b_s_t_9.isValid()
    node_2 = module_0.Node(var_16)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_17 = b_s_t_11.getOrder(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_18 = b_s_t_12.isValid()
    node_3 = module_0.Node(b_s_t_12)
    assert len(node_3.value) == 0
    var_19 = b_s_t_10.getOrder()
    var_20 = b_s_t_3.getOrder(var_2)

def test_case_1035():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    list_1 = [none_type_0]
    var_3 = b_s_t_2.remove(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(node_2)

def test_case_1036():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = b_s_t_2.add(none_type_1)
    assert len(b_s_t_2) == 1
    var_4 = b_s_t_2.__len__()
    assert var_4 == 1
    set_0 = set()
    node_3 = module_0.Node(set_0)
    var_5 = b_s_t_1.__str__()
    assert var_5 == '[]'

def test_case_1037():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.contains(b_s_t_3)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_2)
    var_6 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    set_1 = set()
    node_4 = module_0.Node(set_1)
    var_8 = b_s_t_6.remove(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = var_9.__str__()
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_13.getOrder()
    var_14 = b_s_t_13.getOrder()
    none_type_5 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_14.getOrder(none_type_5)
    bool_4 = False
    list_0 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_0)
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    none_type_7 = None
    node_9 = module_0.Node(none_type_7)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_16 = b_s_t_16.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_16.remove(var_16)
    var_18 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0

def test_case_1038():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    var_10 = var_9.__str__()
    assert var_10 == 'None'
    none_type_0 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.remove(none_type_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_3 = True
    node_1 = module_0.Node(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_4 = False
    list_0 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_0)
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.__str__()
    assert var_16 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_17 = b_s_t_13.add(none_type_1)
    assert len(b_s_t_13) == 1
    node_4 = module_0.Node(var_16)
    assert node_4.value == '[]'
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    none_type_3 = b_s_t_14.build(b_s_t_14)
    node_6 = module_0.Node(none_type_2)
    var_18 = b_s_t_14.remove(node_6)
    b_s_t_15 = module_0.BST()
    bool_5 = False
    list_1 = [bool_5, bool_5, bool_5, bool_5]
    node_7 = module_0.Node(list_1)
    var_19 = b_s_t_15.__str__()
    assert var_19 == '[]'
    var_20 = b_s_t_7.getOrder(var_2)

def test_case_1039():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_1)
    assert node_2.value == 0
    var_2 = b_s_t_1.add(bool_0)
    assert len(b_s_t_1) == 1

def test_case_1040():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_1 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2

def test_case_1041():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    var_4 = b_s_t_1.contains(none_type_1)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.contains(b_s_t_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder(none_type_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    var_8 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    node_3 = module_0.Node(b_s_t_7)
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(none_type_5)
    bool_2 = False
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(bool_2)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    none_type_6 = None
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.remove(none_type_6)
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    none_type_7 = None
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.remove(none_type_7)
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_6.getOrder(var_6)

def test_case_1042():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_2 = module_0.Node(bytes_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()

def test_case_1043():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.remove(var_0)
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__len__()
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    b_s_t_3 = module_0.BST()
    var_6 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    node_2 = module_0.Node(b_s_t_4)
    var_7 = b_s_t_3.contains(node_2)
    node_3 = module_0.Node(node_2)
    b_s_t_5 = module_0.BST()

def test_case_1044():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'

def test_case_1045():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    complex_0 = 2277.72696 + 1912.08647j
    bytes_0 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_0 = {complex_0, bytes_0, bytes_0, complex_0}
    node_2 = module_0.Node(set_0)
    var_4 = var_2.__str__()
    assert var_4 == '0'

def test_case_1046():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    none_type_1 = b_s_t_3.build(var_6)
    assert len(b_s_t_3) == 2

def test_case_1047():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    list_1 = [none_type_2]
    var_1 = b_s_t_2.remove(list_1)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.isValid()
    node_4 = module_0.Node(var_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    var_4 = b_s_t_5.isValid()
    bool_4 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = b_s_t_8.build(b_s_t_8)
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.__len__()
    bool_5 = False
    b_s_t_10 = module_0.BST()
    var_7 = b_s_t_10.remove(bool_5)
    b_s_t_11 = module_0.BST()
    var_8 = b_s_t_11.contains(b_s_t_11)
    node_9 = module_0.Node(bool_5)
    var_9 = b_s_t_10.__str__()
    assert var_9 == '[]'

def test_case_1048():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_0)
    assert node_1.value == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_4 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_5 = module_0.Node(var_7)
    assert node_5.value == []
    var_9 = b_s_t_6.isValid()
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    list_1 = [none_type_3]
    var_10 = b_s_t_8.remove(list_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_10.__len__()
    assert var_14 == 0
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'
    var_16 = var_13.__str__()
    assert var_16 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_17 = b_s_t_11.__str__()
    assert var_17 == '[]'
    var_18 = b_s_t_11.__len__()
    assert var_18 == 0
    var_19 = b_s_t_6.getOrder(var_9)

def test_case_1049():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.minValueNode(node_2)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert var_4.value == [False, False, False, False]
    assert var_4.left is None
    assert var_4.right is None
    var_5 = b_s_t_2.add(var_4)
    assert len(b_s_t_2) == 1
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_1)
    var_7 = b_s_t_2.__str__()

def test_case_1050():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    var_2 = b_s_t_0.__len__()
    assert var_2 == 1
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    node_2 = module_0.Node(node_1)

def test_case_1051():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = var_3.__str__()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    var_6 = b_s_t_7.add(var_5)
    assert len(b_s_t_7) == 1
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = b_s_t_8.build(b_s_t_8)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder(none_type_5)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    var_8 = b_s_t_9.isValid()
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.__len__()
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    node_8 = module_0.Node(var_9)
    b_s_t_11 = module_0.BST()

def test_case_1052():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    var_1 = b_s_t_2.__len__()
    var_2 = b_s_t_2.contains(var_0)
    assert var_2 is False
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_4 = b_s_t_3.add(none_type_2)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == '[]'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    var_7 = b_s_t_4.getOrder()
    str_0 = ''
    node_4 = module_0.Node(str_0)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_8 = b_s_t_5.getOrder(none_type_3)
    var_9 = b_s_t_5.isValid()
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    var_10 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    var_11 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_5 = b_s_t_6.build(b_s_t_8)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    b_s_t_9 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_9.isValid()
    none_type_6 = None
    b_s_t_10 = module_0.BST()
    var_15 = b_s_t_10.remove(none_type_6)
    b_s_t_11 = module_0.BST()
    var_16 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    none_type_7 = b_s_t_10.build(b_s_t_12)
    var_17 = b_s_t_10.contains(none_type_6)
    b_s_t_13 = module_0.BST()
    var_18 = b_s_t_13.isValid()
    node_6 = module_0.Node(b_s_t_13)
    var_19 = var_9.__str__()

def test_case_1053():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    b_s_t_3 = module_0.BST()

def test_case_1054():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_0)
    assert node_1.value == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    list_0 = [none_type_2]
    var_4 = b_s_t_4.remove(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    node_4 = module_0.Node(b_s_t_6)
    assert len(node_4.value) == 0
    var_6 = b_s_t_5.contains(node_4)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = b_s_t_7.build(b_s_t_9)
    var_9 = b_s_t_7.contains(none_type_3)
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_4.__str__()
    assert var_10 == '[]'

def test_case_1055():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_0 = False
    b_s_t_2 = module_0.BST()
    var_3 = b_s_t_2.remove(bool_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    var_7 = b_s_t_3.isValid()

def test_case_1056():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    node_0 = module_0.Node(b_s_t_3)
    b_s_t_4 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.isValid()
    var_5 = b_s_t_0.__len__()
    assert var_5 == 0

def test_case_1057():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    var_4 = b_s_t_2.contains(var_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(node_2)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(b_s_t_5)
    b_s_t_6 = module_0.BST()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_3)
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    node_7 = module_0.Node(b_s_t_8)
    var_9 = b_s_t_7.contains(node_7)
    node_8 = module_0.Node(node_7)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    bool_5 = False
    node_9 = module_0.Node(bool_5)
    b_s_t_10 = module_0.BST()

def test_case_1058():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(node_1)
    assert var_1 is False
    var_2 = var_1.__str__()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(b_s_t_2)
    node_3 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.__len__()
    none_type_3 = b_s_t_1.build(list_0)
    assert len(b_s_t_1) == 4

def test_case_1059():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_1060():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(var_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_3 = var_1.__len__()
    assert var_3 == 0
    set_1 = set()
    node_3 = module_0.Node(set_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = b_s_t_2.build(set_1)
    var_4 = b_s_t_2.__str__()
    none_type_1 = b_s_t_2.build(var_4)
    assert len(b_s_t_2) == 2
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_1061():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0

def test_case_1062():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    node_0 = module_0.Node(b_s_t_4)
    var_4 = b_s_t_3.contains(node_0)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    b_s_t_7 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_8.__len__()
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder(none_type_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    b_s_t_10 = module_0.BST()
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    b_s_t_11 = module_0.BST()
    list_2 = [none_type_6]
    var_12 = b_s_t_11.remove(list_2)
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    node_5 = module_0.Node(b_s_t_13)
    var_14 = b_s_t_12.contains(node_5)
    node_6 = module_0.Node(node_5)
    var_15 = b_s_t_4.isValid()
    var_16 = b_s_t_1.add(var_15)
    assert len(b_s_t_1) == 1

def test_case_1063():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    var_6 = b_s_t_3.contains(var_4)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.contains(b_s_t_6)
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_5.add(b_s_t_0)
    assert len(b_s_t_5) == 1

def test_case_1064():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_1 = b_s_t_1.build(var_1)
    assert len(b_s_t_1) == 2
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    list_1 = [node_4]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.add(list_1)
    assert len(b_s_t_2) == 1
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    none_type_4 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = var_4.__str__()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    bool_4 = True
    node_8 = module_0.Node(bool_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_4)
    var_8 = b_s_t_7.__len__()
    assert var_8 == 0
    var_9 = b_s_t_3.__str__()
    assert var_9 == '[]'

def test_case_1065():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    none_type_3 = b_s_t_1.build(b_s_t_1)
    node_2 = module_0.Node(none_type_2)
    var_0 = b_s_t_1.remove(node_2)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_2.isValid()
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_5 = module_0.Node(bytes_0)
    none_type_5 = None
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(none_type_5)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    b_s_t_5 = module_0.BST()

def test_case_1066():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.__str__()
    assert var_4 == '[]'
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.remove(bytes_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    var_7 = b_s_t_3.contains(node_0)
    node_1 = module_0.Node(node_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.isValid()
    var_9 = var_8.__str__()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_0 = [node_2]
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.add(list_0)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_7.__len__()
    assert var_12 == 0
    var_13 = b_s_t_7.isValid()
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_14 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.__str__()
    assert var_15 == '[]'
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_16 = b_s_t_10.__str__()
    assert var_16 == '[]'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.isValid()
    bool_2 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_18 = b_s_t_13.remove(bool_2)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_19 = b_s_t_14.contains(b_s_t_14)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_20 = b_s_t_15.__str__()
    assert var_20 == '[]'
    var_21 = b_s_t_15.__len__()
    assert var_21 == 0
    var_22 = b_s_t_14.contains(var_20)
    node_6 = module_0.Node(var_19)

def test_case_1067():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_1.isValid()

def test_case_1068():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_0.add(b_s_t_1)
    assert len(b_s_t_0) == 1

def test_case_1069():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    var_2 = var_0.__len__()
    assert var_2 == 2

def test_case_1070():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    none_type_2 = b_s_t_3.build(set_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.isValid()
    var_5 = b_s_t_4.isValid()
    b_s_t_6 = module_0.BST()
    bool_1 = False
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder()
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    node_2 = module_0.Node(b_s_t_11)
    var_11 = b_s_t_10.contains(node_2)
    b_s_t_12 = module_0.BST()
    str_0 = ''
    node_3 = module_0.Node(str_0)
    none_type_3 = None
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.getOrder(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_14 = module_0.BST()
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    set_1 = set()
    node_7 = module_0.Node(set_1)
    b_s_t_15 = module_0.BST()
    var_13 = b_s_t_15.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_15.getOrder()
    var_15 = var_13.__len__()
    assert var_15 == 2
    none_type_5 = None
    node_8 = module_0.Node(none_type_5)
    b_s_t_16 = module_0.BST()

def test_case_1071():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = var_3.__str__()
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_5.build(b_s_t_7)
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    var_8 = b_s_t_8.add(none_type_3)
    assert len(b_s_t_8) == 1
    var_9 = b_s_t_8.__len__()
    assert var_9 == 1
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(none_type_4)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    none_type_5 = b_s_t_9.build(b_s_t_11)
    var_12 = b_s_t_9.contains(none_type_4)
    none_type_6 = None
    node_2 = module_0.Node(none_type_6)
    b_s_t_12 = module_0.BST()
    none_type_7 = b_s_t_12.build(b_s_t_12)
    node_3 = module_0.Node(none_type_6)
    var_13 = b_s_t_12.remove(node_3)
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.isValid()
    node_4 = module_0.Node(b_s_t_13)
    var_15 = b_s_t_13.contains(var_14)
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    b_s_t_14 = module_0.BST()
    none_type_9 = b_s_t_14.build(b_s_t_14)
    var_16 = b_s_t_14.__str__()
    assert var_16 == '[]'
    var_17 = var_15.__str__()

def test_case_1072():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_1 = b_s_t_1.add(none_type_0)
    assert len(b_s_t_1) == 1
    var_2 = b_s_t_1.__len__()
    assert var_2 == 1
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_3.build(b_s_t_3)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_6.getOrder(b_s_t_5)
    bool_3 = False
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(bool_3)
    bool_4 = False
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(bool_4)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.__len__()
    var_12 = var_11.__str__()
    bool_5 = False
    list_1 = [bool_5, bool_5, bool_5, bool_5]
    node_4 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.getOrder()
    var_14 = b_s_t_11.add(var_13)
    assert len(b_s_t_11) == 1
    node_5 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.remove(none_type_3)
    b_s_t_13 = module_0.BST()
    node_6 = module_0.Node(b_s_t_0)

def test_case_1073():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    var_2 = var_0.__len__()
    assert var_2 == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.isValid()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_1)
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    var_7 = var_6.__str__()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.isValid()
    node_3 = module_0.Node(var_10)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.isValid()
    node_4 = module_0.Node(b_s_t_7)
    assert len(node_4.value) == 0
    var_12 = b_s_t_7.contains(var_11)
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_0 = b_s_t_8.build(set_1)
    var_13 = b_s_t_8.isValid()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    list_0 = [node_6]
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.add(list_0)
    assert len(b_s_t_9) == 1
    var_15 = var_13.__str__()

def test_case_1074():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    node_1 = module_0.Node(none_type_0)
    var_0 = b_s_t_0.remove(node_1)
    b_s_t_1 = module_0.BST()
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    var_3 = b_s_t_0.remove(none_type_1)

def test_case_1075():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    var_2 = var_1.__str__()
    assert var_2 == '0'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    list_0 = [var_3, var_3]
    none_type_0 = b_s_t_2.build(list_0)
    assert len(b_s_t_2) == 2
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_5)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_6 = var_4.__len__()
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__str__()
    var_9 = b_s_t_5.remove(var_8)
    var_10 = b_s_t_5.getOrder()
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.__str__()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_13 = b_s_t_9.__str__()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.__len__()
    assert var_14 == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0

def test_case_1076():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.contains(node_2)
    var_4 = var_3.__str__()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.minValueNode(node_3)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.contains(b_s_t_6)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.__len__()
    assert var_8 == 0
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    var_10 = b_s_t_5.getOrder(b_s_t_5)

def test_case_1077():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    node_2 = module_0.Node(b_s_t_2)
    b_s_t_3 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.add(b_s_t_3)
    assert len(b_s_t_2) == 1
    assert len(node_2.value) == 1
    b_s_t_4 = module_0.BST()
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    node_4 = module_0.Node(b_s_t_5)
    var_7 = b_s_t_4.contains(node_4)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.remove(none_type_0)

def test_case_1078():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_3 = b_s_t_3.contains(var_2)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(b_s_t_4)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    bool_0 = False
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(bool_0)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_7.getOrder(b_s_t_6)
    var_9 = var_0.__str__()
    assert var_9 == '[]'

def test_case_1079():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = b_s_t_3.build(set_0)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    set_1 = set()
    node_4 = module_0.Node(set_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.getOrder()
    var_6 = var_4.__len__()
    assert var_6 == 2
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    set_2 = set()
    node_5 = module_0.Node(set_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_7.build(set_2)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    none_type_2 = b_s_t_7.build(var_8)
    assert len(b_s_t_7) == 2
    str_0 = ''
    node_6 = module_0.Node(str_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_1080():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.getOrder()
    node_1 = module_0.Node(var_2)
    assert node_1.value == []

def test_case_1081():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    var_2 = b_s_t_0.__len__()
    assert var_2 == 1
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_6 = b_s_t_3.contains(var_5)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_4.build(b_s_t_4)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    b_s_t_5 = module_0.BST()
    var_8 = b_s_t_5.getOrder()
    bool_2 = False
    node_5 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_0)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_6.__len__()
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.getOrder()
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    var_13 = var_12.__str__()
    assert var_13 == '[]'
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    var_14 = b_s_t_9.remove(none_type_4)
    b_s_t_10 = module_0.BST()
    bool_4 = True
    node_8 = module_0.Node(bool_4)
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.contains(b_s_t_11)
    var_16 = b_s_t_10.__str__()
    assert var_16 == '[]'
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_12.getOrder()
    var_18 = b_s_t_12.add(var_17)
    assert len(b_s_t_12) == 1
    b_s_t_13 = module_0.BST()
    var_19 = b_s_t_13.getOrder()
    var_20 = var_7.__str__()
    assert var_20 == '[]'

def test_case_1082():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    var_6 = b_s_t_4.contains(var_4)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bytes_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_1083():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    node_1 = module_0.Node(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    var_6 = b_s_t_7.add(var_5)
    assert len(b_s_t_7) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value == []
    var_7 = b_s_t_7.isValid()
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(none_type_3)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    node_4 = module_0.Node(b_s_t_9)
    var_10 = b_s_t_9.minValueNode(node_4)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_10.value).__module__}.{type(var_10.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_10.value) == 0
    assert var_10.left is None
    assert var_10.right is None
    var_11 = b_s_t_1.__len__()

def test_case_1084():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_7.add(var_6)
    assert len(b_s_t_7) == 1
    node_1 = module_0.Node(var_7)
    assert node_1.value is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_8 = var_6.__len__()
    assert var_8 == 0
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(none_type_3)
    b_s_t_9 = module_0.BST()
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.contains(b_s_t_10)
    var_11 = b_s_t_10.__str__()
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.isValid()
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.__len__()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    node_6 = module_0.Node(var_13)
    bool_2 = False
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.remove(bool_2)
    b_s_t_14 = module_0.BST()
    b_s_t_15 = module_0.BST()
    var_15 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    var_16 = b_s_t_16.getOrder()
    var_17 = b_s_t_16.add(var_16)
    assert len(b_s_t_16) == 1
    node_7 = module_0.Node(var_16)
    var_18 = b_s_t_16.isValid()
    var_19 = b_s_t_7.__str__()
    assert var_19 == '[[]]'

def test_case_1085():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_3 = b_s_t_2.add(none_type_1)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_1086():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_1087():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_1 = b_s_t_4.build(var_5)
    assert len(b_s_t_4) == 2
    str_0 = ''
    node_2 = module_0.Node(str_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_3)
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_2)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder(none_type_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.isValid()
    node_5 = module_0.Node(b_s_t_11)
    assert len(node_5.value) == 0
    var_13 = b_s_t_9.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.__len__()
    assert var_14 == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0

def test_case_1088():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.minValueNode(node_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert var_3.value == [False, False, False, False]
    assert var_3.left is None
    assert var_3.right is None
    var_4 = b_s_t_5.add(var_3)
    assert len(b_s_t_5) == 1
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.isValid()
    var_8 = b_s_t_7.isValid()
    node_5 = module_0.Node(bool_3)
    none_type_0 = None
    node_6 = module_0.Node(none_type_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_9.add(b_s_t_10)
    assert len(b_s_t_9) == 1
    var_10 = b_s_t_4.remove(list_0)

def test_case_1089():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.minValueNode(node_1)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert var_5.value == [False, False, False, False]
    assert var_5.left is None
    assert var_5.right is None
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_2)
    var_7 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_6.add(b_s_t_7)
    assert len(b_s_t_6) == 1
    assert len(node_2.value) == 1
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.isValid()
    var_12 = b_s_t_8.__len__()
    assert var_12 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_3)
    var_14 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_1090():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_2.build(b_s_t_4)
    var_5 = b_s_t_2.contains(none_type_2)
    b_s_t_5 = module_0.BST()
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_5 = b_s_t_6.build(b_s_t_8)
    var_8 = b_s_t_6.contains(none_type_4)
    bool_0 = False
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.remove(bool_0)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.getOrder()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.remove(bytes_0)
    none_type_6 = None
    node_1 = module_0.Node(none_type_6)
    var_13 = b_s_t_1.__len__()
    assert var_13 == 0

def test_case_1091():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_3 = b_s_t_1.isValid()
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_4 = module_0.Node(bytes_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    none_type_3 = b_s_t_0.build(var_5)

def test_case_1092():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = var_0.__str__()
    var_2 = b_s_t_0.contains(b_s_t_0)
    assert var_2 is False
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_3.build(b_s_t_3)
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    node_3 = module_0.Node(b_s_t_4)
    b_s_t_5 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.add(b_s_t_5)
    assert len(b_s_t_4) == 1
    assert len(node_3.value) == 1
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    bool_2 = False
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.__len__()
    var_10 = var_9.__str__()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_10.add(b_s_t_11)
    assert len(b_s_t_10) == 1
    node_7 = module_0.Node(none_type_4)

def test_case_1093():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_0.add(b_s_t_1)
    assert len(b_s_t_0) == 1
    assert len(node_0.value) == 1
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__len__()
    assert var_4 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    node_6 = module_0.Node(b_s_t_6)
    assert len(node_6.value) == 0
    var_6 = b_s_t_6.contains(var_5)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_6.remove(var_6)
    bool_4 = True
    node_8 = module_0.Node(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_10 = module_0.Node(bytes_0)
    set_0 = set()
    node_11 = module_0.Node(set_0)
    var_9 = b_s_t_9.contains(node_5)

def test_case_1094():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    var_2 = b_s_t_4.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.add(var_5)
    assert len(b_s_t_6) == 1
    node_3 = module_0.Node(var_5)
    assert node_3.value == []
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_4 = module_0.Node(b_s_t_7)
    assert len(node_4.value) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.add(b_s_t_8)
    assert len(b_s_t_7) == 1
    assert len(node_4.value) == 1
    var_10 = b_s_t_8.__len__()
    assert var_10 == 0

def test_case_1095():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.remove(var_4)
    var_6 = b_s_t_2.getOrder()
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_7 = b_s_t_3.getOrder(none_type_2)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_0.add(var_1)
    assert len(b_s_t_0) == 1

def test_case_1096():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    var_2 = b_s_t_0.__len__()
    assert var_2 == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_1.__len__()
    assert var_4 == 0
    var_5 = b_s_t_1.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_6 = b_s_t_2.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_2.remove(var_6)
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_2 = module_0.Node(bytes_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_8 = b_s_t_3.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_3.isValid()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_10 = b_s_t_4.add(b_s_t_5)
    assert len(b_s_t_4) == 1
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.__len__()
    assert var_11 == 0
    str_0 = ''
    node_6 = module_0.Node(str_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.getOrder()
    var_13 = var_12.__str__()
    assert var_13 == '[]'
    var_14 = var_13.__str__()
    assert var_14 == '[]'
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_15 = b_s_t_8.contains(node_7)
    var_16 = var_15.__str__()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_1097():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_2.getOrder()
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    node_2 = module_0.Node(var_0)

def test_case_1098():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_0)
    var_7 = b_s_t_5.__len__()
    assert var_7 == 0
    var_8 = b_s_t_1.remove(var_3)

def test_case_1099():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_1.remove(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_1100():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_1 = module_0.Node(bytes_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    complex_0 = 2277.72696 + 1912.08647j
    bytes_1 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_0 = {complex_0, bytes_1, bytes_1, complex_0}
    node_4 = module_0.Node(set_0)
    var_2 = b_s_t_2.isValid()

def test_case_1101():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)

def test_case_1102():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_0.remove(bool_0)

def test_case_1103():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    b_s_t_3 = module_0.BST()
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    none_type_3 = b_s_t_4.build(b_s_t_4)
    var_3 = b_s_t_2.isValid()

def test_case_1104():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_6 = b_s_t_3.contains(var_5)
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.getOrder(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.isValid()
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.remove(bool_1)
    var_11 = b_s_t_6.__len__()
    assert var_11 == 0
    var_12 = b_s_t_2.remove(b_s_t_4)

def test_case_1105():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    bool_0 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    var_9 = var_8.__str__()
    assert var_9 == 'None'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.__len__()
    assert var_11 == 0
    var_12 = b_s_t_8.contains(var_10)
    bool_1 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.remove(bool_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.contains(b_s_t_10)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_11.__len__()
    assert var_16 == 0
    var_17 = b_s_t_10.contains(var_15)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    list_0 = [none_type_0]
    var_18 = b_s_t_12.remove(list_0)
    none_type_1 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_19 = b_s_t_13.remove(none_type_1)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_20 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    none_type_2 = b_s_t_13.build(b_s_t_15)
    var_21 = var_20.__str__()
    assert var_21 == '[]'
    none_type_3 = b_s_t_13.build(b_s_t_15)
    var_22 = var_4.__len__()
    assert var_22 == 2

def test_case_1106():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.isValid()
    var_7 = b_s_t_8.__len__()
    assert var_7 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    var_9 = b_s_t_8.__len__()
    assert var_9 == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_2 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.remove(none_type_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    var_12 = b_s_t_13.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_13.__str__()
    assert var_13 == '[]'
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_14 = b_s_t_14.isValid()
    node_4 = module_0.Node(b_s_t_14)
    assert len(node_4.value) == 0
    node_5 = module_0.Node(none_type_0)

def test_case_1107():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    int_0 = -3611
    node_2 = module_0.Node(int_0)

def test_case_1108():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0
    var_6 = b_s_t_2.__str__()
    assert var_6 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_7 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.getOrder()
    var_9 = b_s_t_4.add(var_8)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_8)
    assert node_1.value == []
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_10 = b_s_t_5.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_3.__str__()
    assert var_11 == '[]'
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_12 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_6.build(b_s_t_8)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_9 = module_0.BST()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_14 = b_s_t_4.getOrder()

def test_case_1109():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.getOrder()
    var_3 = var_1.__len__()
    assert var_3 == 2
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.contains(b_s_t_4)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    node_5 = module_0.Node(b_s_t_2)
    assert len(node_5.value) == 0

def test_case_1110():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    var_2 = b_s_t_1.contains(var_0)
    assert var_2 is False
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = b_s_t_2.build(set_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    int_0 = -3611
    node_2 = module_0.Node(int_0)
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(var_3)
    assert node_5.value == 0
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_4 = b_s_t_4.build(b_s_t_4)
    none_type_5 = None
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.remove(none_type_5)
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    none_type_6 = b_s_t_5.build(b_s_t_7)
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    none_type_7 = b_s_t_5.build(b_s_t_7)
    b_s_t_8 = module_0.BST()
    none_type_8 = None
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder(none_type_8)
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.isValid()
    node_7 = module_0.Node(b_s_t_10)
    var_9 = b_s_t_8.getOrder()
    b_s_t_11 = module_0.BST()
    bool_1 = True
    node_8 = module_0.Node(bool_1)
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_12.__len__()
    var_12 = b_s_t_12.getOrder()
    node_9 = module_0.Node(var_12)
    assert node_9.value == []
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.isValid()
    bool_3 = True
    node_11 = module_0.Node(bool_3)
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.remove(bool_3)
    var_15 = b_s_t_14.__len__()
    assert var_15 == 0
    b_s_t_15 = module_0.BST()
    var_16 = b_s_t_15.__str__()
    assert var_16 == '[]'
    none_type_9 = None
    node_12 = module_0.Node(none_type_9)
    var_17 = b_s_t_15.add(none_type_9)
    assert len(b_s_t_15) == 1
    var_18 = b_s_t_15.__len__()
    assert var_18 == 1
    var_19 = b_s_t_0.getOrder()

def test_case_1111():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.getOrder()
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.isValid()
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    var_10 = b_s_t_5.__len__()
    assert var_10 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_7.add(b_s_t_8)
    assert len(b_s_t_7) == 1
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.minValueNode(node_3)
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'binarySearchTree2.Node'
    assert var_12.value == [False, False, False, False]
    assert var_12.left is None
    assert var_12.right is None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    node_4 = module_0.Node(b_s_t_11)
    assert len(node_4.value) == 0
    var_14 = b_s_t_10.contains(node_4)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_2 = b_s_t_12.build(b_s_t_12)
    var_15 = var_9.__str__()
    assert var_15 == '[]'

def test_case_1112():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_2.getOrder()

def test_case_1113():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.__len__()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    var_1 = b_s_t_2.contains(node_2)
    assert var_1 is False
    var_2 = var_1.__str__()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.__len__()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.isValid()
    var_6 = var_5.__str__()
    var_7 = b_s_t_4.contains(b_s_t_4)
    node_4 = module_0.Node(var_6)

def test_case_1114():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    var_3 = b_s_t_1.getOrder()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.__len__()
    assert var_5 == 0
    node_4 = module_0.Node(var_2)

def test_case_1115():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_1116():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    var_5 = var_4.__str__()
    assert var_5 == 'None'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_7 = b_s_t_4.add(none_type_1)
    assert len(b_s_t_4) == 1
    var_8 = b_s_t_4.__len__()
    assert var_8 == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder()
    var_10 = b_s_t_5.add(var_9)
    assert len(b_s_t_5) == 1
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_12 = b_s_t_6.isValid()
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.getOrder(none_type_4)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.getOrder()
    var_15 = var_14.__str__()
    assert var_15 == '[]'
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_16 = b_s_t_10.__len__()
    assert var_16 == 0
    var_17 = b_s_t_10.add(var_16)
    assert len(b_s_t_10) == 1
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_18 = b_s_t_11.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_11.__len__()
    assert var_19 == 0
    var_20 = b_s_t_11.getOrder()
    var_21 = b_s_t_11.getOrder()

def test_case_1117():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    node_1 = module_0.Node(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.minValueNode(node_2)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert var_2.value == [False, False, False, False]
    assert var_2.left is None
    assert var_2.right is None
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_8 = b_s_t_9.__str__()
    assert var_8 == '[]'
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_9.__len__()
    assert var_9 == 0
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.remove(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_11 = b_s_t_13.contains(b_s_t_13)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_12 = b_s_t_14.isValid()
    node_7 = module_0.Node(b_s_t_14)
    assert len(node_7.value) == 0
    var_13 = b_s_t_14.contains(var_12)
    bool_4 = True
    node_8 = module_0.Node(bool_4)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_14 = b_s_t_15.__str__()
    assert var_14 == '[]'
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_15 = b_s_t_15.isValid()
    complex_0 = 2277.72696 + 1912.08647j
    bytes_0 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_0 = {complex_0, bytes_0, bytes_0, complex_0}
    node_10 = module_0.Node(set_0)
    none_type_4 = None
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_16 = b_s_t_17.remove(none_type_4)
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    bool_5 = True
    node_11 = module_0.Node(bool_5)
    b_s_t_19 = module_0.BST()
    assert len(b_s_t_19) == 0
    var_17 = b_s_t_19.contains(b_s_t_19)
    var_18 = b_s_t_19.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_8.__str__()
    assert var_19 == '[]'

def test_case_1118():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    set_1 = set()
    node_6 = module_0.Node(set_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_8.getOrder()
    var_7 = var_5.__len__()
    assert var_7 == 2
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.isValid()
    node_7 = module_0.Node(b_s_t_9)
    assert len(node_7.value) == 0
    var_9 = b_s_t_9.contains(var_8)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_9.remove(var_9)
    var_11 = b_s_t_8.remove(var_6)

def test_case_1119():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_3 = b_s_t_1.contains(var_2)
    assert var_3 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_1.remove(var_3)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.contains(b_s_t_4)
    node_3 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_1120():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    list_0 = [none_type_0]
    var_0 = b_s_t_0.remove(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    var_3 = b_s_t_2.isValid()
    node_2 = module_0.Node(bool_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_1)
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_5 = module_0.Node(b_s_t_6)
    assert len(node_5.value) == 0
    var_8 = b_s_t_6.contains(var_7)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    var_11 = var_10.__str__()
    var_12 = b_s_t_7.contains(b_s_t_7)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.isValid()
    var_14 = b_s_t_9.__len__()
    assert var_14 == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    var_16 = b_s_t_9.__len__()
    assert var_16 == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_17 = b_s_t_11.__str__()
    assert var_17 == '[]'
    var_18 = b_s_t_11.__len__()
    assert var_18 == 0
    var_19 = b_s_t_11.__str__()
    assert var_19 == '[]'
    var_20 = var_17.__str__()
    assert var_20 == '[]'
    var_21 = var_6.__str__()

def test_case_1121():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    node_1 = module_0.Node(none_type_0)
    var_2 = b_s_t_1.remove(node_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    var_4 = b_s_t_2.isValid()
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.getOrder()
    var_7 = var_5.__len__()
    assert var_7 == 2
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'

def test_case_1122():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_1.__str__()
    assert var_5 == '[]'
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.minValueNode(node_2)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert var_7.value == [False, False, False, False]
    assert var_7.left is None
    assert var_7.right is None
    bool_3 = False
    var_8 = b_s_t_6.contains(bool_3)

def test_case_1123():
    float_0 = 2896.416
    list_0 = [float_0, float_0, float_0, float_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(list_0)

def test_case_1124():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    node_5 = module_0.Node(b_s_t_6)
    assert len(node_5.value) == 0
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_7.build(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    bool_4 = False
    node_7 = module_0.Node(bool_4)
    bool_5 = False
    list_1 = [bool_5, bool_5, bool_5, bool_5]
    node_8 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.isValid()
    var_11 = b_s_t_9.isValid()
    var_12 = b_s_t_5.add(b_s_t_4)
    assert len(b_s_t_5) == 1

def test_case_1125():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = b_s_t_3.build(set_0)
    var_5 = b_s_t_3.isValid()
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_5 = module_0.Node(bytes_0)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    set_1 = set()
    node_6 = module_0.Node(set_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_5.build(set_1)
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    int_0 = -3611
    node_8 = module_0.Node(int_0)
    bool_3 = True
    node_9 = module_0.Node(bool_3)
    bool_4 = True
    node_10 = module_0.Node(bool_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    bool_5 = False
    node_11 = module_0.Node(bool_5)
    node_12 = module_0.Node(b_s_t_8)
    assert len(node_12.value) == 0
    var_10 = b_s_t_8.minValueNode(node_12)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_10.value).__module__}.{type(var_10.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_10.value) == 0
    assert var_10.left is None
    assert var_10.right is None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_1126():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_0.add(b_s_t_1)
    assert len(b_s_t_0) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_3 = b_s_t_3.build(b_s_t_5)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.isValid()
    var_7 = var_6.__str__()
    str_0 = '%7\nXO{;!On5Aw#'
    none_type_4 = b_s_t_0.build(str_0)
    assert len(b_s_t_0) == 15

def test_case_1127():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_5.remove(var_4)
    var_6 = b_s_t_5.getOrder()
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_6.build(b_s_t_8)
    node_2 = module_0.Node(b_s_t_8)
    b_s_t_9 = module_0.BST()
    node_3 = module_0.Node(b_s_t_9)
    var_9 = b_s_t_7.remove(b_s_t_4)

def test_case_1128():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    var_2 = var_1.__str__()
    assert var_2 == '0'
    var_3 = b_s_t_0.contains(var_1)

def test_case_1129():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    var_7 = var_6.__str__()
    assert var_7 == '0'
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    bool_2 = False
    node_1 = module_0.Node(bool_2)
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    var_10 = b_s_t_7.minValueNode(node_2)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_10.value).__module__}.{type(var_10.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_10.value) == 0
    assert var_10.left is None
    assert var_10.right is None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    node_3 = module_0.Node(b_s_t_9)
    assert len(node_3.value) == 0
    var_12 = b_s_t_8.contains(node_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_3 = b_s_t_11.build(b_s_t_11)
    var_13 = var_11.__str__()
    assert var_13 == '[]'

def test_case_1130():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(var_6)
    assert node_4.value == []
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_4.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_2.isValid()

def test_case_1131():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_1 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    node_2 = module_0.Node(node_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(node_3)
    assert var_1 is False
    var_2 = var_1.__str__()
    none_type_4 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_4)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_5 = b_s_t_2.build(b_s_t_4)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    none_type_6 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.remove(none_type_6)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.minValueNode(node_4)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert var_7.value == [False, False, False, False]
    assert var_7.left is None
    assert var_7.right is None
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_5 = module_0.Node(none_type_5)

def test_case_1132():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_1 = module_0.Node(bytes_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_1133():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    var_8 = var_7.__str__()
    assert var_8 == 'None'
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder()
    var_12 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.isValid()
    node_1 = module_0.Node(var_13)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_10.isValid()
    var_16 = var_12.__len__()
    assert var_16 == 0

def test_case_1134():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_1)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_1 = b_s_t_2.build(var_4)
    assert len(b_s_t_2) == 2
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    var_8 = b_s_t_5.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_1135():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.contains(node_1)
    var_6 = var_5.__str__()
    var_7 = b_s_t_0.__len__()
    assert var_7 == 0

def test_case_1136():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_3 = b_s_t_1.contains(var_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_1.remove(var_3)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    list_1 = [node_3]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.add(list_1)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    var_8 = b_s_t_4.isValid()
    complex_0 = 2277.72696 + 1912.08647j
    bytes_0 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_0 = {complex_0, bytes_0, bytes_0, complex_0}
    node_4 = module_0.Node(set_0)
    var_9 = b_s_t_4.getOrder()

def test_case_1137():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    var_8 = b_s_t_4.__str__()
    assert var_8 == '[]'
    var_9 = var_6.__str__()
    assert var_9 == '[]'
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_10 = b_s_t_5.getOrder(none_type_1)
    var_11 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_12 = b_s_t_6.__str__()
    assert var_12 == '[]'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_13 = b_s_t_5.remove(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_14 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_15 = b_s_t_8.isValid()
    var_16 = b_s_t_7.isValid()
    var_17 = b_s_t_1.isValid()

def test_case_1138():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_3 = b_s_t_1.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__len__()
    assert var_4 == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    node_4 = module_0.Node(var_4)
    assert node_4.value == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_8.add(var_7)
    assert len(b_s_t_8) == 1
    var_9 = var_8.__str__()
    assert var_9 == 'None'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()
    node_5 = module_0.Node(b_s_t_9)
    assert len(node_5.value) == 0
    var_11 = b_s_t_9.contains(var_10)
    var_12 = b_s_t_9.__len__()
    assert var_12 == 0
    var_13 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    assert len(node_5.value) == 1
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    node_6 = module_0.Node(b_s_t_10)
    assert len(node_6.value) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_0)
    var_14 = b_s_t_11.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_11.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_10.add(b_s_t_11)
    assert len(b_s_t_10) == 1
    assert len(node_6.value) == 1
    bool_3 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.remove(bool_3)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_19 = b_s_t_15.getOrder()
    var_20 = b_s_t_5.__str__()
    assert var_20 == '[]'

def test_case_1139():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0
    var_4 = var_3.__str__()
    assert var_4 == '0'

def test_case_1140():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__len__()
    assert var_4 == 0
    var_5 = b_s_t_5.contains(var_3)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.remove(var_6)
    complex_0 = 2277.72696 + 1912.08647j
    bytes_0 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_0 = {complex_0, bytes_0, bytes_0, complex_0}
    node_1 = module_0.Node(set_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_1)
    var_10 = b_s_t_5.remove(b_s_t_5)

def test_case_1141():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_4)
    assert node_2.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_3 = module_0.Node(bytes_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    node_5 = module_0.Node(var_7)
    assert node_5.value == 0

def test_case_1142():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.getOrder()

def test_case_1143():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__str__()
    assert var_1 == '0'

def test_case_1144():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(set_0)
    var_0 = b_s_t_0.contains(none_type_0)
    assert var_0 is False
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_4.getOrder(b_s_t_3)
    var_5 = var_2.__str__()
    assert var_5 == '[]'

def test_case_1145():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    assert var_3 is False
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    list_0 = [none_type_0]
    var_5 = b_s_t_3.remove(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.remove(var_6)
    var_8 = b_s_t_4.getOrder()
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.__len__()
    assert var_11 == 0
    str_0 = ''
    node_6 = module_0.Node(str_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.isValid()
    var_14 = b_s_t_11.isValid()
    var_15 = var_12.__len__()
    assert var_15 == 0

def test_case_1146():
    int_0 = -4438
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(int_0)
    assert var_0 is False

def test_case_1147():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__len__()
    assert var_6 == 0
    var_7 = b_s_t_6.contains(var_5)
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.contains(b_s_t_9)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_3.contains(b_s_t_2)

def test_case_1148():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_1149():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(set_0)
    var_3 = b_s_t_3.contains(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.add(var_5)
    assert len(b_s_t_6) == 1
    node_3 = module_0.Node(var_5)
    assert node_3.value == []
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_8.getOrder()
    var_11 = var_9.__len__()
    assert var_11 == 2
    node_6 = module_0.Node(set_0)

def test_case_1150():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1

def test_case_1151():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_1.isValid()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.getOrder()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_6.build(set_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    int_0 = -3611
    node_3 = module_0.Node(int_0)
    set_1 = set()
    node_4 = module_0.Node(set_1)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    set_2 = set()
    node_6 = module_0.Node(set_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = b_s_t_8.build(set_2)
    var_7 = b_s_t_7.contains(none_type_3)
    set_3 = set()
    node_7 = module_0.Node(set_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_5 = b_s_t_9.build(set_3)
    var_8 = b_s_t_9.__str__()
    assert var_8 == '[]'
    none_type_6 = b_s_t_9.build(var_8)
    assert len(b_s_t_9) == 2
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    list_0 = [node_8]
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.add(list_0)
    assert len(b_s_t_10) == 1
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0

def test_case_1152():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    var_3 = b_s_t_1.contains(none_type_1)
    b_s_t_4 = module_0.BST()
    bool_1 = False
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_7 = b_s_t_10.isValid()
    var_8 = b_s_t_10.__len__()
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder()
    var_10 = b_s_t_10.__len__()
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.isValid()
    node_3 = module_0.Node(b_s_t_12)
    none_type_3 = None
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.remove(none_type_3)
    b_s_t_14 = module_0.BST()
    var_13 = b_s_t_14.getOrder()
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(b_s_t_14)
    var_14 = b_s_t_14.minValueNode(node_5)
    assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_14.value).__module__}.{type(var_14.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_14.value) == 0
    assert var_14.left is None
    assert var_14.right is None
    var_15 = b_s_t_7.contains(b_s_t_2)

def test_case_1153():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    int_0 = -3611
    node_2 = module_0.Node(int_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_0 = b_s_t_3.__str__()
    assert var_0 == '[]'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_1 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_2 = b_s_t_6.getOrder()
    var_3 = b_s_t_6.add(var_2)
    assert len(b_s_t_6) == 1
    node_6 = module_0.Node(var_2)
    assert node_6.value == []
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_7 = module_0.Node(bytes_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.__len__()
    assert var_6 == 0
    var_7 = b_s_t_8.add(var_6)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder(none_type_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.isValid()
    node_8 = module_0.Node(b_s_t_11)
    assert len(node_8.value) == 0
    var_10 = b_s_t_9.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_9 = module_0.Node(list_0)
    none_type_5 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder(none_type_5)
    none_type_6 = None
    node_10 = module_0.Node(none_type_6)
    var_12 = b_s_t_12.isValid()
    var_13 = b_s_t_8.__len__()
    assert var_13 == 1

def test_case_1154():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_0.add(b_s_t_1)
    assert len(b_s_t_0) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__len__()
    assert var_1 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_5 = b_s_t_4.contains(none_type_1)
    b_s_t_7 = module_0.BST()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.__str__()
    assert var_6 == '[]'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_11 = module_0.BST()
    var_7 = b_s_t_11.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_11.getOrder()
    none_type_4 = None
    b_s_t_12 = module_0.BST()
    var_9 = b_s_t_12.remove(none_type_4)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    var_10 = b_s_t_14.isValid()
    node_4 = module_0.Node(b_s_t_14)
    var_11 = b_s_t_14.contains(var_10)
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_15 = module_0.BST()
    none_type_5 = b_s_t_15.build(set_1)
    var_12 = b_s_t_15.isValid()
    var_13 = b_s_t_8.add(var_11)
    assert len(b_s_t_8) == 1

def test_case_1155():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.__len__()
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    var_5 = b_s_t_4.contains(var_4)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    none_type_3 = b_s_t_5.build(b_s_t_5)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_3.contains(none_type_2)

def test_case_1156():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_1 = b_s_t_3.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.add(b_s_t_3)
    assert len(b_s_t_2) == 1
    assert len(node_0.value) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_5 = b_s_t_4.add(none_type_1)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value == '[]'
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.contains(b_s_t_6)
    node_4 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_5 = module_0.Node(b_s_t_7)
    assert len(node_5.value) == 0
    node_6 = module_0.Node(node_0)

def test_case_1157():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.add(b_s_t_6)
    assert len(b_s_t_5) == 1
    assert len(node_3.value) == 1
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.__len__()
    assert var_9 == 0
    var_10 = b_s_t_5.isValid()

def test_case_1158():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    list_0 = [none_type_0]
    var_0 = b_s_t_0.remove(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_3 = b_s_t_1.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__len__()
    assert var_4 == 0
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_7 = b_s_t_6.contains(node_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.isValid()
    node_4 = module_0.Node(b_s_t_10)
    assert len(node_4.value) == 0
    var_10 = b_s_t_3.getOrder()

def test_case_1159():
    int_0 = -4438
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(int_0)
    assert var_0 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'

def test_case_1160():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'

def test_case_1161():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_3 = b_s_t_2.isValid()

def test_case_1162():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    int_0 = -3611
    node_2 = module_0.Node(int_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    list_0 = [node_3]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.add(list_0)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_4 = module_0.Node(b_s_t_4)
    assert len(node_4.value) == 0
    var_6 = b_s_t_4.contains(var_5)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    bool_0 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.remove(bool_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.contains(b_s_t_7)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.isValid()
    node_5 = module_0.Node(b_s_t_10)
    assert len(node_5.value) == 0
    var_14 = b_s_t_8.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_1 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.remove(bool_1)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_17 = b_s_t_15.getOrder()
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_18 = b_s_t_16.remove(bool_2)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_1)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_19 = b_s_t_17.isValid()
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    var_20 = b_s_t_18.getOrder()
    b_s_t_19 = module_0.BST()
    assert len(b_s_t_19) == 0
    var_21 = b_s_t_19.getOrder()
    var_22 = b_s_t_19.add(var_21)
    assert len(b_s_t_19) == 1
    node_8 = module_0.Node(var_21)
    assert node_8.value == []
    b_s_t_20 = module_0.BST()
    assert len(b_s_t_20) == 0
    b_s_t_21 = module_0.BST()
    assert len(b_s_t_21) == 0

def test_case_1163():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    list_0 = [b_s_t_0, b_s_t_0, b_s_t_0]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.__len__()
    assert var_0 == 0

def test_case_1164():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)

def test_case_1165():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(node_0)
    assert var_0 is False

def test_case_1166():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)

def test_case_1167():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)

def test_case_1168():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    bool_2 = True

def test_case_1169():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    dict_0 = {b_s_t_0: var_1, b_s_t_0: none_type_0}
    list_0 = [var_0, dict_0, b_s_t_0, dict_0]

def test_case_1170():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_3 = b_s_t_3.isValid()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)

def test_case_1171():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_2 = b_s_t_1.isValid()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)

def test_case_1172():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)

def test_case_1173():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_3)

def test_case_1174():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1175():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_3 = b_s_t_3.isValid()

def test_case_1176():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)

def test_case_1177():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_2 = b_s_t_1.isValid()
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)

def test_case_1178():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)

def test_case_1179():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_2 = b_s_t_2.isValid()
    none_type_5 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_5)

def test_case_1180():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_2 = b_s_t_2.isValid()
    none_type_4 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_4)

def test_case_1181():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1

def test_case_1182():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_1183():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)

def test_case_1184():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_3)

def test_case_1185():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_2 = b_s_t_1.isValid()

def test_case_1186():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)

def test_case_1187():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)

def test_case_1188():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_1 = b_s_t_0.isValid()

def test_case_1189():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_1190():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_1191():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1192():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)

def test_case_1193():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_3)
    none_type_4 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_4)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_1194():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    list_1 = []

def test_case_1195():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_2)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)

def test_case_1196():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_3 = b_s_t_4.isValid()
    none_type_5 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_5)

def test_case_1197():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_1198():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_1199():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()

def test_case_1200():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(node_0)
    assert var_0 is False

def test_case_1201():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_2)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_3)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(bool_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)

def test_case_1202():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)

def test_case_1203():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()

def test_case_1204():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = b_s_t_2.isValid()
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_4)

def test_case_1205():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_1 = b_s_t_0.isValid()
    int_0 = -1538

def test_case_1206():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    var_3 = b_s_t_4.isValid()
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(bool_4)

def test_case_1207():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_3 = b_s_t_4.isValid()
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(bool_4)

def test_case_1208():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_1209():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    bool_2 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_1210():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = b_s_t_2.isValid()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_1211():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()

def test_case_1212():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(bool_3)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_1213():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_2 = b_s_t_3.isValid()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()

def test_case_1214():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)

def test_case_1215():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_1216():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    var_4 = b_s_t_5.isValid()

def test_case_1217():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_4)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_1218():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    object_0 = module_1.object()

def test_case_1219():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()

def test_case_1220():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_2 = b_s_t_1.isValid()
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_3)

def test_case_1221():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_5 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_5)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.remove(bool_3)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_2)

def test_case_1222():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_2 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_1223():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.isValid()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_4 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_4)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)

def test_case_1224():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)

def test_case_1225():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)

def test_case_1226():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    set_0 = set()

def test_case_1227():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    var_5 = b_s_t_6.isValid()
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(bool_3)
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.remove(none_type_5)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)

def test_case_1228():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0

def test_case_1229():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    bool_3 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_3)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_3)
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_4)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_6 = module_0.Node(list_3)
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_1230():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_2 = b_s_t_5.getOrder()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_3 = b_s_t_6.getOrder(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_4 = b_s_t_6.isValid()
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)

def test_case_1231():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_1232():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_3)
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_6 = b_s_t_9.getOrder(none_type_4)
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    var_7 = b_s_t_9.isValid()

def test_case_1233():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_4)
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'

def test_case_1234():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)

def test_case_1235():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_1236():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(none_type_3)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_3)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.getOrder(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    var_7 = b_s_t_8.isValid()
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)

def test_case_1237():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_2 = b_s_t_2.isValid()

def test_case_1238():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_2)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.getOrder()
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.remove(none_type_3)

def test_case_1239():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_4 = b_s_t_6.__str__()
    assert var_4 == '[]'
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(none_type_4)
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    list_2 = [bool_3, bool_1, bool_3, b_s_t_8]

def test_case_1240():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_2 = b_s_t_5.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_3 = b_s_t_5.isValid()
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.remove(bool_3)

def test_case_1241():
    bool_0 = False
    bool_1 = True
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(bool_1)
    assert len(b_s_t_0) == 1
    var_1 = var_0.__str__()
    assert var_1 == 'None'

def test_case_1242():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(none_type_4)
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_3)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_3)
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder(none_type_5)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    var_7 = b_s_t_7.isValid()

def test_case_1243():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    var_3 = b_s_t_3.remove(var_2)

def test_case_1244():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_3 = b_s_t_4.isValid()
    none_type_5 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(none_type_5)
    dict_0 = {}

def test_case_1245():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)

def test_case_1246():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_5 = b_s_t_6.isValid()

def test_case_1247():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_0)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_2)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_4 = module_0.Node(list_3)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.getOrder(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_6 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    var_8 = b_s_t_6.contains(var_3)

def test_case_1248():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_1249():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_3)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_2)

def test_case_1250():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_1251():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)

def test_case_1252():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_1253():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_4.__str__()
    assert var_2 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_4.isValid()

def test_case_1254():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()

def test_case_1255():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0

def test_case_1256():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_2)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.getOrder()
    var_5 = b_s_t_7.add(var_4)
    assert len(b_s_t_7) == 1
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.remove(bool_3)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_8 = b_s_t_9.isValid()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    none_type_6 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.remove(none_type_6)

def test_case_1257():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_4 = b_s_t_3.isValid()
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(none_type_4)

def test_case_1258():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_2)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_6 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1

def test_case_1259():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = b_s_t_2.isValid()
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder(none_type_4)

def test_case_1260():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_1261():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_4 = b_s_t_2.isValid()
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_4)

def test_case_1262():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder(none_type_1)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder(none_type_4)
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    var_10 = b_s_t_9.isValid()

def test_case_1263():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value == []
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)

def test_case_1264():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1

def test_case_1265():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'

def test_case_1266():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)

def test_case_1267():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()

def test_case_1268():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    var_5 = b_s_t_3.isValid()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_4)
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_3 = module_0.Node(list_2)
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'

def test_case_1269():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1

def test_case_1270():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_1.isValid()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)

def test_case_1271():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_3 = b_s_t_1.isValid()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'

def test_case_1272():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = var_0.__len__()
    assert var_1 == 2

def test_case_1273():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_2)
    var_6 = b_s_t_3.getOrder()
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(none_type_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_5 = b_s_t_7.build(b_s_t_9)
    none_type_6 = None
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder(none_type_6)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_1 = module_0.Node(list_1)
    none_type_7 = None
    node_2 = module_0.Node(none_type_7)
    b_s_t_11 = module_0.BST()

def test_case_1274():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = b_s_t_2.isValid()
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_2)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = b_s_t_4.build(b_s_t_6)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_7.add(var_6)
    assert len(b_s_t_7) == 1
    bool_4 = False
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(bool_4)
    b_s_t_9 = module_0.BST()

def test_case_1275():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_1276():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.getOrder(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    var_5 = b_s_t_5.isValid()
    bool_2 = False
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder()
    var_9 = b_s_t_9.add(var_8)
    assert len(b_s_t_9) == 1

def test_case_1277():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(list_1)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_2)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_2)
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_4 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(bool_4)
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder(none_type_3)
    var_11 = b_s_t_9.getOrder()
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_4 = module_0.Node(list_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.getOrder()
    var_14 = b_s_t_12.add(var_13)
    assert len(b_s_t_12) == 1
    node_5 = module_0.Node(var_13)
    assert node_5.value == []

def test_case_1278():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    var_3 = b_s_t_3.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_4 = None
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder(none_type_4)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    b_s_t_5 = module_0.BST()
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    var_7 = b_s_t_8.add(var_6)
    assert len(b_s_t_8) == 1
    node_6 = module_0.Node(var_6)
    assert node_6.value == []

def test_case_1279():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder(none_type_2)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    bool_2 = False
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(bool_2)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder(none_type_3)
    var_9 = b_s_t_6.getOrder()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.getOrder(none_type_4)
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    var_11 = b_s_t_8.isValid()
    none_type_6 = None
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.remove(none_type_6)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_3)
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.getOrder()
    var_14 = b_s_t_10.add(var_13)
    assert len(b_s_t_10) == 1
    node_5 = module_0.Node(list_3)
    bool_5 = False
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.remove(bool_5)
    b_s_t_12 = module_0.BST()

def test_case_1280():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_3)
    var_6 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()

def test_case_1281():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_4 = b_s_t_2.isValid()
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_3)

def test_case_1282():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.isValid()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    none_type_5 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_5)
    none_type_6 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_6)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_7 = b_s_t_5.build(b_s_t_7)
    bool_3 = False
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.remove(bool_3)
    none_type_8 = None
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder(none_type_8)
    var_9 = b_s_t_8.getOrder()
    b_s_t_10 = module_0.BST()
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_3)
    bool_5 = False
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.remove(bool_5)
    b_s_t_12 = module_0.BST()

def test_case_1283():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_3 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    bool_3 = False
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    bool_4 = False
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.remove(bool_4)

def test_case_1284():
    str_0 = 'eV.a(KJe'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()

def test_case_1285():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    var_5 = b_s_t_2.isValid()
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    var_7 = b_s_t_3.add(var_6)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_4)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(none_type_2)
    bool_5 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(bool_5)
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1

def test_case_1286():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()

def test_case_1287():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_2)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)

def test_case_1288():
    int_0 = 3259
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(int_0)

def test_case_1289():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_1290():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = b_s_t_4.build(b_s_t_6)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder(none_type_4)
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.isValid()
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    set_0 = set()
    node_4 = module_0.Node(set_0)

def test_case_1291():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()

def test_case_1292():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    set_0 = set()
    node_3 = module_0.Node(set_0)

def test_case_1293():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_1294():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_2)
    var_8 = b_s_t_4.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_0)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'

def test_case_1295():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_3)
    var_6 = b_s_t_5.isValid()
    set_0 = set()
    node_5 = module_0.Node(set_0)

def test_case_1296():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_3 = module_0.Node(var_3)
    assert node_3.value == []

def test_case_1297():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.getOrder(none_type_2)
    b_s_t_5 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_5 = b_s_t_5.isValid()

def test_case_1298():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_4.getOrder(b_s_t_3)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_4 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_1)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_8.build(b_s_t_10)
    b_s_t_11 = module_0.BST()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'

def test_case_1299():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_4 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_3 = module_0.Node(list_2)
    var_11 = b_s_t_12.__str__()
    assert var_11 == '[]'

def test_case_1300():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_5.getOrder(b_s_t_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    var_9 = b_s_t_8.add(var_8)
    assert len(b_s_t_8) == 1
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.isValid()
    node_3 = module_0.Node(b_s_t_11)
    assert len(node_3.value) == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)

def test_case_1301():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_3.getOrder(b_s_t_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_8 = b_s_t_6.isValid()
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_4)
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_4 = module_0.Node(list_3)
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder(none_type_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_11 = b_s_t_8.isValid()

def test_case_1302():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    var_4 = b_s_t_2.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    var_9 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_2)
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder(none_type_2)
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_4 = module_0.Node(list_3)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_1303():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    var_3 = b_s_t_1.getOrder()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_2)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder(none_type_1)
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_8.add(var_7)
    assert len(b_s_t_8) == 1
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder(none_type_3)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.isValid()
    node_2 = module_0.Node(b_s_t_11)
    assert len(node_2.value) == 0
    var_12 = b_s_t_1.__len__()
    assert var_12 == 0

def test_case_1304():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.isValid()
    node_1 = module_0.Node(b_s_t_7)
    assert len(node_1.value) == 0

def test_case_1305():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_2)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_2)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_3)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_3)
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder(none_type_5)
    var_10 = b_s_t_8.getOrder()
    bool_4 = True

def test_case_1306():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    bool_2 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.getOrder(b_s_t_2)
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    none_type_0 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(none_type_0)
    var_10 = b_s_t_4.contains(var_7)

def test_case_1307():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.getOrder()
    var_7 = b_s_t_7.getOrder(b_s_t_6)
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.getOrder()

def test_case_1308():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value == []
    set_0 = set()
    node_1 = module_0.Node(set_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_0)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_0)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(none_type_1)

def test_case_1309():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    bool_2 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'

def test_case_1310():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()

def test_case_1311():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_2)
    bool_3 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_6 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_7 = b_s_t_10.getOrder()
    var_8 = b_s_t_9.getOrder(b_s_t_8)
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_3 = module_0.Node(list_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.getOrder()
    var_10 = b_s_t_11.add(var_9)
    assert len(b_s_t_11) == 1
    node_4 = module_0.Node(list_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_6 = False
    list_3 = [bool_6, bool_6, bool_6, bool_6]
    node_5 = module_0.Node(list_3)
    var_11 = b_s_t_12.__str__()
    assert var_11 == '[]'
    bool_7 = False
    list_4 = [bool_7, bool_7, bool_7, bool_7]
    node_6 = module_0.Node(list_4)
    var_12 = b_s_t_12.isValid()

def test_case_1312():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_1)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_0)
    var_6 = b_s_t_4.getOrder()
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_1)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_1313():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_4 = b_s_t_2.isValid()

def test_case_1314():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()

def test_case_1315():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    var_5 = b_s_t_2.getOrder()

def test_case_1316():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)

def test_case_1317():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_2 = b_s_t_2.isValid()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_4)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()

def test_case_1318():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_4 = b_s_t_2.isValid()
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_3 = module_0.Node(var_7)
    assert node_3.value == []

def test_case_1319():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_2)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_5.build(b_s_t_7)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder(none_type_2)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.remove(none_type_3)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    var_11 = b_s_t_13.getOrder()
    none_type_4 = None
    b_s_t_14 = module_0.BST()
    var_12 = b_s_t_14.getOrder(none_type_4)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_1 = module_0.Node(list_1)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    b_s_t_15 = module_0.BST()

def test_case_1320():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1

def test_case_1321():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0

def test_case_1322():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_10 = b_s_t_9.isValid()
    set_0 = set()
    node_2 = module_0.Node(set_0)
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder(none_type_3)
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.remove(none_type_4)
    bool_4 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.remove(bool_4)
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    bool_5 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.remove(bool_5)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_16 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_17 = b_s_t_16.getOrder()
    var_18 = b_s_t_15.getOrder(b_s_t_14)

def test_case_1323():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    bool_2 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.getOrder(b_s_t_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_3 = module_0.Node(list_2)
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_1 = b_s_t_7.build(b_s_t_9)
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.remove(none_type_2)
    bool_4 = False
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.remove(bool_4)
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    b_s_t_12 = module_0.BST()
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_4 = module_0.Node(list_3)
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    bool_6 = False
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.remove(bool_6)
    none_type_3 = None
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder(none_type_3)
    var_17 = b_s_t_13.getOrder()
    bool_7 = True

def test_case_1324():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_3 = b_s_t_3.isValid()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_2)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    var_5 = b_s_t_4.isValid()
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_5 = b_s_t_5.build(b_s_t_7)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder()

def test_case_1325():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(var_5)
    assert node_3.value == []
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_3)

def test_case_1326():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_7 = b_s_t_6.isValid()
    bool_3 = False
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder()
    bool_4 = False
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.remove(bool_4)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_13 = b_s_t_14.getOrder()
    var_14 = b_s_t_13.getOrder(b_s_t_12)
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_3 = module_0.Node(list_2)
    b_s_t_15 = module_0.BST()

def test_case_1327():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_4 = None
    node_1 = module_0.Node(none_type_4)
    b_s_t_6 = module_0.BST()

def test_case_1328():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_4 = module_0.Node(var_6)
    assert node_4.value == []
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_7.getOrder(b_s_t_6)
    none_type_0 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.remove(none_type_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_1 = b_s_t_9.build(b_s_t_11)

def test_case_1329():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_2.build(b_s_t_4)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_4 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_5 = b_s_t_8.getOrder()
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.remove(none_type_4)
    bool_2 = False
    b_s_t_10 = module_0.BST()
    var_7 = b_s_t_10.remove(bool_2)
    var_8 = b_s_t_10.__str__()
    assert var_8 == '[]'
    bool_3 = False
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    b_s_t_13 = module_0.BST()

def test_case_1330():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder(none_type_3)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    var_3 = b_s_t_3.isValid()
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.isValid()
    bool_1 = False
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder()

def test_case_1331():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0

def test_case_1332():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value == []
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_1333():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0

def test_case_1334():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.isValid()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    none_type_5 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_6 = b_s_t_5.build(b_s_t_7)
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder()
    var_9 = b_s_t_9.add(var_8)
    assert len(b_s_t_9) == 1
    node_7 = module_0.Node(var_8)
    assert node_7.value == []

def test_case_1335():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()

def test_case_1336():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0

def test_case_1337():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    var_9 = b_s_t_7.getOrder(b_s_t_6)

def test_case_1338():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()

def test_case_1339():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.contains(none_type_0)
    assert var_0 is False

def test_case_1340():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_1.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value == []
    var_7 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(bool_2)
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder(none_type_0)
    var_11 = b_s_t_6.getOrder()
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.remove(none_type_1)

def test_case_1341():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_2)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder(none_type_2)
    var_7 = b_s_t_5.getOrder()
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    node_0 = module_0.Node(var_10)
    assert node_0.value == []
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    list_0 = [node_1]
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.add(list_0)
    assert len(b_s_t_10) == 1
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.isValid()
    var_15 = b_s_t_11.isValid()
    none_type_4 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.remove(none_type_4)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_17 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_18 = b_s_t_15.getOrder()
    var_19 = b_s_t_15.add(var_18)
    assert len(b_s_t_15) == 1
    node_3 = module_0.Node(var_18)
    assert node_3.value == []
    var_20 = b_s_t_15.isValid()

def test_case_1342():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_2)
    assert node_2.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    node_3 = module_0.Node(b_s_t_6)
    assert len(node_3.value) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_7.add(var_6)
    assert len(b_s_t_7) == 1
    node_5 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(none_type_2)
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(bool_2)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_3)
    var_12 = b_s_t_10.isValid()
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.remove(none_type_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_5 = b_s_t_11.build(b_s_t_13)
    set_0 = set()
    node_9 = module_0.Node(set_0)

def test_case_1343():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.add(list_0)
    assert len(b_s_t_2) == 1
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    var_9 = b_s_t_9.add(var_8)
    assert len(b_s_t_9) == 1
    node_3 = module_0.Node(var_8)
    assert node_3.value == []
    var_10 = b_s_t_9.isValid()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.isValid()
    var_13 = b_s_t_10.isValid()
    bool_4 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.remove(bool_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_16 = b_s_t_15.getOrder()

def test_case_1344():
    bool_0 = True
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_1345():
    none_type_0 = None

def test_case_1346():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_5 = b_s_t_2.isValid()
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_5.getOrder(b_s_t_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    var_11 = b_s_t_7.__len__()
    assert var_11 == 0
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    var_14 = b_s_t_10.add(var_13)
    assert len(b_s_t_10) == 1
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.isValid()
    node_3 = module_0.Node(b_s_t_11)
    assert len(node_3.value) == 0

def test_case_1347():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1

def test_case_1348():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_2)
    bool_0 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_0)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    node_1 = module_0.Node(b_s_t_8)
    assert len(node_1.value) == 0
    bool_1 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(bool_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    var_14 = b_s_t_11.add(var_13)
    assert len(b_s_t_11) == 1
    node_2 = module_0.Node(var_13)
    assert node_2.value == []
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    var_15 = b_s_t_12.__str__()
    assert var_15 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    var_16 = b_s_t_12.isValid()

def test_case_1349():
    str_0 = '@C|f'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1350():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    var_5 = b_s_t_4.isValid()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_4 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_1)
    bool_5 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_5)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()

def test_case_1351():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_1)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(none_type_2)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.remove(bool_2)
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder(none_type_3)
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_0)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_1)

def test_case_1352():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []
    set_0 = set()
    node_3 = module_0.Node(set_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    var_7 = b_s_t_5.isValid()

def test_case_1353():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    node_2 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()

def test_case_1354():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_3.__str__()
    assert var_1 == '[]'

def test_case_1355():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.getOrder(b_s_t_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_7)
    assert node_2.value == []
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)

def test_case_1356():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    none_type_0 = None

def test_case_1357():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()

def test_case_1358():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_3 = b_s_t_3.isValid()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    node_5 = module_0.Node(var_8)
    assert node_5.value == []
    var_10 = b_s_t_7.isValid()
    bool_3 = False
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()

def test_case_1359():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_0)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    node_0 = module_0.Node(var_8)
    assert node_0.value == []
    var_10 = b_s_t_7.isValid()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder(none_type_2)
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder()
    var_15 = b_s_t_11.getOrder(b_s_t_10)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.isValid()
    node_1 = module_0.Node(b_s_t_13)
    assert len(node_1.value) == 0

def test_case_1360():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    var_3 = b_s_t_1.getOrder()
    set_0 = set()
    node_0 = module_0.Node(set_0)

def test_case_1361():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    var_3 = b_s_t_1.getOrder()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)

def test_case_1362():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    list_2 = [var_1, b_s_t_3]

def test_case_1363():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_1364():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_0 = module_0.Node(b_s_t_5)
    assert len(node_0.value) == 0

def test_case_1365():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1366():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_4 = b_s_t_2.isValid()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_4 = module_0.Node(b_s_t_6)
    assert len(node_4.value) == 0
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_5)
    bool_1 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_1)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.isValid()
    var_12 = b_s_t_9.isValid()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_3)
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    bool_5 = False
    list_4 = [bool_5, bool_5, bool_5, bool_5]
    node_8 = module_0.Node(list_4)
    var_14 = b_s_t_11.isValid()

def test_case_1367():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_2)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'

def test_case_1368():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value == []
    var_5 = b_s_t_2.isValid()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(bool_0)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_5 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder(none_type_5)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.isValid()
    node_5 = module_0.Node(b_s_t_11)
    assert len(node_5.value) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_12 = b_s_t_12.__str__()
    assert var_12 == '[]'

def test_case_1369():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    assert var_3 is False
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    list_0 = [node_2]
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.add(list_0)
    assert len(b_s_t_6) == 1
    bool_1 = False
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(bool_1)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder(none_type_3)
    var_9 = b_s_t_7.getOrder()

def test_case_1370():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    node_1 = module_0.Node(var_7)
    assert node_1.value == []
    bool_0 = False
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(bool_0)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    var_12 = b_s_t_10.add(var_11)
    assert len(b_s_t_10) == 1
    node_2 = module_0.Node(var_11)
    assert node_2.value == []
    var_13 = b_s_t_10.isValid()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_15 = b_s_t_11.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_12.getOrder()
    bool_3 = False
    node_6 = module_0.Node(bool_3)

def test_case_1371():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_1.isValid()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    list_2 = [node_3]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.add(list_2)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_4 = module_0.Node(var_6)
    assert node_4.value == []
    var_8 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    var_11 = b_s_t_6.add(var_10)
    assert len(b_s_t_6) == 1
    node_5 = module_0.Node(var_10)
    assert node_5.value == []
    bool_2 = False
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.isValid()
    var_15 = b_s_t_11.isValid()
    list_5 = [var_2, b_s_t_2, var_7, b_s_t_9]

def test_case_1372():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_2.__str__()
    assert var_0 == '[]'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    list_1 = [node_3]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.add(list_1)
    assert len(b_s_t_3) == 1
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_2)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_2)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    var_3 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.isValid()
    node_6 = module_0.Node(b_s_t_7)
    assert len(node_6.value) == 0
    bool_2 = False
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.getOrder()
    var_7 = b_s_t_8.add(var_6)
    assert len(b_s_t_8) == 1
    node_8 = module_0.Node(list_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    var_10 = b_s_t_10.add(var_9)
    assert len(b_s_t_10) == 1
    node_9 = module_0.Node(var_9)
    assert node_9.value == []
    var_11 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.getOrder()
    var_14 = b_s_t_12.add(var_13)
    assert len(b_s_t_12) == 1
    node_10 = module_0.Node(var_13)
    assert node_10.value == []

def test_case_1373():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value == []
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_10 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_3)
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.isValid()
    node_6 = module_0.Node(b_s_t_8)
    assert len(node_6.value) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.isValid()

def test_case_1374():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.isValid()
    var_5 = b_s_t_6.__len__()
    assert var_5 == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)

def test_case_1375():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_1)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_2)
    var_6 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.isValid()
    bool_2 = False
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(none_type_1)
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(bool_3)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'

def test_case_1376():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    var_5 = b_s_t_5.contains(var_4)
    assert var_5 is False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    node_6 = module_0.Node(b_s_t_7)
    assert len(node_6.value) == 0
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_1377():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []

def test_case_1378():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_6.getOrder(b_s_t_5)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_11 = b_s_t_8.isValid()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    list_1 = [node_2]
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.add(list_1)
    assert len(b_s_t_9) == 1

def test_case_1379():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    var_5 = b_s_t_2.isValid()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(bool_0)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder(none_type_0)
    var_8 = b_s_t_3.getOrder()

def test_case_1380():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_3.getOrder(b_s_t_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_0 = module_0.Node(var_6)
    assert node_0.value == []
    var_8 = b_s_t_6.isValid()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    var_11 = b_s_t_7.isValid()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_1 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder(none_type_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.isValid()
    node_4 = module_0.Node(b_s_t_11)
    assert len(node_4.value) == 0
    bool_2 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.remove(bool_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'

def test_case_1381():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    var_5 = b_s_t_6.add(var_4)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value is None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_7 = b_s_t_7.isValid()
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_3)
    bool_5 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_5)
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder(none_type_2)
    var_10 = b_s_t_8.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.isValid()
    bool_6 = False
    list_4 = [bool_6, bool_6, bool_6, bool_6]
    node_6 = module_0.Node(list_4)
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    var_13 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.getOrder()
    var_16 = b_s_t_13.add(var_15)
    assert len(b_s_t_13) == 1
    node_8 = module_0.Node(var_15)
    assert node_8.value == []
    var_17 = b_s_t_13.isValid()
    bool_7 = False
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.remove(bool_7)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_19 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_20 = b_s_t_17.getOrder()
    var_21 = b_s_t_16.getOrder(b_s_t_15)

def test_case_1382():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_4 = b_s_t_2.isValid()
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_3)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_6 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    node_7 = module_0.Node(b_s_t_4)
    assert len(node_7.value) == 0
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder(none_type_3)

def test_case_1383():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_1384():
    pass

def test_case_1385():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_1.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_2)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    bool_2 = False
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_3)
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_3 = False
    list_4 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_4)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    bool_4 = False
    node_5 = module_0.Node(bool_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    node_6 = module_0.Node(b_s_t_6)
    assert len(node_6.value) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    node_7 = module_0.Node(var_10)
    assert node_7.value is None

def test_case_1386():
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(bytes_0)

def test_case_1387():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_7 = b_s_t_5.isValid()
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder(none_type_0)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    node_8 = module_0.Node(list_4)

def test_case_1388():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0

def test_case_1389():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_3.getOrder(b_s_t_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = b_s_t_6.build(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.isValid()
    node_2 = module_0.Node(b_s_t_9)

def test_case_1390():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()

def test_case_1391():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_0 = [node_1]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.add(list_0)
    assert len(b_s_t_1) == 1
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value == []
    var_7 = b_s_t_4.isValid()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_2)
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_1)
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.isValid()
    node_4 = module_0.Node(b_s_t_8)
    assert len(node_4.value) == 0

def test_case_1392():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value is None
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    var_9 = b_s_t_6.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.isValid()
    node_4 = module_0.Node(b_s_t_9)
    assert len(node_4.value) == 0
    var_12 = b_s_t_9.contains(var_11)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)

def test_case_1393():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_2 = module_0.Node(b_s_t_1)
    assert len(node_2.value) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    var_6 = b_s_t_3.isValid()
    set_0 = set()
    node_4 = module_0.Node(set_0)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_2)
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_3)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'

def test_case_1394():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_1 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(var_3)
    assert node_3.value == []
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_8.getOrder(b_s_t_7)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.isValid()
    node_4 = module_0.Node(b_s_t_10)
    assert len(node_4.value) == 0
    var_12 = b_s_t_10.contains(var_11)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.isValid()
    var_14 = b_s_t_11.__len__()
    assert var_14 == 0

def test_case_1395():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()

def test_case_1396():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)

def test_case_1397():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(var_8)
    assert node_3.value == []
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    var_13 = b_s_t_10.getOrder(b_s_t_9)
    none_type_1 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.remove(none_type_1)
    bool_3 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.remove(bool_3)
    var_16 = b_s_t_13.__str__()
    assert var_16 == '[]'

def test_case_1398():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    list_2 = [node_3]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.add(list_2)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_5 = module_0.Node(var_6)
    assert node_5.value == []
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_3)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_3)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_9.add(var_9)
    assert len(b_s_t_9) == 1
    node_9 = module_0.Node(var_10)
    assert node_9.value is None

def test_case_1399():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()

def test_case_1400():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    var_7 = b_s_t_4.isValid()

def test_case_1401():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_3.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(var_6)
    assert node_3.value is None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.remove(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_3 = b_s_t_11.build(b_s_t_13)
    bool_3 = False
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.remove(bool_3)
    b_s_t_15 = module_0.BST()
    b_s_t_16 = module_0.BST()
    var_15 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    var_16 = b_s_t_17.getOrder()
    var_17 = b_s_t_16.getOrder(b_s_t_15)

def test_case_1402():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_1)
    assert node_2.value == []
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_6 = b_s_t_4.isValid()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    var_9 = b_s_t_6.isValid()

def test_case_1403():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []
    var_5 = b_s_t_2.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    var_7 = b_s_t_3.add(var_6)
    assert len(b_s_t_3) == 1
    node_4 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()

def test_case_1404():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.getOrder(b_s_t_2)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_1)
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_2)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder(none_type_2)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_10.add(var_10)
    assert len(b_s_t_10) == 1
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0

def test_case_1405():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.remove(none_type_0)
    var_3 = b_s_t_4.isValid()

def test_case_1406():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    list_1 = [node_2]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.add(list_1)
    assert len(b_s_t_2) == 1
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_4 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    assert len(node_5.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_6 = module_0.Node(b_s_t_5)
    assert len(node_6.value) == 0
    var_6 = b_s_t_5.contains(var_5)
    set_0 = set()
    node_7 = module_0.Node(set_0)

def test_case_1407():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_0 = [node_2]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.add(list_0)
    assert len(b_s_t_1) == 1

def test_case_1408():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)

def test_case_1409():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__str__()
    assert var_1 == '[]'
    var_2 = var_1.__len__()
    assert var_2 == 2

def test_case_1410():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.isValid()
    var_2 = b_s_t_3.__len__()
    assert var_2 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.add(var_5)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value == []
    var_7 = b_s_t_6.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_9 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    node_5 = module_0.Node(b_s_t_8)
    assert len(node_5.value) == 0
    var_11 = b_s_t_8.contains(var_10)

def test_case_1411():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)

def test_case_1412():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_1.add(b_s_t_0)
    assert len(b_s_t_1) == 1

def test_case_1413():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    var_7 = b_s_t_5.isValid()

def test_case_1414():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_2.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_8 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    var_11 = b_s_t_7.add(var_10)
    assert len(b_s_t_7) == 1
    node_4 = module_0.Node(var_10)
    assert node_4.value == []
    var_12 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.getOrder()
    var_15 = b_s_t_9.add(var_14)
    assert len(b_s_t_9) == 1
    node_5 = module_0.Node(var_14)
    assert node_5.value == []
    bool_4 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_16 = b_s_t_10.remove(bool_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_18 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_19 = b_s_t_14.getOrder()
    bool_5 = False
    node_6 = module_0.Node(bool_5)
    none_type_3 = None
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_20 = b_s_t_15.getOrder(none_type_3)
    bool_6 = False
    list_3 = [bool_6, bool_6, bool_6, bool_6]
    node_7 = module_0.Node(list_3)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    bool_7 = False
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_21 = b_s_t_17.remove(bool_7)
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    b_s_t_19 = module_0.BST()
    assert len(b_s_t_19) == 0
    var_22 = b_s_t_19.getOrder()
    b_s_t_20 = module_0.BST()
    assert len(b_s_t_20) == 0
    var_23 = b_s_t_20.getOrder()
    var_24 = b_s_t_19.getOrder(b_s_t_18)

def test_case_1415():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_1416():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    node_2 = module_0.Node(b_s_t_1)
    assert len(node_2.value) == 0
    var_1 = b_s_t_1.contains(var_0)
    assert var_1 is False
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_2)

def test_case_1417():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_0 = [node_1]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.add(list_0)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_1418():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    list_1 = [node_2]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.add(list_1)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    bytes_0 = b'\x02\x18\x11*\xa5a\xbcV\x9f4\xeb\xca\x8c'

def test_case_1419():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    set_0 = set()
    node_2 = module_0.Node(set_0)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.getOrder()
    var_11 = b_s_t_10.getOrder(b_s_t_9)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_1 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_12 = b_s_t_13.getOrder(none_type_1)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_13 = b_s_t_14.isValid()
    node_4 = module_0.Node(b_s_t_14)
    assert len(node_4.value) == 0
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_14 = b_s_t_15.isValid()
    var_15 = b_s_t_15.__len__()
    assert var_15 == 0
    none_type_2 = None
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_16 = b_s_t_16.remove(none_type_2)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_17 = b_s_t_17.getOrder()
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    none_type_3 = b_s_t_16.build(b_s_t_18)

def test_case_1420():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    node_2 = module_0.Node(var_7)
    assert node_2.value == []
    var_9 = b_s_t_7.isValid()
    set_0 = set()
    node_3 = module_0.Node(set_0)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    node_5 = module_0.Node(b_s_t_8)
    assert len(node_5.value) == 0
    var_11 = b_s_t_8.contains(var_10)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    bool_4 = False
    node_6 = module_0.Node(bool_4)

def test_case_1421():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_5 = b_s_t_3.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_4 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    var_10 = b_s_t_6.add(var_9)
    assert len(b_s_t_6) == 1
    node_5 = module_0.Node(var_9)
    assert node_5.value == []
    var_11 = b_s_t_6.isValid()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.isValid()
    node_7 = module_0.Node(b_s_t_8)
    assert len(node_7.value) == 0

def test_case_1422():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_3)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder(none_type_2)
    var_9 = b_s_t_7.getOrder()

def test_case_1423():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    assert var_4 is False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_3)
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_2)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(bool_3)

def test_case_1424():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    node_6 = module_0.Node(var_8)
    assert node_6.value == []
    var_10 = b_s_t_7.isValid()
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.remove(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_4 = b_s_t_8.build(b_s_t_10)
    list_3 = [node_4, b_s_t_10]

def test_case_1425():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_6.add(var_8)
    assert len(b_s_t_6) == 1
    node_4 = module_0.Node(var_8)
    assert node_4.value == []
    var_10 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    none_type_0 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder(none_type_0)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    var_12 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'

def test_case_1426():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    var_6 = b_s_t_6.getOrder(b_s_t_5)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder(none_type_3)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_8 = b_s_t_8.isValid()
    int_0 = 2

def test_case_1427():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_1 = module_0.Node(b_s_t_0)
    assert len(node_1.value) == 0
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    var_3 = b_s_t_1.getOrder()
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    bool_2 = False
    node_2 = module_0.Node(bool_2)
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_6 = b_s_t_4.minValueNode(node_3)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_6.value).__module__}.{type(var_6.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_6.value) == 0
    assert var_6.left is None
    assert var_6.right is None

def test_case_1428():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_8.add(var_7)
    assert len(b_s_t_8) == 1
    node_3 = module_0.Node(var_7)
    assert node_3.value == []
    bool_2 = False
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.remove(bool_2)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_10.add(var_10)
    assert len(b_s_t_10) == 1
    node_5 = module_0.Node(list_2)
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.isValid()
    node_6 = module_0.Node(b_s_t_11)
    var_13 = b_s_t_11.contains(var_12)
    none_type_4 = None
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.remove(none_type_4)
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    none_type_5 = b_s_t_12.build(b_s_t_14)

def test_case_1429():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_1)

def test_case_1430():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    str_0 = 'kkxw&'

def test_case_1431():
    set_0 = set()
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_1432():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_0 = [node_1]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.add(list_0)
    assert len(b_s_t_1) == 1
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_2.isValid()

def test_case_1433():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_1 = b_s_t_1.isValid()
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_4 = b_s_t_2.build(b_s_t_4)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.getOrder()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    none_type_5 = None
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder(none_type_5)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.isValid()
    var_9 = b_s_t_9.isValid()
    var_10 = b_s_t_4.__len__()

def test_case_1434():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    var_2 = var_0.__str__()
    assert var_2 == 'None'

def test_case_1435():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value is None
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()

def test_case_1436():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    var_9 = b_s_t_7.isValid()

def test_case_1437():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1

def test_case_1438():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(none_type_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()

def test_case_1439():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_3.isValid()
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_1440():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_1441():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(list_0)

def test_case_1442():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_6)
    assert node_2.value == []
    var_8 = b_s_t_4.isValid()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_6.remove(var_10)

def test_case_1443():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    var_2 = b_s_t_2.isValid()

def test_case_1444():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)

def test_case_1445():
    bool_0 = False
    complex_0 = -525.09892 + 1206.417j
    list_0 = [bool_0, complex_0, complex_0, complex_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_1446():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.remove(var_5)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    node_2 = module_0.Node(var_8)
    assert node_2.value == []
    var_10 = b_s_t_5.isValid()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.remove(bool_1)
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.getOrder(none_type_1)
    var_13 = b_s_t_6.getOrder()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_14 = b_s_t_8.getOrder(none_type_2)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.getOrder()
    var_17 = b_s_t_11.add(var_16)
    assert len(b_s_t_11) == 1
    node_5 = module_0.Node(var_16)
    assert node_5.value == []
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    list_2 = [node_6]
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_18 = b_s_t_12.add(list_2)
    assert len(b_s_t_12) == 1

def test_case_1447():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_5 = b_s_t_4.contains(var_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    node_4 = module_0.Node(b_s_t_7)
    assert len(node_4.value) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    var_9 = b_s_t_8.add(var_8)
    assert len(b_s_t_8) == 1
    node_6 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    var_12 = b_s_t_10.add(var_11)
    assert len(b_s_t_10) == 1
    node_7 = module_0.Node(var_11)
    assert node_7.value == []
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder()
    var_15 = b_s_t_12.add(var_14)
    assert len(b_s_t_12) == 1
    node_8 = module_0.Node(var_14)
    assert node_8.value == []
    var_16 = b_s_t_12.isValid()

def test_case_1448():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.getOrder()
    bool_3 = False
    node_3 = module_0.Node(bool_3)

def test_case_1449():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_3)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    var_5 = b_s_t_5.isValid()

def test_case_1450():
    str_0 = 'GL\nEGA*%DIvDukf'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_1451():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_2)

def test_case_1452():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()

def test_case_1453():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value == []
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder(none_type_2)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_7 = b_s_t_5.isValid()
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.isValid()
    node_4 = module_0.Node(b_s_t_6)
    var_9 = b_s_t_6.contains(var_8)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.isValid()
    var_11 = b_s_t_7.__len__()
    bool_1 = False
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.remove(bool_1)
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.remove(none_type_5)
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_10.getOrder()
    bool_2 = False
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(b_s_t_10)
    var_15 = b_s_t_10.minValueNode(node_6)
    assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_15.value).__module__}.{type(var_15.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_15.value) == 0
    assert var_15.left is None
    assert var_15.right is None
    b_s_t_11 = module_0.BST()
    var_16 = b_s_t_11.isValid()
    var_17 = var_16.__str__()

def test_case_1454():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_7 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0

def test_case_1455():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = b_s_t_2.isValid()
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_2)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_2)
    var_5 = b_s_t_3.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_3 = module_0.Node(var_7)
    assert node_3.value == []
    var_9 = b_s_t_6.isValid()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    var_11 = b_s_t_7.add(var_10)
    assert len(b_s_t_7) == 1
    node_5 = module_0.Node(list_2)
    bool_4 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.remove(bool_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    var_15 = b_s_t_10.getOrder(b_s_t_9)

def test_case_1456():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_3)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    node_5 = module_0.Node(var_8)
    assert node_5.value == []
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    var_11 = b_s_t_6.add(var_10)
    assert len(b_s_t_6) == 1
    node_6 = module_0.Node(var_11)
    assert node_6.value is None
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(bool_4)
    bool_5 = True
    node_7 = module_0.Node(bool_5)

def test_case_1457():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1458():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0

def test_case_1459():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1

def test_case_1460():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_4)
    assert node_2.value is None
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_6.getOrder(b_s_t_5)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    node_3 = module_0.Node(b_s_t_8)
    assert len(node_3.value) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'

def test_case_1461():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_1462():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'

def test_case_1463():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_4 = b_s_t_2.isValid()

def test_case_1464():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_4)
    assert node_2.value == []

def test_case_1465():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    var_3 = var_0.__str__()
    var_4 = var_3.__len__()

def test_case_1466():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_2.contains(var_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value is None

def test_case_1467():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.getOrder(b_s_t_2)

def test_case_1468():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()

def test_case_1469():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    var_5 = b_s_t_4.isValid()
    var_6 = b_s_t_4.getOrder()

def test_case_1470():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    list_1 = [node_0, b_s_t_3, b_s_t_2, node_0]

def test_case_1471():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.remove(var_2)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    assert len(node_5.value) == 0
    var_6 = b_s_t_4.contains(var_5)
    bool_2 = False

def test_case_1472():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_4.getOrder(b_s_t_3)
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_9.__len__()
    assert var_9 == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_10.add(var_10)
    assert len(b_s_t_10) == 1
    node_4 = module_0.Node(list_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.isValid()
    node_5 = module_0.Node(b_s_t_11)
    assert len(node_5.value) == 0
    var_13 = b_s_t_11.contains(var_12)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.add(bool_2)
    assert len(b_s_t_12) == 1

def test_case_1473():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.isValid()
    var_5 = b_s_t_5.__len__()
    bool_3 = False
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(bool_3)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder(none_type_2)
    var_8 = b_s_t_6.getOrder()
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.isValid()
    node_4 = module_0.Node(b_s_t_8)
    var_10 = b_s_t_8.contains(var_9)

def test_case_1474():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.contains(b_s_t_4)

def test_case_1475():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.isValid()
    var_5 = var_4.__str__()
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.remove(none_type_2)
    bool_0 = False
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(bool_0)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    bool_1 = False
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.remove(bool_1)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.getOrder(none_type_3)
    bool_2 = False
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.getOrder()
    var_14 = b_s_t_11.getOrder(b_s_t_10)

def test_case_1476():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_1477():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    var_2 = b_s_t_1.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = var_3.__str__()

def test_case_1478():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_0 = module_0.Node(var_6)
    assert node_0.value is None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_8 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(none_type_1)
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(bool_3)
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'

def test_case_1479():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_3 = b_s_t_2.minValueNode(node_1)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_3.value).__module__}.{type(var_3.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_3.value) == 0
    assert var_3.left is None
    assert var_3.right is None
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    bool_2 = False
    node_2 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_0)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.isValid()
    var_8 = b_s_t_5.contains(b_s_t_0)

def test_case_1480():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0

def test_case_1481():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.isValid()
    var_3 = b_s_t_3.__len__()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.isValid()
    var_6 = b_s_t_4.isValid()
    bool_2 = False
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.contains(b_s_t_7)

def test_case_1482():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_5.build(b_s_t_7)
    var_7 = b_s_t_5.contains(none_type_0)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_9.add(var_9)
    assert len(b_s_t_9) == 1
    node_2 = module_0.Node(var_9)
    assert node_2.value == []
    var_11 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_13 = b_s_t_10.isValid()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_11.remove(var_14)

def test_case_1483():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()

def test_case_1484():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    int_0 = 68
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_1485():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    assert var_3 is False
    set_0 = set()
    node_3 = module_0.Node(set_0)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_5 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_6 = module_0.Node(b_s_t_4)
    assert len(node_6.value) == 0
    none_type_0 = None

def test_case_1486():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.contains(b_s_t_2)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    bool_4 = False
    node_1 = module_0.Node(bool_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.getOrder()
    var_11 = b_s_t_11.add(var_10)
    assert len(b_s_t_11) == 1
    node_2 = module_0.Node(var_10)
    assert node_2.value == []
    var_12 = b_s_t_11.isValid()

def test_case_1487():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.remove(var_3)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    node_5 = module_0.Node(b_s_t_5)
    assert len(node_5.value) == 0
    var_7 = b_s_t_5.contains(var_6)

def test_case_1488():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.__len__()
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.remove(none_type_2)

def test_case_1489():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_1 = False
    node_0 = module_0.Node(bool_1)
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_3 = b_s_t_3.minValueNode(node_1)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_3.value).__module__}.{type(var_3.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_3.value) == 0
    assert var_3.left is None
    assert var_3.right is None
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.isValid()
    var_7 = var_6.__str__()
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder()
    bool_2 = False
    node_2 = module_0.Node(bool_2)

def test_case_1490():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    var_3 = b_s_t_2.isValid()
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_5 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.isValid()
    node_6 = module_0.Node(b_s_t_8)
    assert len(node_6.value) == 0
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_12 = b_s_t_14.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_14.remove(var_12)
    bool_3 = True
    node_8 = module_0.Node(bool_3)

def test_case_1491():
    str_0 = 'bDW;iy=HR-qhC'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(str_0)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bytes_0 = b'E\x07\xfa'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(bytes_0)
    assert var_1 is False

def test_case_1492():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.isValid()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_2)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_2)
    var_7 = b_s_t_4.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = True
    node_3 = module_0.Node(bool_3)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_3)
    bool_4 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(bool_4)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_4 = module_0.Node(list_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_1493():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_1494():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    var_4 = b_s_t_7.__str__()
    assert var_4 == '[]'

def test_case_1495():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_5 = b_s_t_4.contains(var_4)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(var_8)
    assert node_4.value is None

def test_case_1496():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_3 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.getOrder()
    var_5 = b_s_t_6.getOrder(b_s_t_5)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.isValid()
    var_8 = b_s_t_8.isValid()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_10.remove(var_9)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder()
    var_12 = b_s_t_11.add(var_11)
    assert len(b_s_t_11) == 1
    none_type_2 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.remove(none_type_2)
    bool_3 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.remove(bool_3)
    var_15 = b_s_t_13.__str__()
    assert var_15 == '[]'
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.__str__()
    assert var_16 == '[]'

def test_case_1497():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    var_5 = b_s_t_5.getOrder(b_s_t_4)
    b_s_t_7 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_7 = b_s_t_7.isValid()
    bool_3 = False
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()

def test_case_1498():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(set_0)
    set_1 = set()
    node_1 = module_0.Node(set_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(none_type_4)
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(none_type_5)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_6 = b_s_t_8.build(b_s_t_10)
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    none_type_7 = None
    node_3 = module_0.Node(none_type_7)
    b_s_t_11 = module_0.BST()

def test_case_1499():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = b_s_t_2.build(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'

def test_case_1500():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)

def test_case_1501():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_4)
    assert node_2.value == []
    var_6 = b_s_t_3.isValid()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_0)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_1)
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_6.__len__()
    assert var_11 == 0
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder()
    bool_2 = False
    node_3 = module_0.Node(bool_2)

def test_case_1502():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value is None

def test_case_1503():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value == []
    var_6 = b_s_t_3.isValid()

def test_case_1504():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_2 = b_s_t_2.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_5.build(b_s_t_7)
    var_9 = b_s_t_5.contains(none_type_1)
    bool_1 = False
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.getOrder()
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.remove(none_type_3)

def test_case_1505():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    b_s_t_6 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_9 = b_s_t_6.isValid()
    bool_2 = False
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.isValid()
    var_14 = var_13.__str__()
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_13 = module_0.BST()
    none_type_2 = b_s_t_13.build(set_0)
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.isValid()
    b_s_t_15 = module_0.BST()
    var_16 = b_s_t_15.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_15.__len__()

def test_case_1506():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(none_type_2)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(bool_0)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder(none_type_3)

def test_case_1507():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    set_0 = set()
    node_3 = module_0.Node(set_0)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_1508():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(set_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(list_0)

def test_case_1509():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.remove(none_type_4)
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    none_type_5 = b_s_t_5.build(b_s_t_7)
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    b_s_t_8 = module_0.BST()
    none_type_7 = None
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.getOrder(none_type_7)
    var_7 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_8 = b_s_t_10.__str__()
    assert var_8 == '[]'
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    var_9 = b_s_t_10.isValid()

def test_case_1510():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    bool_2 = False
    node_1 = module_0.Node(bool_2)
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    bool_4 = False
    node_3 = module_0.Node(bool_4)
    node_4 = module_0.Node(b_s_t_8)
    assert len(node_4.value) == 0
    var_8 = b_s_t_8.minValueNode(node_4)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_8.value).__module__}.{type(var_8.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_8.value) == 0
    assert var_8.left is None
    assert var_8.right is None
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder(none_type_1)
    bool_5 = False
    list_1 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_6 = False
    list_2 = [bool_6, bool_6, bool_6, bool_6]
    node_7 = module_0.Node(list_2)
    var_10 = b_s_t_11.__str__()
    assert var_10 == '[]'
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.isValid()
    node_8 = module_0.Node(b_s_t_12)
    assert len(node_8.value) == 0
    var_12 = b_s_t_12.contains(var_11)

def test_case_1511():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_3.__len__()
    assert var_7 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    var_9 = b_s_t_5.contains(var_8)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_11 = b_s_t_6.isValid()
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(bool_3)
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder(none_type_1)
    var_14 = b_s_t_7.getOrder()
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_1512():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.getOrder(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.isValid()
    node_1 = module_0.Node(b_s_t_8)
    assert len(node_1.value) == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_6 = b_s_t_10.remove(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_7 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_3 = b_s_t_10.build(b_s_t_12)
    var_8 = var_7.__str__()
    assert var_8 == '[]'

def test_case_1513():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_1514():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_0)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_5 = b_s_t_5.minValueNode(node_2)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_5.value).__module__}.{type(var_5.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_5.value) == 0
    assert var_5.left is None
    assert var_5.right is None
    list_0 = []
    var_6 = b_s_t_1.getOrder(list_0)

def test_case_1515():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = b_s_t_1.contains(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.isValid()
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.remove(none_type_2)
    bool_3 = False
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.remove(bool_3)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.isValid()
    node_4 = module_0.Node(b_s_t_9)
    var_13 = b_s_t_9.contains(var_12)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_9.remove(var_13)
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_12.isValid()
    node_6 = module_0.Node(b_s_t_12)
    var_17 = b_s_t_12.contains(var_16)
    var_18 = b_s_t_12.__str__()
    assert var_18 == '[]'

def test_case_1516():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_1 = [node_2]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.add(list_1)
    assert len(b_s_t_3) == 1
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_1)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_1517():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    var_3 = b_s_t_1.contains(none_type_1)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    var_6 = b_s_t_5.contains(var_5)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_6.add(var_8)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_9)
    assert node_2.value is None
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.isValid()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.isValid()

def test_case_1518():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.isValid()
    var_4 = b_s_t_4.isValid()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder()
    bool_2 = False
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.remove(bool_2)
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.contains(b_s_t_11)
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_12.__len__()
    var_12 = b_s_t_11.contains(var_10)
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.getOrder()
    var_15 = b_s_t_14.add(var_14)
    assert len(b_s_t_14) == 1
    node_2 = module_0.Node(var_14)
    assert node_2.value == []
    var_16 = b_s_t_14.isValid()
    b_s_t_15 = module_0.BST()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    var_17 = b_s_t_15.__str__()
    assert var_17 == '[]'
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    var_18 = b_s_t_15.isValid()
    set_0 = set()
    node_5 = module_0.Node(set_0)
    set_1 = set()
    node_6 = module_0.Node(set_1)
    b_s_t_16 = module_0.BST()
    none_type_3 = b_s_t_16.build(set_1)
    var_19 = b_s_t_5.getOrder()

def test_case_1519():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = var_4.__str__()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    bool_2 = False
    node_1 = module_0.Node(bool_2)
    node_2 = module_0.Node(b_s_t_9)
    assert len(node_2.value) == 0
    var_11 = b_s_t_9.minValueNode(node_2)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_11.value).__module__}.{type(var_11.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_11.value) == 0
    assert var_11.left is None
    assert var_11.right is None
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = b_s_t_10.build(set_0)

def test_case_1520():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_6 = b_s_t_5.contains(var_5)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    list_2 = [node_4]
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.add(list_2)
    assert len(b_s_t_7) == 1

def test_case_1521():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder(none_type_1)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_2)
    var_8 = b_s_t_5.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_1522():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_2 = False
    node_2 = module_0.Node(bool_2)
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    var_4 = b_s_t_2.minValueNode(node_3)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0

def test_case_1523():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_4 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_6.__len__()
    assert var_6 == 0
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.remove(none_type_4)
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.contains(b_s_t_10)
    bool_4 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.remove(bool_4)
    none_type_5 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder(none_type_5)
    var_12 = b_s_t_11.getOrder()
    set_0 = set()
    node_5 = module_0.Node(set_0)
    bool_5 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_13.remove(bool_5)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_14 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_15 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0

def test_case_1524():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_8 = b_s_t_4.contains(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_7 = module_0.BST()

def test_case_1525():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()

def test_case_1526():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_3.contains(var_5)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_1)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_3 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_13 = b_s_t_14.remove(none_type_3)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_14 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    none_type_4 = b_s_t_14.build(b_s_t_16)
    b_s_t_17 = module_0.BST()
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_2)
    var_15 = b_s_t_17.__str__()
    assert var_15 == '[]'
    bool_6 = False
    list_3 = [bool_6, bool_6, bool_6, bool_6]
    node_6 = module_0.Node(list_3)
    b_s_t_18 = module_0.BST()
    var_16 = b_s_t_18.isValid()
    var_17 = b_s_t_5.add(b_s_t_17)
    assert len(b_s_t_5) == 1

def test_case_1527():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_4 = b_s_t_4.minValueNode(node_3)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_4 = module_0.Node(b_s_t_5)
    assert len(node_4.value) == 0
    var_6 = b_s_t_5.contains(var_5)

def test_case_1528():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.contains(b_s_t_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    var_8 = b_s_t_5.contains(var_6)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    node_2 = module_0.Node(list_0)

def test_case_1529():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    assert var_4 is False
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()

def test_case_1530():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_0 = [node_1]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_3 = module_0.Node(var_2)
    assert node_3.value == []
    var_4 = b_s_t_3.isValid()

def test_case_1531():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder(none_type_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    var_7 = b_s_t_7.contains(var_6)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'

def test_case_1532():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_3 = b_s_t_4.contains(var_2)
    assert var_3 is False
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    var_6 = b_s_t_5.contains(var_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_5.remove(var_6)
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_1)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_2)
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.remove(bool_2)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    bool_4 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.remove(bool_4)
    var_13 = b_s_t_8.__str__()
    assert var_13 == '[]'

def test_case_1533():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_1.remove(var_2)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    none_type_2 = b_s_t_3.build(b_s_t_5)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    var_8 = var_7.__str__()
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder(none_type_5)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    var_12 = b_s_t_10.add(var_11)
    assert len(b_s_t_10) == 1
    node_4 = module_0.Node(var_11)
    assert node_4.value == []
    var_13 = b_s_t_10.isValid()
    bool_2 = False
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.remove(bool_2)
    none_type_6 = None
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.remove(none_type_6)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    var_16 = b_s_t_14.__str__()
    assert var_16 == '[]'

def test_case_1534():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1

def test_case_1535():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_5.build(b_s_t_7)
    bool_3 = False
    b_s_t_8 = module_0.BST()
    var_5 = b_s_t_8.remove(bool_3)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.getOrder(none_type_3)
    var_7 = b_s_t_8.getOrder()

def test_case_1536():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    var_4 = b_s_t_4.getOrder(b_s_t_3)
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_1)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_6.__len__()
    assert var_6 == 0
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.getOrder()
    var_10 = b_s_t_11.add(var_9)
    assert len(b_s_t_11) == 1
    node_5 = module_0.Node(var_9)
    assert node_5.value == []
    bool_5 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.remove(bool_5)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_12 = b_s_t_13.contains(b_s_t_13)

def test_case_1537():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)

def test_case_1538():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    var_3 = b_s_t_3.contains(var_2)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(b_s_t_6)
    assert len(node_3.value) == 0
    var_8 = b_s_t_6.minValueNode(node_3)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_8.value).__module__}.{type(var_8.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_8.value) == 0
    assert var_8.left is None
    assert var_8.right is None
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_7.build(b_s_t_9)
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.getOrder()
    var_14 = b_s_t_11.add(var_13)
    assert len(b_s_t_11) == 1
    node_4 = module_0.Node(var_13)
    assert node_4.value == []
    var_15 = b_s_t_11.isValid()
    bool_2 = False
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_12.remove(bool_2)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    var_18 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()

def test_case_1539():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    var_4 = b_s_t_1.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1
    var_9 = var_8.__str__()
    assert var_9 == 'None'
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    var_11 = b_s_t_6.isValid()
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(none_type_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_5 = b_s_t_7.build(b_s_t_9)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_1)
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_10.isValid()
    none_type_6 = None
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.remove(none_type_6)
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    none_type_7 = b_s_t_11.build(b_s_t_13)
    var_17 = b_s_t_11.contains(none_type_6)
    none_type_8 = None
    b_s_t_14 = module_0.BST()
    var_18 = b_s_t_14.remove(none_type_8)
    b_s_t_15 = module_0.BST()
    var_19 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    none_type_9 = b_s_t_14.build(b_s_t_16)
    var_20 = var_19.__str__()
    assert var_20 == '[]'

def test_case_1540():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_3 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_4 = b_s_t_8.isValid()
    node_1 = module_0.Node(b_s_t_8)
    assert len(node_1.value) == 0
    var_5 = b_s_t_8.contains(var_4)
    var_6 = b_s_t_8.__str__()
    assert var_6 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.isValid()
    var_8 = b_s_t_9.__len__()
    assert var_8 == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    bool_1 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.remove(bool_1)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder()
    var_12 = b_s_t_12.add(var_11)
    assert len(b_s_t_12) == 1
    var_13 = var_12.__str__()
    assert var_13 == 'None'

def test_case_1541():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.remove(var_4)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    assert len(node_5.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    var_11 = var_10.__str__()
    assert var_11 == 'None'

def test_case_1542():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    list_1 = [node_0]

def test_case_1543():
    str_0 = "+1'D"
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_1544():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value == []
    b_s_t_5 = module_0.BST()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    node_2 = module_0.Node(var_7)
    assert node_2.value == []
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.remove(none_type_3)
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    none_type_4 = b_s_t_9.build(b_s_t_11)
    var_13 = b_s_t_9.contains(none_type_3)
    b_s_t_12 = module_0.BST()
    none_type_5 = None
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.getOrder(none_type_5)
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.isValid()
    node_3 = module_0.Node(b_s_t_14)
    b_s_t_15 = module_0.BST()
    var_16 = b_s_t_15.isValid()
    node_4 = module_0.Node(b_s_t_15)
    var_17 = b_s_t_15.contains(var_16)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_5 = module_0.Node(list_0)
    b_s_t_16 = module_0.BST()
    var_18 = b_s_t_15.remove(var_17)
    bool_1 = False
    b_s_t_17 = module_0.BST()
    var_19 = b_s_t_17.remove(bool_1)
    b_s_t_18 = module_0.BST()
    var_20 = b_s_t_18.contains(b_s_t_18)
    b_s_t_19 = module_0.BST()
    var_21 = b_s_t_19.__str__()
    assert var_21 == '[]'
    var_22 = b_s_t_19.__len__()
    var_23 = b_s_t_18.contains(var_21)
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    list_1 = [node_6]
    b_s_t_20 = module_0.BST()
    var_24 = b_s_t_20.add(list_1)
    assert len(b_s_t_20) == 1

def test_case_1545():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_1546():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value is None

def test_case_1547():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_2.isValid()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    var_9 = b_s_t_7.contains(var_8)
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.remove(none_type_2)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.remove(none_type_3)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.remove(bool_3)
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.isValid()
    node_3 = module_0.Node(b_s_t_11)
    var_16 = b_s_t_11.contains(var_15)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_11.remove(var_16)
    b_s_t_13 = module_0.BST()
    none_type_4 = None
    b_s_t_14 = module_0.BST()
    var_18 = b_s_t_14.getOrder(none_type_4)
    b_s_t_15 = module_0.BST()
    var_19 = b_s_t_15.isValid()
    node_5 = module_0.Node(b_s_t_15)
    b_s_t_16 = module_0.BST()
    var_20 = b_s_t_16.getOrder()
    var_21 = b_s_t_16.add(var_20)
    assert len(b_s_t_16) == 1
    node_6 = module_0.Node(var_21)
    assert node_6.value is None
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    bool_5 = True
    node_8 = module_0.Node(bool_5)
    none_type_6 = None
    b_s_t_17 = module_0.BST()
    var_22 = b_s_t_17.remove(none_type_6)
    b_s_t_18 = module_0.BST()
    var_23 = var_22.__str__()

def test_case_1548():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    var_6 = var_5.__str__()
    assert var_6 == 'None'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_6.add(var_8)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_8)
    assert node_2.value == []
    var_10 = b_s_t_6.isValid()
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(none_type_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    list_1 = [node_3]
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.add(list_1)
    assert len(b_s_t_8) == 1
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.remove(bool_2)
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.getOrder(none_type_3)
    var_15 = b_s_t_9.getOrder()
    bool_3 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.contains(b_s_t_12)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_18 = b_s_t_13.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_13.__len__()
    assert var_19 == 0
    var_20 = b_s_t_12.contains(var_18)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_21 = b_s_t_14.isValid()

def test_case_1549():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_7 = b_s_t_10.getOrder(none_type_2)
    var_8 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.isValid()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    list_1 = [node_2]
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.add(list_1)
    assert len(b_s_t_12) == 1
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0

def test_case_1550():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_1551():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()

def test_case_1552():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.__len__()
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder()
    var_8 = b_s_t_9.add(var_7)
    assert len(b_s_t_9) == 1
    node_0 = module_0.Node(var_8)
    assert node_0.value is None
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    list_0 = [node_1]
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.add(list_0)
    assert len(b_s_t_10) == 1
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    var_11 = b_s_t_11.add(var_10)
    assert len(b_s_t_11) == 1
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.getOrder()
    list_1 = [var_12, var_12]
    none_type_3 = b_s_t_12.build(list_1)
    assert len(b_s_t_12) == 2
    bool_1 = False
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.remove(bool_1)
    none_type_4 = None
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.getOrder(none_type_4)
    var_15 = b_s_t_13.getOrder()

def test_case_1553():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    list_0 = [var_0, var_0]
    none_type_0 = b_s_t_0.build(list_0)
    assert len(b_s_t_0) == 2
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.isValid()
    var_2 = b_s_t_3.__len__()
    assert var_2 == 0

def test_case_1554():
    int_0 = 4927
    list_0 = [int_0, int_0, int_0, int_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_1555():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_0)
    var_5 = b_s_t_2.isValid()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = var_6.__str__()

def test_case_1556():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)

def test_case_1557():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(set_0)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_5.build(b_s_t_5)
    b_s_t_6 = module_0.BST()
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_4 = b_s_t_7.getOrder(none_type_4)
    b_s_t_8 = module_0.BST()
    var_5 = b_s_t_8.isValid()
    node_4 = module_0.Node(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.isValid()

def test_case_1558():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = var_0.__len__()
    assert var_1 == 2

def test_case_1559():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.contains(b_s_t_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    var_5 = b_s_t_2.contains(var_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(var_8)
    assert node_3.value == []
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_6.__str__()
    assert var_11 == '[]'
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_9.remove(var_12)

def test_case_1560():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = b_s_t_1.contains(none_type_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    none_type_3 = b_s_t_6.build(var_6)
    assert len(b_s_t_6) == 2
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(none_type_4)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    none_type_5 = b_s_t_7.build(b_s_t_9)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.contains(b_s_t_11)
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_12.__len__()
    var_13 = b_s_t_11.contains(var_11)

def test_case_1561():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_1562():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    var_3 = b_s_t_3.contains(var_2)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_0 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_8 = b_s_t_11.getOrder(none_type_0)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_9 = b_s_t_12.isValid()
    node_3 = module_0.Node(b_s_t_12)
    assert len(node_3.value) == 0
    none_type_1 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_10 = b_s_t_13.remove(none_type_1)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_11 = b_s_t_14.getOrder()
    bool_4 = False
    node_4 = module_0.Node(bool_4)
    node_5 = module_0.Node(b_s_t_14)
    assert len(node_5.value) == 0
    var_12 = b_s_t_14.minValueNode(node_5)
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_12.value).__module__}.{type(var_12.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_12.value) == 0
    assert var_12.left is None
    assert var_12.right is None

def test_case_1563():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_0 = module_0.Node(list_0)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_3 = True
    node_3 = module_0.Node(bool_3)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = var_7.__str__()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    node_4 = module_0.Node(var_10)
    assert node_4.value is None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_1)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder(none_type_4)
    var_13 = b_s_t_10.isValid()
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_6 = b_s_t_11.build(b_s_t_11)
    bool_5 = True
    node_7 = module_0.Node(bool_5)

def test_case_1564():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bytes_0 = b'\xbc]\xb5\xc8\xc2\xaa\x0fu\x19'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.contains(bytes_0)
    assert var_0 is False

def test_case_1565():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_0 = b_s_t_2.build(var_3)
    assert len(b_s_t_2) == 2
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_5)
    assert node_1.value == []
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_3.__str__()
    assert var_8 == '[]'

def test_case_1566():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.remove(var_7)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.isValid()
    var_10 = var_9.__str__()
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(bool_2)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder(none_type_2)
    var_13 = b_s_t_7.getOrder()

def test_case_1567():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_2)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_1)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    none_type_4 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = var_4.__str__()
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.contains(b_s_t_7)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_8.__len__()
    assert var_9 == 0
    var_10 = b_s_t_7.contains(var_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.isValid()
    var_13 = b_s_t_10.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.isValid()
    var_15 = var_14.__str__()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.isValid()
    var_17 = b_s_t_13.__len__()
    assert var_17 == 0
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0

def test_case_1568():
    float_0 = 692.554
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1

def test_case_1569():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    bool_2 = False
    node_1 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    var_9 = b_s_t_6.contains(var_8)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_6.remove(var_9)
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.isValid()
    none_type_0 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.remove(none_type_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_1 = b_s_t_9.build(b_s_t_11)
    var_14 = var_13.__str__()
    assert var_14 == '[]'
    none_type_2 = b_s_t_9.build(b_s_t_11)
    bool_5 = False
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.remove(bool_5)
    none_type_3 = None
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.getOrder(none_type_3)
    var_17 = b_s_t_12.getOrder()

def test_case_1570():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_2)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_7 = b_s_t_4.contains(var_6)
    var_8 = b_s_t_4.__str__()
    assert var_8 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_5.__len__()
    assert var_10 == 0
    bool_4 = True
    node_5 = module_0.Node(bool_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_6 = module_0.Node(list_3)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_8.isValid()
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.remove(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_1571():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_1 = b_s_t_1.build(var_1)
    assert len(b_s_t_1) == 2
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_2.isValid()
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_4 = module_0.Node(list_3)

def test_case_1572():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value == []
    var_4 = b_s_t_3.isValid()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_7 = b_s_t_5.minValueNode(node_2)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_7.value).__module__}.{type(var_7.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_7.value) == 0
    assert var_7.left is None
    assert var_7.right is None
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_8.getOrder(b_s_t_7)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.isValid()
    var_13 = b_s_t_10.__len__()
    assert var_13 == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder()
    var_16 = b_s_t_12.add(var_15)
    assert len(b_s_t_12) == 1
    node_3 = module_0.Node(var_15)
    assert node_3.value == []
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.isValid()
    node_4 = module_0.Node(b_s_t_14)
    assert len(node_4.value) == 0
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_19 = b_s_t_15.isValid()
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0

def test_case_1573():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == []
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_2)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    var_9 = b_s_t_7.getOrder(b_s_t_6)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.isValid()
    node_4 = module_0.Node(b_s_t_10)
    assert len(node_4.value) == 0
    var_11 = b_s_t_10.contains(var_10)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_10.remove(var_11)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.isValid()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_14.isValid()
    node_6 = module_0.Node(b_s_t_14)
    assert len(node_6.value) == 0
    var_16 = b_s_t_14.contains(var_15)

def test_case_1574():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_1 = False
    node_0 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    node_1 = module_0.Node(b_s_t_6)
    assert len(node_1.value) == 0
    var_6 = b_s_t_6.contains(var_5)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    var_10 = b_s_t_7.isValid()

def test_case_1575():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_3 = b_s_t_1.contains(var_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_1.remove(var_3)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.contains(b_s_t_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    none_type_0 = b_s_t_5.build(var_7)
    assert len(b_s_t_5) == 2

def test_case_1576():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()

def test_case_1577():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    list_2 = [var_6, var_6]
    none_type_3 = b_s_t_5.build(list_2)
    assert len(b_s_t_5) == 2
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_2)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder(none_type_4)
    var_10 = b_s_t_7.getOrder()

def test_case_1578():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = var_0.__str__()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value is None
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_5.build(b_s_t_5)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    list_0 = [node_3]
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.add(list_0)
    assert len(b_s_t_6) == 1

def test_case_1579():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_0 = False

def test_case_1580():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_2)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_7 = b_s_t_4.contains(var_6)
    var_8 = b_s_t_4.__str__()
    assert var_8 == '[]'
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    node_4 = module_0.Node(b_s_t_6)
    assert len(node_4.value) == 0
    var_11 = b_s_t_6.minValueNode(node_4)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_11.value).__module__}.{type(var_11.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_11.value) == 0
    assert var_11.left is None
    assert var_11.right is None

def test_case_1581():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    list_1 = [node_2]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.add(list_1)
    assert len(b_s_t_2) == 1

def test_case_1582():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    var_4 = b_s_t_2.isValid()

def test_case_1583():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder(none_type_3)
    b_s_t_4 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value == []
    var_8 = b_s_t_6.isValid()

def test_case_1584():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    var_5 = b_s_t_3.contains(var_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    none_type_1 = b_s_t_6.build(var_7)
    assert len(b_s_t_6) == 2
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_1585():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = b_s_t_1.isValid()
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_4.getOrder(b_s_t_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_3 = module_0.Node(b_s_t_6)
    assert len(node_3.value) == 0
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_7.build(b_s_t_9)
    b_s_t_10 = module_0.BST()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_9 = b_s_t_10.__str__()
    assert var_9 == '[]'
    bool_4 = False
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.remove(bool_4)
    none_type_4 = None
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.getOrder(none_type_4)
    var_12 = b_s_t_11.getOrder()
    set_0 = set()
    node_5 = module_0.Node(set_0)

def test_case_1586():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(none_type_3)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(bool_0)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    bool_1 = False
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.contains(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.__len__()
    var_10 = b_s_t_6.contains(var_8)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_8.isValid()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.getOrder()
    var_14 = b_s_t_9.add(var_13)
    assert len(b_s_t_9) == 1
    node_3 = module_0.Node(list_1)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_10 = module_0.BST()
    none_type_5 = b_s_t_10.build(b_s_t_10)
    none_type_6 = None
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.remove(none_type_6)
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_12.isValid()
    var_17 = var_16.__str__()

def test_case_1587():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(none_type_3)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_5)
    var_6 = b_s_t_5.minValueNode(node_2)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_6.value).__module__}.{type(var_6.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_6.value) == 0
    assert var_6.left is None
    assert var_6.right is None
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_8.__len__()
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    list_2 = [var_11, var_11]
    none_type_6 = b_s_t_10.build(list_2)
    assert len(b_s_t_10) == 2

def test_case_1588():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_1 = b_s_t_2.build(var_3)
    assert len(b_s_t_2) == 2
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0

def test_case_1589():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.isValid()

def test_case_1590():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    bytes_0 = b'\xb7\xbf\x8c\xd9\xd7<z\xd0\x1a\xcb*\xd5\x1a\xfbMH'
    var_5 = b_s_t_0.remove(bytes_0)

def test_case_1591():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_2 = b_s_t_0.build(b_s_t_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.isValid()
    node_2 = module_0.Node(b_s_t_1)
    var_1 = b_s_t_1.contains(var_0)
    assert var_1 is False
    bool_0 = False
    b_s_t_2 = module_0.BST()
    var_2 = b_s_t_2.remove(bool_0)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder(none_type_3)
    var_4 = b_s_t_2.getOrder()
    none_type_4 = None
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(none_type_4)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    none_type_5 = b_s_t_4.build(b_s_t_6)
    var_7 = var_6.__str__()
    assert var_7 == '[]'

def test_case_1592():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_4.build(b_s_t_6)
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    none_type_2 = b_s_t_4.build(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.isValid()
    node_0 = module_0.Node(b_s_t_8)
    var_9 = b_s_t_8.contains(var_8)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.isValid()
    node_1 = module_0.Node(b_s_t_9)
    var_12 = b_s_t_9.contains(var_11)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_9.remove(var_12)
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder()
    var_15 = b_s_t_11.add(var_14)
    assert len(b_s_t_11) == 1

def test_case_1593():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    b_s_t_4 = module_0.BST()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    none_type_2 = b_s_t_5.build(set_0)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_3 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    var_4 = b_s_t_7.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(b_s_t_7)
    var_5 = b_s_t_7.minValueNode(node_2)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_5.value).__module__}.{type(var_5.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_5.value) == 0
    assert var_5.left is None
    assert var_5.right is None
    bool_1 = False
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    var_7 = b_s_t_10.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_10.isValid()
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.remove(none_type_4)
    b_s_t_12 = module_0.BST()
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    none_type_6 = None
    b_s_t_15 = module_0.BST()
    var_10 = b_s_t_15.getOrder(none_type_6)

def test_case_1594():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()

def test_case_1595():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    var_6 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_5)
    assert node_1.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_2.__str__()
    assert var_8 == '[]'
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_5.build(b_s_t_7)
    var_11 = b_s_t_5.contains(none_type_0)
    bool_0 = False
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.remove(bool_0)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    none_type_2 = None
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.getOrder(none_type_2)
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.isValid()
    node_2 = module_0.Node(b_s_t_14)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_15 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    b_s_t_16 = module_0.BST()
    var_17 = b_s_t_16.getOrder()
    var_18 = b_s_t_16.add(var_17)
    assert len(b_s_t_16) == 1
    node_5 = module_0.Node(list_1)
    bool_3 = False
    b_s_t_17 = module_0.BST()
    var_19 = b_s_t_17.remove(bool_3)
    none_type_3 = None
    b_s_t_18 = module_0.BST()
    var_20 = b_s_t_18.getOrder(none_type_3)
    var_21 = b_s_t_17.getOrder()
    b_s_t_19 = module_0.BST()
    var_22 = b_s_t_19.isValid()
    node_6 = module_0.Node(b_s_t_19)
    var_23 = b_s_t_19.contains(var_22)

def test_case_1596():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(set_0)

def test_case_1597():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    float_0 = 313.0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_0)

def test_case_1598():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_3.contains(var_5)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_2)
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder(none_type_0)
    var_10 = b_s_t_5.getOrder()

def test_case_1599():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)

def test_case_1600():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0

def test_case_1601():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = var_2.__str__()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    var_6 = b_s_t_4.contains(var_5)
    assert var_6 is False
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    node_3 = module_0.Node(b_s_t_6)
    assert len(node_3.value) == 0
    var_10 = b_s_t_6.minValueNode(node_3)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_10.value).__module__}.{type(var_10.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_10.value) == 0
    assert var_10.left is None
    assert var_10.right is None
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(bool_1)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder(none_type_2)
    var_13 = b_s_t_7.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    var_16 = b_s_t_10.add(var_15)
    assert len(b_s_t_10) == 1
    node_4 = module_0.Node(var_15)
    assert node_4.value == []
    var_17 = b_s_t_10.isValid()
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_18 = b_s_t_11.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_11.remove(var_18)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_20 = b_s_t_12.__str__()
    assert var_20 == '[]'
    var_21 = b_s_t_12.__len__()
    assert var_21 == 0
    var_22 = b_s_t_12.__str__()
    assert var_22 == '[]'
    var_23 = var_20.__str__()
    assert var_23 == '[]'

def test_case_1602():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    var_3 = b_s_t_4.add(var_2)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    node_4 = module_0.Node(b_s_t_6)
    assert len(node_4.value) == 0
    var_6 = b_s_t_6.contains(var_5)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.contains(b_s_t_8)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.remove(none_type_2)

def test_case_1603():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = var_2.__str__()
    assert var_5 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    var_7 = b_s_t_3.add(var_6)
    assert len(b_s_t_3) == 1
    node_3 = module_0.Node(list_1)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_8.add(var_10)
    assert len(b_s_t_8) == 1
    var_12 = var_11.__str__()
    assert var_12 == 'None'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.isValid()
    var_15 = var_14.__str__()
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.remove(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_3 = b_s_t_11.build(b_s_t_13)
    var_18 = var_17.__str__()
    assert var_18 == '[]'
    var_19 = var_10.__len__()
    assert var_19 == 0

def test_case_1604():
    float_0 = 2633.32446
    bool_0 = True
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(bool_0)
    assert var_0 is False

def test_case_1605():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value == []
    var_5 = b_s_t_3.isValid()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder(none_type_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_7 = b_s_t_4.isValid()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    node_5 = module_0.Node(var_9)
    assert node_5.value is None
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    var_13 = b_s_t_10.getOrder(b_s_t_9)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_12.__len__()
    assert var_15 == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.isValid()
    node_6 = module_0.Node(b_s_t_13)
    assert len(node_6.value) == 0
    none_type_3 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_17 = b_s_t_14.remove(none_type_3)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_18 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    none_type_4 = b_s_t_14.build(b_s_t_16)
    var_19 = var_18.__str__()
    assert var_19 == '[]'
    var_20 = b_s_t_4.add(var_17)
    assert len(b_s_t_4) == 1

def test_case_1606():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.remove(var_1)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    var_5 = b_s_t_3.contains(none_type_1)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    var_7 = b_s_t_6.contains(var_6)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_6.remove(var_7)

def test_case_1607():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_5 = b_s_t_3.minValueNode(node_2)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_5.value).__module__}.{type(var_5.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_5.value) == 0
    assert var_5.left is None
    assert var_5.right is None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    bool_2 = False
    node_3 = module_0.Node(bool_2)

def test_case_1608():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.getOrder()
    var_4 = b_s_t_1.add(var_3)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value is None
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_1609():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_2 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()

def test_case_1610():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.remove(none_type_2)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    var_1 = b_s_t_2.remove(bool_0)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    var_4 = var_3.__str__()
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.remove(var_6)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    node_3 = module_0.Node(var_10)
    assert node_3.value is None
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_9.__len__()
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    b_s_t_10 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    var_15 = b_s_t_10.isValid()

def test_case_1611():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_2 = b_s_t_4.getOrder(none_type_2)
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.isValid()
    node_0 = module_0.Node(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    bool_0 = False
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.remove(bool_0)
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder()
    var_7 = b_s_t_8.add(var_6)
    assert len(b_s_t_8) == 1
    var_8 = var_7.__str__()
    assert var_8 == 'None'

def test_case_1612():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.isValid()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_5 = b_s_t_6.isValid()
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder(none_type_2)
    var_7 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.isValid()
    node_2 = module_0.Node(b_s_t_10)
    assert len(node_2.value) == 0

def test_case_1613():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.remove(var_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    list_2 = [var_4, var_4]
    none_type_3 = b_s_t_4.build(list_2)
    assert len(b_s_t_4) == 2
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_4 = module_0.Node(b_s_t_6)
    assert len(node_4.value) == 0
    var_7 = b_s_t_6.contains(var_6)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_5 = b_s_t_7.build(b_s_t_9)
    var_10 = var_9.__str__()
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()

def test_case_1614():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    var_4 = var_3.__str__()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(bool_0)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder(none_type_2)
    var_7 = b_s_t_4.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_6.add(var_8)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.getOrder()
    var_12 = b_s_t_8.add(var_11)
    assert len(b_s_t_8) == 1
    node_3 = module_0.Node(var_11)
    assert node_3.value == []
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    none_type_4 = b_s_t_9.build(b_s_t_9)
    var_13 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1

def test_case_1615():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_6 = b_s_t_7.contains(var_5)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.getOrder()
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'

def test_case_1616():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_5 = b_s_t_1.contains(none_type_0)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_6 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.contains(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.__len__()
    var_10 = b_s_t_5.contains(var_8)
    bool_1 = False
    b_s_t_7 = module_0.BST()
    var_11 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.contains(b_s_t_8)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    b_s_t_9 = module_0.BST()
    none_type_3 = b_s_t_9.build(b_s_t_9)
    bool_2 = True
    node_1 = module_0.Node(bool_2)

def test_case_1617():
    str_0 = '1t+x'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1618():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    list_1 = [var_0, var_0]
    none_type_0 = b_s_t_1.build(list_1)
    assert len(b_s_t_1) == 2
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_3 = b_s_t_2.contains(none_type_1)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    var_5 = b_s_t_5.contains(var_4)
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_2)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_5.remove(var_5)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(none_type_4)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(bool_2)
    var_9 = b_s_t_8.__str__()
    bool_3 = False
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.getOrder()
    var_13 = b_s_t_11.getOrder(b_s_t_10)
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.isValid()
    var_15 = b_s_t_13.__len__()

def test_case_1619():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_4 = b_s_t_4.minValueNode(node_2)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.contains(b_s_t_7)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.isValid()
    node_4 = module_0.Node(b_s_t_8)
    assert len(node_4.value) == 0
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.getOrder()

def test_case_1620():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.remove(none_type_2)
    b_s_t_2 = module_0.BST()
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_3.isValid()
    b_s_t_5 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_5.__len__()
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder()
    var_9 = b_s_t_8.add(var_8)
    assert len(b_s_t_8) == 1
    node_4 = module_0.Node(var_8)
    assert node_4.value == []
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(none_type_4)
    b_s_t_10 = module_0.BST()
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.contains(b_s_t_11)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.isValid()
    none_type_5 = None
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.remove(none_type_5)
    b_s_t_14 = module_0.BST()

def test_case_1621():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.contains(b_s_t_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    var_6 = b_s_t_2.contains(var_4)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    node_3 = module_0.Node(b_s_t_8)
    assert len(node_3.value) == 0
    var_11 = b_s_t_8.contains(var_10)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.isValid()
    var_13 = var_12.__str__()
    float_0 = 2487.18423

def test_case_1622():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    assert var_3 is False
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = var_8.__str__()
    assert var_11 == '[]'
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_7.build(set_0)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.contains(b_s_t_9)
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.remove(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.getOrder()
    bool_3 = False
    node_4 = module_0.Node(bool_3)
    node_5 = module_0.Node(b_s_t_11)
    assert len(node_5.value) == 0
    var_16 = b_s_t_11.minValueNode(node_5)
    assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_16.value).__module__}.{type(var_16.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_16.value) == 0
    assert var_16.left is None
    assert var_16.right is None

def test_case_1623():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    node_0 = module_0.Node(b_s_t_5)
    assert len(node_0.value) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_1 = module_0.Node(b_s_t_6)
    assert len(node_1.value) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_9 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_9.isValid()

def test_case_1624():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_7 = b_s_t_3.contains(none_type_0)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder(none_type_3)

def test_case_1625():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value is None

def test_case_1626():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_2)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_0)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    var_9 = b_s_t_8.add(var_8)
    assert len(b_s_t_8) == 1
    var_10 = var_9.__str__()
    assert var_10 == 'None'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    var_13 = b_s_t_10.add(var_12)
    assert len(b_s_t_10) == 1
    node_3 = module_0.Node(var_12)
    assert node_3.value == []
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_9.__str__()
    assert var_15 == '[]'
    bool_2 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.remove(bool_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_17 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_18 = b_s_t_15.getOrder()
    bool_3 = True

def test_case_1627():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    none_type_2 = b_s_t_2.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.__len__()
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    var_9 = var_6.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    var_10 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_11 = b_s_t_7.getOrder()
    var_12 = b_s_t_7.add(var_11)
    assert len(b_s_t_7) == 1
    node_1 = module_0.Node(var_11)
    assert node_1.value == []
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_13 = b_s_t_8.getOrder(none_type_3)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    none_type_4 = b_s_t_9.build(set_0)
    b_s_t_10 = module_0.BST()
    none_type_5 = None
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder(none_type_5)
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.isValid()
    node_3 = module_0.Node(b_s_t_12)
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_7 = None
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.remove(none_type_7)
    b_s_t_14 = module_0.BST()
    var_17 = var_16.__str__()
    none_type_8 = None
    node_6 = module_0.Node(none_type_8)
    b_s_t_15 = module_0.BST()
    var_18 = b_s_t_15.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_15.remove(var_18)

def test_case_1628():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = b_s_t_1.isValid()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_2.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_3 = module_0.Node(var_7)
    assert node_3.value == []
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_5.__str__()
    assert var_10 == '[]'
    b_s_t_8 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_12 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_9.__len__()
    bool_3 = False
    b_s_t_10 = module_0.BST()
    var_15 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    var_16 = b_s_t_11.contains(b_s_t_11)
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_12.__str__()
    assert var_17 == '[]'
    var_18 = b_s_t_12.__len__()
    var_19 = b_s_t_11.contains(var_17)
    b_s_t_13 = module_0.BST()
    var_20 = b_s_t_13.__str__()
    assert var_20 == '[]'
    var_21 = b_s_t_13.__len__()
    var_22 = b_s_t_13.__str__()
    assert var_22 == '[]'
    var_23 = var_20.__str__()
    assert var_23 == '[]'

def test_case_1629():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    b_s_t_2 = module_0.BST()
    b_s_t_3 = module_0.BST()
    var_0 = b_s_t_3.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_3.__len__()
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value == []
    var_7 = b_s_t_5.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_10.add(var_10)
    assert len(b_s_t_10) == 1
    node_4 = module_0.Node(var_10)
    assert node_4.value == []
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.getOrder()
    var_14 = b_s_t_12.add(var_13)
    assert len(b_s_t_12) == 1
    node_6 = module_0.Node(list_1)
    b_s_t_13 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_2)
    var_15 = b_s_t_13.__str__()
    assert var_15 == '[]'
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_3)
    var_16 = b_s_t_13.isValid()
    bytes_0 = b'\x98\xf0<#\xfb![\\\x8d'

def test_case_1630():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1631():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.isValid()
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder(none_type_3)

def test_case_1632():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value == []
    var_4 = b_s_t_2.isValid()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_5.getOrder(b_s_t_4)
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_0 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.remove(none_type_0)
    bool_2 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_13 = b_s_t_13.remove(bool_2)
    var_14 = b_s_t_13.__str__()
    assert var_14 == '[]'
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_14.__str__()
    assert var_15 == '[]'
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_3 = False
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_16 = b_s_t_16.remove(bool_3)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    bool_4 = False
    list_0 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_0)
    var_17 = b_s_t_18.__str__()
    assert var_17 == '[]'
    none_type_2 = b_s_t_18.build(var_17)
    assert len(b_s_t_18) == 2

def test_case_1633():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_5.__len__()
    assert var_5 == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_6.build(b_s_t_8)
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.isValid()
    node_3 = module_0.Node(b_s_t_9)
    var_10 = b_s_t_9.contains(var_9)

def test_case_1634():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    var_6 = b_s_t_3.contains(none_type_1)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.isValid()
    node_1 = module_0.Node(b_s_t_6)
    var_8 = b_s_t_6.contains(var_7)
    bool_1 = False
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_9.__len__()
    var_13 = b_s_t_8.contains(var_11)
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_10.getOrder()
    bool_2 = False
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.remove(bool_2)
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_12.getOrder()
    var_17 = b_s_t_12.add(var_16)
    assert len(b_s_t_12) == 1
    var_18 = var_17.__str__()
    assert var_18 == 'None'

def test_case_1635():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)

def test_case_1636():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value == []
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_0 = b_s_t_4.build(var_5)
    assert len(b_s_t_4) == 2
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.__len__()
    assert var_7 == 0
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    var_9 = var_6.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    list_1 = [var_10, var_10]
    none_type_1 = b_s_t_6.build(list_1)
    assert len(b_s_t_6) == 2
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_7.build(b_s_t_9)
    var_13 = var_12.__str__()
    none_type_4 = b_s_t_7.build(b_s_t_9)

def test_case_1637():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    b_s_t_9 = module_0.BST()
    none_type_5 = b_s_t_9.build(b_s_t_9)

def test_case_1638():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)

def test_case_1639():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_4 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(none_type_4)
    b_s_t_4 = module_0.BST()
    var_4 = var_3.__str__()
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_6)
    assert node_2.value == []
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.remove(none_type_5)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    list_1 = [var_10, var_10]
    none_type_6 = b_s_t_9.build(list_1)
    assert len(b_s_t_9) == 2
    b_s_t_10 = module_0.BST()

def test_case_1640():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    none_type_0 = b_s_t_6.build(var_10)
    assert len(b_s_t_6) == 2
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.isValid()
    var_12 = var_11.__str__()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = var_13.__str__()
    var_15 = b_s_t_9.getOrder()

def test_case_1641():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    b_s_t_3 = module_0.BST()
    var_1 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    var_3 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    var_4 = b_s_t_7.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_7)
    var_5 = b_s_t_7.minValueNode(node_2)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_5.value).__module__}.{type(var_5.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_5.value) == 0
    assert var_5.left is None
    assert var_5.right is None
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.__str__()
    assert var_6 == '[]'
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.getOrder()
    var_9 = b_s_t_10.add(var_8)
    assert len(b_s_t_10) == 1
    node_3 = module_0.Node(var_8)
    assert node_3.value == []
    var_10 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.isValid()
    node_4 = module_0.Node(b_s_t_12)
    var_13 = b_s_t_12.contains(var_12)
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    none_type_3 = None
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.getOrder(none_type_3)

def test_case_1642():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_4.__len__()
    assert var_3 == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = var_2.__str__()
    assert var_5 == '[]'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder(none_type_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_8 = b_s_t_7.isValid()
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(bool_3)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()

def test_case_1643():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_0 = module_0.Node(b_s_t_5)
    assert len(node_0.value) == 0
    var_6 = b_s_t_5.contains(var_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_5.remove(var_6)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_1 = [node_2]
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.add(list_1)
    assert len(b_s_t_7) == 1
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    node_3 = module_0.Node(var_10)
    assert node_3.value == []
    bool_2 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.remove(bool_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_15 = b_s_t_15.isValid()
    node_4 = module_0.Node(b_s_t_15)
    assert len(node_4.value) == 0
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_16 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_17 = b_s_t_17.getOrder()
    var_18 = b_s_t_17.add(var_17)
    assert len(b_s_t_17) == 1
    node_5 = module_0.Node(var_17)
    assert node_5.value == []
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    var_19 = b_s_t_18.__str__()
    assert var_19 == '[]'
    var_20 = b_s_t_16.__str__()
    assert var_20 == '[]'
    b_s_t_19 = module_0.BST()
    assert len(b_s_t_19) == 0
    var_21 = b_s_t_19.__str__()
    assert var_21 == '[]'
    var_22 = b_s_t_19.__len__()
    assert var_22 == 0
    var_23 = b_s_t_19.__str__()
    assert var_23 == '[]'

def test_case_1644():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)

def test_case_1645():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_5 = b_s_t_3.minValueNode(node_3)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_5.value).__module__}.{type(var_5.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_5.value) == 0
    assert var_5.left is None
    assert var_5.right is None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_8.add(var_10)
    assert len(b_s_t_8) == 1
    var_12 = var_11.__str__()
    assert var_12 == 'None'
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_2)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    var_14 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_10.__len__()
    assert var_16 == 0
    none_type_5 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_17 = b_s_t_11.getOrder(none_type_5)
    none_type_6 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_18 = b_s_t_12.remove(none_type_6)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_19 = b_s_t_14.__str__()
    assert var_19 == '[]'

def test_case_1646():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.remove(none_type_2)
    b_s_t_2 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_2.isValid()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.remove(var_3)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    bool_2 = False
    b_s_t_5 = module_0.BST()
    var_8 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_7.getOrder(b_s_t_6)

def test_case_1647():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()

def test_case_1648():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_4 = b_s_t_1.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_1.__len__()
    assert var_5 == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    node_1 = module_0.Node(var_10)
    assert node_1.value == []
    var_12 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.isValid()
    node_2 = module_0.Node(b_s_t_10)
    var_14 = b_s_t_10.contains(var_13)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_10.remove(var_14)
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_12.remove(none_type_3)
    b_s_t_13 = module_0.BST()
    var_17 = b_s_t_13.getOrder()
    bool_1 = False
    node_4 = module_0.Node(bool_1)
    node_5 = module_0.Node(b_s_t_13)
    var_18 = b_s_t_13.minValueNode(node_5)
    assert f'{type(var_18).__module__}.{type(var_18).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_18.value).__module__}.{type(var_18.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_18.value) == 0
    assert var_18.left is None
    assert var_18.right is None
    b_s_t_14 = module_0.BST()
    var_19 = b_s_t_14.isValid()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_15 = module_0.BST()
    var_20 = b_s_t_15.__str__()
    assert var_20 == '[]'
    var_21 = b_s_t_15.remove(var_20)

def test_case_1649():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_4 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.getOrder()
    var_6 = b_s_t_2.add(var_5)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_5)
    assert node_0.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_1.__str__()
    assert var_8 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_9 = b_s_t_4.__str__()
    assert var_9 == '[]'
    none_type_0 = b_s_t_4.build(var_9)
    assert len(b_s_t_4) == 2
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_10 = b_s_t_5.isValid()
    var_11 = var_10.__str__()
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_12 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_6.build(b_s_t_8)
    var_14 = var_13.__str__()
    assert var_14 == '[]'
    none_type_3 = b_s_t_6.build(b_s_t_8)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    b_s_t_9 = module_0.BST()
    none_type_5 = b_s_t_9.build(b_s_t_9)
    b_s_t_10 = module_0.BST()
    var_15 = b_s_t_10.isValid()
    node_3 = module_0.Node(b_s_t_10)
    var_16 = b_s_t_10.contains(var_15)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    var_17 = b_s_t_10.remove(var_16)
    none_type_6 = None
    b_s_t_12 = module_0.BST()
    var_18 = b_s_t_12.remove(none_type_6)
    b_s_t_13 = module_0.BST()
    var_19 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    none_type_7 = b_s_t_12.build(b_s_t_14)
    var_20 = b_s_t_12.contains(none_type_6)
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    list_2 = [node_5]
    b_s_t_15 = module_0.BST()
    var_21 = b_s_t_15.add(list_2)
    assert len(b_s_t_15) == 1

def test_case_1650():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0

def test_case_1651():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.contains(b_s_t_7)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_1652():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()

def test_case_1653():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = b_s_t_4.build(set_0)

def test_case_1654():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_1.isValid()

def test_case_1655():
    pass

def test_case_1656():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0

def test_case_1657():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    var_6 = b_s_t_5.contains(var_5)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_1658():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0

def test_case_1659():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    var_3 = b_s_t_3.getOrder(b_s_t_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.isValid()
    node_1 = module_0.Node(b_s_t_7)
    assert len(node_1.value) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    var_6 = b_s_t_8.__str__()
    assert var_6 == '[]'
    none_type_1 = b_s_t_8.build(var_6)
    assert len(b_s_t_8) == 2
    bool_3 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.remove(bool_3)
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder(none_type_2)
    var_9 = b_s_t_9.getOrder()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.remove(none_type_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.getOrder()
    bool_4 = False
    node_4 = module_0.Node(bool_4)
    node_5 = module_0.Node(b_s_t_12)
    assert len(node_5.value) == 0
    var_12 = b_s_t_12.minValueNode(node_5)
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_12.value).__module__}.{type(var_12.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_12.value) == 0
    assert var_12.left is None
    assert var_12.right is None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_5 = True
    node_6 = module_0.Node(bool_5)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_13 = b_s_t_14.__len__()
    assert var_13 == 0

def test_case_1660():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)

def test_case_1661():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    none_type_1 = b_s_t_3.build(var_2)
    assert len(b_s_t_3) == 2
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    var_6 = b_s_t_6.getOrder(b_s_t_5)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.isValid()
    var_8 = b_s_t_8.__len__()
    assert var_8 == 0
    var_9 = b_s_t_4.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_0.getOrder()

def test_case_1662():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)

def test_case_1663():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_6 = b_s_t_4.contains(var_5)
    assert var_6 is False
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_5.build(b_s_t_7)
    var_9 = var_8.__str__()
    assert var_9 == '[]'

def test_case_1664():
    list_0 = []
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(list_0)
    assert var_0 is False
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0

def test_case_1665():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_2 = b_s_t_2.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(set_0)

def test_case_1666():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_0.getOrder()

def test_case_1667():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value is None
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(list_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_4 = module_0.Node(b_s_t_5)
    assert len(node_4.value) == 0
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.contains(b_s_t_7)

def test_case_1668():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value is None

def test_case_1669():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_7.build(b_s_t_7)
    b_s_t_8 = module_0.BST()
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    var_4 = b_s_t_9.getOrder(none_type_2)
    b_s_t_10 = module_0.BST()
    var_5 = b_s_t_10.isValid()
    node_1 = module_0.Node(b_s_t_10)
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_6 = b_s_t_12.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()
    var_8 = b_s_t_13.getOrder()
    bool_2 = False
    b_s_t_14 = module_0.BST()
    var_9 = b_s_t_14.remove(bool_2)
    none_type_3 = None
    b_s_t_15 = module_0.BST()
    var_10 = b_s_t_15.getOrder(none_type_3)
    var_11 = b_s_t_14.getOrder()

def test_case_1670():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_0)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_1)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.contains(b_s_t_7)

def test_case_1671():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    list_1 = [var_2, var_2]
    none_type_1 = b_s_t_2.build(list_1)
    assert len(b_s_t_2) == 2
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_3.build(b_s_t_5)
    var_5 = var_4.__str__()
    b_s_t_6 = module_0.BST()
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.isValid()
    var_8 = b_s_t_7.isValid()
    b_s_t_9 = module_0.BST()
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.getOrder(none_type_4)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.isValid()
    node_3 = module_0.Node(b_s_t_11)

def test_case_1672():
    list_0 = []
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__str__()
    assert var_1 == '0'

def test_case_1673():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    var_5 = b_s_t_5.getOrder(b_s_t_4)
    b_s_t_7 = module_0.BST()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder(none_type_2)
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.isValid()
    node_0 = module_0.Node(b_s_t_9)
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.isValid()
    node_1 = module_0.Node(b_s_t_10)
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.getOrder()
    var_11 = b_s_t_12.add(var_10)
    assert len(b_s_t_12) == 1
    node_2 = module_0.Node(var_10)
    assert node_2.value == []
    b_s_t_13 = module_0.BST()
    var_12 = b_s_t_13.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.getOrder()
    bool_1 = False
    b_s_t_15 = module_0.BST()
    var_15 = b_s_t_15.remove(bool_1)
    b_s_t_16 = module_0.BST()
    var_16 = b_s_t_16.getOrder()
    var_17 = b_s_t_16.add(var_16)
    assert len(b_s_t_16) == 1
    var_18 = var_17.__str__()
    assert var_18 == 'None'
    bool_2 = False
    b_s_t_17 = module_0.BST()
    var_19 = b_s_t_17.remove(bool_2)
    none_type_3 = None
    b_s_t_18 = module_0.BST()
    var_20 = b_s_t_18.remove(none_type_3)
    b_s_t_19 = module_0.BST()
    var_21 = b_s_t_19.getOrder()
    b_s_t_20 = module_0.BST()
    none_type_4 = b_s_t_18.build(b_s_t_20)
    var_22 = b_s_t_18.contains(none_type_3)

def test_case_1674():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    none_type_3 = b_s_t_3.build(b_s_t_5)
    var_5 = b_s_t_3.contains(none_type_2)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_6 = module_0.BST()
    b_s_t_7 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    none_type_4 = b_s_t_7.build(var_6)
    assert len(b_s_t_7) == 2
    b_s_t_8 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_8.isValid()
    bool_3 = True
    node_3 = module_0.Node(bool_3)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'

def test_case_1675():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(none_type_0)
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_2)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    bool_3 = True
    node_1 = module_0.Node(bool_3)

def test_case_1676():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = var_0.__str__()

def test_case_1677():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value is None
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.remove(none_type_3)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    none_type_5 = b_s_t_6.build(b_s_t_8)
    var_10 = b_s_t_6.contains(none_type_4)

def test_case_1678():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__len__()
    assert var_2 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    list_2 = [var_3, var_3]
    none_type_3 = b_s_t_4.build(list_2)
    assert len(b_s_t_4) == 2
    list_3 = [node_1, var_2]

def test_case_1679():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_0.add(node_0)
    assert len(b_s_t_0) == 1
    var_6 = b_s_t_3.isValid()

def test_case_1680():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    var_11 = b_s_t_7.contains(var_10)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_7.remove(var_11)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'

def test_case_1681():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(list_1)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.remove(var_8)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_7.__len__()
    assert var_11 == 0
    bool_3 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.remove(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_2)
    var_15 = b_s_t_13.__str__()
    assert var_15 == '[]'
    none_type_1 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.remove(none_type_1)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_17 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    none_type_2 = b_s_t_14.build(b_s_t_16)

def test_case_1682():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_1 = [node_1]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.add(list_1)
    assert len(b_s_t_1) == 1

def test_case_1683():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = var_2.__str__()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_4 = b_s_t_6.__str__()
    assert var_4 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    var_5 = b_s_t_6.isValid()
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = b_s_t_7.build(b_s_t_9)
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    none_type_5 = b_s_t_7.build(b_s_t_9)
    none_type_6 = None
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.remove(none_type_6)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    bool_4 = False
    node_6 = module_0.Node(bool_4)
    node_7 = module_0.Node(b_s_t_11)
    var_11 = b_s_t_11.minValueNode(node_7)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_11.value).__module__}.{type(var_11.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_11.value) == 0
    assert var_11.left is None
    assert var_11.right is None
    bool_5 = False
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.remove(bool_5)
    none_type_7 = None
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.getOrder(none_type_7)
    var_14 = b_s_t_12.getOrder()
    none_type_8 = None
    node_8 = module_0.Node(none_type_8)
    none_type_9 = None
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.remove(none_type_9)
    b_s_t_15 = module_0.BST()

def test_case_1684():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_1)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder(none_type_2)
    var_9 = b_s_t_6.getOrder()

def test_case_1685():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(var_4)
    assert node_4.value == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    list_0 = [var_5, var_5]
    none_type_2 = b_s_t_5.build(list_0)
    assert len(b_s_t_5) == 2
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_9 = b_s_t_12.getOrder()
    var_10 = b_s_t_12.add(var_9)
    assert len(b_s_t_12) == 1

def test_case_1686():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_4 = b_s_t_2.isValid()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    bool_4 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_4)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder(none_type_1)
    var_7 = b_s_t_3.getOrder()

def test_case_1687():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_6.build(set_0)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'

def test_case_1688():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    var_5 = b_s_t_2.add(var_4)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_4)
    assert node_0.value == []
    var_6 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'

def test_case_1689():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1690():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = var_2.__str__()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(var_3)

def test_case_1691():
    str_0 = '$T\x0bL=O]w^NF\tP'
    node_0 = module_0.Node(str_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_1692():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.contains(b_s_t_7)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_8.__len__()
    assert var_9 == 0
    var_10 = b_s_t_7.contains(var_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_9.__len__()
    assert var_12 == 0
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    var_14 = var_11.__str__()
    assert var_14 == '[]'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    var_16 = b_s_t_10.add(var_15)
    assert len(b_s_t_10) == 1
    node_2 = module_0.Node(var_16)
    assert node_2.value is None
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_17 = b_s_t_11.remove(none_type_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_18 = var_17.__str__()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_4 = False
    list_0 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_0)
    var_19 = b_s_t_13.__str__()
    assert var_19 == '[]'
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_20 = b_s_t_13.__len__()
    assert var_20 == 0

def test_case_1693():
    none_type_0 = None
    bytes_0 = b'M\x9an\x9a^x\xde\xaf\xeb\xef\x04'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(bytes_0)
    assert len(b_s_t_0) == 1

def test_case_1694():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    var_7 = b_s_t_3.isValid()
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    bool_2 = False
    node_2 = module_0.Node(bool_2)

def test_case_1695():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None

def test_case_1696():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    node_1 = module_0.Node(b_s_t_3)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_4 = b_s_t_7.getOrder(none_type_3)
    b_s_t_8 = module_0.BST()
    var_5 = b_s_t_8.isValid()
    node_2 = module_0.Node(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.__str__()
    assert var_6 == '[]'
    b_s_t_10 = module_0.BST()
    tuple_0 = (var_3, var_1, var_3, b_s_t_0)

def test_case_1697():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.isValid()
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    list_1 = [node_2]
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.add(list_1)
    assert len(b_s_t_4) == 1
    bool_3 = True
    node_3 = module_0.Node(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'

def test_case_1698():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = var_5.__str__()

def test_case_1699():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    var_6 = var_5.__str__()
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    var_9 = b_s_t_7.minValueNode(node_2)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_9.value).__module__}.{type(var_9.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_9.value) == 0
    assert var_9.left is None
    assert var_9.right is None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_8.isValid()

def test_case_1700():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_0 = b_s_t_1.build(var_2)
    assert len(b_s_t_1) == 2
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    var_6 = b_s_t_4.contains(var_5)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_4.remove(var_6)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_1701():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(var_3)
    assert node_3.value == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(var_7)
    assert node_4.value == []
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_4.__str__()
    assert var_10 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.isValid()
    node_5 = module_0.Node(b_s_t_7)
    assert len(node_5.value) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_12 = b_s_t_8.__str__()
    assert var_12 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    var_13 = b_s_t_8.isValid()
    bool_4 = True
    node_8 = module_0.Node(bool_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.__len__()
    assert var_14 == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_5 = True
    node_9 = module_0.Node(bool_5)

def test_case_1702():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.contains(b_s_t_4)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    var_8 = b_s_t_5.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_8.add(var_10)
    assert len(b_s_t_8) == 1
    node_3 = module_0.Node(var_10)
    assert node_3.value == []
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_7.__str__()
    assert var_13 == '[]'

def test_case_1703():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_2 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_2)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_6.__len__()
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.__len__()
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    var_11 = var_8.__str__()
    assert var_11 == '[]'
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.getOrder()
    var_14 = b_s_t_9.add(var_13)
    assert len(b_s_t_9) == 1
    node_2 = module_0.Node(var_13)
    assert node_2.value == []
    b_s_t_10 = module_0.BST()
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_8.__str__()
    assert var_16 == '[]'
    b_s_t_11 = module_0.BST()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_17 = b_s_t_11.__str__()
    assert var_17 == '[]'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_12 = module_0.BST()
    var_18 = b_s_t_11.__len__()

def test_case_1704():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.minValueNode(node_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_3.value).__module__}.{type(var_3.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_3.value) == 0
    assert var_3.left is None
    assert var_3.right is None

def test_case_1705():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    var_2 = b_s_t_2.isValid()

def test_case_1706():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_1707():
    bytes_0 = b'\xf8gb\x8b\xb9\xd2\x1b.\xc4p\x90_w\xaf'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = var_0.__len__()
    assert var_1 == 2

def test_case_1708():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_2 = b_s_t_2.contains(var_1)
    assert var_2 is False
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = b_s_t_4.build(b_s_t_6)
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    none_type_4 = b_s_t_4.build(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.isValid()
    node_4 = module_0.Node(b_s_t_7)
    var_8 = b_s_t_7.contains(var_7)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_7.remove(var_8)
    bool_3 = False
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(bool_3)
    none_type_5 = None
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder(none_type_5)
    var_12 = b_s_t_9.getOrder()
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_11.__len__()

def test_case_1709():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.contains(b_s_t_4)
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.__len__()
    assert var_4 == 0
    bool_4 = True
    node_3 = module_0.Node(bool_4)
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_8.remove(var_6)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.remove(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = b_s_t_9.build(b_s_t_11)
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.getOrder()
    var_11 = b_s_t_12.add(var_10)
    assert len(b_s_t_12) == 1
    bool_5 = True

def test_case_1710():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_1711():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1712():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_3 = b_s_t_1.contains(var_2)
    assert var_3 is False

def test_case_1713():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_0 = b_s_t_1.build(var_2)
    assert len(b_s_t_1) == 2

def test_case_1714():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    list_0 = [var_0, var_0]
    none_type_0 = b_s_t_0.build(list_0)
    assert len(b_s_t_0) == 2
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.minValueNode(node_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'binarySearchTree2.Node'
    assert var_1.value == [False, False, False, False]
    assert var_1.left is None
    assert var_1.right is None
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    var_3 = b_s_t_2.remove(var_2)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    list_2 = [node_3]
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.add(list_2)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1

def test_case_1715():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_4 = module_0.Node(list_0)
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    node_6 = module_0.Node(b_s_t_3)
    assert len(node_6.value) == 0
    var_6 = b_s_t_3.contains(var_5)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_3.remove(var_6)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    node_8 = module_0.Node(var_9)
    assert node_8.value is None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_9 = module_0.Node(list_2)
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_10 = module_0.Node(list_3)
    var_13 = b_s_t_8.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.getOrder()
    none_type_1 = None
    node_11 = module_0.Node(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0

def test_case_1716():
    bytes_0 = b'\x97c\x8bg\x03'
    set_0 = {bytes_0, bytes_0, bytes_0}
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_1717():
    float_0 = -3023.44
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)

def test_case_1718():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = var_3.__str__()

def test_case_1719():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1720():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.minValueNode(node_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert var_4.value == [False, False, False, False]
    assert var_4.left is None
    assert var_4.right is None
    var_5 = b_s_t_2.add(var_4)
    assert len(b_s_t_2) == 1
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = var_6.__str__()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    tuple_0 = (b_s_t_3, var_2, var_0, var_4)

def test_case_1721():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    var_8 = b_s_t_7.__len__()
    assert var_8 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_7.__len__()
    assert var_10 == 0
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'

def test_case_1722():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)

def test_case_1723():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'binarySearchTree2.Node'
    assert var_1.value == [False, False, False, False]
    assert var_1.left is None
    assert var_1.right is None
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)

def test_case_1724():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_1)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    var_13 = var_12.__str__()
    assert var_13 == '[]'

def test_case_1725():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_1726():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.isValid()
    var_6 = b_s_t_7.__len__()
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_7.__len__()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.__len__()
    bool_2 = False
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.remove(bool_2)
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.getOrder(none_type_2)
    var_12 = b_s_t_10.getOrder()
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.__len__()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    node_4 = module_0.Node(var_13)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_13 = module_0.BST()
    none_type_5 = b_s_t_13.build(b_s_t_13)
    b_s_t_14 = module_0.BST()
    none_type_6 = None
    b_s_t_15 = module_0.BST()
    var_14 = b_s_t_15.getOrder(none_type_6)
    b_s_t_16 = module_0.BST()
    var_15 = b_s_t_16.isValid()
    node_6 = module_0.Node(b_s_t_16)
    none_type_7 = None
    node_7 = module_0.Node(none_type_7)
    bool_4 = True
    node_8 = module_0.Node(bool_4)
    none_type_8 = None
    b_s_t_17 = module_0.BST()
    var_16 = b_s_t_17.remove(none_type_8)
    b_s_t_18 = module_0.BST()
    var_17 = var_16.__str__()

def test_case_1727():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.contains(b_s_t_6)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_7.__len__()
    assert var_8 == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.isValid()
    node_1 = module_0.Node(b_s_t_10)
    assert len(node_1.value) == 0
    bool_2 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.remove(bool_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.contains(b_s_t_12)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_0)
    var_14 = b_s_t_13.__str__()
    assert var_14 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_13.__len__()
    assert var_15 == 0
    none_type_3 = None
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_16 = b_s_t_15.remove(none_type_3)
    none_type_4 = None
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_17 = b_s_t_16.getOrder(none_type_4)

def test_case_1728():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    var_6 = b_s_t_3.isValid()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_6.build(b_s_t_8)
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    none_type_4 = b_s_t_6.build(b_s_t_8)

def test_case_1729():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_6.getOrder(b_s_t_5)
    bool_3 = True
    node_1 = module_0.Node(bool_3)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_8.remove(var_10)
    bool_4 = True
    node_3 = module_0.Node(bool_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.__len__()
    assert var_12 == 0
    var_13 = b_s_t_3.remove(bool_0)

def test_case_1730():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    list_1 = [node_4]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.add(list_1)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_5 = module_0.Node(var_7)
    assert node_5.value is None
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'
    bool_4 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.remove(bool_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_5 = True
    node_7 = module_0.Node(bool_5)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_13 = b_s_t_14.__len__()
    assert var_13 == 0
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    node_9 = module_0.Node(var_13)
    assert node_9.value == 0

def test_case_1731():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    node_2 = module_0.Node(b_s_t_5)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    b_s_t_9 = module_0.BST()
    bool_1 = False
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.remove(bool_1)
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    var_11 = b_s_t_13.getOrder()
    var_12 = b_s_t_12.getOrder(b_s_t_11)
    b_s_t_14 = module_0.BST()
    var_13 = b_s_t_14.getOrder()
    var_14 = b_s_t_14.add(var_13)
    assert len(b_s_t_14) == 1
    node_3 = module_0.Node(var_14)
    assert node_3.value is None
    b_s_t_15 = module_0.BST()
    var_15 = b_s_t_15.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_15.__len__()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_16 = module_0.BST()
    b_s_t_17 = module_0.BST()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    var_17 = b_s_t_17.__str__()
    assert var_17 == '[]'
    none_type_3 = b_s_t_17.build(var_17)
    assert len(b_s_t_17) == 2
    set_0 = {b_s_t_4}

def test_case_1732():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    var_6 = b_s_t_3.isValid()

def test_case_1733():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    bool_0 = False
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(bool_0)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    var_11 = var_10.__str__()

def test_case_1734():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()

def test_case_1735():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.remove(var_3)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    var_8 = var_5.__str__()
    assert var_8 == '[]'
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    var_9 = b_s_t_5.getOrder(none_type_4)

def test_case_1736():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(bool_1)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_1)
    var_5 = b_s_t_6.isValid()
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)

def test_case_1737():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.contains(b_s_t_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    var_7 = b_s_t_4.contains(var_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    node_1 = module_0.Node(var_9)
    assert node_1.value == []
    var_11 = b_s_t_7.isValid()
    list_0 = [var_7]

def test_case_1738():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_2.remove(var_3)
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()

def test_case_1739():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_3 = b_s_t_3.contains(none_type_0)
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_7.remove(var_6)
    b_s_t_8 = module_0.BST()

def test_case_1740():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1

def test_case_1741():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value is None
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = var_4.__str__()
    assert var_7 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    var_10 = b_s_t_6.add(var_9)
    assert len(b_s_t_6) == 1
    node_4 = module_0.Node(var_9)
    assert node_4.value == []
    var_11 = b_s_t_6.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.isValid()
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.__len__()
    assert var_13 == 0
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    node_8 = module_0.Node(var_13)
    assert node_8.value == 0

def test_case_1742():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False

def test_case_1743():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    node_2 = module_0.Node(b_s_t_3)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    none_type_3 = b_s_t_4.build(b_s_t_6)
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    none_type_4 = b_s_t_4.build(b_s_t_6)
    none_type_5 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(none_type_5)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    node_4 = module_0.Node(b_s_t_8)
    var_9 = b_s_t_8.minValueNode(node_4)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_9.value).__module__}.{type(var_9.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_9.value) == 0
    assert var_9.left is None
    assert var_9.right is None
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.isValid()
    node_5 = module_0.Node(b_s_t_9)
    var_11 = b_s_t_9.contains(var_10)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.remove(bool_3)
    none_type_6 = None
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.getOrder(none_type_6)
    var_14 = b_s_t_10.getOrder()
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.getOrder()
    bool_4 = False
    node_6 = module_0.Node(bool_4)

def test_case_1744():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.isValid()

def test_case_1745():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_1)
    var_3 = b_s_t_2.getOrder()

def test_case_1746():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()

def test_case_1747():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.add(list_0)
    assert len(b_s_t_1) == 1
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_4 = b_s_t_2.contains(none_type_1)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    none_type_4 = b_s_t_5.build(b_s_t_7)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    none_type_5 = None
    node_1 = module_0.Node(none_type_5)
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    str_0 = 'r'

def test_case_1748():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(set_0)
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_2)
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_4 = True
    node_5 = module_0.Node(bool_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__len__()
    assert var_7 == 0
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    node_7 = module_0.Node(var_7)
    assert node_7.value == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    bool_5 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(bool_5)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_10.add(var_10)
    assert len(b_s_t_10) == 1
    var_12 = var_11.__str__()
    assert var_12 == 'None'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.isValid()
    node_8 = module_0.Node(b_s_t_11)
    assert len(node_8.value) == 0
    var_14 = b_s_t_11.contains(var_13)
    bool_6 = False
    list_1 = [bool_6, bool_6, bool_6, bool_6]
    node_9 = module_0.Node(list_1)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_11.remove(var_14)
    bool_7 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.remove(bool_7)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_17 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_18 = b_s_t_16.getOrder()
    var_19 = b_s_t_15.getOrder(b_s_t_14)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_20 = b_s_t_17.__str__()
    assert var_20 == '[]'
    var_21 = b_s_t_17.__len__()
    assert var_21 == 0
    var_22 = b_s_t_17.__str__()
    assert var_22 == '[]'
    var_23 = var_20.__str__()
    assert var_23 == '[]'

def test_case_1749():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    var_5 = var_4.__str__()
    assert var_5 == 'None'
    bool_2 = True
    node_1 = module_0.Node(bool_2)

def test_case_1750():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_3)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_2)
    var_7 = b_s_t_4.getOrder()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_1751():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []

def test_case_1752():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()

def test_case_1753():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.isValid()
    var_7 = b_s_t_4.isValid()
    b_s_t_6 = module_0.BST()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_3)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_6.__len__()
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.remove(none_type_3)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_4 = b_s_t_8.build(b_s_t_10)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    none_type_5 = b_s_t_8.build(b_s_t_10)
    bool_4 = False
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.remove(bool_4)
    b_s_t_12 = module_0.BST()
    bool_5 = False
    list_4 = [bool_5, bool_5, bool_5, bool_5]
    node_5 = module_0.Node(list_4)
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'

def test_case_1754():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.getOrder()
    var_1 = b_s_t_2.add(var_0)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(list_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = var_2.__str__()
    assert var_5 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_1)
    var_7 = b_s_t_5.isValid()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    list_2 = [node_5]
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.add(list_2)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = var_9.__str__()
    assert var_10 == '[]'

def test_case_1755():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_1.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.minValueNode(node_2)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert var_4.value == [False, False, False, False]
    assert var_4.left is None
    assert var_4.right is None
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_0)
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_3)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    var_11 = b_s_t_7.__len__()
    assert var_11 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder()
    var_13 = b_s_t_7.__len__()
    assert var_13 == 0
    bool_4 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.remove(bool_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.contains(b_s_t_10)
    none_type_1 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.getOrder(none_type_1)
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_3 = module_0.Node(list_2)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_3 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_13.remove(none_type_3)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.__str__()
    assert var_18 == '[]'

def test_case_1756():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_6.__str__()
    assert var_4 == '[]'
    none_type_0 = b_s_t_6.build(var_4)
    assert len(b_s_t_6) == 2

def test_case_1757():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.add(list_0)
    assert len(b_s_t_2) == 1
    var_2 = b_s_t_0.isValid()

def test_case_1758():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    assert var_3 is False
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value == []
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_0 = [node_2]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.add(list_0)
    assert len(b_s_t_5) == 1
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.remove(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = var_11.__str__()
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.remove(none_type_3)
    bool_2 = False
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.remove(bool_2)
    var_15 = b_s_t_13.__str__()
    assert var_15 == '[]'
    bool_3 = False
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.remove(bool_3)

def test_case_1759():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    none_type_3 = b_s_t_4.build(b_s_t_6)
    node_1 = module_0.Node(b_s_t_6)

def test_case_1760():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder()
    var_9 = b_s_t_8.add(var_8)
    assert len(b_s_t_8) == 1
    node_3 = module_0.Node(var_8)
    assert node_3.value == []
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    b_s_t_10 = module_0.BST()
    bool_3 = False
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    complex_0 = 429.021 - 1697.8j
    set_0 = {var_5, complex_0, b_s_t_9}

def test_case_1761():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    var_1 = b_s_t_1.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    var_2 = b_s_t_1.remove(var_1)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    b_s_t_5 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    node_4 = module_0.Node(var_9)
    assert node_4.value is None
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_8.__len__()
    var_12 = b_s_t_8.__str__()
    assert var_12 == '[]'
    b_s_t_9 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_10.remove(none_type_3)
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    none_type_4 = b_s_t_10.build(b_s_t_12)

def test_case_1762():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)

def test_case_1763():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(b_s_t_3)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_6 = b_s_t_4.add(none_type_2)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.__len__()
    b_s_t_6 = module_0.BST()
    var_9 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    var_10 = b_s_t_6.contains(var_9)

def test_case_1764():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.add(var_5)
    assert len(b_s_t_6) == 1
    node_1 = module_0.Node(var_5)
    assert node_1.value == []

def test_case_1765():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_2)
    var_3 = b_s_t_2.isValid()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_2)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_3)
    var_7 = b_s_t_4.getOrder()

def test_case_1766():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    assert var_3 is False
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(set_0)

def test_case_1767():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    list_0 = []
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.add(list_0)
    assert len(b_s_t_1) == 1

def test_case_1768():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.minValueNode(node_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert var_3.value == [False, False, False, False]
    assert var_3.left is None
    assert var_3.right is None
    var_4 = b_s_t_1.add(var_3)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    var_7 = b_s_t_3.add(var_6)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value == []
    var_8 = b_s_t_3.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_9 = b_s_t_4.getOrder()
    var_10 = b_s_t_4.add(var_9)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_11 = b_s_t_5.__str__()
    assert var_11 == '[]'
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    var_12 = b_s_t_5.add(none_type_0)
    assert len(b_s_t_5) == 1
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_6.build(b_s_t_6)
    b_s_t_7 = module_0.BST()
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_13 = b_s_t_8.getOrder(none_type_3)
    b_s_t_9 = module_0.BST()
    var_14 = b_s_t_9.isValid()
    node_6 = module_0.Node(b_s_t_9)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    var_15 = b_s_t_10.isValid()
    complex_0 = 1288.43641 + 1425.010024j

def test_case_1769():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_11.__len__()
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    b_s_t_13 = module_0.BST()

def test_case_1770():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()

def test_case_1771():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    var_5 = b_s_t_3.getOrder()
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    bool_1 = False
    b_s_t_4 = module_0.BST()
    var_7 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    none_type_2 = b_s_t_8.build(var_11)
    assert len(b_s_t_8) == 2
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    none_type_3 = b_s_t_9.build(set_0)
    set_1 = set()
    node_5 = module_0.Node(set_1)
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.isValid()
    node_6 = module_0.Node(b_s_t_10)
    var_13 = b_s_t_10.contains(var_12)
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_11.__len__()
    var_16 = b_s_t_11.__str__()
    assert var_16 == '[]'
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_12.getOrder()
    var_18 = b_s_t_12.add(var_17)
    assert len(b_s_t_12) == 1
    var_19 = b_s_t_2.add(list_1)
    assert len(b_s_t_2) == 1

def test_case_1772():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.isValid()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder(none_type_0)
    var_7 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.__str__()
    assert var_8 == '[]'
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(var_9)
    assert node_4.value == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_6.build(b_s_t_8)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    none_type_4 = b_s_t_9.build(set_0)

def test_case_1773():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_4 = b_s_t_2.contains(none_type_0)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_9 = b_s_t_6.add(none_type_2)
    assert len(b_s_t_6) == 1
    node_3 = module_0.Node(var_8)
    assert node_3.value == '[]'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    b_s_t_8 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_8.__len__()
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder()
    bool_3 = False
    node_7 = module_0.Node(bool_3)
    node_8 = module_0.Node(b_s_t_11)
    var_15 = b_s_t_11.minValueNode(node_8)
    assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_15.value).__module__}.{type(var_15.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_15.value) == 0
    assert var_15.left is None
    assert var_15.right is None
    b_s_t_12 = module_0.BST()
    none_type_5 = None
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.getOrder(none_type_5)
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.isValid()
    node_9 = module_0.Node(b_s_t_14)
    bool_4 = False
    b_s_t_15 = module_0.BST()
    var_18 = b_s_t_15.remove(bool_4)
    b_s_t_16 = module_0.BST()
    b_s_t_17 = module_0.BST()
    var_19 = b_s_t_17.getOrder()
    b_s_t_18 = module_0.BST()
    var_20 = b_s_t_18.getOrder()
    b_s_t_19 = module_0.BST()

def test_case_1774():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = b_s_t_1.contains(none_type_0)
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.isValid()
    var_6 = var_5.__str__()
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.__len__()
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    var_11 = b_s_t_7.getOrder(none_type_2)
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.isValid()
    node_0 = module_0.Node(b_s_t_8)
    var_13 = b_s_t_8.contains(var_12)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    none_type_4 = b_s_t_9.build(b_s_t_9)
    var_14 = b_s_t_9.__str__()
    assert var_14 == '[]'

def test_case_1775():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.remove(var_1)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.getOrder()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    list_0 = [var_7, var_7]
    none_type_2 = b_s_t_7.build(list_0)
    assert len(b_s_t_7) == 2
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_8 = b_s_t_8.__str__()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_8.__len__()
    assert var_9 == 0

def test_case_1776():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    list_0 = [var_0, var_0]
    none_type_0 = b_s_t_0.build(list_0)
    assert len(b_s_t_0) == 2
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.contains(b_s_t_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    var_7 = b_s_t_4.contains(var_5)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    var_9 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    var_11 = var_10.__str__()
    var_12 = var_11.__str__()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_13 = b_s_t_8.__str__()
    var_14 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_1777():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = b_s_t_1.add(none_type_1)
    assert len(b_s_t_1) == 1
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_2.build(b_s_t_4)
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    none_type_4 = b_s_t_2.build(b_s_t_4)

def test_case_1778():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_3 = None
    node_0 = module_0.Node(none_type_3)
    var_4 = b_s_t_3.add(none_type_3)
    assert len(b_s_t_3) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_4 = None
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.getOrder(none_type_4)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    var_6 = b_s_t_4.isValid()
    none_type_6 = None
    node_3 = module_0.Node(none_type_6)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_4 = module_0.Node(var_8)
    assert node_4.value is None
    none_type_7 = None
    node_5 = module_0.Node(none_type_7)
    list_1 = [node_5]
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.add(list_1)
    assert len(b_s_t_7) == 1
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_8.__len__()
    b_s_t_9 = module_0.BST()
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_2)
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    none_type_8 = b_s_t_9.build(var_12)
    assert len(b_s_t_9) == 2
    bool_2 = False
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.remove(bool_2)
    none_type_9 = None
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder(none_type_9)
    var_15 = b_s_t_10.getOrder()

def test_case_1779():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder()
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.isValid()
    bool_0 = False
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(bool_0)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.contains(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_7.__len__()
    var_9 = b_s_t_6.contains(var_7)

def test_case_1780():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)

def test_case_1781():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    node_0 = module_0.Node(b_s_t_6)
    assert len(node_0.value) == 0
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.remove(none_type_4)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.__str__()
    assert var_7 == '[]'
    none_type_5 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.remove(none_type_5)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_6 = b_s_t_10.build(b_s_t_12)
    b_s_t_13 = module_0.BST()
    var_10 = b_s_t_13.isValid()
    node_2 = module_0.Node(b_s_t_13)
    var_11 = b_s_t_13.contains(var_10)
    none_type_7 = None
    node_3 = module_0.Node(none_type_7)
    b_s_t_14 = module_0.BST()
    none_type_8 = b_s_t_14.build(b_s_t_14)
    var_12 = b_s_t_14.__str__()
    assert var_12 == '[]'

def test_case_1782():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_1783():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = b_s_t_1.isValid()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.minValueNode(node_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert var_3.value == [False, False, False, False]
    assert var_3.left is None
    assert var_3.right is None
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    assert len(node_5.value) == 0
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(b_s_t_5)
    node_7 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder(none_type_3)
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.isValid()
    node_8 = module_0.Node(b_s_t_8)
    b_s_t_9 = module_0.BST()
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_9 = module_0.Node(list_3)
    var_7 = b_s_t_9.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.isValid()
    node_10 = module_0.Node(b_s_t_10)
    var_10 = b_s_t_10.contains(var_9)
    assert var_10 is False
    none_type_4 = None
    node_11 = module_0.Node(none_type_4)
    b_s_t_11 = module_0.BST()
    none_type_5 = b_s_t_11.build(b_s_t_11)
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'

def test_case_1784():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_3 = b_s_t_3.contains(var_2)
    assert var_3 is False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    set_1 = set()
    node_4 = module_0.Node(set_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.__len__()
    assert var_10 == 0
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    var_12 = var_9.__str__()
    assert var_12 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.remove(none_type_2)
    bool_1 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.remove(bool_1)
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'
    int_0 = 3196
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.getOrder(int_0)

def test_case_1785():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()

def test_case_1786():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.__str__()
    assert var_4 == '[]'
    var_5 = var_2.__str__()
    assert var_5 == '[]'
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_6 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.contains(b_s_t_6)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.__len__()
    assert var_10 == 0
    var_11 = b_s_t_6.contains(var_9)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_8.build(set_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.isValid()

def test_case_1787():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_3 = b_s_t_1.contains(var_2)
    assert var_3 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(b_s_t_2)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_5 = b_s_t_3.remove(bool_0)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_6 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    none_type_3 = b_s_t_4.build(b_s_t_6)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.remove(none_type_4)
    none_type_5 = None
    node_2 = module_0.Node(none_type_5)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_6 = None
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(none_type_6)
    b_s_t_9 = module_0.BST()
    var_10 = var_9.__str__()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_11.__len__()
    b_s_t_12 = module_0.BST()
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_0)
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'

def test_case_1788():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    node_1 = module_0.Node(b_s_t_3)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.getOrder()
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    var_8 = b_s_t_6.contains(var_7)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_6.remove(var_8)

def test_case_1789():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.remove(var_2)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_3.build(b_s_t_3)
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.minValueNode(node_3)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert var_4.value == [False, False, False, False]
    assert var_4.left is None
    assert var_4.right is None
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.getOrder()
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    node_6 = module_0.Node(var_10)
    assert node_6.value == []
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_8.__str__()
    assert var_13 == '[]'
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_11.__len__()
    var_16 = b_s_t_11.__str__()
    assert var_16 == '[]'
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_12.isValid()
    node_7 = module_0.Node(b_s_t_12)
    var_18 = b_s_t_12.contains(var_17)
    b_s_t_13 = module_0.BST()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_2)
    var_19 = b_s_t_13.__str__()
    assert var_19 == '[]'

def test_case_1790():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    none_type_1 = b_s_t_5.build(var_6)
    assert len(b_s_t_5) == 2
    bool_4 = True
    node_4 = module_0.Node(bool_4)
    bool_5 = True
    node_5 = module_0.Node(bool_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    bool_6 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_6)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_11 = b_s_t_12.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_12.__len__()
    assert var_12 == 0
    var_13 = b_s_t_12.__str__()
    assert var_13 == '[]'
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.getOrder()
    bool_7 = False
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_14.remove(bool_7)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_16 = b_s_t_15.getOrder()
    var_17 = b_s_t_15.add(var_16)
    assert len(b_s_t_15) == 1
    var_18 = var_17.__str__()
    assert var_18 == 'None'
    bool_8 = False
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_19 = b_s_t_16.remove(bool_8)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0

def test_case_1791():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    list_0 = [var_3, var_3, b_s_t_3]

def test_case_1792():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    var_4 = b_s_t_4.contains(var_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = var_5.__str__()
    assert var_8 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_6.getOrder()

def test_case_1793():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_4 = b_s_t_1.minValueNode(node_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert var_4.value == [False, False, False, False]
    assert var_4.left is None
    assert var_4.right is None
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    none_type_2 = b_s_t_2.build(b_s_t_4)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    var_8 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    bool_2 = False
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    var_12 = b_s_t_9.getOrder(b_s_t_8)
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_11 = module_0.BST()
    none_type_4 = None
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.remove(none_type_4)
    b_s_t_13 = module_0.BST()
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    b_s_t_14 = module_0.BST()
    var_14 = b_s_t_14.contains(b_s_t_14)
    var_15 = b_s_t_14.__str__()
    assert var_15 == '[]'
    none_type_5 = None
    node_3 = module_0.Node(none_type_5)
    b_s_t_15 = module_0.BST()
    none_type_6 = b_s_t_15.build(b_s_t_15)
    b_s_t_16 = module_0.BST()
    var_16 = b_s_t_16.__str__()
    assert var_16 == '[]'
    none_type_7 = None
    node_4 = module_0.Node(none_type_7)
    var_17 = b_s_t_16.add(none_type_7)
    assert len(b_s_t_16) == 1
    node_5 = module_0.Node(var_16)
    assert node_5.value == '[]'

def test_case_1794():
    tuple_0 = ()
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_1795():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = var_2.__str__()
    assert var_5 == '[]'
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.minValueNode(node_2)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert var_6.value == [False, False, False, False]
    assert var_6.left is None
    assert var_6.right is None
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.getOrder()

def test_case_1796():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_1)
    var_4 = b_s_t_2.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    var_6 = b_s_t_4.add(none_type_2)
    assert len(b_s_t_4) == 1
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.contains(b_s_t_7)
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    var_13 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_12.__len__()
    assert var_15 == 0
    var_16 = b_s_t_12.__str__()
    assert var_16 == '[]'
    var_17 = var_14.__str__()
    assert var_17 == '[]'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    set_0 = set()
    node_3 = module_0.Node(set_0)
    str_0 = '7vxdw~x_hHy#-&'

def test_case_1797():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    var_5 = b_s_t_4.contains(var_4)
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_5.build(b_s_t_7)
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.contains(b_s_t_10)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.getOrder()
    var_12 = b_s_t_11.add(var_11)
    assert len(b_s_t_11) == 1
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.remove(none_type_3)
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.getOrder()
    bool_3 = False
    node_4 = module_0.Node(bool_3)
    node_5 = module_0.Node(b_s_t_13)
    var_15 = b_s_t_13.minValueNode(node_5)
    assert f'{type(var_15).__module__}.{type(var_15).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_15.value).__module__}.{type(var_15.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_15.value) == 0
    assert var_15.left is None
    assert var_15.right is None
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder()
    var_17 = var_16.__str__()
    assert var_17 == '[]'

def test_case_1798():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.__len__()
    assert var_7 == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.isValid()
    node_3 = module_0.Node(b_s_t_9)
    assert len(node_3.value) == 0
    var_12 = b_s_t_9.contains(var_11)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_4 = b_s_t_10.build(b_s_t_10)
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    bool_3 = False
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder()
    var_17 = b_s_t_13.getOrder(b_s_t_12)
    b_s_t_15 = module_0.BST()
    var_18 = b_s_t_15.getOrder()
    var_19 = b_s_t_15.add(var_18)
    assert len(b_s_t_15) == 1
    node_5 = module_0.Node(var_19)
    assert node_5.value is None

def test_case_1799():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_1.build(b_s_t_3)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    none_type_3 = b_s_t_4.build(set_0)
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    var_5 = b_s_t_5.add(none_type_4)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.isValid()
    var_7 = var_6.__str__()
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder()
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(none_type_5)
    b_s_t_10 = module_0.BST()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.contains(b_s_t_11)
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.isValid()
    node_5 = module_0.Node(b_s_t_13)
    var_14 = b_s_t_13.contains(var_13)
    var_15 = b_s_t_13.__str__()
    assert var_15 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_1)
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder()
    var_17 = b_s_t_14.add(var_16)
    assert len(b_s_t_14) == 1
    node_7 = module_0.Node(list_1)

def test_case_1800():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    none_type_2 = b_s_t_3.build(set_0)
    var_1 = b_s_t_3.__str__()
    assert var_1 == '[]'
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    var_2 = b_s_t_4.remove(none_type_3)
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    none_type_4 = b_s_t_4.build(b_s_t_6)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_5 = b_s_t_4.build(b_s_t_6)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    var_6 = b_s_t_7.add(var_5)
    assert len(b_s_t_7) == 1
    node_3 = module_0.Node(list_0)
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_8.__len__()
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    var_11 = b_s_t_9.add(none_type_6)
    assert len(b_s_t_9) == 1

def test_case_1801():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(var_6)
    assert node_3.value == []
    var_8 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.isValid()
    var_10 = var_9.__str__()
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_7.build(b_s_t_9)

def test_case_1802():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.minValueNode(node_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert var_2.value == [False, False, False, False]
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_4 = b_s_t_2.add(none_type_0)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    var_8 = b_s_t_3.__len__()
    assert var_8 == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_7.__len__()
    assert var_11 == 0
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.__len__()
    assert var_12 == 0
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    node_7 = module_0.Node(var_12)
    assert node_7.value == 0
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.__str__()
    assert var_14 == '[]'
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.isValid()
    node_8 = module_0.Node(b_s_t_12)
    assert len(node_8.value) == 0
    var_16 = b_s_t_12.contains(var_15)
    var_17 = b_s_t_12.__len__()
    assert var_17 == 0

def test_case_1803():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_3 = b_s_t_1.isValid()
    set_1 = set()
    node_3 = module_0.Node(set_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(set_1)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_4 = b_s_t_3.build(b_s_t_5)
    var_6 = b_s_t_3.contains(none_type_3)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    none_type_6 = None
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(none_type_6)
    b_s_t_7 = module_0.BST()
    var_8 = var_7.__str__()

def test_case_1804():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_1.__len__()
    assert var_4 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_0 = module_0.Node(var_6)
    assert node_0.value == []
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_1 = module_0.Node(b_s_t_7)
    assert len(node_1.value) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.isValid()
    node_2 = module_0.Node(b_s_t_10)
    assert len(node_2.value) == 0
    none_type_1 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)

def test_case_1805():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = var_1.__str__()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    var_8 = b_s_t_3.__len__()
    assert var_8 == 0

def test_case_1806():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.minValueNode(node_2)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert var_2.value == [False, False, False, False]
    assert var_2.left is None
    assert var_2.right is None
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    assert len(node_5.value) == 0
    var_7 = b_s_t_4.contains(var_6)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_4.remove(var_7)

def test_case_1807():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.minValueNode(node_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert var_3.value == [False, False, False, False]
    assert var_3.left is None
    assert var_3.right is None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_0 = b_s_t_3.build(var_4)
    assert len(b_s_t_3) == 2
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(var_6)
    assert node_4.value == []
    var_8 = b_s_t_0.__len__()
    assert var_8 == 0

def test_case_1808():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    list_0 = [var_0, var_0]
    none_type_0 = b_s_t_0.build(list_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_5 = var_4.__str__()
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_6.add(var_7)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_7)
    var_9 = b_s_t_6.isValid()
    bool_1 = False
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()

def test_case_1809():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_3 = b_s_t_3.add(none_type_1)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_2)
    assert node_2.value == '[]'
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_6.getOrder(b_s_t_5)

def test_case_1810():
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    var_4 = b_s_t_4.contains(var_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_4.remove(var_4)
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_0)
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_2)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    node_4 = module_0.Node(b_s_t_8)
    assert len(node_4.value) == 0
    var_10 = b_s_t_8.contains(var_9)
    var_11 = b_s_t_8.__len__()
    assert var_11 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_3.__str__()
    assert var_12 == '[]'

def test_case_1811():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    node_1 = module_0.Node(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.add(var_5)
    assert len(b_s_t_6) == 1
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(b_s_t_8)
    var_9 = b_s_t_8.minValueNode(node_3)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_9.value).__module__}.{type(var_9.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_9.value) == 0
    assert var_9.left is None
    assert var_9.right is None
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    bool_3 = False
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.contains(b_s_t_11)
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_12.__len__()
    var_15 = b_s_t_11.contains(var_13)

def test_case_1812():
    str_0 = 'la$?SqMTLtO'
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)

def test_case_1813():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'

def test_case_1814():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(set_0)

def test_case_1815():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_3.remove(var_5)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.isValid()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    node_2 = module_0.Node(b_s_t_8)
    assert len(node_2.value) == 0
    var_10 = b_s_t_8.contains(var_9)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_1 = b_s_t_9.build(set_0)
    var_11 = b_s_t_9.isValid()
    set_1 = set()
    node_4 = module_0.Node(set_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_10.getOrder()
    bool_2 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.remove(bool_2)

def test_case_1816():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    node_1 = module_0.Node(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    list_1 = [node_3]
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.add(list_1)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_2)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    none_type_3 = b_s_t_2.build(var_1)
    assert len(b_s_t_2) == 2

def test_case_1817():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    var_5 = var_4.__str__()
    assert var_5 == 'None'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(var_8)
    assert node_4.value == 0

def test_case_1818():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_8 = b_s_t_6.add(none_type_0)
    assert len(b_s_t_6) == 1
    node_1 = module_0.Node(var_7)
    assert node_1.value == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    bool_1 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_9.add(var_11)
    assert len(b_s_t_9) == 1
    var_13 = var_12.__str__()
    assert var_13 == 'None'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_10.__len__()
    assert var_15 == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.getOrder()
    var_17 = b_s_t_11.add(var_16)
    assert len(b_s_t_11) == 1
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_18 = b_s_t_12.__str__()
    assert var_18 == '[]'
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    var_19 = b_s_t_14.__str__()
    assert var_19 == '[]'
    var_20 = b_s_t_14.isValid()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_21 = b_s_t_15.getOrder()

def test_case_1819():
    list_0 = []
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_1820():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    var_2 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    none_type_3 = b_s_t_2.build(b_s_t_4)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    none_type_4 = b_s_t_2.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    none_type_5 = None
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(none_type_5)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.isValid()
    var_9 = b_s_t_7.isValid()
    b_s_t_9 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    none_type_6 = b_s_t_9.build(var_10)
    assert len(b_s_t_9) == 2
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.isValid()
    var_12 = b_s_t_10.__len__()
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.getOrder()
    var_14 = b_s_t_10.__len__()

def test_case_1821():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(b_s_t_2)
    node_2 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_2 = b_s_t_3.build(var_3)
    assert len(b_s_t_3) == 2
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder(none_type_3)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_6 = module_0.BST()

def test_case_1822():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.isValid()
    var_8 = b_s_t_9.__len__()
    assert var_8 == 0
    none_type_0 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.remove(none_type_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_1 = b_s_t_10.build(b_s_t_12)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_13 = module_0.BST()
    var_11 = b_s_t_13.__len__()
    none_type_2 = None
    b_s_t_14 = module_0.BST()
    var_12 = b_s_t_14.remove(none_type_2)
    b_s_t_15 = module_0.BST()
    var_13 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    none_type_3 = b_s_t_14.build(b_s_t_16)
    var_14 = b_s_t_14.contains(none_type_2)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    b_s_t_17 = module_0.BST()
    b_s_t_18 = module_0.BST()
    none_type_5 = None
    b_s_t_19 = module_0.BST()
    var_15 = b_s_t_19.remove(none_type_5)
    bool_2 = False
    b_s_t_20 = module_0.BST()
    var_16 = b_s_t_20.remove(bool_2)
    var_17 = b_s_t_20.__str__()
    assert var_17 == '[]'

def test_case_1823():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_1 = [node_1]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.add(list_1)
    assert len(b_s_t_1) == 1
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value == []
    var_6 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.isValid()
    var_8 = var_7.__str__()

def test_case_1824():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    list_0 = [var_0, var_0]
    none_type_0 = b_s_t_0.build(list_0)
    assert len(b_s_t_0) == 2
    set_0 = set()
    node_0 = module_0.Node(set_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_3.__str__()
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_2)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_7 = b_s_t_5.isValid()
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_5 = b_s_t_6.build(b_s_t_8)
    var_10 = var_9.__str__()
    none_type_6 = b_s_t_6.build(b_s_t_8)
    b_s_t_9 = module_0.BST()
    bool_2 = False
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_3)
    var_11 = b_s_t_9.__str__()
    none_type_7 = b_s_t_9.build(var_11)
    assert len(b_s_t_9) == 2
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    set_1 = set()
    node_6 = module_0.Node(set_1)
    b_s_t_10 = module_0.BST()
    none_type_8 = b_s_t_10.build(set_1)
    var_12 = b_s_t_10.__str__()

def test_case_1825():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'

def test_case_1826():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'

def test_case_1827():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    node_1 = module_0.Node(b_s_t_7)
    assert len(node_1.value) == 0
    bool_1 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    var_11 = b_s_t_10.add(var_10)
    assert len(b_s_t_10) == 1
    node_2 = module_0.Node(var_10)
    assert node_2.value == []
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_1 = b_s_t_11.build(set_0)
    none_type_2 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.remove(none_type_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_13 = b_s_t_14.contains(b_s_t_14)
    var_14 = b_s_t_14.__str__()
    assert var_14 == '[]'
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_15 = b_s_t_15.isValid()
    node_5 = module_0.Node(b_s_t_15)
    assert len(node_5.value) == 0
    var_16 = b_s_t_15.contains(var_15)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    none_type_4 = b_s_t_16.build(b_s_t_16)
    var_17 = b_s_t_16.__str__()
    assert var_17 == '[]'

def test_case_1828():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_1829():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.getOrder(none_type_0)
    var_4 = b_s_t_1.isValid()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.contains(b_s_t_4)
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_3 = b_s_t_5.build(b_s_t_7)
    var_10 = b_s_t_5.contains(none_type_2)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.isValid()
    node_1 = module_0.Node(b_s_t_8)
    var_12 = b_s_t_8.contains(var_11)
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.isValid()

def test_case_1830():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    node_2 = module_0.Node(list_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    var_8 = var_7.__str__()
    var_9 = b_s_t_6.contains(b_s_t_6)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.minValueNode(node_3)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert var_10.value == [False, False, False, False]
    assert var_10.left is None
    assert var_10.right is None
    var_11 = b_s_t_8.add(var_10)
    assert len(b_s_t_8) == 1
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.remove(none_type_2)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.remove(bool_3)
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = b_s_t_11.build(b_s_t_11)

def test_case_1831():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.minValueNode(node_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert var_2.value == [False, False, False, False]
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    var_6 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    var_10 = var_9.__str__()

def test_case_1832():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.add(none_type_1)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_4 = module_0.Node(var_4)
    assert node_4.value is None
    set_0 = set()
    node_5 = module_0.Node(set_0)
    var_5 = var_3.__len__()
    assert var_5 == 0
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_2)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_4 = b_s_t_4.build(b_s_t_6)
    var_9 = var_8.__str__()
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.isValid()
    set_1 = set()
    node_6 = module_0.Node(set_1)
    b_s_t_8 = module_0.BST()
    none_type_5 = b_s_t_8.build(set_1)
    var_11 = b_s_t_8.__str__()
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.isValid()
    var_13 = var_12.__str__()
    var_14 = b_s_t_9.contains(b_s_t_9)
    set_2 = set()
    node_7 = module_0.Node(set_2)
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.__str__()
    var_16 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_12.isValid()
    node_8 = module_0.Node(b_s_t_12)

def test_case_1833():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    var_10 = b_s_t_10.add(var_9)
    assert len(b_s_t_10) == 1
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder()
    var_12 = b_s_t_11.add(var_11)
    assert len(b_s_t_11) == 1
    node_3 = module_0.Node(var_12)
    assert node_3.value is None
    bool_2 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.remove(bool_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_14 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_15 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_0)
    var_16 = b_s_t_16.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_16.isValid()
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    var_18 = b_s_t_17.getOrder()
    b_s_t_18 = module_0.BST()
    assert len(b_s_t_18) == 0
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_1)
    var_19 = b_s_t_18.__str__()
    assert var_19 == '[]'
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_6 = module_0.Node(list_2)
    var_20 = b_s_t_18.isValid()

def test_case_1834():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.isValid()
    node_1 = module_0.Node(b_s_t_6)
    var_8 = b_s_t_6.contains(var_7)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    none_type_2 = b_s_t_7.build(set_0)
    var_9 = b_s_t_7.isValid()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()

def test_case_1835():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_6 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    var_8 = b_s_t_4.add(var_7)
    assert len(b_s_t_4) == 1

def test_case_1836():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    var_4 = b_s_t_3.contains(var_3)
    var_5 = b_s_t_3.__len__()
    b_s_t_4 = module_0.BST()
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_4.__len__()
    b_s_t_5 = module_0.BST()
    var_8 = b_s_t_5.getOrder()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_9 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.getOrder()
    var_11 = b_s_t_7.add(var_10)
    assert len(b_s_t_7) == 1
    var_12 = var_11.__str__()
    assert var_12 == 'None'
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_13 = b_s_t_8.remove(none_type_3)
    b_s_t_9 = module_0.BST()
    var_14 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_4 = b_s_t_8.build(b_s_t_10)
    var_15 = b_s_t_8.contains(none_type_3)
    b_s_t_11 = module_0.BST()
    var_16 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_12.getOrder()
    var_18 = b_s_t_12.add(var_17)
    assert len(b_s_t_12) == 1
    node_2 = module_0.Node(var_17)
    assert node_2.value == []
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_13 = module_0.BST()
    var_19 = b_s_t_13.__str__()
    assert var_19 == '[]'

def test_case_1837():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_1.__len__()
    assert var_4 == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_6 = b_s_t_3.isValid()
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_2 = module_0.Node(bytes_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_5.remove(var_8)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder()
    var_11 = b_s_t_7.add(var_10)
    assert len(b_s_t_7) == 1
    node_6 = module_0.Node(list_1)

def test_case_1838():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_1.__str__()
    assert var_6 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    var_8 = b_s_t_4.contains(node_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_0 = [node_2]
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.add(list_0)
    assert len(b_s_t_6) == 1
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder(none_type_1)
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_9.remove(var_11)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_10.__len__()
    assert var_14 == 0
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'
    bool_1 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_16 = b_s_t_11.remove(bool_1)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.contains(b_s_t_12)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_18 = b_s_t_13.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_13.__len__()
    assert var_19 == 0
    var_20 = b_s_t_12.contains(var_18)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_21 = b_s_t_14.isValid()
    node_6 = module_0.Node(b_s_t_14)
    assert len(node_6.value) == 0
    var_22 = b_s_t_14.contains(var_21)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_2)
    var_23 = b_s_t_15.__str__()
    assert var_23 == '[]'
    var_24 = b_s_t_15.isValid()

def test_case_1839():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_0)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_1 = module_0.Node(b_s_t_6)
    assert len(node_1.value) == 0
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder(none_type_2)
    var_8 = b_s_t_7.isValid()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = b_s_t_9.build(b_s_t_9)
    none_type_5 = None
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.remove(none_type_5)
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.__str__()
    assert var_12 == '[]'
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_12 = module_0.BST()
    none_type_6 = b_s_t_12.build(set_0)

def test_case_1840():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    list_1 = [none_type_2]
    var_1 = b_s_t_2.remove(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_5.build(set_0)
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    var_9 = b_s_t_6.isValid()

def test_case_1841():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = b_s_t_1.contains(none_type_0)

def test_case_1842():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(set_0)
    var_5 = b_s_t_3.isValid()
    set_1 = set()
    node_4 = module_0.Node(set_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_4.build(set_1)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.minValueNode(node_5)
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_9.__len__()
    assert var_14 == 0
    var_15 = b_s_t_8.contains(var_13)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_2)
    var_16 = b_s_t_10.__str__()
    assert var_16 == '[]'
    bool_5 = False
    list_3 = [bool_5, bool_5, bool_5, bool_5]
    node_8 = module_0.Node(list_3)
    var_17 = b_s_t_10.isValid()
    bool_6 = False
    list_4 = [bool_6, bool_6, bool_6, bool_6]
    node_9 = module_0.Node(list_4)
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_18 = b_s_t_11.getOrder(none_type_3)
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    var_19 = b_s_t_11.isValid()
    bool_7 = True
    node_11 = module_0.Node(bool_7)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0

def test_case_1843():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    var_7 = var_6.__str__()
    assert var_7 == 'None'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    list_1 = [var_10, var_10]
    none_type_0 = b_s_t_6.build(list_1)
    assert len(b_s_t_6) == 2
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    var_12 = var_11.__str__()
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.__len__()
    assert var_13 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(var_13)
    assert node_4.value == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.isValid()
    node_5 = module_0.Node(b_s_t_9)
    assert len(node_5.value) == 0
    var_15 = b_s_t_9.contains(var_14)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    var_16 = b_s_t_10.__str__()
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_3)
    var_17 = b_s_t_10.isValid()

def test_case_1844():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.isValid()
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.minValueNode(node_2)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert var_5.value == [False, False, False, False]
    assert var_5.left is None
    assert var_5.right is None
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    list_2 = [var_7, var_7]
    none_type_0 = b_s_t_5.build(list_2)
    assert len(b_s_t_5) == 2
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    node_3 = module_0.Node(b_s_t_6)
    assert len(node_3.value) == 0

def test_case_1845():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'

def test_case_1846():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.getOrder()
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    none_type_3 = None
    b_s_t_2 = module_0.BST()
    var_3 = b_s_t_2.remove(none_type_3)
    b_s_t_3 = module_0.BST()
    var_4 = var_3.__str__()
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    var_6 = b_s_t_4.contains(var_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_4.remove(var_6)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.isValid()
    node_7 = module_0.Node(b_s_t_6)
    var_9 = b_s_t_6.contains(var_8)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.isValid()
    node_8 = module_0.Node(b_s_t_8)
    var_12 = b_s_t_8.contains(var_11)
    var_13 = b_s_t_8.__str__()
    b_s_t_9 = module_0.BST()
    var_14 = b_s_t_9.getOrder()
    var_15 = b_s_t_9.add(var_14)
    assert len(b_s_t_9) == 1
    bool_2 = False
    b_s_t_10 = module_0.BST()
    var_16 = b_s_t_10.remove(bool_2)
    b_s_t_11 = module_0.BST()
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    var_18 = b_s_t_13.getOrder()
    bool_3 = True
    node_9 = module_0.Node(bool_3)
    b_s_t_14 = module_0.BST()
    var_19 = b_s_t_14.__len__()
    none_type_4 = None
    node_10 = module_0.Node(none_type_4)
    node_11 = module_0.Node(var_19)
    none_type_5 = None
    b_s_t_15 = module_0.BST()
    var_20 = b_s_t_15.remove(none_type_5)
    b_s_t_16 = module_0.BST()
    var_21 = b_s_t_16.getOrder()
    bool_4 = False
    node_12 = module_0.Node(bool_4)
    node_13 = module_0.Node(b_s_t_16)
    var_22 = b_s_t_16.minValueNode(node_13)
    assert f'{type(var_22).__module__}.{type(var_22).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_22.value).__module__}.{type(var_22.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_22.value) == 0
    assert var_22.left is None
    assert var_22.right is None

def test_case_1847():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_1848():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.remove(var_5)

def test_case_1849():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = var_0.__str__()
    var_2 = b_s_t_0.contains(b_s_t_0)
    assert var_2 is False

def test_case_1850():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    list_0 = [none_type_1]
    var_6 = b_s_t_4.remove(list_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.isValid()
    node_5 = module_0.Node(var_8)
    list_2 = [b_s_t_7, b_s_t_4]

def test_case_1851():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    var_3 = b_s_t_2.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_5 = b_s_t_4.add(none_type_0)
    assert len(b_s_t_4) == 1
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_5.build(b_s_t_7)
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    tuple_0 = (var_2, bool_0, bool_1, var_5)

def test_case_1852():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_1)
    var_5 = b_s_t_4.isValid()
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_2)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_7 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_6.add(var_8)
    assert len(b_s_t_6) == 1
    bool_5 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_5)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_8.__len__()
    assert var_12 == 0
    var_13 = b_s_t_8.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1

def test_case_1853():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    var_7 = b_s_t_4.contains(var_6)
    assert var_7 is False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    var_9 = b_s_t_5.contains(var_8)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_5.remove(var_9)

def test_case_1854():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    var_6 = var_5.__str__()
    assert var_6 == 'None'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_8 = b_s_t_4.add(none_type_0)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0

def test_case_1855():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.getOrder()
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_1)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_0)
    var_6 = b_s_t_3.getOrder()
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    list_0 = [var_10, var_10]
    none_type_1 = b_s_t_9.build(list_0)
    assert len(b_s_t_9) == 2

def test_case_1856():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__str__()
    assert var_1 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.getOrder()
    set_1 = set()
    node_2 = module_0.Node(set_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = b_s_t_3.build(set_1)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_9.add(var_11)
    assert len(b_s_t_9) == 1
    node_3 = module_0.Node(var_11)
    assert node_3.value == []
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_8.__str__()
    assert var_14 == '[]'
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.__len__()
    assert var_15 == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    var_16 = b_s_t_12.__str__()
    assert var_16 == '[]'
    none_type_1 = b_s_t_12.build(var_16)
    assert len(b_s_t_12) == 2
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_6 = module_0.Node(bytes_0)
    none_type_2 = None
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_13.remove(none_type_2)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    bool_4 = True
    node_7 = module_0.Node(bool_4)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_18 = b_s_t_15.contains(b_s_t_15)

def test_case_1857():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    list_1 = [var_2, var_2]
    none_type_0 = b_s_t_1.build(list_1)
    assert len(b_s_t_1) == 2
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    var_5 = b_s_t_2.__str__()
    var_6 = var_3.__str__()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_2)
    var_7 = b_s_t_3.__str__()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_3.__len__()
    assert var_8 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.__str__()
    bool_2 = False
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_3)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder(none_type_3)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_13 = b_s_t_9.isValid()
    bool_3 = False
    list_4 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.minValueNode(node_6)

def test_case_1858():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    list_3 = [node_3]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.add(list_3)
    assert len(b_s_t_3) == 1

def test_case_1859():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_3 = var_1.__len__()
    assert var_3 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(b_s_t_2)
    node_4 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    var_6 = b_s_t_4.contains(var_5)
    var_7 = b_s_t_4.__str__()

def test_case_1860():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0

def test_case_1861():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    var_6 = b_s_t_6.isValid()
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder(none_type_1)

def test_case_1862():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)

def test_case_1863():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = b_s_t_1.build(var_1)
    assert len(b_s_t_1) == 2

def test_case_1864():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.getOrder()
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_0)
    var_5 = b_s_t_2.isValid()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(var_6)
    assert node_3.value == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    var_8 = b_s_t_4.add(var_7)
    assert len(b_s_t_4) == 1
    node_5 = module_0.Node(list_0)
    set_1 = set()
    node_6 = module_0.Node(set_1)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.isValid()
    var_11 = b_s_t_5.isValid()
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_1865():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.remove(var_0)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value is None
    set_0 = set()
    node_3 = module_0.Node(set_0)
    var_6 = var_4.__len__()
    assert var_6 == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_5.build(b_s_t_7)
    var_9 = var_8.__str__()
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.isValid()
    node_4 = module_0.Node(b_s_t_8)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.isValid()
    var_12 = var_11.__str__()
    var_13 = b_s_t_9.contains(b_s_t_9)

def test_case_1866():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_4 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_6 = b_s_t_2.minValueNode(node_1)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_6.value).__module__}.{type(var_6.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_6.value) == 0
    assert var_6.left is None
    assert var_6.right is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_3.build(b_s_t_3)
    node_3 = module_0.Node(none_type_1)

def test_case_1867():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = var_0.__len__()
    assert var_1 == 2
    var_2 = var_1.__str__()
    assert var_2 == '2'

def test_case_1868():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_0.__len__()
    assert var_3 == 0
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_4.getOrder(b_s_t_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_0 = module_0.Node(b_s_t_7)
    assert len(node_0.value) == 0
    var_10 = b_s_t_7.contains(var_9)
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    none_type_0 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.remove(none_type_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_1 = b_s_t_8.build(b_s_t_10)
    var_14 = var_13.__str__()
    assert var_14 == '[]'
    none_type_2 = b_s_t_8.build(b_s_t_10)
    var_15 = b_s_t_7.remove(var_9)

def test_case_1869():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    set_1 = set()
    node_2 = module_0.Node(set_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.__str__()
    var_4 = b_s_t_1.__len__()
    assert var_4 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    list_0 = [node_4]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.add(list_0)
    assert len(b_s_t_5) == 1
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__len__()
    assert var_8 == 0
    bool_0 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.__str__()
    var_12 = b_s_t_9.__len__()
    assert var_12 == 0
    var_13 = b_s_t_8.contains(var_11)

def test_case_1870():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_2.remove(var_0)

def test_case_1871():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_4 = b_s_t_1.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_1.getOrder()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_6 = b_s_t_2.remove(bool_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_7 = b_s_t_3.getOrder(none_type_0)
    var_8 = b_s_t_2.getOrder()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_9 = b_s_t_4.__len__()
    assert var_9 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(var_9)
    assert node_3.value == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    var_10 = b_s_t_5.__str__()
    assert var_10 == '[]'
    none_type_2 = b_s_t_5.build(var_10)
    assert len(b_s_t_5) == 2
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.__len__()
    assert var_11 == 0
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_1872():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_1 = b_s_t_4.isValid()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_2 = b_s_t_5.__len__()
    assert var_2 == 0
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    var_3 = b_s_t_6.__str__()
    assert var_3 == '[]'
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_2)
    var_4 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.isValid()
    var_6 = b_s_t_8.__len__()
    assert var_6 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.getOrder()
    var_8 = b_s_t_8.__len__()
    assert var_8 == 0
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_10.build(b_s_t_10)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    b_s_t_11 = module_0.BST()
    list_3 = [none_type_4]
    var_9 = b_s_t_11.remove(list_3)

def test_case_1873():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.add(none_type_1)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0

def test_case_1874():
    pass

def test_case_1875():
    bool_0 = True
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_1876():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    none_type_2 = b_s_t_6.build(set_0)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.contains(b_s_t_9)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'

def test_case_1877():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.isValid()
    var_2 = var_1.__str__()

def test_case_1878():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_4.__len__()
    assert var_4 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.isValid()
    node_3 = module_0.Node(b_s_t_9)
    assert len(node_3.value) == 0
    var_10 = b_s_t_9.contains(var_9)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.remove(bytes_0)

def test_case_1879():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_0)
    assert node_1.value == '[]'
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.contains(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.__len__()
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.getOrder(none_type_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.isValid()
    node_4 = module_0.Node(b_s_t_9)
    var_10 = b_s_t_9.contains(var_9)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_9.remove(var_10)
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.isValid()
    node_6 = module_0.Node(b_s_t_11)
    var_13 = b_s_t_11.contains(var_12)
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    b_s_t_12 = module_0.BST()
    none_type_6 = b_s_t_12.build(b_s_t_12)
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_16 = b_s_t_14.getOrder()
    var_17 = b_s_t_14.add(var_16)
    assert len(b_s_t_14) == 1
    node_8 = module_0.Node(var_16)
    assert node_8.value == []
    var_18 = b_s_t_14.isValid()
    bool_3 = False
    b_s_t_15 = module_0.BST()
    var_19 = b_s_t_15.remove(bool_3)
    b_s_t_16 = module_0.BST()
    b_s_t_17 = module_0.BST()
    var_20 = b_s_t_17.getOrder()
    b_s_t_18 = module_0.BST()
    var_21 = b_s_t_18.getOrder()

def test_case_1880():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.add(list_0)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0
    var_6 = b_s_t_2.isValid()

def test_case_1881():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_0)
    assert node_1.value == '[]'
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_1)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(set_0)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    set_1 = set()
    node_3 = module_0.Node(set_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_4 = module_0.Node(var_5)
    assert node_4.value is None
    set_2 = set()
    node_5 = module_0.Node(set_2)
    var_6 = var_4.__len__()
    assert var_6 == 0
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_4 = b_s_t_4.build(b_s_t_6)
    var_9 = var_8.__str__()

def test_case_1882():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(list_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.minValueNode(node_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert var_3.value == [False, False, False, False]
    assert var_3.left is None
    assert var_3.right is None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.contains(b_s_t_6)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.__len__()
    assert var_10 == 0
    var_11 = b_s_t_6.contains(var_9)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.isValid()
    node_3 = module_0.Node(b_s_t_8)
    assert len(node_3.value) == 0
    var_13 = b_s_t_8.contains(var_12)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    node_4 = module_0.Node(b_s_t_10)
    assert len(node_4.value) == 0
    var_15 = b_s_t_9.contains(node_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    list_2 = [node_5]
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.add(list_2)
    assert len(b_s_t_12) == 1
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_13.__str__()
    assert var_17 == '[]'
    var_18 = b_s_t_13.__len__()
    assert var_18 == 0
    var_19 = b_s_t_13.isValid()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_20 = b_s_t_14.getOrder()
    bool_3 = False
    node_6 = module_0.Node(bool_3)

def test_case_1883():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    list_0 = [var_1, var_1]
    none_type_0 = b_s_t_1.build(list_0)
    assert len(b_s_t_1) == 2
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    var_3 = b_s_t_2.isValid()

def test_case_1884():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_1 = b_s_t_1.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'

def test_case_1885():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_0 = b_s_t_3.build(var_5)
    assert len(b_s_t_3) == 2
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_8 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_3 = module_0.Node(var_9)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_11 = b_s_t_8.add(none_type_3)
    assert len(b_s_t_8) == 1

def test_case_1886():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_2 = module_0.Node(var_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    var_6 = b_s_t_5.contains(var_5)
    assert var_6 is False
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'

def test_case_1887():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.getOrder()
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    var_4 = var_3.__str__()
    var_5 = b_s_t_2.contains(b_s_t_2)
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    var_6 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_7 = b_s_t_5.__str__()
    var_8 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    var_9 = b_s_t_6.getOrder()

def test_case_1888():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.contains(b_s_t_2)
    node_1 = module_0.Node(bool_1)
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.contains(b_s_t_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.__len__()
    assert var_8 == 0
    var_9 = b_s_t_5.contains(var_7)
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    var_13 = b_s_t_9.getOrder(b_s_t_8)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.isValid()
    var_15 = var_14.__str__()
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_3 = module_0.Node(bytes_0)
    none_type_0 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.remove(none_type_0)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_13.__str__()
    assert var_17 == '[]'
    none_type_1 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.getOrder(none_type_1)
    var_19 = b_s_t_14.isValid()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_20 = b_s_t_15.getOrder()
    var_21 = b_s_t_15.add(var_20)
    assert len(b_s_t_15) == 1
    node_4 = module_0.Node(var_21)
    assert node_4.value is None

def test_case_1889():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_6 = b_s_t_3.isValid()
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(var_7)
    assert node_5.value == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    var_11 = b_s_t_6.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.getOrder()

def test_case_1890():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    var_1 = b_s_t_1.contains(var_0)
    assert var_1 is False
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    none_type_2 = b_s_t_2.build(set_0)
    var_2 = b_s_t_2.isValid()
    set_1 = set()
    node_3 = module_0.Node(set_1)

def test_case_1891():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.minValueNode(node_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert var_4.value == [False, False, False, False]
    assert var_4.left is None
    assert var_4.right is None
    var_5 = b_s_t_2.add(var_4)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    var_7 = b_s_t_3.isValid()
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)

def test_case_1892():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_0.contains(b_s_t_0)
    assert var_2 is False

def test_case_1893():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_5 = b_s_t_4.contains(var_4)
    assert var_5 is False
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    set_0 = set()
    node_4 = module_0.Node(set_0)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    node_6 = module_0.Node(b_s_t_9)
    assert len(node_6.value) == 0
    var_10 = b_s_t_8.contains(node_6)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.__str__()
    assert var_12 == '[]'

def test_case_1894():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0

def test_case_1895():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_1 = b_s_t_1.contains(node_1)
    assert var_1 is False
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_0)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_1)
    var_4 = b_s_t_3.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = var_5.__str__()
    assert var_8 == '[]'
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(bool_1)
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.isValid()
    node_2 = module_0.Node(b_s_t_9)
    assert len(node_2.value) == 0
    var_12 = b_s_t_9.contains(var_11)
    var_13 = b_s_t_9.__len__()
    assert var_13 == 0
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.remove(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.contains(b_s_t_11)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_12.__len__()
    assert var_17 == 0
    var_18 = b_s_t_11.contains(var_16)

def test_case_1896():
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1

def test_case_1897():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1898():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_1.isValid()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    node_1 = module_0.Node(var_9)
    assert node_1.value == []
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.isValid()
    node_3 = module_0.Node(b_s_t_10)
    var_12 = b_s_t_10.contains(var_11)
    var_13 = b_s_t_10.__len__()
    b_s_t_11 = module_0.BST()
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.getOrder(none_type_3)
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.isValid()
    node_4 = module_0.Node(b_s_t_13)
    var_16 = b_s_t_11.getOrder()
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_14 = module_0.BST()
    none_type_4 = b_s_t_14.build(set_0)

def test_case_1899():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    list_1 = [none_type_0]
    var_4 = b_s_t_4.remove(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_2)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.isValid()

def test_case_1900():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    node_0 = module_0.Node(b_s_t_4)
    var_4 = b_s_t_3.contains(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.isValid()
    var_7 = b_s_t_5.isValid()
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    var_9 = b_s_t_7.contains(var_8)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_7.remove(var_9)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_9 = module_0.BST()

def test_case_1901():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    bool_2 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_0 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = b_s_t_6.build(b_s_t_8)
    node_2 = module_0.Node(b_s_t_8)
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.getOrder(none_type_2)
    var_8 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_9 = b_s_t_10.__str__()
    assert var_9 == '[]'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_10.__len__()

def test_case_1902():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    var_3 = b_s_t_1.isValid()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(var_4)
    assert node_3.value == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_3.build(set_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.contains(b_s_t_5)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    var_9 = b_s_t_6.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_8.add(var_10)
    assert len(b_s_t_8) == 1
    bool_3 = True
    node_6 = module_0.Node(bool_3)

def test_case_1903():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    var_2 = b_s_t_0.getOrder()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.getOrder()
    var_4 = b_s_t_1.add(var_3)
    assert len(b_s_t_1) == 1
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_2.__len__()
    assert var_6 == 0
    var_7 = b_s_t_2.__str__()
    assert var_7 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_8 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_9 = b_s_t_3.contains(node_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.minValueNode(node_4)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert var_10.value == [False, False, False, False]
    assert var_10.left is None
    assert var_10.right is None
    var_11 = b_s_t_6.add(var_10)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_2)
    var_12 = b_s_t_7.__str__()
    assert var_12 == '[]'
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_7.__len__()
    assert var_13 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.getOrder()
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.remove(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.contains(b_s_t_12)
    var_17 = b_s_t_12.__str__()
    assert var_17 == '[]'
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_18 = b_s_t_13.isValid()
    var_19 = var_18.__str__()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_20 = b_s_t_14.__str__()
    assert var_20 == '[]'
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0

def test_case_1904():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_4.remove(var_7)
    var_9 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_10 = b_s_t_5.__str__()
    assert var_10 == '[]'
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_1 = b_s_t_6.build(set_0)
    var_11 = b_s_t_6.__str__()
    assert var_11 == '[]'

def test_case_1905():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'

def test_case_1906():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    set_1 = set()
    node_1 = module_0.Node(set_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(set_1)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__len__()
    assert var_1 == 0
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(var_3)
    assert node_5.value == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = var_4.__str__()
    assert var_7 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    var_9 = var_8.__str__()
    var_10 = b_s_t_5.contains(b_s_t_5)
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(none_type_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.contains(b_s_t_9)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0

def test_case_1907():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    var_9 = b_s_t_6.contains(var_8)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_6.remove(var_9)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_14 = b_s_t_9.add(none_type_0)
    assert len(b_s_t_9) == 1

def test_case_1908():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(var_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_2.isValid()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_0)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_2)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_1)
    var_8 = b_s_t_5.getOrder()

def test_case_1909():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert var_2.value == [False, False, False, False]
    assert var_2.left is None
    assert var_2.right is None
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.contains(b_s_t_6)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_7.__len__()
    assert var_8 == 0
    var_9 = b_s_t_6.contains(var_7)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    node_4 = module_0.Node(b_s_t_8)
    assert len(node_4.value) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder(none_type_1)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    var_12 = b_s_t_9.isValid()

def test_case_1910():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_0 = module_0.Node(var_6)
    assert node_0.value == []
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_3.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_11 = b_s_t_6.add(none_type_0)
    assert len(b_s_t_6) == 1
    node_2 = module_0.Node(var_10)
    assert node_2.value == '[]'
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    var_16 = b_s_t_10.add(var_15)
    assert len(b_s_t_10) == 1
    node_3 = module_0.Node(var_15)
    assert node_3.value == []
    var_17 = b_s_t_10.isValid()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_18 = b_s_t_11.__len__()
    assert var_18 == 0
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    node_6 = module_0.Node(var_18)
    assert node_6.value == 0
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_19 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_20 = b_s_t_13.getOrder()
    var_21 = b_s_t_13.add(var_20)
    assert len(b_s_t_13) == 1
    node_8 = module_0.Node(var_21)
    assert node_8.value is None

def test_case_1911():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    none_type_2 = b_s_t_3.build(set_0)
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_5 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.isValid()
    var_7 = b_s_t_9.__len__()
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.getOrder()
    var_10 = b_s_t_11.add(var_9)
    assert len(b_s_t_11) == 1
    node_1 = module_0.Node(var_9)
    assert node_1.value == []
    var_11 = b_s_t_11.isValid()
    none_type_3 = None
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.remove(none_type_3)
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.__str__()
    assert var_13 == '[]'
    b_s_t_14 = module_0.BST()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_15 = module_0.BST()
    var_14 = b_s_t_15.__str__()
    assert var_14 == '[]'
    set_1 = set()
    node_3 = module_0.Node(set_1)
    int_0 = -3432

def test_case_1912():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'

def test_case_1913():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(var_0)
    assert node_1.value == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = b_s_t_1.add(var_2)
    assert len(b_s_t_1) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0

def test_case_1914():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_1915():
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.contains(b_s_t_3)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_7.getOrder()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    none_type_4 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(none_type_4)
    b_s_t_9 = module_0.BST()
    var_9 = var_8.__str__()
    none_type_5 = None
    node_6 = module_0.Node(none_type_5)
    b_s_t_10 = module_0.BST()
    none_type_6 = b_s_t_10.build(b_s_t_10)
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.__len__()
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    node_9 = module_0.Node(var_10)
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_12.__len__()
    var_13 = b_s_t_12.__str__()
    assert var_13 == '[]'

def test_case_1916():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_2.getOrder(b_s_t_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    var_5 = b_s_t_4.contains(var_4)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_0 = b_s_t_5.build(set_0)
    var_6 = b_s_t_5.isValid()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_6.build(b_s_t_6)

def test_case_1917():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    list_1 = [node_3]
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.add(list_1)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_2)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    list_3 = [none_type_3]
    var_9 = b_s_t_7.remove(list_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    var_11 = b_s_t_8.add(none_type_4)
    assert len(b_s_t_8) == 1
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.remove(bool_2)

def test_case_1918():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_1919():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(var_3)
    assert node_2.value == 0
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(set_0)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    node_4 = module_0.Node(var_7)
    assert node_4.value == []
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.contains(b_s_t_10)
    bool_4 = False
    list_0 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.minValueNode(node_6)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert var_11.value == [False, False, False, False]
    assert var_11.left is None
    assert var_11.right is None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_12 = b_s_t_12.isValid()
    var_13 = var_12.__str__()
    set_1 = set()
    node_7 = module_0.Node(set_1)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_14.__len__()
    assert var_17 == 0
    var_18 = b_s_t_13.__len__()
    assert var_18 == 0

def test_case_1920():
    bool_0 = True
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)

def test_case_1921():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.minValueNode(node_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert var_3.value == [False, False, False, False]
    assert var_3.left is None
    assert var_3.right is None
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_6.getOrder(b_s_t_5)
    none_type_0 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(none_type_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    list_1 = [node_3]
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.add(list_1)
    assert len(b_s_t_10) == 1
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.__str__()
    assert var_12 == '[]'
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_13 = b_s_t_11.add(none_type_2)
    assert len(b_s_t_11) == 1
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_13.__len__()
    assert var_16 == 0
    var_17 = b_s_t_13.__str__()
    assert var_17 == '[]'
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.isValid()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_19 = b_s_t_15.isValid()
    node_6 = module_0.Node(b_s_t_15)
    assert len(node_6.value) == 0
    var_20 = b_s_t_15.contains(var_19)
    var_21 = b_s_t_15.__str__()
    assert var_21 == '[]'

def test_case_1922():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_1)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder()
    var_2 = b_s_t_3.add(var_1)
    assert len(b_s_t_3) == 1
    node_4 = module_0.Node(var_1)
    assert node_4.value == []
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_5 = b_s_t_4.add(none_type_2)
    assert len(b_s_t_4) == 1
    node_6 = module_0.Node(var_4)
    assert node_6.value == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_7 = module_0.Node(b_s_t_6)
    assert len(node_7.value) == 0
    var_8 = b_s_t_6.contains(var_7)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_8 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_6.remove(var_8)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_4 = b_s_t_8.build(b_s_t_10)
    none_type_5 = None
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.remove(none_type_5)
    b_s_t_12 = module_0.BST()
    b_s_t_13 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_1)
    var_13 = b_s_t_13.__str__()
    assert var_13 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_10 = module_0.Node(list_2)
    var_14 = b_s_t_13.isValid()

def test_case_1923():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = var_1.__str__()

def test_case_1924():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()

def test_case_1925():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.add(list_0)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_6.__len__()
    assert var_5 == 0
    var_6 = b_s_t_6.isValid()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_7.remove(var_7)
    var_9 = b_s_t_7.getOrder()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = var_10.__str__()
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    bool_2 = False
    node_4 = module_0.Node(bool_2)
    node_5 = module_0.Node(b_s_t_11)
    assert len(node_5.value) == 0
    var_14 = b_s_t_11.minValueNode(node_5)
    assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_14.value).__module__}.{type(var_14.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_14.value) == 0
    assert var_14.left is None
    assert var_14.right is None
    none_type_5 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.remove(none_type_5)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.__str__()
    assert var_16 == '[]'

def test_case_1926():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_3 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.contains(b_s_t_6)
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(bool_4)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_9.remove(var_7)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.getOrder(none_type_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_10 = b_s_t_12.isValid()
    node_4 = module_0.Node(b_s_t_12)
    assert len(node_4.value) == 0

def test_case_1927():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    list_0 = [node_0]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.add(list_0)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    var_6 = b_s_t_4.isValid()

def test_case_1928():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.isValid()
    var_9 = b_s_t_4.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_12 = b_s_t_7.contains(var_11)
    var_13 = b_s_t_7.__str__()
    assert var_13 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_14 = b_s_t_8.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_16 = b_s_t_9.__str__()
    assert var_16 == '[]'
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    var_17 = b_s_t_9.add(none_type_0)
    assert len(b_s_t_9) == 1
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_18 = b_s_t_10.isValid()
    node_6 = module_0.Node(var_18)
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_19 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_20 = b_s_t_12.__str__()
    assert var_20 == '[]'
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    var_21 = b_s_t_12.add(none_type_1)
    assert len(b_s_t_12) == 1
    node_9 = module_0.Node(var_20)
    assert node_9.value == '[]'

def test_case_1929():
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_1 = module_0.Node(b_s_t_0)
    assert len(node_1.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    node_4 = module_0.Node(b_s_t_4)
    assert len(node_4.value) == 0
    var_8 = b_s_t_4.contains(var_7)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_5.build(b_s_t_5)
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    var_10 = b_s_t_6.isValid()

def test_case_1930():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_5)
    assert node_1.value is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_6 = var_4.__len__()
    assert var_6 == 0
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_5.build(b_s_t_5)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(bytes_0)

def test_case_1931():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.isValid()
    var_6 = var_5.__str__()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(bool_2)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    none_type_2 = b_s_t_9.build(set_0)

def test_case_1932():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_8.build(b_s_t_8)
    node_4 = module_0.Node(none_type_1)
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.getOrder()
    var_7 = b_s_t_9.add(var_6)
    assert len(b_s_t_9) == 1
    node_5 = module_0.Node(var_7)
    assert node_5.value is None
    b_s_t_10 = module_0.BST()
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_0)
    b_s_t_11 = module_0.BST()
    var_8 = b_s_t_11.minValueNode(node_6)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert var_8.value == [False, False, False, False]
    assert var_8.left is None
    assert var_8.right is None
    var_9 = b_s_t_11.add(var_8)
    assert len(b_s_t_11) == 1
    b_s_t_12 = module_0.BST()
    var_10 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_1)
    var_11 = b_s_t_13.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_13.isValid()

def test_case_1933():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_6 = b_s_t_10.__len__()
    assert var_6 == 0
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_7 = b_s_t_11.remove(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_8 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_3 = b_s_t_11.build(b_s_t_13)
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    b_s_t_14 = module_0.BST()
    var_10 = b_s_t_14.__str__()
    assert var_10 == '[]'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_11 = b_s_t_14.add(none_type_4)
    assert len(b_s_t_14) == 1
    node_5 = module_0.Node(var_10)
    assert node_5.value == '[]'
    b_s_t_15 = module_0.BST()
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_0)
    var_12 = b_s_t_15.__str__()
    assert var_12 == '[]'
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    b_s_t_16 = module_0.BST()
    var_13 = b_s_t_15.__len__()
    none_type_6 = None
    b_s_t_17 = module_0.BST()
    var_14 = b_s_t_17.remove(none_type_6)
    b_s_t_18 = module_0.BST()
    var_15 = b_s_t_18.getOrder()
    b_s_t_19 = module_0.BST()
    none_type_7 = b_s_t_17.build(b_s_t_19)
    var_16 = b_s_t_17.contains(none_type_6)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_1)
    bool_5 = False
    b_s_t_20 = module_0.BST()
    var_17 = b_s_t_20.remove(bool_5)
    b_s_t_21 = module_0.BST()
    var_18 = b_s_t_21.contains(b_s_t_21)
    node_9 = module_0.Node(bool_5)

def test_case_1934():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_1 = [node_2]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.add(list_1)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_4.isValid()

def test_case_1935():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(none_type_0)
    assert var_0 is False

def test_case_1936():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    var_7 = var_6.__str__()
    var_8 = b_s_t_4.contains(b_s_t_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_6.__len__()
    assert var_10 == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.isValid()
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.remove(none_type_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_2 = b_s_t_8.build(b_s_t_10)
    var_14 = b_s_t_8.contains(none_type_1)

def test_case_1937():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None

def test_case_1938():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_3 = b_s_t_1.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    var_5 = b_s_t_4.add(none_type_3)
    assert len(b_s_t_4) == 1
    node_5 = module_0.Node(var_4)
    assert node_5.value == '[]'
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_6 = module_0.Node(bytes_0)
    bool_0 = True
    node_7 = module_0.Node(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    bool_1 = True
    node_9 = module_0.Node(bool_1)
    none_type_5 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_5)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = var_7.__str__()
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    var_12 = var_11.__str__()
    assert var_12 == '[]'

def test_case_1939():
    int_0 = 342
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(int_0)

def test_case_1940():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_3.getOrder(b_s_t_2)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_7.remove(var_7)
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_1)
    var_11 = b_s_t_8.isValid()

def test_case_1941():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    var_2 = b_s_t_1.isValid()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(list_0)

def test_case_1942():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_1 = module_0.Node(var_2)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    none_type_2 = b_s_t_6.build(var_5)
    assert len(b_s_t_6) == 2

def test_case_1943():
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bytes_0)

def test_case_1944():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_0 = [node_1]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.add(list_0)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    var_6 = b_s_t_3.isValid()
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    none_type_3 = b_s_t_4.build(b_s_t_6)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.remove(bool_0)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.isValid()
    var_12 = var_11.__str__()
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_9.__len__()
    var_15 = b_s_t_9.__str__()
    assert var_15 == '[]'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_10 = module_0.BST()
    var_16 = b_s_t_10.__len__()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    b_s_t_11 = module_0.BST()
    var_17 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_18 = b_s_t_12.isValid()
    var_19 = b_s_t_11.isValid()

def test_case_1945():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()

def test_case_1946():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(list_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.minValueNode(node_2)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert var_5.value == [False, False, False, False]
    assert var_5.left is None
    assert var_5.right is None
    bool_3 = True
    node_3 = module_0.Node(bool_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_6.build(b_s_t_8)
    var_8 = b_s_t_6.contains(none_type_1)
    bool_5 = False
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.remove(bool_5)
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.contains(b_s_t_10)
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_11.__len__()
    var_13 = b_s_t_10.contains(var_11)
    b_s_t_12 = module_0.BST()
    bool_6 = False
    list_3 = [bool_6, bool_6, bool_6, bool_6]
    node_5 = module_0.Node(list_3)
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.getOrder()
    int_0 = -1744

def test_case_1947():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_1 = module_0.Node(var_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.minValueNode(node_5)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert var_5.value == [False, False, False, False]
    assert var_5.left is None
    assert var_5.right is None
    var_6 = b_s_t_8.add(var_5)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_1)
    var_7 = b_s_t_9.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.getOrder()
    var_11 = b_s_t_11.add(var_10)
    assert len(b_s_t_11) == 1
    node_7 = module_0.Node(var_10)
    assert node_7.value == []
    var_12 = b_s_t_11.isValid()
    bool_4 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.remove(bool_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_14 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_15 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_16 = b_s_t_16.isValid()
    node_8 = module_0.Node(b_s_t_16)
    assert len(node_8.value) == 0
    var_17 = b_s_t_16.contains(var_16)
    set_0 = set()
    node_9 = module_0.Node(set_0)
    b_s_t_17 = module_0.BST()
    assert len(b_s_t_17) == 0
    none_type_2 = b_s_t_17.build(set_0)
    var_18 = b_s_t_17.isValid()

def test_case_1948():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    node_2 = module_0.Node(node_1)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_4.build(b_s_t_4)
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.remove(none_type_4)
    b_s_t_6 = module_0.BST()
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.contains(b_s_t_7)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(none_type_5)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.getOrder()
    bool_2 = False
    node_5 = module_0.Node(bool_2)
    node_6 = module_0.Node(b_s_t_9)
    var_11 = b_s_t_9.minValueNode(node_6)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_11.value).__module__}.{type(var_11.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_11.value) == 0
    assert var_11.left is None
    assert var_11.right is None
    b_s_t_10 = module_0.BST()
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_0)
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_10.isValid()

def test_case_1949():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_2 = module_0.Node(var_6)
    assert node_2.value == []
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_4.__str__()
    assert var_9 == '[]'
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.isValid()
    var_11 = var_10.__str__()
    var_12 = b_s_t_7.contains(b_s_t_7)
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_9.__len__()
    var_15 = b_s_t_9.__str__()
    assert var_15 == '[]'

def test_case_1950():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    var_3 = var_2.__str__()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    assert var_5 is False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.minValueNode(node_4)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert var_8.value == [False, False, False, False]
    assert var_8.left is None
    assert var_8.right is None
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_8.add(var_10)
    assert len(b_s_t_8) == 1
    node_5 = module_0.Node(var_11)
    assert node_5.value is None

def test_case_1951():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    node_6 = module_0.Node(var_4)
    assert node_6.value == 0
    none_type_1 = None
    node_7 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    var_6 = b_s_t_4.remove(var_5)
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    var_10 = b_s_t_6.add(var_9)
    assert len(b_s_t_6) == 1
    node_8 = module_0.Node(var_9)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_7.build(b_s_t_9)
    node_9 = module_0.Node(b_s_t_9)
    set_1 = set()
    node_10 = module_0.Node(set_1)
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.__str__()
    var_14 = b_s_t_10.getOrder()
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    var_15 = b_s_t_11.remove(none_type_4)
    b_s_t_12 = module_0.BST()
    bool_3 = True
    node_11 = module_0.Node(bool_3)
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.contains(b_s_t_13)
    var_17 = b_s_t_13.__str__()
    var_18 = b_s_t_3.__str__()

def test_case_1952():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_4 = b_s_t_3.add(none_type_1)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_4 = module_0.Node(b_s_t_4)
    assert len(node_4.value) == 0
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    node_6 = module_0.Node(node_5)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1
    node_7 = module_0.Node(var_7)
    assert node_7.value is None

def test_case_1953():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_5.build(set_0)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'

def test_case_1954():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_0 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    var_1 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.getOrder()
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.contains(b_s_t_7)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    var_10 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    node_7 = module_0.Node(b_s_t_10)
    assert len(node_7.value) == 0
    var_12 = b_s_t_9.contains(node_7)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.__len__()
    assert var_13 == 0
    var_14 = b_s_t_12.add(var_13)
    assert len(b_s_t_12) == 1
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.isValid()
    node_9 = module_0.Node(b_s_t_13)
    assert len(node_9.value) == 0
    var_16 = b_s_t_13.contains(var_15)
    set_1 = set()
    node_10 = module_0.Node(set_1)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    none_type_5 = b_s_t_14.build(set_1)
    var_17 = b_s_t_14.isValid()
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_18 = b_s_t_15.isValid()

def test_case_1955():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = var_1.__str__()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder(none_type_0)

def test_case_1956():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_0 = [node_1]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.add(list_0)
    assert len(b_s_t_5) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    var_7 = b_s_t_6.contains(var_6)
    var_8 = b_s_t_6.__len__()
    assert var_8 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.__len__()
    assert var_10 == 0
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    var_12 = var_9.__str__()
    assert var_12 == '[]'
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder(none_type_1)
    var_14 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    node_3 = module_0.Node(b_s_t_10)
    assert len(node_3.value) == 0
    var_16 = b_s_t_9.contains(node_3)
    node_4 = module_0.Node(node_3)

def test_case_1957():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = var_0.__str__()
    var_2 = b_s_t_0.contains(b_s_t_0)
    assert var_2 is False
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'
    var_8 = var_5.__str__()
    assert var_8 == '[]'
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_9 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    var_12 = var_11.__str__()
    assert var_12 == '[]'

def test_case_1958():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.getOrder()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    list_0 = [none_type_2]
    var_8 = b_s_t_7.remove(list_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    list_1 = [var_9, var_9]
    none_type_3 = b_s_t_8.build(list_1)
    assert len(b_s_t_8) == 2

def test_case_1959():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_3 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.remove(none_type_3)
    b_s_t_4 = module_0.BST()
    var_3 = var_2.__str__()
    none_type_4 = None
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.remove(none_type_4)
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_7.__len__()
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = var_6.__str__()
    assert var_9 == '[]'
    none_type_5 = None
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.remove(none_type_5)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    none_type_6 = b_s_t_8.build(b_s_t_10)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    none_type_7 = b_s_t_8.build(b_s_t_10)
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    none_type_8 = None
    node_2 = module_0.Node(none_type_8)
    var_14 = b_s_t_11.add(none_type_8)
    assert len(b_s_t_11) == 1
    none_type_9 = None
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.getOrder(none_type_9)
    var_16 = b_s_t_12.isValid()
    b_s_t_13 = module_0.BST()

def test_case_1960():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_4.build(b_s_t_4)
    node_3 = module_0.Node(none_type_1)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_3 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    none_type_4 = b_s_t_5.build(b_s_t_7)
    var_5 = b_s_t_5.contains(none_type_3)
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_4 = module_0.Node(bytes_0)
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.isValid()
    node_5 = module_0.Node(b_s_t_9)
    var_8 = b_s_t_9.contains(var_7)
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.__len__()
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    node_6 = module_0.Node(b_s_t_12)
    var_12 = b_s_t_11.contains(node_6)
    b_s_t_13 = module_0.BST()

def test_case_1961():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    set_0 = set()
    node_2 = module_0.Node(set_0)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bytes_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_3 = b_s_t_3.contains(var_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_3.remove(var_3)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_5.build(b_s_t_7)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    none_type_3 = b_s_t_5.build(b_s_t_7)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.isValid()
    node_5 = module_0.Node(b_s_t_8)
    var_9 = b_s_t_8.contains(var_8)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_9 = module_0.BST()
    none_type_5 = b_s_t_9.build(b_s_t_9)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    bool_2 = False
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.remove(bool_2)
    none_type_6 = None
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.getOrder(none_type_6)
    var_14 = b_s_t_11.getOrder()
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.isValid()
    var_16 = b_s_t_13.__len__()
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.__len__()

def test_case_1962():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)

def test_case_1963():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    list_0 = [var_3, var_3]
    none_type_1 = b_s_t_4.build(list_0)
    assert len(b_s_t_4) == 2
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.isValid()
    node_1 = module_0.Node(b_s_t_7)
    assert len(node_1.value) == 0
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = b_s_t_8.build(b_s_t_8)
    node_3 = module_0.Node(none_type_3)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    b_s_t_9 = module_0.BST()
    var_6 = b_s_t_9.__str__()
    var_7 = b_s_t_9.remove(var_6)
    var_8 = b_s_t_9.getOrder()
    none_type_6 = None
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.remove(none_type_6)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    none_type_7 = b_s_t_10.build(b_s_t_12)
    none_type_8 = None
    node_5 = module_0.Node(none_type_8)
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    none_type_9 = None
    b_s_t_13 = module_0.BST()
    var_11 = b_s_t_13.remove(none_type_9)
    b_s_t_14 = module_0.BST()
    var_12 = var_11.__str__()

def test_case_1964():
    int_0 = 2705
    bytes_0 = b'\xec\xe5\xcb-,|\xb4_\xbb\xdar\xd1\xee'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bytes_0)

def test_case_1965():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    var_6 = b_s_t_4.getOrder()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_4 = b_s_t_7.build(b_s_t_7)
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    node_4 = module_0.Node(b_s_t_9)
    var_8 = b_s_t_8.contains(node_4)
    b_s_t_10 = module_0.BST()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_11 = module_0.BST()
    none_type_6 = b_s_t_11.build(b_s_t_11)
    node_6 = module_0.Node(none_type_5)

def test_case_1966():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()

def test_case_1967():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    node_1 = module_0.Node(bool_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.getOrder()
    set_1 = set()
    node_4 = module_0.Node(set_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = b_s_t_3.build(set_1)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = True
    node_5 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.contains(b_s_t_6)
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.contains(b_s_t_9)
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder(none_type_3)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_1)
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_9 = module_0.Node(list_2)
    var_12 = b_s_t_12.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_12.isValid()

def test_case_1968():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    none_type_1 = b_s_t_2.build(var_1)
    assert len(b_s_t_2) == 2
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_2)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(bool_2)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder(none_type_3)

def test_case_1969():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.getOrder()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bytes_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value == []
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.isValid()
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.remove(bool_2)
    var_10 = b_s_t_10.__len__()
    assert var_10 == 0

def test_case_1970():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = b_s_t_8.build(b_s_t_8)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.minValueNode(node_5)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert var_8.value == [False, False, False, False]
    assert var_8.left is None
    assert var_8.right is None
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.getOrder()
    var_10 = b_s_t_10.add(var_9)
    assert len(b_s_t_10) == 1
    node_6 = module_0.Node(var_10)
    assert node_6.value is None
    set_1 = set()
    node_7 = module_0.Node(set_1)
    var_11 = var_9.__len__()
    assert var_11 == 0

def test_case_1971():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    var_2 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.remove(bool_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder(none_type_1)
    var_5 = b_s_t_1.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.getOrder()
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_11 = b_s_t_5.getOrder(none_type_2)
    var_12 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_13 = b_s_t_6.__str__()
    assert var_13 == '[]'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    var_14 = b_s_t_5.remove(none_type_2)

def test_case_1972():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__str__()
    assert var_1 == '[]'
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.getOrder()
    bool_2 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.contains(b_s_t_8)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_2 = module_0.Node(list_1)
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    bool_5 = False
    list_2 = [bool_5, bool_5, bool_5, bool_5]
    node_3 = module_0.Node(list_2)
    var_12 = b_s_t_10.isValid()

def test_case_1973():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_3 = b_s_t_3.contains(var_2)
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    var_5 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    assert len(node_1.value) == 1
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.contains(b_s_t_6)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = var_9.__str__()
    assert var_10 == '[]'

def test_case_1974():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = var_2.__str__()
    assert var_5 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    var_8 = b_s_t_4.add(var_7)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_7)
    assert node_1.value == []
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder(none_type_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_10 = b_s_t_5.isValid()
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_5 = b_s_t_6.build(b_s_t_6)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    node_6 = module_0.Node(node_5)
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    b_s_t_7 = module_0.BST()
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    none_type_7 = None
    node_8 = module_0.Node(none_type_7)
    b_s_t_8 = module_0.BST()

def test_case_1975():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    node_1 = module_0.Node(none_type_0)
    var_4 = b_s_t_1.remove(node_1)

def test_case_1976():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    var_5 = b_s_t_1.__len__()
    assert var_5 == 0
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = var_6.__str__()

def test_case_1977():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_1 = b_s_t_1.contains(node_0)
    assert var_1 is False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0

def test_case_1978():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__len__()
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    var_6 = var_3.__str__()
    assert var_6 == '[]'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_3.remove(var_7)
    b_s_t_4 = module_0.BST()
    node_3 = module_0.Node(b_s_t_4)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_9 = b_s_t_5.getOrder(none_type_3)
    var_10 = b_s_t_5.isValid()
    set_0 = set()

def test_case_1979():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.contains(b_s_t_3)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_3 = b_s_t_6.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_6.__len__()
    assert var_4 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_7.__len__()
    assert var_6 == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    var_8 = var_5.__str__()
    assert var_8 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    node_3 = module_0.Node(b_s_t_8)
    assert len(node_3.value) == 0
    var_10 = b_s_t_8.contains(var_9)
    set_1 = set()
    node_4 = module_0.Node(set_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_9.build(set_1)
    var_11 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_10.__len__()
    assert var_13 == 0
    var_14 = b_s_t_10.__str__()
    assert var_14 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.isValid()
    node_5 = module_0.Node(b_s_t_12)
    assert len(node_5.value) == 0
    var_17 = b_s_t_12.contains(var_16)
    var_18 = b_s_t_12.__str__()
    assert var_18 == '[]'

def test_case_1980():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0

def test_case_1981():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.contains(b_s_t_2)
    node_0 = module_0.Node(bool_0)

def test_case_1982():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    var_5 = b_s_t_2.contains(var_4)
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(b_s_t_3)
    var_6 = b_s_t_3.__str__()
    b_s_t_4 = module_0.BST()
    var_7 = b_s_t_4.__str__()
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_8 = b_s_t_4.add(none_type_2)
    assert len(b_s_t_4) == 1
    node_6 = module_0.Node(var_7)

def test_case_1983():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    none_type_2 = b_s_t_4.build(var_3)
    assert len(b_s_t_4) == 2
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_1)
    var_6 = b_s_t_6.__len__()
    assert var_6 == 0
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = b_s_t_7.build(b_s_t_9)
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    b_s_t_10 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_2)
    var_11 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_13 = b_s_t_12.getOrder()
    var_14 = b_s_t_12.add(var_13)
    assert len(b_s_t_12) == 1
    node_4 = module_0.Node(var_13)
    assert node_4.value == []
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_13.remove(var_15)
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_3)
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.getOrder()
    b_s_t_15 = module_0.BST()
    var_18 = b_s_t_15.isValid()
    var_19 = b_s_t_14.isValid()
    node_7 = module_0.Node(bool_4)

def test_case_1984():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_5 = module_0.Node(var_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.minValueNode(node_6)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert var_4.value == [False, False, False, False]
    assert var_4.left is None
    assert var_4.right is None
    bool_2 = True
    node_7 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__len__()
    assert var_5 == 0
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_5 = b_s_t_6.build(b_s_t_8)
    node_8 = module_0.Node(b_s_t_8)

def test_case_1985():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_4 = b_s_t_4.contains(var_3)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_4.remove(var_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    bool_3 = False
    node_4 = module_0.Node(bool_3)
    node_5 = module_0.Node(b_s_t_8)
    assert len(node_5.value) == 0
    var_10 = b_s_t_8.minValueNode(node_5)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_10.value).__module__}.{type(var_10.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_10.value) == 0
    assert var_10.left is None
    assert var_10.right is None
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    list_1 = [node_6]
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.add(list_1)
    assert len(b_s_t_9) == 1
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_10.__len__()
    assert var_13 == 0
    var_14 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_11.__len__()
    assert var_16 == 0
    var_17 = b_s_t_11.__str__()
    assert var_17 == '[]'

def test_case_1986():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.remove(var_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    var_5 = b_s_t_2.add(var_4)
    assert len(b_s_t_2) == 1
    node_4 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.isValid()
    node_5 = module_0.Node(var_6)
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder(none_type_3)
    var_8 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    set_0 = set()
    node_8 = module_0.Node(set_0)
    var_10 = b_s_t_4.remove(none_type_3)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.minValueNode(node_9)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert var_11.value == [False, False, False, False]
    assert var_11.left is None
    assert var_11.right is None
    var_12 = b_s_t_6.add(var_11)
    assert len(b_s_t_6) == 1
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_10 = module_0.Node(list_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_14 = b_s_t_8.isValid()
    var_15 = b_s_t_7.isValid()

def test_case_1987():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    var_5 = var_4.__str__()
    var_6 = b_s_t_3.contains(b_s_t_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_8 = b_s_t_5.add(none_type_0)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(var_7)
    assert node_1.value == '[]'

def test_case_1988():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.remove(var_3)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.minValueNode(node_2)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert var_5.value == [False, False, False, False]
    assert var_5.left is None
    assert var_5.right is None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_2)
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_10 = b_s_t_6.add(none_type_1)
    assert len(b_s_t_6) == 1
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_12 = b_s_t_8.__str__()
    assert var_12 == '[]'
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.__len__()
    assert var_13 == 0
    var_14 = b_s_t_9.add(var_13)
    assert len(b_s_t_9) == 1
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_2)
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'

def test_case_1989():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    node_1 = module_0.Node(bool_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.isValid()
    node_4 = module_0.Node(b_s_t_5)
    assert len(node_4.value) == 0
    var_4 = b_s_t_5.contains(var_3)
    var_5 = b_s_t_5.__len__()
    assert var_5 == 0
    var_6 = b_s_t_5.add(var_3)
    assert len(b_s_t_5) == 1
    assert len(node_4.value) == 1
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.contains(b_s_t_7)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_0)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_6 = module_0.Node(list_1)
    var_10 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    node_7 = module_0.Node(b_s_t_10)
    assert len(node_7.value) == 0
    var_12 = b_s_t_9.contains(node_7)
    node_8 = module_0.Node(node_7)

def test_case_1990():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.remove(var_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    var_5 = var_4.__str__()
    assert var_5 == '[]'

def test_case_1991():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    var_1 = b_s_t_1.add(var_0)
    assert len(b_s_t_1) == 1
    node_3 = module_0.Node(var_1)
    assert node_3.value is None
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_1)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.contains(b_s_t_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    var_7 = b_s_t_4.contains(var_5)
    var_8 = b_s_t_5.remove(var_1)

def test_case_1992():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(var_3)
    assert node_4.value == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    assert len(node_5.value) == 0
    var_5 = b_s_t_4.contains(var_4)
    assert var_5 is False
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    assert len(node_5.value) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.isValid()
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_6.build(b_s_t_8)

def test_case_1993():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_1.isValid()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    list_1 = [node_2]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.add(list_1)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_3.__len__()
    assert var_7 == 0
    var_8 = b_s_t_3.isValid()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_9 = b_s_t_4.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_4.remove(var_9)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_11 = b_s_t_5.__str__()
    assert var_11 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.__str__()
    assert var_12 == '[]'

def test_case_1994():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)

def test_case_1995():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.remove(var_4)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    var_8 = b_s_t_3.contains(none_type_1)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_9 = b_s_t_6.remove(none_type_3)
    b_s_t_7 = module_0.BST()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.isValid()
    node_3 = module_0.Node(var_11)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.isValid()
    node_4 = module_0.Node(b_s_t_11)
    var_14 = b_s_t_11.contains(var_13)
    b_s_t_12 = module_0.BST()
    var_15 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.getOrder()
    var_17 = b_s_t_13.add(var_16)
    assert len(b_s_t_13) == 1
    node_5 = module_0.Node(var_16)
    assert node_5.value == []
    var_18 = b_s_t_13.isValid()
    bool_2 = False

def test_case_1996():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    node_1 = module_0.Node(node_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.minValueNode(node_2)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert var_2.value == [False, False, False, False]
    assert var_2.left is None
    assert var_2.right is None
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1

def test_case_1997():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    var_3 = b_s_t_0.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_5 = b_s_t_2.contains(node_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.isValid()
    var_8 = var_7.__str__()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    node_3 = module_0.Node(b_s_t_6)
    assert len(node_3.value) == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.__len__()
    assert var_10 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.getOrder()

def test_case_1998():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()

def test_case_1999():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_2000():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = b_s_t_2.build(set_0)
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_3 = module_0.Node(bytes_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    var_7 = var_6.__str__()
    var_8 = b_s_t_5.contains(b_s_t_5)

def test_case_2001():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_6 = b_s_t_2.remove(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    var_8 = b_s_t_4.add(var_7)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(list_0)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    node_5 = module_0.Node(b_s_t_8)
    assert len(node_5.value) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    var_13 = b_s_t_10.add(var_12)
    assert len(b_s_t_10) == 1
    node_6 = module_0.Node(var_12)
    assert node_6.value == []
    bool_3 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.remove(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.getOrder()
    var_17 = b_s_t_13.getOrder(b_s_t_12)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_18 = b_s_t_15.__str__()
    assert var_18 == '[]'
    var_19 = b_s_t_15.__len__()
    assert var_19 == 0
    var_20 = b_s_t_15.__str__()
    assert var_20 == '[]'
    var_21 = var_18.__str__()
    assert var_21 == '[]'
    bool_4 = True
    node_7 = module_0.Node(bool_4)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0

def test_case_2002():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_1.remove(var_3)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_7 = b_s_t_2.getOrder()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_2003():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_1 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.contains(b_s_t_2)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_4 = module_0.Node(b_s_t_4)
    assert len(node_4.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    list_1 = [node_5]
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.add(list_1)
    assert len(b_s_t_8) == 1

def test_case_2004():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_1 = module_0.Node(b_s_t_2)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.remove(var_2)
    var_4 = b_s_t_3.getOrder()
    bool_1 = False
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.contains(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.__len__()
    var_9 = b_s_t_5.contains(var_7)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    none_type_4 = b_s_t_10.build(var_12)
    assert len(b_s_t_10) == 2
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_11 = module_0.BST()
    none_type_5 = b_s_t_11.build(set_0)
    var_13 = b_s_t_11.__str__()
    assert var_13 == '[]'
    bool_3 = False
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.remove(bool_3)

def test_case_2005():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    list_0 = [none_type_1]
    var_0 = b_s_t_1.remove(list_0)

def test_case_2006():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)

def test_case_2007():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_0.add(b_s_t_1)
    assert len(b_s_t_0) == 1
    assert len(node_0.value) == 1
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    node_2 = module_0.Node(bool_1)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_0)
    var_6 = b_s_t_4.isValid()

def test_case_2008():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_4 = b_s_t_4.contains(var_3)
    assert var_4 is False
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_3 = module_0.Node(bytes_0)

def test_case_2009():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'

def test_case_2010():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_4)
    assert node_2.value == []
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_2.__str__()
    assert var_7 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    none_type_0 = b_s_t_5.build(var_8)
    assert len(b_s_t_5) == 2
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.minValueNode(node_4)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert var_9.value == [False, False, False, False]
    assert var_9.left is None
    assert var_9.right is None

def test_case_2011():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    node_1 = module_0.Node(none_type_0)
    var_0 = b_s_t_0.remove(node_1)

def test_case_2012():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    var_3 = b_s_t_1.contains(none_type_1)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.isValid()
    node_3 = module_0.Node(b_s_t_10)
    var_11 = b_s_t_10.contains(var_10)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_11 = module_0.BST()
    none_type_4 = b_s_t_11.build(b_s_t_11)
    var_12 = b_s_t_11.__str__()
    assert var_12 == '[]'
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_5 = module_0.Node(bytes_0)

def test_case_2013():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    var_6 = var_5.__str__()
    assert var_6 == 'None'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    var_8 = b_s_t_6.contains(var_7)
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_0)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_7.add(b_s_t_8)
    assert len(b_s_t_7) == 1
    assert len(node_3.value) == 1
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    list_1 = [none_type_0]
    var_13 = b_s_t_9.remove(list_1)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    bool_4 = True
    node_7 = module_0.Node(bool_4)
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.remove(none_type_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = var_14.__str__()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.getOrder()
    list_2 = [var_16, var_16]
    none_type_3 = b_s_t_12.build(list_2)
    assert len(b_s_t_12) == 2

def test_case_2014():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_2015():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(b_s_t_2)
    node_1 = module_0.Node(none_type_1)
    var_3 = b_s_t_2.remove(node_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_4 = module_0.BST()

def test_case_2016():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_6)
    assert node_2.value == []

def test_case_2017():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(node_0)
    assert len(b_s_t_0) == 1
    var_1 = var_0.__str__()
    assert var_1 == 'None'

def test_case_2018():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    set_0 = set()
    node_1 = module_0.Node(set_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    none_type_2 = b_s_t_2.build(b_s_t_4)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.contains(b_s_t_7)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    none_type_4 = None
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(none_type_4)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    b_s_t_11 = module_0.BST()
    bool_2 = False
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.remove(bool_2)
    set_1 = set()
    node_4 = module_0.Node(set_1)
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.isValid()
    node_5 = module_0.Node(b_s_t_14)
    var_16 = b_s_t_14.contains(var_15)
    var_17 = b_s_t_14.__len__()
    set_2 = set()
    node_6 = module_0.Node(set_2)
    b_s_t_15 = module_0.BST()
    none_type_5 = b_s_t_15.build(set_2)

def test_case_2019():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = b_s_t_2.build(set_0)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(b_s_t_5)
    b_s_t_6 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'

def test_case_2020():
    dict_0 = {}
    int_0 = 4348
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(int_0)
    assert var_0 is False

def test_case_2021():
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bytes_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_2.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    var_9 = b_s_t_7.__len__()
    assert var_9 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_7.__len__()
    assert var_11 == 0
    none_type_0 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.remove(none_type_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    bool_2 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.remove(bool_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.getOrder()
    var_17 = b_s_t_14.getOrder()

def test_case_2022():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2

def test_case_2023():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    bool_2 = False
    node_3 = module_0.Node(bool_2)
    node_4 = module_0.Node(b_s_t_3)
    assert len(node_4.value) == 0
    var_5 = b_s_t_3.minValueNode(node_4)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_5.value).__module__}.{type(var_5.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_5.value) == 0
    assert var_5.left is None
    assert var_5.right is None

def test_case_2024():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.minValueNode(node_2)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert var_5.value == [False, False, False, False]
    assert var_5.left is None
    assert var_5.right is None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_9 = b_s_t_7.contains(var_8)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = b_s_t_8.build(set_0)
    var_10 = b_s_t_8.isValid()
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(none_type_2)
    bool_3 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.remove(bool_3)
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.remove(none_type_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder()
    bool_4 = False
    node_5 = module_0.Node(bool_4)
    node_6 = module_0.Node(b_s_t_12)
    assert len(node_6.value) == 0
    var_16 = b_s_t_12.minValueNode(node_6)
    assert len(var_16.value) == 0

def test_case_2025():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_1 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_5 = b_s_t_4.contains(node_2)
    node_3 = module_0.Node(node_2)

def test_case_2026():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_2.isValid()
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = var_6.__str__()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_6.add(var_8)
    assert len(b_s_t_6) == 1
    node_5 = module_0.Node(var_9)
    assert node_5.value is None
    set_0 = set()
    node_6 = module_0.Node(set_0)
    var_10 = var_8.__len__()
    assert var_10 == 0

def test_case_2027():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_1)
    var_5 = b_s_t_4.getOrder()
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_1 = module_0.Node(bytes_0)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_3 = b_s_t_6.build(b_s_t_8)
    var_8 = b_s_t_6.contains(none_type_2)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)

def test_case_2028():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(node_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_4 = b_s_t_2.contains(node_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_4 = module_0.Node(b_s_t_4)
    assert len(node_4.value) == 0
    var_6 = b_s_t_4.contains(var_5)
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_9 = b_s_t_5.isValid()
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.remove(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_2 = b_s_t_6.build(b_s_t_8)
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    none_type_3 = b_s_t_6.build(b_s_t_8)
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_9.__len__()
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    b_s_t_10 = module_0.BST()
    var_15 = b_s_t_10.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_10.__len__()
    b_s_t_11 = module_0.BST()
    var_17 = b_s_t_11.__str__()
    assert var_17 == '[]'
    none_type_4 = None
    node_8 = module_0.Node(none_type_4)
    var_18 = b_s_t_11.add(none_type_4)
    assert len(b_s_t_11) == 1

def test_case_2029():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_5 = b_s_t_5.isValid()

def test_case_2030():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.minValueNode(node_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert var_3.value == [False, False, False, False]
    assert var_3.left is None
    assert var_3.right is None
    var_4 = b_s_t_1.add(var_3)
    assert len(b_s_t_1) == 1
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_2.remove(var_5)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_7 = b_s_t_3.__len__()
    assert var_7 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(var_7)
    assert node_4.value == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.__str__()
    assert var_8 == '[]'
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_9 = b_s_t_4.add(none_type_2)
    assert len(b_s_t_4) == 1
    node_6 = module_0.Node(var_8)
    assert node_6.value == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_1)
    var_10 = b_s_t_5.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_5.__str__()
    assert var_11 == '[]'
    bool_3 = True
    node_8 = module_0.Node(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    node_9 = module_0.Node(b_s_t_8)
    assert len(node_9.value) == 0
    var_13 = b_s_t_7.contains(node_9)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_2031():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = var_1.__str__()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_4 = b_s_t_3.contains(node_2)
    assert var_4 is False
    node_3 = module_0.Node(node_2)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(set_0)
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_5 = module_0.Node(b_s_t_6)
    assert len(node_5.value) == 0

def test_case_2032():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_2 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_3 = b_s_t_5.contains(var_2)
    var_4 = b_s_t_5.__len__()
    assert var_4 == 0
    var_5 = b_s_t_5.add(var_2)
    assert len(b_s_t_5) == 1
    assert len(node_2.value) == 1
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    bool_1 = False
    node_3 = module_0.Node(bool_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = var_9.__str__()
    assert var_10 == '[]'
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder(none_type_3)
    var_12 = b_s_t_9.isValid()
    bool_2 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.remove(bool_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0

def test_case_2033():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.contains(b_s_t_3)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_4 = b_s_t_4.contains(var_3)
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    var_6 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    assert len(node_3.value) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    bool_2 = False
    node_4 = module_0.Node(bool_2)

def test_case_2034():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_4 = b_s_t_4.minValueNode(node_2)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_4.value) == 0
    assert var_4.left is None
    assert var_4.right is None
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(b_s_t_5)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.add(var_5)
    assert len(b_s_t_6) == 1
    node_5 = module_0.Node(list_0)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    node_6 = module_0.Node(b_s_t_11)
    var_10 = b_s_t_10.contains(node_6)
    node_7 = module_0.Node(node_6)

def test_case_2035():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'

def test_case_2036():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    assert var_4 is False
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0
    var_6 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    assert len(node_1.value) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_7 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.getOrder()
    var_9 = b_s_t_4.add(var_8)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_8)
    assert node_2.value == []
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)

def test_case_2037():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_2 = b_s_t_1.add(none_type_1)
    assert len(b_s_t_1) == 1
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_3 = b_s_t_2.build(b_s_t_4)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    none_type_4 = b_s_t_2.build(b_s_t_4)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.getOrder()
    bool_0 = False
    node_2 = module_0.Node(bool_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_1)
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.isValid()
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_8 = module_0.BST()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_7 = module_0.Node(list_3)
    var_11 = b_s_t_8.isValid()
    var_12 = var_6.__len__()
    assert var_12 == 0

def test_case_2038():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_5 = b_s_t_4.minValueNode(node_2)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_5.value).__module__}.{type(var_5.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_5.value) == 0
    assert var_5.left is None
    assert var_5.right is None
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    list_1 = [none_type_4]
    var_7 = b_s_t_7.remove(list_1)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(bytes_0)
    bool_2 = False
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.contains(b_s_t_10)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    node_7 = module_0.Node(b_s_t_12)
    assert len(node_7.value) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_3)
    var_12 = b_s_t_13.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_13.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_12.add(b_s_t_13)
    assert len(b_s_t_12) == 1
    assert len(node_7.value) == 1
    none_type_5 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_14.remove(none_type_5)

def test_case_2039():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    node_2 = module_0.Node(b_s_t_1)
    assert len(node_2.value) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_4 = b_s_t_2.contains(node_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(node_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    var_6 = var_5.__str__()
    var_7 = b_s_t_5.contains(b_s_t_5)

def test_case_2040():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    var_3 = b_s_t_0.remove(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    list_0 = [none_type_1]
    var_4 = b_s_t_2.remove(list_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    var_6 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    var_8 = b_s_t_4.add(none_type_3)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_5.__len__()
    assert var_10 == 0
    var_11 = b_s_t_5.__str__()
    assert var_11 == '[]'
    var_12 = var_9.__str__()
    assert var_12 == '[]'

def test_case_2041():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder(none_type_2)
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    set_0 = set()
    node_0 = module_0.Node(set_0)
    var_5 = b_s_t_3.remove(none_type_2)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.__len__()
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    node_3 = module_0.Node(var_6)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    node_4 = module_0.Node(b_s_t_7)
    var_8 = b_s_t_6.contains(node_4)
    node_5 = module_0.Node(node_4)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_2.isValid()

def test_case_2042():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    list_0 = [var_1, var_1]
    none_type_0 = b_s_t_2.build(list_0)
    assert len(b_s_t_2) == 2
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_1)
    bool_0 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_0)
    var_4 = b_s_t_4.__str__()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_0 = module_0.Node(b_s_t_5)
    assert len(node_0.value) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_5 = b_s_t_6.__str__()

def test_case_2043():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_1)
    assert node_2.value == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = var_2.__str__()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_5 = module_0.Node(var_5)
    assert node_5.value is None
    set_0 = set()
    node_6 = module_0.Node(set_0)
    var_6 = var_4.__len__()
    assert var_6 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1

def test_case_2044():
    pass

def test_case_2045():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_0 = module_0.Node(var_3)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_3.build(b_s_t_5)
    node_1 = module_0.Node(b_s_t_5)

def test_case_2046():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_1 = module_0.Node(var_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    var_5 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value is None
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder(none_type_1)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.contains(b_s_t_8)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()
    var_11 = b_s_t_9.__len__()
    assert var_11 == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    node_5 = module_0.Node(b_s_t_13)
    assert len(node_5.value) == 0
    var_16 = b_s_t_12.contains(node_5)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_17 = b_s_t_15.getOrder(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    var_18 = b_s_t_15.isValid()

def test_case_2047():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    var_3 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.contains(b_s_t_4)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_5.getOrder()
    set_1 = set()
    node_4 = module_0.Node(set_1)
    b_s_t_6 = module_0.BST()
    none_type_3 = b_s_t_6.build(set_1)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.isValid()
    node_5 = module_0.Node(b_s_t_7)
    var_10 = b_s_t_7.contains(var_9)
    var_11 = b_s_t_7.__len__()
    var_12 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    assert len(node_5.value) == 1
    b_s_t_8 = module_0.BST()
    var_13 = b_s_t_8.getOrder()
    bool_1 = False
    node_6 = module_0.Node(bool_1)
    b_s_t_9 = module_0.BST()
    var_14 = b_s_t_9.getOrder()
    bool_2 = False
    b_s_t_10 = module_0.BST()
    var_15 = b_s_t_10.remove(bool_2)
    b_s_t_11 = module_0.BST()
    var_16 = b_s_t_11.getOrder()
    var_17 = b_s_t_11.add(var_16)
    assert len(b_s_t_11) == 1
    var_18 = var_17.__str__()
    assert var_18 == 'None'
    none_type_4 = None
    b_s_t_12 = module_0.BST()
    var_19 = b_s_t_12.remove(none_type_4)
    b_s_t_13 = module_0.BST()

def test_case_2048():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    var_5 = var_4.__str__()
    assert var_5 == 'None'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.minValueNode(node_1)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert var_9.value == [False, False, False, False]
    assert var_9.left is None
    assert var_9.right is None
    node_2 = module_0.Node(b_s_t_0)
    assert len(node_2.value) == 2

def test_case_2049():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    node_1 = module_0.Node(node_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.contains(node_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    node_4 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    node_6 = module_0.Node(node_5)
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder(none_type_1)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_7 = module_0.Node(list_1)
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    set_0 = set()
    node_9 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.remove(none_type_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_2 = True
    node_10 = module_0.Node(bool_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.contains(b_s_t_12)
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'

def test_case_2050():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)

def test_case_2051():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_4 = b_s_t_5.isValid()
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(bool_2)
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = b_s_t_7.build(b_s_t_9)
    node_3 = module_0.Node(b_s_t_9)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    var_8 = b_s_t_10.isValid()
    bool_4 = False
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.remove(bool_4)
    b_s_t_12 = module_0.BST()
    none_type_3 = None
    b_s_t_13 = module_0.BST()
    var_10 = b_s_t_13.remove(none_type_3)
    b_s_t_14 = module_0.BST()
    bool_5 = True
    node_5 = module_0.Node(bool_5)
    b_s_t_15 = module_0.BST()
    var_11 = b_s_t_15.contains(b_s_t_15)
    b_s_t_16 = module_0.BST()
    var_12 = b_s_t_16.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_16.__len__()
    var_14 = b_s_t_16.__str__()
    assert var_14 == '[]'
    b_s_t_17 = module_0.BST()
    bool_6 = False
    list_3 = [bool_6, bool_6, bool_6, bool_6]
    node_6 = module_0.Node(list_3)
    var_15 = b_s_t_17.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_17.isValid()
    b_s_t_18 = module_0.BST()
    var_17 = b_s_t_18.getOrder()
    var_18 = b_s_t_6.__len__()
    assert var_18 == 0

def test_case_2052():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_3 = b_s_t_2.contains(var_2)
    assert var_3 is False
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    var_5 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    assert len(node_2.value) == 1
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.minValueNode(node_3)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert var_6.value == [False, False, False, False]
    assert var_6.left is None
    assert var_6.right is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    list_2 = [none_type_1]
    var_7 = b_s_t_4.remove(list_2)
    bool_2 = False
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.minValueNode(node_5)
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1

def test_case_2053():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_5 = module_0.Node(list_2)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_6.build(b_s_t_6)
    node_7 = module_0.Node(none_type_1)
    var_7 = b_s_t_6.remove(node_7)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_3)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.minValueNode(node_8)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert var_8.value == [False, False, False, False]
    assert var_8.left is None
    assert var_8.right is None
    var_9 = b_s_t_7.add(var_8)
    assert len(b_s_t_7) == 1
    bool_4 = False
    list_4 = [bool_4, bool_4, bool_4, bool_4]
    node_9 = module_0.Node(list_4)
    var_10 = b_s_t_0.__str__()
    assert var_10 == '[]'

def test_case_2054():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.getOrder()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder(none_type_0)
    var_5 = b_s_t_4.isValid()
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_6.build(set_0)
    var_6 = b_s_t_5.contains(none_type_1)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    bool_1 = False
    node_2 = module_0.Node(bool_1)
    node_3 = module_0.Node(b_s_t_8)
    assert len(node_3.value) == 0
    var_9 = b_s_t_8.minValueNode(node_3)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_9.value).__module__}.{type(var_9.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_9.value) == 0
    assert var_9.left is None
    assert var_9.right is None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()
    var_11 = b_s_t_9.__len__()
    assert var_11 == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    var_13 = b_s_t_9.__len__()
    assert var_13 == 0
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.minValueNode(node_5)
    var_15 = b_s_t_7.minValueNode(node_5)

def test_case_2055():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    var_5 = b_s_t_6.add(var_4)
    assert len(b_s_t_6) == 1
    node_0 = module_0.Node(var_5)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_6 = var_4.__len__()
    assert var_6 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    var_9 = b_s_t_8.add(var_8)
    assert len(b_s_t_8) == 1
    node_2 = module_0.Node(var_8)
    var_10 = b_s_t_8.isValid()
    none_type_0 = None

def test_case_2056():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()

def test_case_2057():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_6 = b_s_t_3.isValid()
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_9 = b_s_t_4.contains(none_type_1)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.getOrder()
    var_11 = b_s_t_7.add(var_10)
    assert len(b_s_t_7) == 1
    node_5 = module_0.Node(list_2)
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.getOrder()
    bool_4 = False
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.remove(bool_4)
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_10.getOrder()
    var_15 = b_s_t_10.add(var_14)
    assert len(b_s_t_10) == 1
    var_16 = var_15.__str__()
    assert var_16 == 'None'
    bool_5 = False
    b_s_t_11 = module_0.BST()
    var_17 = b_s_t_11.remove(bool_5)
    b_s_t_12 = module_0.BST()
    var_18 = b_s_t_12.contains(b_s_t_12)
    b_s_t_13 = module_0.BST()
    var_19 = b_s_t_13.__str__()
    assert var_19 == '[]'
    var_20 = b_s_t_13.__len__()
    var_21 = b_s_t_12.contains(var_19)

def test_case_2058():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_1)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    var_5 = b_s_t_3.isValid()
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(none_type_2)
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(bool_3)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__len__()
    assert var_9 == 0
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_8.__len__()
    assert var_12 == 0
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_13 = b_s_t_9.remove(bytes_0)
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_4 = module_0.Node(list_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    var_15 = b_s_t_11.add(var_14)
    assert len(b_s_t_11) == 1

def test_case_2059():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__len__()
    assert var_4 == 0
    var_5 = b_s_t_5.contains(var_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0

def test_case_2060():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.add(b_s_t_5)
    assert len(b_s_t_4) == 1
    assert len(node_2.value) == 1
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    var_10 = b_s_t_7.isValid()
    node_6 = module_0.Node(bool_2)
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.__len__()
    assert var_11 == 0
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    set_0 = set()
    node_9 = module_0.Node(set_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = b_s_t_11.build(set_0)
    var_12 = b_s_t_10.contains(none_type_3)

def test_case_2061():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    list_0 = [none_type_0]
    var_1 = b_s_t_2.remove(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(var_3)
    assert node_3.value == []
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_4 = module_0.Node(b_s_t_7)
    assert len(node_4.value) == 0
    var_8 = b_s_t_6.contains(node_4)
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.__len__()
    assert var_9 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.__len__()
    assert var_11 == 0
    var_12 = b_s_t_10.contains(var_10)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.remove(bytes_0)
    bool_2 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.remove(bool_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_15 = b_s_t_13.contains(b_s_t_13)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_16 = b_s_t_14.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_14.__len__()
    assert var_17 == 0
    var_18 = b_s_t_13.contains(var_16)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_19 = b_s_t_15.getOrder()
    var_20 = b_s_t_15.add(var_19)
    assert len(b_s_t_15) == 1
    node_6 = module_0.Node(var_20)
    assert node_6.value is None
    set_0 = set()
    node_7 = module_0.Node(set_0)
    var_21 = var_19.__len__()
    assert var_21 == 0

def test_case_2062():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    var_2 = b_s_t_1.isValid()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_5 = module_0.Node(b_s_t_5)
    assert len(node_5.value) == 0
    var_5 = b_s_t_5.contains(var_4)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.isValid()
    node_7 = module_0.Node(b_s_t_8)
    assert len(node_7.value) == 0
    var_10 = b_s_t_8.contains(var_9)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_4 = b_s_t_9.build(b_s_t_9)
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    none_type_5 = None
    node_9 = module_0.Node(none_type_5)
    b_s_t_10 = module_0.BST()
    set_1 = set()
    node_10 = module_0.Node(set_1)
    b_s_t_11 = module_0.BST()
    none_type_6 = b_s_t_11.build(set_1)
    var_12 = b_s_t_10.contains(none_type_5)

def test_case_2063():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_3 = None
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.remove(none_type_3)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    none_type_4 = b_s_t_4.build(b_s_t_6)
    var_6 = b_s_t_4.contains(none_type_3)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.isValid()
    node_0 = module_0.Node(b_s_t_8)
    var_9 = b_s_t_8.contains(var_8)
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.__str__()
    assert var_11 == '[]'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'
    var_13 = b_s_t_10.getOrder()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.remove(bytes_0)
    bytes_1 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_3 = module_0.Node(bytes_1)

def test_case_2064():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    var_3 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    assert len(node_0.value) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_1.__str__()
    assert var_4 == '[]'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = b_s_t_2.build(set_0)
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.contains(b_s_t_4)

def test_case_2065():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    bool_0 = False
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()

def test_case_2066():
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_1 = b_s_t_0.contains(node_1)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_2 = module_0.Node(var_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_0)
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    var_4 = b_s_t_4.isValid()
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    bool_2 = True
    node_6 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    none_type_2 = None
    node_7 = module_0.Node(none_type_2)
    node_8 = module_0.Node(var_7)
    assert node_8.value == 0
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.contains(b_s_t_8)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder(none_type_3)
    var_11 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.isValid()
    node_9 = module_0.Node(b_s_t_10)
    assert len(node_9.value) == 0
    bool_4 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.remove(bool_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0

def test_case_2067():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_1)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    var_8 = b_s_t_5.isValid()
    bool_4 = False
    list_2 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    node_6 = module_0.Node(b_s_t_8)
    assert len(node_6.value) == 0
    var_11 = b_s_t_6.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.__len__()
    assert var_13 == 0
    var_14 = b_s_t_10.contains(var_12)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.isValid()
    var_16 = var_15.__str__()
    set_0 = set()
    node_7 = module_0.Node(set_0)

def test_case_2068():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(set_0)
    var_2 = b_s_t_1.contains(none_type_1)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    list_0 = [node_3]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.add(list_0)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_1)
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_5 = module_0.Node(b_s_t_5)
    assert len(node_5.value) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_2 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_2)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.add(b_s_t_6)
    assert len(b_s_t_5) == 1
    assert len(node_5.value) == 1
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.isValid()
    node_7 = module_0.Node(b_s_t_8)
    assert len(node_7.value) == 0
    var_11 = b_s_t_8.contains(var_10)
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_8.remove(var_11)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.isValid()

def test_case_2069():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.isValid()
    node_2 = module_0.Node(b_s_t_1)
    assert len(node_2.value) == 0
    var_4 = b_s_t_1.contains(var_3)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_3 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_1.remove(var_4)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.minValueNode(node_4)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert var_6.value == [False, False, False, False]
    assert var_6.left is None
    assert var_6.right is None
    var_7 = b_s_t_3.add(var_6)
    assert len(b_s_t_3) == 1

def test_case_2070():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bool_0)
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_1 = module_0.Node(bytes_0)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.contains(node_2)
    var_4 = var_3.__str__()
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_5.build(b_s_t_7)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    none_type_4 = b_s_t_9.build(set_0)
    var_7 = b_s_t_8.contains(none_type_3)

def test_case_2071():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.add(b_s_t_4)
    assert len(b_s_t_3) == 1
    assert len(node_1.value) == 1

def test_case_2072():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.__len__()
    bool_0 = False
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(bool_0)
    b_s_t_5 = module_0.BST()
    none_type_3 = None
    node_1 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.contains(node_1)
    var_5 = var_4.__str__()

def test_case_2073():
    int_0 = 2161
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(int_0)
    assert var_0 is False

def test_case_2074():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    none_type_2 = b_s_t_4.build(set_0)

def test_case_2075():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_1.add(b_s_t_2)
    assert len(b_s_t_1) == 1
    assert len(node_0.value) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_6 = b_s_t_3.contains(var_5)
    var_7 = b_s_t_3.__len__()
    assert var_7 == 0
    bool_1 = True
    node_3 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.__str__()
    assert var_8 == '[]'
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.getOrder()
    var_12 = b_s_t_8.add(var_11)
    assert len(b_s_t_8) == 1
    var_13 = var_12.__str__()
    assert var_13 == 'None'

def test_case_2076():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_1 = module_0.Node(b_s_t_0)
    assert len(node_1.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    node_3 = module_0.Node(b_s_t_4)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder(none_type_3)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(none_type_4)
    b_s_t_7 = module_0.BST()
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.contains(b_s_t_8)
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.remove(none_type_5)
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.getOrder()
    var_12 = b_s_t_11.add(var_11)
    assert len(b_s_t_11) == 1
    node_5 = module_0.Node(var_11)
    assert node_5.value == []
    var_13 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.isValid()
    node_6 = module_0.Node(b_s_t_12)
    var_15 = b_s_t_12.contains(var_14)
    set_0 = set()
    node_7 = module_0.Node(set_0)
    b_s_t_13 = module_0.BST()
    none_type_6 = b_s_t_13.build(set_0)
    var_16 = b_s_t_13.isValid()
    none_type_7 = None
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.getOrder(none_type_7)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_1)
    none_type_8 = None
    node_9 = module_0.Node(none_type_8)
    b_s_t_15 = module_0.BST()

def test_case_2077():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    var_5 = b_s_t_4.contains(var_4)
    assert var_5 is False
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_4.add(var_4)
    assert len(b_s_t_4) == 1
    assert len(node_1.value) == 1
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_7.getOrder(b_s_t_6)
    none_type_0 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_2 = b_s_t_11.build(set_0)
    var_13 = b_s_t_10.contains(none_type_1)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.isValid()
    var_15 = b_s_t_12.__len__()
    assert var_15 == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.getOrder()
    var_17 = b_s_t_12.__len__()
    assert var_17 == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.isValid()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_19 = b_s_t_15.remove(bool_2)
    var_20 = b_s_t_15.__len__()
    assert var_20 == 0
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_21 = b_s_t_16.isValid()

def test_case_2078():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.__len__()
    assert var_0 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    list_0 = [none_type_1]
    var_4 = b_s_t_5.remove(list_0)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    var_7 = b_s_t_8.__str__()
    assert var_7 == '[]'
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_8.__len__()
    assert var_8 == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.__str__()
    assert var_9 == '[]'
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    var_10 = b_s_t_10.add(none_type_4)
    assert len(b_s_t_10) == 1

def test_case_2079():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_0 = b_s_t_3.build(var_5)
    assert len(b_s_t_3) == 2
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_2 = module_0.Node(list_2)
    var_7 = b_s_t_4.isValid()
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_5 = False
    list_4 = [bool_5, bool_5, bool_5, bool_5]
    node_4 = module_0.Node(list_4)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'

def test_case_2080():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    none_type_0 = b_s_t_1.build(var_1)
    assert len(b_s_t_1) == 2
    bool_2 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.contains(b_s_t_3)
    node_2 = module_0.Node(bool_2)
    bool_3 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(bool_3)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__len__()
    assert var_5 == 0
    var_6 = var_5.__str__()
    assert var_6 == '0'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_4 = False
    list_1 = [bool_4, bool_4, bool_4, bool_4]
    node_3 = module_0.Node(list_1)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.isValid()
    bool_5 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_5)

def test_case_2081():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(var_2)
    assert node_4.value == 0
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_3.build(b_s_t_3)
    node_6 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.isValid()
    var_4 = b_s_t_4.__len__()
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_4.__len__()
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.contains(node_7)
    assert var_7 is False
    var_8 = var_7.__str__()
    bool_2 = True
    node_8 = module_0.Node(bool_2)
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    none_type_4 = None
    node_9 = module_0.Node(none_type_4)
    b_s_t_8 = module_0.BST()
    bool_3 = True
    node_10 = module_0.Node(bool_3)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.isValid()
    bool_4 = False
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.remove(bool_4)
    b_s_t_11 = module_0.BST()
    none_type_5 = None
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.remove(none_type_5)
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    none_type_6 = b_s_t_12.build(b_s_t_14)
    var_14 = var_13.__str__()
    assert var_14 == '[]'
    none_type_7 = b_s_t_12.build(b_s_t_14)

def test_case_2082():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.minValueNode(node_2)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'binarySearchTree2.Node'
    assert var_1.value == [False, False, False, False]
    assert var_1.left is None
    assert var_1.right is None
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    none_type_0 = None
    node_4 = module_0.Node(none_type_0)
    node_5 = module_0.Node(var_6)
    assert node_5.value == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.isValid()
    node_6 = module_0.Node(b_s_t_5)
    assert len(node_6.value) == 0
    bool_3 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    bool_4 = True
    node_7 = module_0.Node(bool_4)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_1 = None
    node_8 = module_0.Node(none_type_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0

def test_case_2083():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_1 = module_0.Node(bytes_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_3 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_4 = module_0.Node(b_s_t_2)
    assert len(node_4.value) == 0
    var_3 = b_s_t_1.contains(node_4)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    var_6 = var_5.__str__()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    set_0 = set()
    node_7 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_7.build(set_0)
    var_7 = b_s_t_6.contains(none_type_1)
    none_type_3 = None
    node_8 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = b_s_t_8.build(b_s_t_8)
    b_s_t_9 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_1)
    var_8 = b_s_t_9.__str__()
    assert var_8 == '[]'
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.__len__()

def test_case_2084():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = var_2.__str__()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    bool_1 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    var_13 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.getOrder()
    var_15 = b_s_t_12.add(var_14)
    assert len(b_s_t_12) == 1
    node_3 = module_0.Node(var_15)
    assert node_3.value is None
    set_0 = set()
    node_4 = module_0.Node(set_0)
    var_16 = var_14.__len__()
    assert var_16 == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_17 = b_s_t_13.minValueNode(node_5)
    assert f'{type(var_17).__module__}.{type(var_17).__qualname__}' == 'binarySearchTree2.Node'
    assert var_17.value == [False, False, False, False]
    assert var_17.left is None
    assert var_17.right is None
    none_type_3 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_18 = b_s_t_14.remove(none_type_3)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    var_19 = b_s_t_16.contains(b_s_t_16)
    var_20 = b_s_t_16.__str__()

def test_case_2085():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    list_0 = [var_0, var_0]
    none_type_0 = b_s_t_0.build(list_0)
    assert len(b_s_t_0) == 2
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bytes_0)
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = var_3.__str__()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    var_6 = b_s_t_4.contains(var_5)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(b_s_t_5)
    var_7 = b_s_t_5.__str__()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_6.add(var_8)
    assert len(b_s_t_6) == 1
    node_3 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_10 = b_s_t_7.__str__()
    var_11 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.getOrder()
    bool_3 = False
    list_3 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_3)
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.__str__()
    var_14 = b_s_t_9.getOrder()

def test_case_2086():
    str_0 = "u}wrRds9w'VD2"
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()

def test_case_2087():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_4 = b_s_t_2.add(none_type_0)
    assert len(b_s_t_2) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.remove(var_5)
    var_7 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.isValid()
    node_4 = module_0.Node(b_s_t_4)
    assert len(node_4.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.isValid()
    node_5 = module_0.Node(b_s_t_5)
    assert len(node_5.value) == 0
    var_10 = b_s_t_5.contains(var_9)
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.remove(none_type_2)
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(bool_1)
    var_13 = b_s_t_7.__str__()
    assert var_13 == '[]'
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_14 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.contains(b_s_t_9)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_16 = b_s_t_10.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_10.__len__()
    assert var_17 == 0
    var_18 = b_s_t_9.contains(var_16)

def test_case_2088():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_3)
    assert node_0.value == []
    var_5 = b_s_t_2.isValid()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_2)
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_6.__len__()
    assert var_10 == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.getOrder()
    var_12 = b_s_t_7.add(var_11)
    assert len(b_s_t_7) == 1
    node_4 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.__str__()
    assert var_13 == '[]'
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    var_14 = b_s_t_8.add(none_type_3)
    assert len(b_s_t_8) == 1
    var_15 = b_s_t_8.__len__()
    assert var_15 == 1
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_6 = module_0.Node(bytes_0)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    node_8 = module_0.Node(node_7)
    bool_2 = True
    node_9 = module_0.Node(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_2089():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_3 = b_s_t_1.contains(node_2)
    node_3 = module_0.Node(node_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_4 = module_0.Node(b_s_t_3)
    assert len(node_4.value) == 0
    var_5 = b_s_t_3.contains(var_4)
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    var_7 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    assert len(node_4.value) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    assert len(node_5.value) == 0
    var_9 = b_s_t_4.contains(var_8)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_10 = b_s_t_5.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_5.__len__()
    assert var_11 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_12 = b_s_t_6.getOrder()
    var_13 = b_s_t_6.add(var_12)
    assert len(b_s_t_6) == 1
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_14 = b_s_t_7.remove(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_15 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = b_s_t_7.build(b_s_t_9)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_1)
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    var_16 = b_s_t_10.getOrder(none_type_3)
    none_type_4 = None
    node_7 = module_0.Node(none_type_4)
    var_17 = b_s_t_10.isValid()

def test_case_2090():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    str_0 = ''
    node_0 = module_0.Node(str_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.minValueNode(node_1)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert var_5.value == [False, False, False, False]
    assert var_5.left is None
    assert var_5.right is None
    var_6 = b_s_t_3.add(var_5)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_8 = b_s_t_4.add(none_type_0)
    assert len(b_s_t_4) == 1
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.contains(node_3)
    var_10 = var_9.__str__()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.isValid()
    node_4 = module_0.Node(b_s_t_6)
    assert len(node_4.value) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    node_5 = module_0.Node(b_s_t_8)
    assert len(node_5.value) == 0
    var_13 = b_s_t_7.contains(node_5)

def test_case_2091():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.minValueNode(node_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert var_5.value == [False, False, False, False]
    assert var_5.left is None
    assert var_5.right is None
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    node_3 = module_0.Node(var_6)
    assert node_3.value == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_3 = b_s_t_5.build(b_s_t_7)
    var_9 = b_s_t_5.contains(none_type_2)

def test_case_2092():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    bool_0 = True
    node_1 = module_0.Node(bool_0)

def test_case_2093():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_4 = b_s_t_2.contains(node_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_8.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.minValueNode(node_3)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert var_9.value == [False, False, False, False]
    assert var_9.left is None
    assert var_9.right is None

def test_case_2094():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__len__()
    assert var_1 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(var_1)
    assert node_4.value == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    node_5 = module_0.Node(b_s_t_3)
    assert len(node_5.value) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.isValid()
    var_3 = b_s_t_4.__len__()
    assert var_3 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    var_5 = b_s_t_4.__len__()
    assert var_5 == 0

def test_case_2095():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = var_3.__str__()
    assert var_4 == '0'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    var_6 = var_5.__str__()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    var_9 = b_s_t_5.add(var_8)
    assert len(b_s_t_5) == 1
    node_1 = module_0.Node(var_8)
    assert node_1.value == []
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_4.__str__()
    assert var_11 == '[]'
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_1 = b_s_t_7.build(b_s_t_9)
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_10.isValid()
    node_2 = module_0.Node(b_s_t_10)
    var_15 = b_s_t_10.contains(var_14)
    var_16 = b_s_t_10.__len__()
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_11 = module_0.BST()
    var_17 = b_s_t_11.__str__()
    assert var_17 == '[]'
    var_18 = b_s_t_11.remove(var_17)

def test_case_2096():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    node_2 = module_0.Node(var_0)
    assert node_2.value == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_3 = module_0.Node(var_2)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder()
    set_0 = set()
    node_4 = module_0.Node(set_0)

def test_case_2097():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1

def test_case_2098():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = var_1.__str__()
    var_3 = b_s_t_1.contains(b_s_t_1)
    assert var_3 is False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    var_5 = b_s_t_3.add(none_type_1)
    assert len(b_s_t_3) == 1

def test_case_2099():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_5 = b_s_t_5.contains(var_4)
    assert var_5 is False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_7 = b_s_t_6.contains(node_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0

def test_case_2100():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_2 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_3 = b_s_t_6.getOrder()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.remove(bytes_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.getOrder()
    var_6 = b_s_t_8.add(var_5)
    assert len(b_s_t_8) == 1
    node_1 = module_0.Node(var_6)
    assert node_1.value is None
    var_7 = b_s_t_3.isValid()

def test_case_2101():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_5.getOrder(b_s_t_4)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_2 = module_0.Node(bytes_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_0 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder(none_type_0)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.isValid()
    node_3 = module_0.Node(b_s_t_10)
    assert len(node_3.value) == 0
    var_10 = b_s_t_8.getOrder()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.minValueNode(node_4)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'binarySearchTree2.Node'
    assert var_11.value == [False, False, False, False]
    assert var_11.left is None
    assert var_11.right is None
    var_12 = b_s_t_11.add(var_11)
    assert len(b_s_t_11) == 1
    bool_4 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.remove(bool_4)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_14 = b_s_t_13.contains(b_s_t_13)
    var_15 = var_3.__str__()

def test_case_2102():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    var_2 = b_s_t_0.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    var_7 = b_s_t_6.contains(node_2)
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.__len__()
    assert var_8 == 0
    var_9 = b_s_t_8.add(var_8)
    assert len(b_s_t_8) == 1

def test_case_2103():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    var_4 = b_s_t_3.add(none_type_0)
    assert len(b_s_t_3) == 1
    node_4 = module_0.Node(var_3)
    assert node_4.value == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    node_5 = module_0.Node(b_s_t_5)
    assert len(node_5.value) == 0
    var_6 = b_s_t_4.contains(node_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.contains(b_s_t_8)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_9.__len__()
    assert var_10 == 0
    var_11 = b_s_t_8.contains(var_9)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    var_13 = var_12.__str__()
    assert var_13 == '[]'
    var_14 = var_13.__str__()
    assert var_14 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.isValid()
    var_16 = b_s_t_11.__len__()
    assert var_16 == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.getOrder()
    var_18 = b_s_t_11.__len__()
    assert var_18 == 0
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_19 = b_s_t_13.__len__()
    assert var_19 == 0

def test_case_2104():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0

def test_case_2105():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    list_0 = [var_4, var_4]
    none_type_1 = b_s_t_3.build(list_0)
    assert len(b_s_t_3) == 2
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.minValueNode(node_2)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert var_6.value == [False, False, False, False]
    assert var_6.left is None
    assert var_6.right is None

def test_case_2106():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    b_s_t_4 = module_0.BST()
    var_2 = b_s_t_4.isValid()
    var_3 = b_s_t_4.__len__()

def test_case_2107():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_2108():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_3 = b_s_t_1.contains(node_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    node_2 = module_0.Node(var_4)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_0)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    var_9 = var_8.__str__()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder(none_type_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.isValid()
    node_4 = module_0.Node(b_s_t_10)
    assert len(node_4.value) == 0
    var_12 = b_s_t_8.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    bool_2 = False
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.remove(bool_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_14 = b_s_t_14.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_14.__len__()
    assert var_15 == 0
    var_16 = b_s_t_14.__str__()
    assert var_16 == '[]'
    var_17 = var_14.__str__()
    assert var_17 == '[]'

def test_case_2109():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_5 = b_s_t_2.contains(var_4)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_2.remove(var_5)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    var_8 = b_s_t_4.__len__()
    assert var_8 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.getOrder()
    var_10 = b_s_t_4.__len__()
    assert var_10 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.__str__()
    assert var_11 == '[]'
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.contains(b_s_t_8)
    var_14 = b_s_t_5.add(var_3)
    assert len(b_s_t_5) == 1

def test_case_2110():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    bool_1 = False
    node_1 = module_0.Node(bool_1)
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(b_s_t_5)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.__len__()
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_7 = module_0.BST()
    b_s_t_8 = module_0.BST()

def test_case_2111():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    var_6 = b_s_t_3.contains(var_5)
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.remove(var_8)
    var_10 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.isValid()
    var_12 = b_s_t_7.__len__()
    assert var_12 == 0
    bool_0 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.remove(bool_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    set_0 = set()
    node_4 = module_0.Node(set_0)

def test_case_2112():
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_0 = module_0.Node(bytes_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    node_3 = module_0.Node(var_0)
    assert node_3.value == 0
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.remove(var_1)

def test_case_2113():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(set_0)
    var_0 = b_s_t_0.contains(none_type_0)
    assert var_0 is False
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.remove(var_1)
    var_3 = b_s_t_2.getOrder()

def test_case_2114():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'

def test_case_2115():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'

def test_case_2116():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)

def test_case_2117():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__len__()
    assert var_1 == 0
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(bytes_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    var_4 = b_s_t_4.add(none_type_0)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.isValid()
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.remove(bool_2)
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.remove(bool_3)
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder(none_type_1)
    var_10 = b_s_t_7.getOrder()

def test_case_2118():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    str_0 = 'postOrder'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value is None
    assert var_0.left is None
    assert var_0.right is None

def test_case_2119():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_1 = module_0.Node(b_s_t_0)
    assert len(node_1.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_2 = module_0.Node(b_s_t_3)
    assert len(node_2.value) == 0
    var_4 = b_s_t_1.getOrder()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_4.build(b_s_t_4)
    node_4 = module_0.Node(none_type_1)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(none_type_3)
    bool_1 = False
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.remove(bool_1)
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.__len__()
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    var_11 = var_8.__str__()
    assert var_11 == '[]'
    b_s_t_8 = module_0.BST()
    var_12 = b_s_t_8.getOrder()
    bool_2 = False
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.remove(bool_2)
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_10.getOrder()
    var_15 = b_s_t_10.add(var_14)
    assert len(b_s_t_10) == 1
    var_16 = var_15.__str__()
    assert var_16 == 'None'
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    var_17 = b_s_t_11.remove(none_type_4)
    b_s_t_12 = module_0.BST()
    var_18 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    none_type_5 = b_s_t_11.build(b_s_t_13)
    var_19 = b_s_t_11.contains(none_type_4)
    var_20 = b_s_t_13.__len__()

def test_case_2120():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.getOrder()
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_7 = b_s_t_8.getOrder()

def test_case_2121():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.isValid()
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    bool_4 = False
    list_0 = [bool_4, bool_4, bool_4, bool_4]
    node_5 = module_0.Node(list_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.minValueNode(node_5)
    var_12 = b_s_t_7.add(var_11)
    assert len(b_s_t_7) == 1
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_8.remove(var_13)
    none_type_3 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.remove(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_16 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = b_s_t_9.build(b_s_t_11)
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_12.isValid()
    node_7 = module_0.Node(b_s_t_12)
    var_18 = b_s_t_12.contains(var_17)
    var_19 = b_s_t_12.__len__()
    var_20 = b_s_t_12.add(var_17)
    assert len(b_s_t_12) == 1
    assert len(node_7.value) == 1
    list_1 = [var_17]

def test_case_2122():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_4 = b_s_t_2.contains(var_3)
    var_5 = b_s_t_2.__len__()
    assert var_5 == 0

def test_case_2123():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_4 = b_s_t_2.__str__()
    assert var_4 == '[]'
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0

def test_case_2124():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    assert len(node_1.value) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.contains(b_s_t_6)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_7.add(var_6)
    assert len(b_s_t_7) == 1
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    none_type_3 = b_s_t_8.build(b_s_t_10)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.getOrder()
    var_12 = b_s_t_12.add(var_11)
    assert len(b_s_t_12) == 1
    node_3 = module_0.Node(var_11)
    assert node_3.value == []
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.isValid()
    node_4 = module_0.Node(b_s_t_13)
    none_type_4 = None
    node_5 = module_0.Node(none_type_4)
    b_s_t_14 = module_0.BST()
    list_0 = [none_type_4]
    var_14 = b_s_t_14.remove(list_0)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    b_s_t_15 = module_0.BST()
    var_15 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    var_16 = b_s_t_16.isValid()
    var_17 = b_s_t_15.isValid()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_17 = module_0.BST()
    var_18 = b_s_t_17.remove(bytes_0)

def test_case_2125():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_1.build(b_s_t_3)
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    b_s_t_5 = module_0.BST()
    b_s_t_6 = module_0.BST()
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(none_type_3)
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    none_type_4 = b_s_t_8.build(set_0)
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_9 = module_0.BST()
    var_9 = b_s_t_9.remove(bool_0)

def test_case_2126():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.getOrder()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_6.build(b_s_t_6)
    node_3 = module_0.Node(none_type_1)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    b_s_t_8 = module_0.BST()
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.getOrder()
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_4 = module_0.Node(list_0)
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_11 = b_s_t_11.isValid()
    var_12 = b_s_t_10.isValid()
    b_s_t_12 = module_0.BST()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_1)
    b_s_t_13 = module_0.BST()
    var_13 = b_s_t_13.isValid()
    b_s_t_14 = module_0.BST()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_2)
    var_14 = b_s_t_14.__str__()
    assert var_14 == '[]'
    none_type_3 = b_s_t_14.build(var_14)
    assert len(b_s_t_14) == 2

def test_case_2127():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = var_0.__str__()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.contains(b_s_t_3)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.minValueNode(node_1)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree2.Node'
    assert var_5.value == [False, False, False, False]
    assert var_5.left is None
    assert var_5.right is None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    var_7 = b_s_t_5.__len__()
    assert var_7 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    var_11 = b_s_t_7.contains(var_10)
    var_12 = b_s_t_7.__len__()
    assert var_12 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.__str__()
    assert var_13 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    var_14 = b_s_t_8.add(none_type_1)
    assert len(b_s_t_8) == 1
    node_4 = module_0.Node(var_13)
    assert node_4.value == '[]'
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = b_s_t_9.build(set_0)
    var_15 = b_s_t_9.__str__()
    assert var_15 == '[]'
    none_type_3 = b_s_t_9.build(var_15)
    assert len(b_s_t_9) == 2
    str_0 = ''
    node_6 = module_0.Node(str_0)

def test_case_2128():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_5 = var_4.__str__()
    assert var_5 == '[]'

def test_case_2129():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.getOrder()
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_0)
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_1)
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_0 = module_0.Node(b_s_t_6)
    assert len(node_0.value) == 0
    var_8 = b_s_t_6.contains(var_7)
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = var_10.__str__()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    var_13 = b_s_t_9.add(var_12)
    assert len(b_s_t_9) == 1
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_14 = b_s_t_10.getOrder()
    none_type_4 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.getOrder(none_type_4)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.__len__()
    assert var_16 == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_17 = b_s_t_14.__str__()
    assert var_17 == '[]'
    var_18 = b_s_t_14.__len__()
    assert var_18 == 0

def test_case_2130():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.isValid()
    var_6 = var_5.__str__()
    var_7 = b_s_t_3.contains(b_s_t_3)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_1 = b_s_t_5.build(b_s_t_7)
    node_0 = module_0.Node(b_s_t_7)
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    var_10 = b_s_t_8.__str__()
    assert var_10 == '[]'
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_8.isValid()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    none_type_4 = None
    b_s_t_10 = module_0.BST()
    var_12 = b_s_t_10.remove(none_type_4)
    b_s_t_11 = module_0.BST()
    var_13 = var_12.__str__()
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.isValid()
    var_15 = b_s_t_12.__len__()
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_13 = module_0.BST()
    var_16 = b_s_t_13.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_13.__len__()
    var_18 = b_s_t_13.__str__()
    assert var_18 == '[]'
    var_19 = var_16.__str__()
    assert var_19 == '[]'
    bool_3 = False
    b_s_t_14 = module_0.BST()
    var_20 = b_s_t_14.remove(bool_3)
    b_s_t_15 = module_0.BST()
    b_s_t_16 = module_0.BST()
    var_21 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    var_22 = b_s_t_17.getOrder()
    var_23 = b_s_t_17.getOrder()
    bool_4 = True
    node_6 = module_0.Node(bool_4)
    b_s_t_18 = module_0.BST()
    var_24 = b_s_t_18.__str__()
    assert var_24 == '[]'
    var_25 = b_s_t_18.__len__()

def test_case_2131():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    var_5 = b_s_t_2.add(var_4)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.getOrder()
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_8 = b_s_t_4.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_4.__str__()
    assert var_9 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_10 = b_s_t_5.contains(node_3)
    var_11 = var_10.__str__()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_1)
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_12 = b_s_t_6.getOrder(none_type_1)
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    var_13 = b_s_t_6.isValid()
    var_14 = b_s_t_5.add(var_6)
    assert len(b_s_t_5) == 1

def test_case_2132():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.remove(var_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_1)

def test_case_2133():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_3 = module_0.Node(b_s_t_2)
    assert len(node_3.value) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_2.add(b_s_t_3)
    assert len(b_s_t_2) == 1
    assert len(node_3.value) == 1
    none_type_2 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(none_type_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_3 = b_s_t_4.build(b_s_t_6)
    node_5 = module_0.Node(b_s_t_6)
    none_type_4 = None
    node_6 = module_0.Node(none_type_4)
    b_s_t_7 = module_0.BST()
    list_3 = [none_type_4]
    var_8 = b_s_t_7.remove(list_3)
    b_s_t_8 = module_0.BST()
    var_9 = b_s_t_8.getOrder()
    bool_3 = False
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.remove(bool_3)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    var_12 = b_s_t_10.add(var_11)
    assert len(b_s_t_10) == 1
    var_13 = var_12.__str__()
    assert var_13 == 'None'
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    b_s_t_11 = module_0.BST()

def test_case_2134():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.remove(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_4.build(b_s_t_6)
    var_5 = b_s_t_4.contains(none_type_1)
    b_s_t_7 = module_0.BST()
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    var_6 = b_s_t_8.getOrder(none_type_3)
    b_s_t_9 = module_0.BST()
    var_7 = b_s_t_9.isValid()
    node_2 = module_0.Node(b_s_t_9)
    var_8 = b_s_t_7.getOrder()
    b_s_t_10 = module_0.BST()
    bool_2 = False
    b_s_t_11 = module_0.BST()
    var_9 = b_s_t_11.remove(bool_2)
    b_s_t_12 = module_0.BST()
    none_type_4 = None
    b_s_t_13 = module_0.BST()
    var_10 = b_s_t_13.remove(none_type_4)
    b_s_t_14 = module_0.BST()
    bool_3 = True

def test_case_2135():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_1 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_2 = b_s_t_4.getOrder()
    var_3 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_0 = module_0.Node(b_s_t_5)
    assert len(node_0.value) == 0
    var_5 = b_s_t_5.contains(var_4)
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    var_7 = b_s_t_5.add(var_4)
    assert len(b_s_t_5) == 1
    assert len(node_0.value) == 1
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.__len__()
    assert var_9 == 0
    var_10 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_7.__len__()
    assert var_12 == 0
    var_13 = b_s_t_7.__str__()
    assert var_13 == '[]'
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_14 = b_s_t_8.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_8.getOrder()

def test_case_2136():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_2 = b_s_t_0.build(b_s_t_2)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.isValid()
    var_6 = b_s_t_4.isValid()
    node_2 = module_0.Node(bool_1)
    none_type_3 = None
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.remove(none_type_3)
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.getOrder(none_type_4)
    var_10 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    set_0 = set()
    node_3 = module_0.Node(set_0)
    var_12 = b_s_t_7.remove(none_type_4)
    none_type_5 = None
    node_4 = module_0.Node(none_type_5)
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_9.remove(var_13)
    none_type_6 = None
    node_5 = module_0.Node(none_type_6)
    b_s_t_10 = module_0.BST()
    none_type_7 = b_s_t_10.build(b_s_t_10)
    node_6 = module_0.Node(none_type_6)

def test_case_2137():
    none_type_0 = None

def test_case_2138():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_1.build(b_s_t_3)
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_4.__len__()
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_1 = module_0.Node(bytes_0)

def test_case_2139():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    var_4 = b_s_t_2.__len__()
    assert var_4 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder()
    var_6 = b_s_t_2.__len__()
    assert var_6 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_4.__len__()
    assert var_8 == 0
    var_9 = b_s_t_4.__str__()
    assert var_9 == '[]'
    var_10 = var_7.__str__()
    assert var_10 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_11 = b_s_t_5.getOrder()
    bool_0 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_12 = b_s_t_6.remove(bool_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.getOrder()
    var_14 = b_s_t_7.add(var_13)
    assert len(b_s_t_7) == 1
    var_15 = var_14.__str__()
    assert var_15 == 'None'
    set_1 = set()
    node_2 = module_0.Node(set_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_16 = b_s_t_8.__str__()
    assert var_16 == '[]'
    var_17 = b_s_t_8.getOrder()
    none_type_1 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_18 = b_s_t_9.getOrder(none_type_1)
    var_19 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_20 = b_s_t_10.__str__()
    assert var_20 == '[]'
    set_2 = set()
    node_3 = module_0.Node(set_2)
    var_21 = b_s_t_9.remove(none_type_1)
    none_type_2 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_22 = b_s_t_11.remove(none_type_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_23 = b_s_t_12.getOrder()
    var_24 = var_23.__str__()
    assert var_24 == '[]'

def test_case_2140():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    var_2 = b_s_t_1.contains(var_0)
    assert var_2 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.minValueNode(node_0)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert var_6.value == [False, False, False, False]
    assert var_6.left is None
    assert var_6.right is None
    var_7 = b_s_t_3.add(var_6)
    assert len(b_s_t_3) == 1
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(b_s_t_4)
    node_2 = module_0.Node(none_type_0)
    var_8 = b_s_t_4.remove(node_2)
    str_0 = ''
    node_3 = module_0.Node(str_0)

def test_case_2141():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(node_0)
    assert var_0 is False
    var_1 = var_0.__str__()
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_2 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    bool_0 = False
    node_1 = module_0.Node(bool_0)
    bool_1 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_9 = b_s_t_10.getOrder()
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.__str__()
    assert var_11 == '[]'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    var_12 = b_s_t_11.add(none_type_3)
    assert len(b_s_t_11) == 1
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_0)
    var_13 = b_s_t_12.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_12.__str__()
    assert var_14 == '[]'
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_15 = b_s_t_14.isValid()
    var_16 = var_15.__str__()
    var_17 = b_s_t_13.contains(b_s_t_13)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_18 = b_s_t_15.getOrder()
    var_19 = b_s_t_15.add(var_18)
    assert len(b_s_t_15) == 1
    node_5 = module_0.Node(list_1)
    tuple_0 = (var_3,)

def test_case_2142():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_4 = b_s_t_1.remove(bool_0)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.getOrder(none_type_0)
    var_6 = b_s_t_1.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_7 = b_s_t_3.getOrder()
    bool_1 = False
    node_0 = module_0.Node(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.isValid()
    node_1 = module_0.Node(b_s_t_6)
    assert len(node_1.value) == 0
    bool_2 = True
    node_2 = module_0.Node(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.__len__()
    assert var_10 == 0
    var_11 = b_s_t_8.add(var_10)
    assert len(b_s_t_8) == 1
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.isValid()
    var_13 = var_12.__str__()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_4 = module_0.Node(bytes_0)
    none_type_3 = None
    node_5 = module_0.Node(none_type_3)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = b_s_t_11.build(set_0)
    var_14 = b_s_t_10.contains(none_type_3)

def test_case_2143():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)

def test_case_2144():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    list_1 = [node_2]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.add(list_1)
    assert len(b_s_t_2) == 1
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bool_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.contains(b_s_t_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0
    var_7 = b_s_t_4.contains(var_5)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.isValid()
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_3 = b_s_t_7.build(b_s_t_9)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_12 = b_s_t_11.isValid()
    var_13 = b_s_t_10.isValid()
    node_5 = module_0.Node(bool_3)
    none_type_4 = None
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.remove(none_type_4)
    var_15 = b_s_t_12.__str__()
    assert var_15 == '[]'
    str_0 = ''
    node_6 = module_0.Node(str_0)

def test_case_2145():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    var_3 = b_s_t_1.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    var_5 = b_s_t_3.contains(node_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.__len__()
    assert var_8 == 0
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    node_5 = module_0.Node(var_8)
    assert node_5.value == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_9.add(var_9)
    assert len(b_s_t_9) == 1
    node_6 = module_0.Node(var_10)
    assert node_6.value is None
    set_0 = set()
    node_7 = module_0.Node(set_0)
    var_11 = var_9.__len__()
    assert var_11 == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.__len__()
    assert var_13 == 0
    var_14 = b_s_t_11.contains(var_12)
    set_1 = set()
    node_8 = module_0.Node(set_1)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.__str__()
    none_type_3 = None
    node_9 = module_0.Node(none_type_3)
    var_17 = b_s_t_13.add(none_type_3)
    assert len(b_s_t_13) == 1
    var_18 = b_s_t_13.__len__()
    assert var_18 == 1

def test_case_2146():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    var_2 = b_s_t_1.isValid()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_2 = b_s_t_2.build(b_s_t_2)
    node_3 = module_0.Node(none_type_1)
    set_1 = set()
    node_4 = module_0.Node(set_1)
    b_s_t_3 = module_0.BST()
    none_type_3 = b_s_t_3.build(set_1)
    none_type_4 = None
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.remove(none_type_4)
    b_s_t_5 = module_0.BST()
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    b_s_t_6 = module_0.BST()
    var_4 = b_s_t_6.contains(b_s_t_6)
    var_5 = b_s_t_6.__str__()
    assert var_5 == '[]'
    b_s_t_7 = module_0.BST()
    var_6 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    var_7 = b_s_t_8.getOrder()
    var_8 = b_s_t_8.add(var_7)
    assert len(b_s_t_8) == 1
    node_6 = module_0.Node(var_7)
    assert node_6.value == []

def test_case_2147():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_6 = b_s_t_3.isValid()
    bool_3 = True
    node_2 = module_0.Node(bool_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    node_4 = module_0.Node(var_7)
    assert node_4.value == 0
    bool_4 = True
    node_5 = module_0.Node(bool_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_4)
    bool_5 = True
    node_6 = module_0.Node(bool_5)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.isValid()

def test_case_2148():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.contains(b_s_t_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    var_6 = b_s_t_2.contains(var_4)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_0 = module_0.Node(b_s_t_4)
    assert len(node_0.value) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_4.add(b_s_t_5)
    assert len(b_s_t_4) == 1
    assert len(node_0.value) == 1
    bool_2 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.remove(bool_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.__len__()
    assert var_11 == 0
    var_12 = var_11.__str__()
    assert var_12 == '0'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = b_s_t_8.build(b_s_t_8)
    node_3 = module_0.Node(none_type_0)
    bool_3 = False
    b_s_t_9 = module_0.BST()
    var_13 = b_s_t_9.remove(bool_3)
    none_type_2 = None
    b_s_t_10 = module_0.BST()
    var_14 = b_s_t_10.getOrder(none_type_2)
    var_15 = b_s_t_9.getOrder()
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    node_5 = module_0.Node(node_4)

def test_case_2149():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    node_0 = module_0.Node(b_s_t_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.isValid()
    node_1 = module_0.Node(b_s_t_3)
    var_3 = b_s_t_3.contains(var_2)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    none_type_2 = b_s_t_4.build(set_0)
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_5.add(var_5)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(var_6)
    assert node_3.value is None
    set_1 = set()
    node_4 = module_0.Node(set_1)
    var_7 = var_5.__len__()
    assert var_7 == 0
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.getOrder()
    var_9 = var_8.__str__()
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.__str__()
    var_11 = b_s_t_7.__len__()
    var_12 = b_s_t_7.getOrder()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_6 = module_0.Node(list_0)
    b_s_t_8 = module_0.BST()
    var_13 = b_s_t_8.minValueNode(node_6)
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'binarySearchTree2.Node'
    assert var_13.value == [False, False, False, False]
    assert var_13.left is None
    assert var_13.right is None
    b_s_t_9 = module_0.BST()
    var_14 = b_s_t_9.isValid()
    node_7 = module_0.Node(b_s_t_9)
    var_15 = b_s_t_9.contains(var_14)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_8 = module_0.Node(list_1)
    b_s_t_10 = module_0.BST()
    var_16 = b_s_t_9.remove(var_15)

def test_case_2150():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value is None
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.remove(bool_2)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder(none_type_0)
    var_8 = b_s_t_4.getOrder()
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = b_s_t_6.build(b_s_t_6)
    node_4 = module_0.Node(none_type_1)
    b_s_t_7 = module_0.BST()
    var_9 = b_s_t_7.isValid()
    node_5 = module_0.Node(b_s_t_7)
    var_10 = b_s_t_7.contains(var_9)
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_0)
    b_s_t_8 = module_0.BST()
    var_11 = b_s_t_7.remove(var_10)
    b_s_t_9 = module_0.BST()
    var_12 = b_s_t_9.__len__()
    none_type_3 = None
    b_s_t_10 = module_0.BST()
    var_13 = b_s_t_10.remove(none_type_3)
    b_s_t_11 = module_0.BST()
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    none_type_4 = b_s_t_10.build(b_s_t_12)
    node_7 = module_0.Node(b_s_t_12)
    b_s_t_13 = module_0.BST()
    var_15 = b_s_t_13.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_13.__len__()
    var_17 = b_s_t_13.__str__()
    assert var_17 == '[]'
    var_18 = var_15.__str__()
    assert var_18 == '[]'

def test_case_2151():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_3 = b_s_t_1.__str__()
    var_4 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_6 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    var_7 = b_s_t_3.contains(var_6)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_8 = b_s_t_4.getOrder()
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.getOrder()
    var_11 = b_s_t_6.add(var_10)
    assert len(b_s_t_6) == 1
    var_12 = var_11.__str__()
    assert var_12 == 'None'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.getOrder()
    var_14 = b_s_t_7.add(var_13)
    assert len(b_s_t_7) == 1

def test_case_2152():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_1 = b_s_t_0.build(b_s_t_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    var_0 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    b_s_t_3 = module_0.BST()
    var_1 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    var_2 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_1 = module_0.Node(bytes_0)
    b_s_t_6 = module_0.BST()
    var_3 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    var_4 = b_s_t_7.__len__()
    var_5 = b_s_t_7.contains(var_3)

def test_case_2153():
    complex_0 = 2277.72696 + 1912.08647j
    bytes_0 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_0 = {complex_0, bytes_0, bytes_0, complex_0}
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_1 = module_0.Node(b_s_t_0)
    assert len(node_1.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_0.add(b_s_t_1)
    assert len(b_s_t_0) == 1
    assert len(node_1.value) == 1
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    var_4 = b_s_t_2.add(var_3)
    assert len(b_s_t_2) == 1
    node_4 = module_0.Node(list_1)
    bool_2 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.contains(b_s_t_4)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    var_9 = b_s_t_4.contains(var_7)
    var_10 = var_9.__str__()

def test_case_2154():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'

def test_case_2155():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0

def test_case_2156():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_2.build(b_s_t_4)
    var_4 = b_s_t_2.contains(none_type_1)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    node_2 = module_0.Node(b_s_t_6)
    var_6 = b_s_t_5.contains(node_2)
    node_3 = module_0.Node(node_2)
    none_type_3 = None
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.remove(none_type_3)
    b_s_t_8 = module_0.BST()
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_9 = module_0.BST()
    var_8 = b_s_t_9.contains(b_s_t_9)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.getOrder()
    var_11 = var_10.__str__()
    assert var_11 == '[]'
    var_12 = var_11.__str__()
    assert var_12 == '[]'
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.__len__()
    var_15 = b_s_t_12.contains(var_13)
    set_0 = set()
    node_5 = module_0.Node(set_0)
    b_s_t_13 = module_0.BST()
    none_type_4 = b_s_t_13.build(set_0)
    var_16 = b_s_t_13.__str__()
    assert var_16 == '[]'
    b_s_t_14 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_6 = module_0.Node(list_1)
    var_17 = b_s_t_14.__str__()
    assert var_17 == '[]'
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_7 = module_0.Node(list_2)
    var_18 = b_s_t_14.isValid()
    set_1 = set()
    node_8 = module_0.Node(set_1)
    b_s_t_15 = module_0.BST()
    none_type_5 = b_s_t_15.build(set_1)
    var_19 = b_s_t_15.__str__()
    assert var_19 == '[]'
    none_type_6 = b_s_t_15.build(var_19)
    assert len(b_s_t_15) == 2
    b_s_t_16 = module_0.BST()
    var_20 = b_s_t_16.isValid()
    node_9 = module_0.Node(b_s_t_16)
    var_21 = b_s_t_16.contains(var_20)
    none_type_7 = None
    node_10 = module_0.Node(none_type_7)
    b_s_t_17 = module_0.BST()
    none_type_8 = b_s_t_17.build(b_s_t_17)
    var_22 = b_s_t_17.__str__()
    assert var_22 == '[]'

def test_case_2157():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    var_1 = b_s_t_2.remove(none_type_2)
    b_s_t_3 = module_0.BST()
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    none_type_3 = b_s_t_2.build(b_s_t_4)
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    complex_0 = 2277.72696 + 1912.08647j
    bytes_0 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_0 = {complex_0, bytes_0, bytes_0, complex_0}
    node_2 = module_0.Node(set_0)
    bool_1 = False
    b_s_t_5 = module_0.BST()
    var_4 = b_s_t_5.remove(bool_1)
    none_type_4 = None
    b_s_t_6 = module_0.BST()
    var_5 = b_s_t_6.getOrder(none_type_4)
    var_6 = b_s_t_5.getOrder()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.minValueNode(node_3)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert var_7.value == [False, False, False, False]
    assert var_7.left is None
    assert var_7.right is None
    var_8 = b_s_t_7.add(var_7)
    assert len(b_s_t_7) == 1
    b_s_t_8 = module_0.BST()
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_2)
    var_9 = b_s_t_8.__str__()
    assert var_9 == '[]'
    none_type_5 = b_s_t_8.build(var_9)
    assert len(b_s_t_8) == 2
    bool_4 = True
    node_5 = module_0.Node(bool_4)
    b_s_t_9 = module_0.BST()
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    none_type_6 = None
    node_6 = module_0.Node(none_type_6)
    b_s_t_10 = module_0.BST()
    var_11 = b_s_t_9.isValid()
    b_s_t_11 = module_0.BST()

def test_case_2158():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.contains(b_s_t_2)
    node_0 = module_0.Node(bool_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(none_type_0)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'

def test_case_2159():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    var_2 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_4 = b_s_t_2.remove(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_4.build(b_s_t_4)
    node_3 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.getOrder()
    list_0 = [var_5, var_5]
    none_type_3 = b_s_t_5.build(list_0)
    assert len(b_s_t_5) == 2

def test_case_2160():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_0.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.getOrder(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.minValueNode(node_4)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert var_7.value == [False, False, False, False]
    assert var_7.left is None
    assert var_7.right is None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.__len__()
    assert var_9 == 0
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.getOrder()
    bool_3 = False
    node_5 = module_0.Node(bool_3)
    node_6 = module_0.Node(b_s_t_9)
    assert len(node_6.value) == 0
    var_13 = b_s_t_9.minValueNode(node_6)
    assert len(var_13.value) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    node_7 = module_0.Node(b_s_t_10)
    assert len(node_7.value) == 0
    bool_4 = False
    list_3 = [bool_4, bool_4, bool_4, bool_4]
    node_8 = module_0.Node(list_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.isValid()
    var_16 = b_s_t_11.isValid()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_17 = b_s_t_14.isValid()
    bool_5 = True
    node_9 = module_0.Node(bool_5)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_18 = b_s_t_15.__len__()
    assert var_18 == 0
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    node_11 = module_0.Node(var_18)
    assert node_11.value == 0

def test_case_2161():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)

def test_case_2162():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_3 = b_s_t_5.__str__()
    assert var_3 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    none_type_0 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_4 = b_s_t_7.remove(none_type_0)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_5 = b_s_t_8.getOrder()
    bool_3 = False
    node_2 = module_0.Node(bool_3)
    node_3 = module_0.Node(b_s_t_8)
    assert len(node_3.value) == 0
    var_6 = b_s_t_8.minValueNode(node_3)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_6.value).__module__}.{type(var_6.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_6.value) == 0
    assert var_6.left is None
    assert var_6.right is None
    set_0 = set()

def test_case_2163():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.contains(b_s_t_6)
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    bool_2 = False
    node_1 = module_0.Node(bool_2)
    node_2 = module_0.Node(b_s_t_8)
    assert len(node_2.value) == 0
    var_9 = b_s_t_8.minValueNode(node_2)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_9.value).__module__}.{type(var_9.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_9.value) == 0
    assert var_9.left is None
    assert var_9.right is None
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.remove(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_3 = True
    node_3 = module_0.Node(bool_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.contains(b_s_t_11)
    var_12 = b_s_t_10.__str__()
    assert var_12 == '[]'

def test_case_2164():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    var_2 = b_s_t_1.contains(var_0)
    assert var_2 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.isValid()
    node_0 = module_0.Node(b_s_t_2)
    assert len(node_0.value) == 0
    bool_0 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bool_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.__str__()
    assert var_7 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    var_8 = b_s_t_7.add(none_type_0)
    assert len(b_s_t_7) == 1
    none_type_1 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder(none_type_1)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_10 = b_s_t_11.isValid()
    var_11 = var_10.__str__()
    var_12 = b_s_t_10.contains(b_s_t_10)

def test_case_2165():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_1.value).__module__}.{type(var_1.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_1.value) == 0
    assert var_1.left is None
    assert var_1.right is None

def test_case_2166():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_1.__str__()
    assert var_4 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_2.__len__()
    assert var_6 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_3.__len__()
    assert var_8 == 0
    var_9 = b_s_t_3.__str__()
    assert var_9 == '[]'
    var_10 = var_7.__str__()
    assert var_10 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_11 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    var_12 = b_s_t_5.contains(var_11)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_13 = b_s_t_6.isValid()
    var_14 = var_13.__str__()

def test_case_2167():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    var_7 = b_s_t_6.add(var_6)
    assert len(b_s_t_6) == 1
    var_8 = var_7.__str__()
    assert var_8 == 'None'

def test_case_2168():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.getOrder()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.__len__()
    assert var_8 == 0
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_6.remove(var_9)
    var_11 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_13 = b_s_t_7.contains(var_12)
    var_14 = b_s_t_7.__len__()
    assert var_14 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_15 = b_s_t_8.isValid()
    node_4 = module_0.Node(b_s_t_8)
    assert len(node_4.value) == 0
    var_16 = b_s_t_8.contains(var_15)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_17 = b_s_t_8.remove(var_16)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_18 = b_s_t_10.isValid()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_19 = b_s_t_11.isValid()
    node_6 = module_0.Node(b_s_t_11)
    assert len(node_6.value) == 0
    var_20 = b_s_t_11.contains(var_19)
    var_21 = b_s_t_11.__str__()
    assert var_21 == '[]'
    bool_3 = True
    node_7 = module_0.Node(bool_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_22 = b_s_t_12.__str__()
    assert var_22 == '[]'
    none_type_2 = None
    node_8 = module_0.Node(none_type_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_23 = b_s_t_12.isValid()
    bool_4 = True
    node_9 = module_0.Node(bool_4)
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_24 = b_s_t_14.__str__()
    assert var_24 == '[]'
    none_type_3 = None
    node_10 = module_0.Node(none_type_3)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0

def test_case_2169():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_0.add(b_s_t_1)
    assert len(b_s_t_0) == 1
    assert len(node_0.value) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    node_5 = module_0.Node(b_s_t_4)
    assert len(node_5.value) == 0
    var_7 = b_s_t_4.contains(var_6)
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = b_s_t_5.build(b_s_t_5)
    var_8 = b_s_t_5.__str__()
    assert var_8 == '[]'
    none_type_3 = None
    node_7 = module_0.Node(none_type_3)
    b_s_t_6 = module_0.BST()
    none_type_4 = b_s_t_6.build(b_s_t_6)
    node_8 = module_0.Node(none_type_3)

def test_case_2170():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_1.remove(var_0)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_2)
    var_3 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    set_1 = set()
    node_2 = module_0.Node(set_1)
    var_5 = b_s_t_2.remove(none_type_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    bool_0 = False
    node_3 = module_0.Node(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    bool_1 = False
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.remove(bool_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.getOrder()
    var_10 = b_s_t_7.add(var_9)
    assert len(b_s_t_7) == 1
    var_11 = var_10.__str__()
    assert var_11 == 'None'

def test_case_2171():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(list_0)
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_4 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_4 = b_s_t_6.remove(none_type_1)
    bool_4 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.remove(bool_4)
    var_6 = b_s_t_7.__str__()
    assert var_6 == '[]'

def test_case_2172():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(node_0)
    assert var_0 is False
    var_1 = var_0.__str__()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_2 = b_s_t_1.build(b_s_t_1)
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    var_2 = b_s_t_2.isValid()
    var_3 = var_2.__str__()
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_3 = module_0.BST()
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.remove(var_4)
    var_6 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    var_7 = b_s_t_4.isValid()
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    b_s_t_5 = module_0.BST()
    var_8 = b_s_t_5.remove(bool_0)
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    set_0 = set()
    node_6 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_6.getOrder()
    var_12 = var_10.__len__()
    assert var_12 == 2
    b_s_t_7 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_0)
    var_13 = b_s_t_7.__str__()
    assert var_13 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_8 = module_0.Node(list_1)
    var_14 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    var_15 = b_s_t_8.isValid()
    var_16 = b_s_t_8.__len__()

def test_case_2173():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    var_4 = var_3.__str__()
    var_5 = b_s_t_2.contains(b_s_t_2)
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(set_0)
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_2 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder(none_type_2)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_9 = b_s_t_5.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.__str__()
    assert var_10 == '[]'
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_11 = b_s_t_11.getOrder()
    list_0 = [var_11, var_11]
    none_type_3 = b_s_t_11.build(list_0)
    assert len(b_s_t_11) == 2

def test_case_2174():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_1.add(b_s_t_2)
    assert len(b_s_t_1) == 1
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_2 = b_s_t_3.build(b_s_t_3)
    node_3 = module_0.Node(none_type_1)
    var_2 = b_s_t_3.remove(node_3)
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_4 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.minValueNode(node_4)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree2.Node'
    assert var_3.value == [False, False, False, False]
    assert var_3.left is None
    assert var_3.right is None
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1

def test_case_2175():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = var_0.__str__()
    assert var_1 == '[]'
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    var_6 = b_s_t_3.contains(var_4)
    assert var_6 is False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_1)
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.isValid()
    var_11 = b_s_t_6.__len__()
    assert var_11 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.getOrder()
    var_13 = b_s_t_6.__len__()
    assert var_13 == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_0)
    var_14 = b_s_t_8.__str__()
    assert var_14 == '[]'
    bool_3 = True
    node_3 = module_0.Node(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_15 = b_s_t_9.__str__()
    assert var_15 == '[]'
    var_16 = b_s_t_9.__len__()
    assert var_16 == 0
    var_17 = b_s_t_9.getOrder()

def test_case_2176():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(node_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.remove(bytes_0)

def test_case_2177():
    bool_0 = True
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0

def test_case_2178():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.add(none_type_0)
    assert len(b_s_t_1) == 1

def test_case_2179():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.contains(b_s_t_2)
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_1 = b_s_t_3.build(set_0)
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    list_0 = [node_2]
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.add(list_0)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_5.__len__()
    assert var_5 == 0
    var_6 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.isValid()
    node_3 = module_0.Node(var_7)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    var_10 = b_s_t_8.add(var_9)
    assert len(b_s_t_8) == 1
    node_4 = module_0.Node(var_9)
    assert node_4.value == []
    var_11 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_12 = b_s_t_9.isValid()
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.remove(bool_1)
    var_14 = b_s_t_10.__len__()
    assert var_14 == 0
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_15 = b_s_t_11.remove(none_type_3)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_16 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    none_type_4 = b_s_t_11.build(b_s_t_13)
    var_17 = var_16.__str__()
    assert var_17 == '[]'
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_6 = module_0.Node(bytes_0)
    none_type_5 = None
    b_s_t_14 = module_0.BST()
    var_18 = b_s_t_14.getOrder(none_type_5)
    none_type_6 = None
    b_s_t_15 = module_0.BST()
    var_19 = b_s_t_15.remove(none_type_6)
    b_s_t_16 = module_0.BST()
    var_20 = b_s_t_16.getOrder()
    b_s_t_17 = module_0.BST()
    none_type_7 = b_s_t_15.build(b_s_t_17)
    var_21 = var_20.__str__()
    assert var_21 == '[]'
    none_type_8 = b_s_t_15.build(b_s_t_17)

def test_case_2180():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_2)
    assert node_1.value == []
    var_4 = b_s_t_2.isValid()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    var_8 = b_s_t_4.__len__()
    assert var_8 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_5.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_5.__len__()
    assert var_10 == 0
    var_11 = b_s_t_5.__str__()
    assert var_11 == '[]'
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_12 = b_s_t_6.__str__()
    assert var_12 == '[]'
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.__len__()
    assert var_13 == 0
    var_14 = b_s_t_7.add(var_13)
    assert len(b_s_t_7) == 1
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)

def test_case_2181():
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_0 = module_0.Node(bytes_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    var_3 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.isValid()
    node_2 = module_0.Node(b_s_t_2)
    assert len(node_2.value) == 0
    var_5 = b_s_t_2.contains(var_4)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = b_s_t_3.build(set_0)
    var_6 = b_s_t_3.isValid()
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)

def test_case_2182():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()

def test_case_2183():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'

def test_case_2184():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_3.__len__()
    assert var_3 == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.remove(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    bool_2 = True
    node_1 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.contains(b_s_t_6)
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = b_s_t_7.build(b_s_t_9)
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    none_type_3 = b_s_t_7.build(b_s_t_9)
    none_type_4 = None
    node_2 = module_0.Node(none_type_4)
    b_s_t_10 = module_0.BST()
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_10.remove(var_10)
    var_12 = b_s_t_10.getOrder()
    none_type_5 = None
    b_s_t_11 = module_0.BST()
    var_13 = b_s_t_11.remove(none_type_5)
    b_s_t_12 = module_0.BST()
    var_14 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    none_type_6 = b_s_t_11.build(b_s_t_13)
    var_15 = b_s_t_11.contains(none_type_5)

def test_case_2185():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    bool_1 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder()
    var_6 = b_s_t_4.getOrder(b_s_t_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.getOrder()
    bool_2 = False
    node_1 = module_0.Node(bool_2)
    var_8 = var_7.__len__()
    assert var_8 == 0

def test_case_2186():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__len__()
    assert var_2 == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_0)
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_6 = b_s_t_3.add(none_type_1)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_5)
    assert node_2.value == '[]'

def test_case_2187():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    var_4 = b_s_t_4.isValid()
    var_5 = b_s_t_3.isValid()
    bool_1 = False
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.contains(b_s_t_6)
    b_s_t_7 = module_0.BST()
    var_8 = b_s_t_7.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_7.__len__()
    var_10 = b_s_t_6.contains(var_8)
    b_s_t_8 = module_0.BST()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_1 = module_0.Node(list_1)
    var_11 = b_s_t_8.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_8.__str__()
    assert var_12 == '[]'

def test_case_2188():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    list_0 = [node_0]
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.add(list_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.contains(b_s_t_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    bool_1 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.remove(bool_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    var_9 = b_s_t_6.add(var_8)
    assert len(b_s_t_6) == 1
    var_10 = var_9.__str__()
    assert var_10 == 'None'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0
    var_12 = b_s_t_7.contains(var_11)
    var_13 = b_s_t_7.__len__()
    assert var_13 == 0
    var_14 = b_s_t_7.add(var_11)
    assert len(b_s_t_7) == 1
    assert len(node_2.value) == 1

def test_case_2189():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.isValid()
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_4 = b_s_t_1.contains(var_3)
    var_5 = b_s_t_1.__len__()
    assert var_5 == 0
    var_6 = b_s_t_1.add(var_3)
    assert len(b_s_t_1) == 1
    assert len(node_1.value) == 1
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_7 = b_s_t_2.getOrder()
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_8 = b_s_t_3.remove(none_type_0)
    var_9 = b_s_t_3.__str__()
    assert var_9 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    list_0 = [node_2]
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_10 = b_s_t_4.add(list_0)
    assert len(b_s_t_4) == 1
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_11 = b_s_t_5.isValid()
    node_3 = module_0.Node(b_s_t_5)
    assert len(node_3.value) == 0
    bool_0 = False

def test_case_2190():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.isValid()
    var_2 = var_1.__str__()
    var_3 = b_s_t_1.contains(b_s_t_1)
    assert var_3 is False
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__len__()
    assert var_4 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = var_5.__str__()
    assert var_6 == '[]'
    var_7 = var_6.__str__()
    assert var_7 == '[]'

def test_case_2191():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.remove(none_type_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.__str__()
    assert var_3 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_5.__len__()
    assert var_6 == 0

def test_case_2192():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    var_1 = b_s_t_0.isValid()
    none_type_2 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_3 = b_s_t_1.build(b_s_t_3)
    var_4 = b_s_t_1.contains(none_type_2)
    b_s_t_4 = module_0.BST()
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.isValid()
    var_6 = b_s_t_5.__len__()
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.getOrder()
    var_8 = b_s_t_5.__len__()

def test_case_2193():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__str__()
    assert var_1 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_3.__len__()
    assert var_6 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    node_4 = module_0.Node(b_s_t_6)
    assert len(node_4.value) == 0
    var_8 = b_s_t_5.contains(node_4)
    assert var_8 is False
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_2.getOrder()

def test_case_2194():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    node_1 = module_0.Node(b_s_t_1)
    assert len(node_1.value) == 0
    var_2 = b_s_t_1.minValueNode(node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree2.Node'
    assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'binarySearchTree2.BST'
    assert len(var_2.value) == 0
    assert var_2.left is None
    assert var_2.right is None
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    list_0 = [node_2]
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.add(list_0)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    var_6 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.__str__()
    assert var_7 == '[]'
    none_type_2 = None
    node_3 = module_0.Node(none_type_2)
    var_8 = b_s_t_4.add(none_type_2)
    assert len(b_s_t_4) == 1
    node_4 = module_0.Node(var_7)
    assert node_4.value == '[]'

def test_case_2195():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_3 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    var_5 = b_s_t_3.__len__()
    assert var_5 == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_3.__len__()
    assert var_7 == 0
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_2)
    var_9 = b_s_t_5.__len__()
    assert var_9 == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_5 = module_0.Node(list_2)
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_6.isValid()
    none_type_1 = None
    node_6 = module_0.Node(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.contains(node_6)
    var_13 = var_12.__str__()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_14 = b_s_t_8.isValid()
    node_7 = module_0.Node(b_s_t_8)
    assert len(node_7.value) == 0
    var_15 = b_s_t_8.contains(var_14)
    var_16 = b_s_t_8.__len__()
    assert var_16 == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_17 = b_s_t_10.isValid()
    var_18 = var_17.__str__()
    var_19 = b_s_t_9.contains(b_s_t_9)
    bool_4 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_20 = b_s_t_11.remove(bool_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_21 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_22 = b_s_t_14.__len__()
    assert var_22 == 0
    var_23 = b_s_t_14.contains(var_21)

def test_case_2196():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    var_5 = b_s_t_1.contains(bool_0)

def test_case_2197():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    bool_1 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.getOrder()
    none_type_1 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.remove(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    none_type_2 = b_s_t_5.build(b_s_t_7)
    var_7 = var_6.__str__()
    assert var_7 == '[]'
    none_type_3 = b_s_t_5.build(b_s_t_7)
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_1)
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.minValueNode(node_2)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert var_8.value == [False, False, False, False]
    assert var_8.left is None
    assert var_8.right is None
    var_9 = b_s_t_8.add(var_8)
    assert len(b_s_t_8) == 1
    none_type_4 = None
    node_3 = module_0.Node(none_type_4)
    node_4 = module_0.Node(node_3)

def test_case_2198():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.isValid()
    var_1 = var_0.__str__()
    var_2 = b_s_t_0.contains(b_s_t_0)
    assert var_2 is False
    var_3 = var_0.__str__()

def test_case_2199():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.__str__()
    assert var_3 == '[]'
    var_4 = b_s_t_1.__len__()
    assert var_4 == 0
    var_5 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_6 = b_s_t_2.isValid()
    var_7 = var_6.__str__()
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_8 = b_s_t_3.minValueNode(node_2)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert var_8.value == [False, False, False, False]
    assert var_8.left is None
    assert var_8.right is None
    var_9 = b_s_t_3.add(var_8)
    assert len(b_s_t_3) == 1
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_10 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_11 = b_s_t_5.contains(b_s_t_5)
    node_3 = module_0.Node(bool_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_12 = b_s_t_6.getOrder()
    list_1 = [var_12, var_12]
    none_type_0 = b_s_t_6.build(list_1)
    assert len(b_s_t_6) == 2
    bool_3 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_13 = b_s_t_7.remove(bool_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.getOrder()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    var_16 = b_s_t_9.getOrder(b_s_t_8)
    complex_0 = 2277.72696 + 1912.08647j
    bytes_0 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_0 = {complex_0, bytes_0, bytes_0, complex_0}
    node_4 = module_0.Node(set_0)

def test_case_2200():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(node_0)
    assert var_1 is False

def test_case_2201():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.getOrder()
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(bytes_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.isValid()
    node_2 = module_0.Node(b_s_t_5)
    assert len(node_2.value) == 0
    var_7 = b_s_t_3.getOrder()

def test_case_2202():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_0 = module_0.Node(list_0)
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(b_s_t_4)

def test_case_2203():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(node_0)
    assert var_0 is False
    var_1 = var_0.__str__()
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder(none_type_1)

def test_case_2204():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_1 = module_0.Node(bytes_0)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(set_0)
    none_type_2 = None
    node_4 = module_0.Node(none_type_2)
    int_0 = -3611
    node_5 = module_0.Node(int_0)

def test_case_2205():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = var_1.__str__()
    assert var_2 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.contains(node_0)
    var_4 = var_3.__str__()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    list_0 = [var_5, var_5]
    none_type_1 = b_s_t_4.build(list_0)
    assert len(b_s_t_4) == 2
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = var_6.__str__()
    var_8 = var_7.__str__()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    var_9 = b_s_t_6.__str__()
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_10 = b_s_t_7.getOrder(none_type_2)
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_2 = module_0.Node(list_2)
    none_type_3 = None
    node_3 = module_0.Node(none_type_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    bool_3 = True
    node_5 = module_0.Node(bool_3)
    none_type_5 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.remove(none_type_5)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = var_11.__str__()
    bool_4 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.remove(bool_4)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_14 = b_s_t_12.contains(b_s_t_12)

def test_case_2206():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_4)
    assert node_1.value is None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_5 = b_s_t_5.getOrder(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    none_type_1 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.remove(none_type_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    none_type_2 = b_s_t_7.build(b_s_t_9)
    var_9 = b_s_t_7.contains(none_type_1)
    b_s_t_10 = module_0.BST()
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.__str__()
    assert var_10 == '[]'
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.remove(bool_1)
    var_12 = b_s_t_12.__len__()
    assert var_12 == 0
    b_s_t_13 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_0)
    var_13 = b_s_t_13.__str__()
    assert var_13 == '[]'
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_1)
    var_14 = b_s_t_13.isValid()

def test_case_2207():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_2 = b_s_t_2.add(none_type_1)
    assert len(b_s_t_2) == 1
    var_3 = b_s_t_2.__len__()
    assert var_3 == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    node_3 = module_0.Node(b_s_t_3)
    assert len(node_3.value) == 0
    bool_2 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    bool_3 = True
    node_4 = module_0.Node(bool_3)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_8 = b_s_t_9.__len__()
    assert var_8 == 0
    none_type_2 = None
    node_5 = module_0.Node(none_type_2)
    node_6 = module_0.Node(var_8)
    assert node_6.value == 0

def test_case_2208():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    none_type_1 = None
    node_3 = module_0.Node(none_type_1)
    node_4 = module_0.Node(var_2)
    assert node_4.value == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_4 = b_s_t_4.isValid()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    none_type_2 = None
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_5 = b_s_t_7.getOrder(none_type_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.isValid()
    node_5 = module_0.Node(b_s_t_8)
    assert len(node_5.value) == 0
    var_7 = b_s_t_6.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    complex_0 = 2277.72696 + 1912.08647j
    bytes_0 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_0 = {complex_0, bytes_0, bytes_0, complex_0}
    node_6 = module_0.Node(set_0)
    int_0 = -1509

def test_case_2209():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    var_3 = b_s_t_1.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.minValueNode(node_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'binarySearchTree2.Node'
    assert var_4.value == [False, False, False, False]
    assert var_4.left is None
    assert var_4.right is None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.getOrder()
    var_7 = b_s_t_7.add(var_6)
    assert len(b_s_t_7) == 1
    node_2 = module_0.Node(var_6)
    assert node_2.value == []
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.isValid()
    none_type_1 = None
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.remove(none_type_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.getOrder()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    none_type_2 = b_s_t_10.build(b_s_t_12)
    var_13 = var_12.__str__()
    assert var_13 == '[]'
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_13 = module_0.BST()
    var_14 = b_s_t_13.isValid()
    b_s_t_14 = module_0.BST()
    var_15 = b_s_t_14.isValid()
    node_5 = module_0.Node(b_s_t_14)
    var_16 = b_s_t_14.contains(var_15)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    b_s_t_15 = module_0.BST()
    none_type_4 = b_s_t_15.build(b_s_t_15)
    var_17 = b_s_t_15.__str__()
    assert var_17 == '[]'
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    b_s_t_16 = module_0.BST()
    var_18 = b_s_t_16.__len__()
    var_19 = b_s_t_16.add(var_18)
    assert len(b_s_t_16) == 1
    bool_3 = False
    b_s_t_17 = module_0.BST()
    var_20 = b_s_t_17.remove(bool_3)
    b_s_t_18 = module_0.BST()
    b_s_t_19 = module_0.BST()
    var_21 = b_s_t_19.getOrder()
    b_s_t_20 = module_0.BST()
    var_22 = b_s_t_20.getOrder()
    b_s_t_21 = module_0.BST()

def test_case_2210():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.contains(b_s_t_3)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_2 = module_0.Node(bytes_0)
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_4.build(set_0)
    float_0 = 2896.416
    list_0 = [float_0, float_0, float_0, float_0]
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.remove(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    node_4 = module_0.Node(b_s_t_6)
    assert len(node_4.value) == 0
    var_6 = b_s_t_6.contains(var_5)
    var_7 = b_s_t_6.__len__()
    assert var_7 == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    node_5 = module_0.Node(b_s_t_8)
    assert len(node_5.value) == 0
    var_9 = b_s_t_7.contains(node_5)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0

def test_case_2211():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    var_2 = b_s_t_1.add(var_1)
    assert len(b_s_t_1) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value == []
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_2212():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = b_s_t_0.build(var_0)
    assert len(b_s_t_0) == 2
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_1)
    var_2 = b_s_t_1.isValid()
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    node_3 = module_0.Node(var_3)
    assert node_3.value == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_2)
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = var_7.__str__()
    assert var_8 == '[]'
    var_9 = var_8.__str__()
    assert var_9 == '[]'
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_6.__len__()
    assert var_11 == 0
    var_12 = b_s_t_6.__str__()
    assert var_12 == '[]'
    var_13 = var_10.__str__()
    assert var_13 == '[]'
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_14 = b_s_t_7.remove(bytes_0)
    none_type_3 = None
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_15 = b_s_t_8.getOrder(none_type_3)
    var_16 = b_s_t_8.isValid()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_17 = b_s_t_9.__str__()
    assert var_17 == '[]'
    set_0 = set()
    node_5 = module_0.Node(set_0)
    var_18 = b_s_t_8.remove(none_type_3)

def test_case_2213():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    b_s_t_3 = module_0.BST()
    var_3 = b_s_t_3.isValid()
    var_4 = b_s_t_3.__len__()
    b_s_t_4 = module_0.BST()
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_3.__len__()
    bool_0 = False
    b_s_t_5 = module_0.BST()
    var_7 = b_s_t_5.remove(bool_0)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.contains(b_s_t_6)
    node_0 = module_0.Node(bool_0)
    var_9 = b_s_t_1.getOrder()

def test_case_2214():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_2215():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = b_s_t_0.contains(none_type_0)
    b_s_t_3 = module_0.BST()
    b_s_t_4 = module_0.BST()
    var_3 = b_s_t_4.__str__()
    assert var_3 == '[]'
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    var_4 = b_s_t_4.add(none_type_2)
    assert len(b_s_t_4) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == '[]'
    none_type_3 = None
    node_2 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.contains(node_2)
    var_6 = var_5.__str__()
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    set_0 = set()
    node_4 = module_0.Node(set_0)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_6.getOrder()
    var_9 = var_7.__len__()
    assert var_9 == 2
    none_type_4 = None
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.remove(none_type_4)
    b_s_t_8 = module_0.BST()
    bool_1 = True
    node_5 = module_0.Node(bool_1)
    b_s_t_9 = module_0.BST()
    var_11 = b_s_t_9.contains(b_s_t_9)
    var_12 = b_s_t_9.__str__()
    assert var_12 == '[]'
    set_1 = set()
    node_6 = module_0.Node(set_1)
    b_s_t_10 = module_0.BST()
    none_type_5 = b_s_t_10.build(set_1)
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    b_s_t_11 = module_0.BST()
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_7 = module_0.Node(list_0)
    var_14 = b_s_t_11.__str__()
    assert var_14 == '[]'
    var_15 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_12.getOrder()
    none_type_6 = None
    node_8 = module_0.Node(none_type_6)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    str_0 = 'zyiwx_8k+H)@y|zWl1E'

def test_case_2216():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_0.remove(var_1)
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_1 = b_s_t_2.build(b_s_t_4)
    var_5 = var_4.__str__()
    assert var_5 == '[]'
    none_type_2 = b_s_t_2.build(b_s_t_4)
    none_type_3 = None
    b_s_t_5 = module_0.BST()
    var_6 = b_s_t_5.remove(none_type_3)
    b_s_t_6 = module_0.BST()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    var_7 = b_s_t_7.contains(b_s_t_7)
    bool_2 = False
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.getOrder()
    var_11 = b_s_t_10.getOrder(b_s_t_9)
    bool_3 = False
    list_1 = [bool_3, bool_3, bool_3, bool_3]
    node_3 = module_0.Node(list_1)
    b_s_t_12 = module_0.BST()
    var_12 = b_s_t_12.__str__()
    assert var_12 == '[]'
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    var_13 = b_s_t_12.add(none_type_4)
    assert len(b_s_t_12) == 1
    var_14 = b_s_t_12.__len__()
    assert var_14 == 1
    none_type_5 = None
    node_5 = module_0.Node(none_type_5)
    b_s_t_13 = module_0.BST()
    none_type_6 = b_s_t_13.build(b_s_t_13)
    node_6 = module_0.Node(none_type_5)
    var_15 = b_s_t_13.remove(node_6)

def test_case_2217():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    bool_0 = True
    node_1 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = var_0.__str__()
    none_type_2 = None
    node_2 = module_0.Node(none_type_2)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    set_0 = set()
    node_3 = module_0.Node(set_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_3 = b_s_t_5.build(set_0)
    none_type_4 = None
    node_4 = module_0.Node(none_type_4)
    int_0 = -3611
    node_5 = module_0.Node(int_0)
    none_type_5 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_7 = b_s_t_6.remove(none_type_5)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = True
    node_6 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.contains(b_s_t_8)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_7 = module_0.Node(bytes_0)
    none_type_6 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.remove(none_type_6)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_10 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_7 = b_s_t_9.build(b_s_t_11)
    var_11 = var_10.__str__()
    assert var_11 == '[]'

def test_case_2218():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    var_2 = b_s_t_1.contains(var_1)
    assert var_2 is False
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_1.remove(var_2)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_2 = module_0.Node(list_1)
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.isValid()
    var_7 = b_s_t_4.__len__()
    assert var_7 == 0
    bool_2 = False
    list_2 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.isValid()
    var_10 = b_s_t_5.isValid()
    node_4 = module_0.Node(bool_2)
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    list_3 = [node_5]
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.add(list_3)
    assert len(b_s_t_7) == 1
    node_6 = module_0.Node(list_3)
    set_0 = set()
    node_7 = module_0.Node(set_0)
    set_1 = set()
    node_8 = module_0.Node(set_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    none_type_1 = b_s_t_8.build(set_1)
    none_type_2 = None
    node_9 = module_0.Node(none_type_2)
    int_0 = -3611
    node_10 = module_0.Node(int_0)

def test_case_2219():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_1)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    float_0 = 2896.416
    list_2 = [float_0, float_0, float_0, float_0]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.remove(list_2)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder()
    var_4 = b_s_t_4.add(var_3)
    assert len(b_s_t_4) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value is None
    set_0 = set()
    node_4 = module_0.Node(set_0)
    var_5 = var_3.__len__()
    assert var_5 == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.getOrder()
    var_7 = var_6.__str__()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    bool_2 = False
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.remove(bool_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    var_11 = b_s_t_8.add(var_10)
    assert len(b_s_t_8) == 1
    var_12 = var_11.__str__()
    assert var_12 == 'None'
    var_13 = b_s_t_5.__str__()

def test_case_2220():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_1 = module_0.Node(list_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.__str__()
    assert var_4 == '[]'
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.contains(node_2)
    var_6 = var_5.__str__()
    int_0 = 1195

def test_case_2221():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.__str__()
    assert var_1 == '[]'
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_3 = module_0.Node(var_4)
    assert node_3.value is None
    none_type_1 = None
    node_4 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_2 = b_s_t_4.build(b_s_t_4)
    node_5 = module_0.Node(none_type_1)
    bool_2 = False
    b_s_t_5 = module_0.BST()
    var_5 = b_s_t_5.remove(bool_2)
    b_s_t_6 = module_0.BST()
    var_6 = b_s_t_6.__str__()
    assert var_6 == '[]'
    var_7 = b_s_t_6.__len__()
    var_8 = b_s_t_6.__str__()
    assert var_8 == '[]'

def test_case_2222():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_1.remove(var_2)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_4 = b_s_t_2.remove(none_type_1)
    bool_1 = False
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(bool_1)
    var_6 = b_s_t_3.__str__()
    assert var_6 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    node_3 = module_0.Node(b_s_t_4)
    assert len(node_3.value) == 0
    var_8 = b_s_t_4.contains(var_7)
    bool_2 = False
    list_0 = [bool_2, bool_2, bool_2, bool_2]
    node_4 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_9 = b_s_t_4.remove(var_8)

def test_case_2223():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_2.contains(var_2)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = var_5.__str__()
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_3 = module_0.Node(list_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_4 = module_0.Node(b_s_t_7)
    assert len(node_4.value) == 0
    var_9 = b_s_t_6.contains(node_4)
    node_5 = module_0.Node(node_4)
    bool_3 = False
    list_2 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_2)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.isValid()
    var_12 = b_s_t_8.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_14 = b_s_t_11.getOrder()
    var_15 = b_s_t_11.add(var_14)
    assert len(b_s_t_11) == 1
    node_7 = module_0.Node(var_14)
    assert node_7.value == []
    var_16 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_17 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_18 = b_s_t_13.getOrder()
    var_19 = b_s_t_13.add(var_18)
    assert len(b_s_t_13) == 1
    node_8 = module_0.Node(var_18)
    assert node_8.value == []
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_20 = b_s_t_14.__str__()
    assert var_20 == '[]'
    var_21 = b_s_t_12.__str__()
    assert var_21 == '[]'
    set_0 = set()
    node_9 = module_0.Node(set_0)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_22 = b_s_t_15.__str__()
    assert var_22 == '[]'

def test_case_2224():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()

def test_case_2225():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.getOrder()
    var_2 = b_s_t_2.add(var_1)
    assert len(b_s_t_2) == 1
    node_1 = module_0.Node(var_1)
    assert node_1.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    node_2 = module_0.Node(b_s_t_4)
    assert len(node_2.value) == 0
    var_4 = b_s_t_3.contains(node_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    bool_0 = True
    node_3 = module_0.Node(bool_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_6 = b_s_t_7.remove(bool_0)
    var_7 = b_s_t_7.__len__()
    assert var_7 == 0
    bool_1 = True
    node_4 = module_0.Node(bool_1)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.__str__()
    assert var_8 == '[]'
    none_type_0 = None
    node_5 = module_0.Node(none_type_0)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_2 = False
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_9 = b_s_t_11.remove(bool_2)
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_10 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_11 = b_s_t_14.getOrder()
    var_12 = b_s_t_13.getOrder(b_s_t_12)

def test_case_2226():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    var_2 = b_s_t_0.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_1 = True
    node_1 = module_0.Node(bool_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder(none_type_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.isValid()
    node_2 = module_0.Node(b_s_t_6)
    assert len(node_2.value) == 0
    var_6 = b_s_t_4.getOrder()

def test_case_2227():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    list_0 = [b_s_t_0]
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_0 = b_s_t_1.remove(list_0)

def test_case_2228():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    node_0 = module_0.Node(var_1)
    assert node_0.value is None
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_2 = var_0.__len__()
    assert var_2 == 0
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(b_s_t_1)
    node_3 = module_0.Node(none_type_0)
    none_type_2 = None
    b_s_t_2 = module_0.BST()
    var_3 = b_s_t_2.getOrder(none_type_2)
    var_4 = b_s_t_2.isValid()
    b_s_t_3 = module_0.BST()
    var_5 = b_s_t_3.__str__()
    set_1 = set()
    node_4 = module_0.Node(set_1)
    var_6 = b_s_t_2.remove(none_type_2)
    bool_0 = True
    node_5 = module_0.Node(bool_0)
    b_s_t_4 = module_0.BST()
    var_7 = b_s_t_4.remove(bool_0)
    none_type_3 = None
    node_6 = module_0.Node(none_type_3)
    b_s_t_5 = module_0.BST()
    none_type_4 = b_s_t_5.build(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_8 = b_s_t_6.__str__()
    none_type_5 = None
    node_7 = module_0.Node(none_type_5)
    var_9 = b_s_t_6.add(none_type_5)
    assert len(b_s_t_6) == 1
    node_8 = module_0.Node(var_8)
    bool_1 = True
    node_9 = module_0.Node(bool_1)
    b_s_t_7 = module_0.BST()
    var_10 = b_s_t_7.remove(bool_1)
    var_11 = b_s_t_7.__len__()
    assert var_11 == 0

def test_case_2229():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    var_1 = b_s_t_0.add(var_0)
    assert len(b_s_t_0) == 1
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.isValid()
    node_0 = module_0.Node(b_s_t_3)
    assert len(node_0.value) == 0
    var_4 = b_s_t_1.getOrder()
    none_type_1 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(none_type_1)
    bool_0 = False
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_6 = b_s_t_5.remove(bool_0)
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_1 = module_0.Node(list_0)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.minValueNode(node_1)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'binarySearchTree2.Node'
    assert var_8.value == [False, False, False, False]
    assert var_8.left is None
    assert var_8.right is None
    set_0 = set()
    node_2 = module_0.Node(set_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_7.getOrder()
    bool_2 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_11 = b_s_t_8.remove(bool_2)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_12 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_13 = b_s_t_11.getOrder()
    var_14 = b_s_t_10.getOrder(b_s_t_9)
    none_type_2 = None
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_15 = b_s_t_12.remove(none_type_2)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.getOrder()
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    none_type_3 = b_s_t_12.build(b_s_t_14)
    var_17 = b_s_t_12.contains(none_type_2)

def test_case_2230():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.__len__()
    assert var_1 == 0
    var_2 = b_s_t_0.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_4 = b_s_t_1.remove(none_type_0)

def test_case_2231():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_0 = b_s_t_1.build(set_0)
    var_2 = b_s_t_1.isValid()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.__str__()
    assert var_5 == '[]'
    var_6 = b_s_t_4.__len__()
    assert var_6 == 0
    var_7 = b_s_t_3.contains(var_5)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder(none_type_1)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_9 = b_s_t_7.isValid()
    node_2 = module_0.Node(b_s_t_7)
    assert len(node_2.value) == 0

def test_case_2232():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    set_0 = set()
    node_1 = module_0.Node(set_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    none_type_1 = b_s_t_1.build(set_0)
    var_0 = b_s_t_1.__str__()
    assert var_0 == '[]'
    none_type_2 = b_s_t_1.build(var_0)
    assert len(b_s_t_1) == 2
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0

def test_case_2233():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.contains(b_s_t_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__str__()
    assert var_2 == '[]'
    var_3 = b_s_t_2.__len__()
    assert var_3 == 0
    var_4 = b_s_t_1.contains(var_2)
    str_0 = ''
    node_0 = module_0.Node(str_0)
    none_type_0 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.remove(none_type_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    none_type_1 = b_s_t_3.build(b_s_t_5)
    node_1 = module_0.Node(b_s_t_5)
    b_s_t_6 = module_0.BST()
    var_7 = b_s_t_6.__str__()
    assert var_7 == '[]'
    b_s_t_7 = module_0.BST()
    none_type_2 = None
    b_s_t_8 = module_0.BST()
    var_8 = b_s_t_8.remove(none_type_2)
    b_s_t_9 = module_0.BST()
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_10 = module_0.BST()
    var_9 = b_s_t_10.contains(b_s_t_10)
    none_type_3 = None
    b_s_t_11 = module_0.BST()
    var_10 = b_s_t_11.remove(none_type_3)
    b_s_t_12 = module_0.BST()
    var_11 = b_s_t_12.getOrder()
    b_s_t_13 = module_0.BST()
    none_type_4 = b_s_t_11.build(b_s_t_13)
    var_12 = b_s_t_11.contains(none_type_3)
    none_type_5 = None
    b_s_t_14 = module_0.BST()
    var_13 = b_s_t_14.remove(none_type_5)
    b_s_t_15 = module_0.BST()
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_16 = module_0.BST()
    var_14 = b_s_t_16.contains(b_s_t_16)
    var_15 = b_s_t_15.__str__()
    assert var_15 == '[]'
    b_s_t_17 = module_0.BST()
    var_16 = b_s_t_17.__str__()
    assert var_16 == '[]'
    none_type_6 = None
    node_4 = module_0.Node(none_type_6)
    var_17 = b_s_t_17.add(none_type_6)
    assert len(b_s_t_17) == 1
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    node_5 = module_0.Node(bytes_0)
    var_18 = b_s_t_13.add(bool_1)
    assert len(b_s_t_13) == 1

def test_case_2234():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_1 = b_s_t_0.add(none_type_0)
    assert len(b_s_t_0) == 1
    var_2 = b_s_t_0.__len__()
    assert var_2 == 1
    none_type_1 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.getOrder(none_type_1)
    var_4 = b_s_t_1.isValid()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    set_0 = set()
    node_1 = module_0.Node(set_0)
    var_6 = b_s_t_1.remove(none_type_1)
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    set_1 = set()
    node_3 = module_0.Node(set_1)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_7 = b_s_t_3.__str__()
    assert var_7 == '[]'
    var_8 = b_s_t_3.getOrder()
    var_9 = var_7.__len__()
    assert var_9 == 2
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_10 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_11 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.getOrder()
    var_13 = b_s_t_7.getOrder()

def test_case_2235():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__len__()
    assert var_1 == 0
    var_2 = var_1.__str__()
    assert var_2 == '0'
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.__str__()
    assert var_3 == '[]'
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.__str__()
    assert var_4 == '[]'
    list_0 = []

def test_case_2236():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder(none_type_0)
    var_2 = b_s_t_0.getOrder()
    none_type_1 = None
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.getOrder(none_type_1)
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.remove(bytes_0)
    none_type_2 = None
    node_0 = module_0.Node(none_type_2)
    node_1 = module_0.Node(node_0)
    bool_1 = False
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.remove(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_6 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_7 = b_s_t_7.getOrder()
    var_8 = b_s_t_7.getOrder()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_10 = b_s_t_9.getOrder()
    var_11 = b_s_t_9.add(var_10)
    assert len(b_s_t_9) == 1
    node_2 = module_0.Node(var_10)
    assert node_2.value == []
    var_12 = b_s_t_9.isValid()
    bool_2 = True
    node_3 = module_0.Node(bool_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_10.__len__()
    assert var_14 == 0
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    list_0 = [none_type_3]
    var_15 = b_s_t_11.remove(list_0)

def test_case_2237():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_2.build(set_0)
    none_type_2 = None
    node_1 = module_0.Node(none_type_2)
    int_0 = -3611
    node_2 = module_0.Node(int_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1

def test_case_2238():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder()
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    var_4 = var_3.__str__()
    assert var_4 == 'None'

def test_case_2239():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    var_2 = b_s_t_1.__str__()
    assert var_2 == '[]'
    var_3 = var_0.__str__()

def test_case_2240():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.getOrder(none_type_0)
    var_1 = b_s_t_0.isValid()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = var_2.__str__()
    assert var_3 == '[]'
    var_4 = var_3.__str__()
    assert var_4 == '[]'
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_5 = b_s_t_3.__str__()
    assert var_5 == '[]'
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    var_6 = b_s_t_3.add(none_type_1)
    assert len(b_s_t_3) == 1
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_7 = b_s_t_4.isValid()
    node_1 = module_0.Node(b_s_t_4)
    assert len(node_1.value) == 0
    var_8 = b_s_t_4.contains(var_7)
    var_9 = b_s_t_4.__len__()
    assert var_9 == 0
    none_type_2 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_10 = b_s_t_5.remove(none_type_2)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_11 = b_s_t_7.contains(b_s_t_7)
    var_12 = b_s_t_7.__str__()
    assert var_12 == '[]'
    bool_1 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.contains(b_s_t_9)
    node_3 = module_0.Node(bool_1)
    bool_2 = False
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.remove(bool_2)
    none_type_3 = None
    node_4 = module_0.Node(none_type_3)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_4 = b_s_t_11.build(b_s_t_11)
    node_5 = module_0.Node(none_type_3)
    none_type_5 = None
    b_s_t_12 = module_0.BST()
    var_16 = b_s_t_12.getOrder(none_type_5)
    bool_3 = False
    list_0 = [bool_3, bool_3, bool_3, bool_3]
    node_6 = module_0.Node(list_0)
    none_type_6 = None
    node_7 = module_0.Node(none_type_6)
    b_s_t_13 = module_0.BST()
    b_s_t_14 = module_0.BST()
    var_17 = b_s_t_14.isValid()

def test_case_2241():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.contains(node_0)
    assert var_0 is False
    var_1 = var_0.__str__()
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.getOrder()
    var_3 = b_s_t_3.add(var_2)
    assert len(b_s_t_3) == 1
    node_2 = module_0.Node(var_3)
    assert node_2.value is None

def test_case_2242():
    float_0 = -3274.516
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0

def test_case_2243():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    none_type_0 = b_s_t_0.build(set_0)
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.remove(bool_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    var_3 = var_2.__str__()
    assert var_3 == '0'
    none_type_1 = None
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder(none_type_1)
    var_5 = b_s_t_3.isValid()
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.__str__()
    assert var_6 == '[]'
    set_1 = set()
    node_1 = module_0.Node(set_1)
    var_7 = b_s_t_3.remove(none_type_1)
    bool_1 = True
    node_2 = module_0.Node(bool_1)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.remove(bool_1)
    complex_0 = 2277.72696 + 1912.08647j
    bytes_0 = b"\xb5\x13\n\xd7<,'\x96st\x9eO]\xb4p\xa4"
    set_2 = {complex_0, bytes_0, bytes_0, complex_0}
    node_3 = module_0.Node(set_2)
    bool_2 = True
    node_4 = module_0.Node(bool_2)
    set_3 = set()
    node_5 = module_0.Node(set_3)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_9 = b_s_t_6.__str__()
    assert var_9 == '[]'
    var_10 = b_s_t_6.getOrder()
    var_11 = var_9.__len__()
    assert var_11 == 2
    bool_3 = True
    node_6 = module_0.Node(bool_3)
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_12 = b_s_t_7.isValid()
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_13 = b_s_t_8.__len__()
    assert var_13 == 0
    none_type_2 = None
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_14 = b_s_t_9.remove(none_type_2)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_15 = b_s_t_10.getOrder()
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    none_type_3 = b_s_t_9.build(b_s_t_11)
    var_16 = var_15.__str__()
    assert var_16 == '[]'
    none_type_4 = b_s_t_9.build(b_s_t_11)
    none_type_5 = None
    b_s_t_12 = module_0.BST()
    var_17 = b_s_t_12.getOrder(none_type_5)
    var_18 = b_s_t_12.isValid()

def test_case_2244():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_0 = module_0.Node(list_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.minValueNode(node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
    assert var_0.value == [False, False, False, False]
    assert var_0.left is None
    assert var_0.right is None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.__str__()
    assert var_1 == '[]'
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    list_1 = [node_1]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_2 = b_s_t_3.add(list_1)
    assert len(b_s_t_3) == 1
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    list_2 = [none_type_1]
    var_3 = b_s_t_4.remove(list_2)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.getOrder()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_5 = b_s_t_6.getOrder()
    var_6 = b_s_t_6.add(var_5)
    assert len(b_s_t_6) == 1
    node_3 = module_0.Node(var_5)
    assert node_3.value == []
    var_7 = b_s_t_6.isValid()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    var_8 = b_s_t_7.isValid()
    node_4 = module_0.Node(var_8)
    bool_1 = False
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_9 = b_s_t_8.remove(bool_1)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    bool_2 = False
    list_3 = [bool_2, bool_2, bool_2, bool_2]
    node_5 = module_0.Node(list_3)
    var_10 = b_s_t_10.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_10.__str__()
    assert var_11 == '[]'
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    node_7 = module_0.Node(node_6)
    var_12 = var_0.__str__()

def test_case_2245():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    var_1 = b_s_t_0.__str__()
    assert var_1 == '[]'
    bool_0 = False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.remove(bool_0)
    list_0 = [var_2, var_0, var_2, var_1]

def test_case_2246():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    var_2 = b_s_t_0.__len__()
    assert var_2 == 0
    bytes_0 = b'\x06JG&\x15\xad\xefYH_\x8eA\xe7h'
    node_1 = module_0.Node(bytes_0)
    none_type_0 = None
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_3 = b_s_t_1.remove(none_type_0)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    bool_0 = True
    node_2 = module_0.Node(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.contains(b_s_t_3)
    var_5 = b_s_t_2.__str__()
    assert var_5 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.getOrder()
    var_8 = b_s_t_5.add(var_7)
    assert len(b_s_t_5) == 1
    node_3 = module_0.Node(var_7)
    assert node_3.value == []
    var_9 = b_s_t_5.isValid()
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    node_4 = module_0.Node(b_s_t_6)
    assert len(node_4.value) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1, bool_1]
    node_5 = module_0.Node(list_0)
    var_10 = b_s_t_7.__str__()
    assert var_10 == '[]'
    var_11 = b_s_t_7.__str__()
    assert var_11 == '[]'
    var_12 = b_s_t_6.add(b_s_t_7)
    assert len(b_s_t_6) == 1
    assert len(node_4.value) == 1

def test_case_2247():
    str_0 = '0NykyO^!F\r'
    set_0 = set()
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(set_0)
    var_1 = var_0.__str__()

def test_case_2248():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__len__()
    assert var_0 == 0
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.isValid()
    node_0 = module_0.Node(b_s_t_1)
    assert len(node_0.value) == 0
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_3 = b_s_t_3.getOrder()
    var_4 = b_s_t_3.add(var_3)
    assert len(b_s_t_3) == 1
    node_1 = module_0.Node(var_3)
    assert node_1.value == []
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder(none_type_0)
    var_6 = b_s_t_4.isValid()
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_2 = module_0.Node(list_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.minValueNode(node_2)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree2.Node'
    assert var_7.value == [False, False, False, False]
    assert var_7.left is None
    assert var_7.right is None
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_8 = b_s_t_6.getOrder()
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    node_3 = module_0.Node(b_s_t_7)
    assert len(node_3.value) == 0
    var_9 = b_s_t_6.contains(node_3)
    node_4 = module_0.Node(node_3)
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_10 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_11 = b_s_t_9.getOrder()
    var_12 = b_s_t_9.add(var_11)
    assert len(b_s_t_9) == 1
    node_5 = module_0.Node(var_11)
    assert node_5.value == []
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_13 = b_s_t_10.__str__()
    assert var_13 == '[]'
    var_14 = b_s_t_8.__str__()
    assert var_14 == '[]'

def test_case_2249():
    bool_0 = False
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bool_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    bool_1 = True
    node_0 = module_0.Node(bool_1)
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_1 = b_s_t_2.remove(bool_1)
    var_2 = b_s_t_2.__len__()
    assert var_2 == 0
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    none_type_0 = None
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_3 = b_s_t_4.getOrder(none_type_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_4 = b_s_t_5.isValid()
    node_1 = module_0.Node(b_s_t_5)
    assert len(node_1.value) == 0
    var_5 = b_s_t_3.getOrder()
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_6 = b_s_t_8.isValid()
    node_3 = module_0.Node(var_6)
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_7 = b_s_t_9.isValid()
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_8 = b_s_t_10.__str__()
    assert var_8 == '[]'
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_9 = b_s_t_12.__str__()
    assert var_9 == '[]'
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_10 = b_s_t_13.getOrder()
    var_11 = b_s_t_13.add(var_10)
    assert len(b_s_t_13) == 1
    node_4 = module_0.Node(var_11)
    assert node_4.value is None
    set_0 = set()
    node_5 = module_0.Node(set_0)
    var_12 = var_10.__len__()
    assert var_12 == 0
    none_type_2 = None
    node_6 = module_0.Node(none_type_2)
    list_0 = [node_6]
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_13 = b_s_t_14.add(list_0)
    assert len(b_s_t_14) == 1
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_14 = b_s_t_15.__str__()
    var_15 = b_s_t_15.__len__()
    assert var_15 == 0
    var_16 = b_s_t_15.isValid()

def test_case_2250():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.__str__()
    assert var_0 == '[]'
    var_1 = b_s_t_0.getOrder()
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    bool_0 = False
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_3 = b_s_t_2.remove(bool_0)
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.getOrder()
    var_5 = b_s_t_3.add(var_4)
    assert len(b_s_t_3) == 1
    var_6 = var_5.__str__()
    assert var_6 == 'None'
    var_7 = b_s_t_0.contains(var_2)

def test_case_2251():
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.isValid()
    node_0 = module_0.Node(b_s_t_0)
    assert len(node_0.value) == 0
    var_1 = b_s_t_0.contains(var_0)
    assert var_1 is False
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_2 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    node_1 = module_0.Node(b_s_t_2)
    assert len(node_1.value) == 0
    var_3 = b_s_t_1.contains(node_1)
    none_type_0 = None
    node_2 = module_0.Node(none_type_0)
    list_0 = [node_2]
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.add(list_0)
    assert len(b_s_t_3) == 1
    node_3 = module_0.Node(list_0)
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_5 = b_s_t_4.getOrder()
    var_6 = b_s_t_4.add(var_5)
    assert len(b_s_t_4) == 1
    bool_0 = True
    node_4 = module_0.Node(bool_0)
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_7 = b_s_t_5.__str__()
    assert var_7 == '[]'
    none_type_1 = None
    node_5 = module_0.Node(none_type_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    b_s_t_7 = module_0.BST()
    assert len(b_s_t_7) == 0
    b_s_t_8 = module_0.BST()
    assert len(b_s_t_8) == 0
    var_8 = b_s_t_8.getOrder()
    b_s_t_9 = module_0.BST()
    assert len(b_s_t_9) == 0
    var_9 = b_s_t_9.getOrder()
    var_10 = b_s_t_9.add(var_9)
    assert len(b_s_t_9) == 1
    node_6 = module_0.Node(var_9)
    assert node_6.value == []
    bool_1 = True
    node_7 = module_0.Node(bool_1)
    b_s_t_10 = module_0.BST()
    assert len(b_s_t_10) == 0
    var_11 = b_s_t_10.remove(bool_1)
    b_s_t_11 = module_0.BST()
    assert len(b_s_t_11) == 0
    var_12 = b_s_t_11.isValid()
    b_s_t_12 = module_0.BST()
    assert len(b_s_t_12) == 0
    var_13 = b_s_t_12.isValid()
    node_8 = module_0.Node(b_s_t_12)
    assert len(node_8.value) == 0
    var_14 = b_s_t_12.contains(var_13)
    var_15 = b_s_t_12.__str__()
    assert var_15 == '[]'
    bool_2 = False
    list_1 = [bool_2, bool_2, bool_2, bool_2]
    node_9 = module_0.Node(list_1)
    b_s_t_13 = module_0.BST()
    assert len(b_s_t_13) == 0
    var_16 = b_s_t_13.isValid()
    none_type_2 = None
    b_s_t_14 = module_0.BST()
    assert len(b_s_t_14) == 0
    var_17 = b_s_t_14.remove(none_type_2)
    b_s_t_15 = module_0.BST()
    assert len(b_s_t_15) == 0
    var_18 = b_s_t_15.getOrder()
    b_s_t_16 = module_0.BST()
    assert len(b_s_t_16) == 0
    none_type_3 = b_s_t_14.build(b_s_t_16)
    node_10 = module_0.Node(b_s_t_16)

def test_case_2252():
    bytes_0 = b'\xebF\x0c\xa1?\t\x9d\xae\xd7n\xf0P\xbb,\x1e'
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(bytes_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    var_2 = b_s_t_2.getOrder()
    var_3 = b_s_t_2.add(var_2)
    assert len(b_s_t_2) == 1
    node_0 = module_0.Node(var_2)
    assert node_0.value == []
    b_s_t_3 = module_0.BST()
    assert len(b_s_t_3) == 0
    var_4 = b_s_t_3.__str__()
    assert var_4 == '[]'
    var_5 = b_s_t_1.__str__()
    assert var_5 == '[]'
    b_s_t_4 = module_0.BST()
    assert len(b_s_t_4) == 0
    var_6 = b_s_t_4.getOrder()
    var_7 = b_s_t_4.add(var_6)
    assert len(b_s_t_4) == 1
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    node_1 = module_0.Node(list_0)
    none_type_0 = None
    b_s_t_5 = module_0.BST()
    assert len(b_s_t_5) == 0
    var_8 = b_s_t_5.getOrder(none_type_0)
    none_type_1 = None
    node_2 = module_0.Node(none_type_1)
    var_9 = b_s_t_5.isValid()
    bool_1 = False
    list_1 = [bool_1, bool_1, bool_1, bool_1]
    node_3 = module_0.Node(list_1)
    b_s_t_6 = module_0.BST()
    assert len(b_s_t_6) == 0
    var_10 = b_s_t_6.minValueNode(node_3)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'binarySearchTree2.Node'
    assert var_10.value == [False, False, False, False]
    assert var_10.left is None
    assert var_10.right is None
    var_11 = b_s_t_6.add(var_10)
    assert len(b_s_t_6) == 1

def test_case_2253():
    none_type_0 = None
    b_s_t_0 = module_0.BST()
    assert len(b_s_t_0) == 0
    var_0 = b_s_t_0.remove(none_type_0)
    b_s_t_1 = module_0.BST()
    assert len(b_s_t_1) == 0
    var_1 = b_s_t_1.getOrder()
    b_s_t_2 = module_0.BST()
    assert len(b_s_t_2) == 0
    none_type_1 = b_s_t_0.build(b_s_t_2)
    var_2 = var_1.__str__()
    assert var_2 == '[]'
