[*] Start mutation process:
   - targets: binarySearchTree2.py
   - tests: ./MIO-WHOLE_SUITE
[*] 36 tests passed:
   - test_binarySearchTree2_WHOLE_SUITE [0.05675 s]
   - test_binarySearchTree2_MIO [0.04708 s]
[*] Start mutants generation and execution:
   - [#   1] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         self.root = self.__build(array, None, 0, len(array) + 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.07266 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:139: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa5211b0>
array = [698, 698, 698, 698]
root = <binarySearchTree2.Node object at 0x7f27aa521210>, left = 3, right = 5

>   ???
E   IndexError: list index out of range

binarySearchTree2:136: IndexError
   - [#   2] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
- 127:         mid = (left + right) // 2
+ 127:         mid = (left - right) // 2
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[0.09796 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
   - [#   3] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
- 127:         mid = (left + right) // 2
+ 127:         mid = (left + right) / 2
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[0.07301 s] incompetent

TypeError: binarySearchTree2:131: TypeError: list indices must be integers or slices, not float

   - [#   4] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
- 127:         mid = (left + right) // 2
+ 127:         mid = (left + right) * 2
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[0.07437 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa20e050>
array = [698, 698, 698, 698], root = None, left = 0, right = 3

>   ???
E   IndexError: list index out of range

binarySearchTree2:131: IndexError
   - [#   5] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
- 138:         self.__build(array, root, left, mid - 1)
+ 138:         self.__build(array, root, left, mid + 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[0.11828 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
   - [#   6] AOR binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
+ 139:         self.__build(array, root, mid - 1, right)
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[0.07599 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:139: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa75d240>
array = [698, 698, 698, 698]
root = <binarySearchTree2.Node object at 0x7f27aa75ca90>, left = -5, right = -4

>   ???
E   IndexError: list index out of range

binarySearchTree2:136: IndexError
   - [#   7] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
-  23:             self.size += 1
+  23:             self.size -= 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
--------------------------------------------------------------------------------
[0.07230 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
>       assert len(b_s_t_0) == 1
E       ValueError: __len__() should return >= 0

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:13: ValueError
   - [#   8] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
-  31:                 self.size += 1
+  31:                 self.size -= 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
--------------------------------------------------------------------------------
[0.07281 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
        var_0 = b_s_t_0.add(bool_0)
>       assert len(b_s_t_0) == 5
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:26: AssertionError
   - [#   9] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
-  37:                 self.size += 1
+  37:                 self.size -= 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
--------------------------------------------------------------------------------
[0.07615 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       ValueError: __len__() should return >= 0

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: ValueError
   - [#  10] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
   68:                 self.root = None
-  69:                 self.size -= 1
+  69:                 self.size += 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
   73:                 self.size -= 1
--------------------------------------------------------------------------------
[0.07938 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_9

def test_case_9():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.remove(b_s_t_0)
>       assert len(b_s_t_0) == 0
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:85: AssertionError
   - [#  11] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
-  73:                 self.size -= 1
+  73:                 self.size += 1
   74:         else:
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
--------------------------------------------------------------------------------
[0.08775 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        bool_0 = False
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.add(bool_0)
        assert len(b_s_t_1) == 1
        var_1 = b_s_t_1.contains(bool_0)
        assert var_1 is True
        var_2 = b_s_t_1.add(var_1)
        assert len(b_s_t_1) == 2
        var_3 = var_1.__str__()
        assert var_3 == 'True'
        var_4 = b_s_t_1.remove(bool_0)
>       assert len(b_s_t_1) == 1
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:60: AssertionError
   - [#  12] ASR binarySearchTree2: 
--------------------------------------------------------------------------------
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
- 132:             self.size += 1
+ 132:             self.size -= 1
  133:         else:
  134:             
  135:             
  136:             self.__add(root, array[mid])
--------------------------------------------------------------------------------
[0.07265 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [#  13] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
    4: 
    5: T = TypeVar('T')
    6: 
    7: class Node:
-   8:     def __init__(self, value: T):
-   9:         self.value = value
-  10:         self.left = None
-  11:         self.right = None
-  12: 
+   8:     @classmethod
+   9:     def __init__(self, value: T):
+  10:         self.value = value
+  11:         self.left = None
+  12:         self.right = None
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
--------------------------------------------------------------------------------
[0.09264 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        bool_0 = False
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.add(bool_0)
        assert len(b_s_t_1) == 1
        var_1 = b_s_t_1.contains(bool_0)
        assert var_1 is True
        var_2 = b_s_t_1.add(var_1)
        assert len(b_s_t_1) == 2
        var_3 = var_1.__str__()
        assert var_3 == 'True'
        var_4 = b_s_t_1.remove(bool_0)
>       assert len(b_s_t_1) == 1
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:60: AssertionError
   - [#  14] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
-  14:     def __init__(self):
-  15:         self.root = None
-  16:         self.size = 0
-  17:     
+  14:     @classmethod
+  15:     def __init__(self):
+  16:         self.root = None
+  17:         self.size = 0
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
--------------------------------------------------------------------------------
[0.07099 s] survived
   - [#  15] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
   17:     
-  18:     def add(self, value: T):
-  19:         if self.contains(value):
-  20:             return False
-  21:         elif self.root == None:
-  22:             self.root = Node(value)
-  23:             self.size += 1
-  24:         else:
-  25:             self.__add(self.root, value)
-  26:     
+  18:     @classmethod
+  19:     def add(self, value: T):
+  20:         if self.contains(value):
+  21:             return False
+  22:         elif self.root == None:
+  23:             self.root = Node(value)
+  24:             self.size += 1
+  25:         else:
+  26:             self.__add(self.root, value)
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
--------------------------------------------------------------------------------
[0.07019 s] incompetent

TypeError: binarySearchTree2:20: TypeError: BST.contains() missing 1 required positional argument: 'value'

   - [#  16] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
-  27:     def __add(self, root, value):
-  28:         if value < root.value:
-  29:             if root.left == None:
-  30:                 root.left = Node(value)
-  31:                 self.size += 1
-  32:             else:
-  33:                 self.__add(root.left, value)
-  34:         elif value >= root.value:
-  35:             if root.right == None:
-  36:                 root.right = Node(value)
-  37:                 self.size += 1
-  38:             else:
-  39:                 self.__add(root.right, value)
-  40:     
+  27:     @classmethod
+  28:     def __add(self, root, value):
+  29:         if value < root.value:
+  30:             if root.left == None:
+  31:                 root.left = Node(value)
+  32:                 self.size += 1
+  33:             else:
+  34:                 self.__add(root.left, value)
+  35:         elif value >= root.value:
+  36:             if root.right == None:
+  37:                 root.right = Node(value)
+  38:                 self.size += 1
+  39:             else:
+  40:                 self.__add(root.right, value)
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
--------------------------------------------------------------------------------
[0.07451 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>
root = <binarySearchTree2.Node object at 0x7f27aa619e40>, value = 698

>   ???
E   AttributeError: type object 'BST' has no attribute 'size'

binarySearchTree2:38: AttributeError
   - [#  17] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
-  41:     def contains(self, value):
-  42:         
-  43:         return self.__contains(self.root, value)
-  44:     
+  41:     @classmethod
+  42:     def contains(self, value):
+  43:         
+  44:         return self.__contains(self.root, value)
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
   48:         elif root.value == value:
--------------------------------------------------------------------------------
[0.07269 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>
value = <binarySearchTree2.BST object at 0x7f27aa55ee90>

>   ???
E   AttributeError: type object 'BST' has no attribute 'root'

binarySearchTree2:44: AttributeError
   - [#  18] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
-  45:     def __contains(self, root, value):
-  46:         if root == None:
-  47:             return False
-  48:         elif root.value == value:
-  49:             return True
-  50:         
-  51:         elif value < root.value:
-  52:             return self.__contains(root.left, value)
-  53:         else:
-  54:             return self.__contains(root.right, value)
-  55:     
+  45:     @classmethod
+  46:     def __contains(self, root, value):
+  47:         if root == None:
+  48:             return False
+  49:         elif root.value == value:
+  50:             return True
+  51:         
+  52:         elif value < root.value:
+  53:             return self.__contains(root.left, value)
+  54:         else:
+  55:             return self.__contains(root.right, value)
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
--------------------------------------------------------------------------------
[0.06900 s] survived
   - [#  19] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
-  56:     def minValueNode(self, node):
-  57:         current = node
-  58:         
-  59:         while current.left is not None:
-  60:             current = current.left
-  61:         
-  62:         return current
-  63:     
+  56:     @classmethod
+  57:     def minValueNode(self, node):
+  58:         current = node
+  59:         
+  60:         while current.left is not None:
+  61:             current = current.left
+  62:         
+  63:         return current
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
--------------------------------------------------------------------------------
[0.06674 s] survived
   - [#  20] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   60:             current = current.left
   61:         
   62:         return current
   63:     
-  64:     def remove(self, value):
-  65:         
-  66:         if self.contains(value):
-  67:             if self.size == 1:
-  68:                 self.root = None
-  69:                 self.size -= 1
-  70:             else:
-  71:                 
-  72:                 self.__remove(self.root, value)
-  73:                 self.size -= 1
-  74:         else:
-  75:             pass
-  76:     
+  64:     @classmethod
+  65:     def remove(self, value):
+  66:         
+  67:         if self.contains(value):
+  68:             if self.size == 1:
+  69:                 self.root = None
+  70:                 self.size -= 1
+  71:             else:
+  72:                 
+  73:                 self.__remove(self.root, value)
+  74:                 self.size -= 1
+  75:         else:
+  76:             pass
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
   79:             current = node
   80:             
--------------------------------------------------------------------------------
[0.09994 s] incompetent

TypeError: binarySearchTree2:67: TypeError: BST.contains() missing 1 required positional argument: 'value'

   - [#  21] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
-  77:     def __remove(self, root, value: T):
-  78:         def minValueNode(node):
-  79:             current = node
-  80:             
-  81:             while current.left is not None:
-  82:                 current = current.left
-  83:             
-  84:             return current
-  85:         
-  86:         if root is None:
-  87:             return root
-  88:         
-  89:         if value < root.value:
-  90:             root.left = self.__remove(root.left, value)
-  91:         
-  92:         elif value > root.value:
-  93:             root.right = self.__remove(root.right, value)
-  94:         else:
-  95:             
+  77:     @classmethod
+  78:     def __remove(self, root, value: T):
+  79:         def minValueNode(node):
+  80:             current = node
+  81:             
+  82:             while current.left is not None:
+  83:                 current = current.left
+  84:             
+  85:             return current
+  86:         
+  87:         if root is None:
+  88:             return root
+  89:         
+  90:         if value < root.value:
+  91:             root.left = self.__remove(root.left, value)
+  92:         
+  93:         elif value > root.value:
+  94:             root.right = self.__remove(root.right, value)
+  95:         else:
   96:             
-  97:             if root.left is None:
-  98:                 temp = root.right
-  99:                 root = None
- 100:                 return temp
- 101:             
- 102:             elif root.right is None:
- 103:                 temp = root.left
- 104:                 root = None
- 105:                 return temp
- 106:             
- 107:             temp = minValueNode(root.right)
- 108:             
- 109:             root.value = temp.value
- 110:             
- 111:             root.right = self.__remove(root.right, temp.value)
- 112:         
- 113:         return root
- 114:     
+  97:             
+  98:             if root.left is None:
+  99:                 temp = root.right
+ 100:                 root = None
+ 101:                 return temp
+ 102:             
+ 103:             elif root.right is None:
+ 104:                 temp = root.left
+ 105:                 root = None
+ 106:                 return temp
+ 107:             
+ 108:             temp = minValueNode(root.right)
+ 109:             
+ 110:             root.value = temp.value
+ 111:             
+ 112:             root.right = self.__remove(root.right, temp.value)
+ 113:         
+ 114:         return root
  115:     def isValid(self):
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
--------------------------------------------------------------------------------
[0.06782 s] survived
   - [#  22] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
  113:         return root
  114:     
- 115:     def isValid(self):
- 116:         pass
- 117:     
+ 115:     @classmethod
+ 116:     def isValid(self):
+ 117:         pass
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
--------------------------------------------------------------------------------
[0.06691 s] survived
   - [#  23] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  114:     
  115:     def isValid(self):
  116:         pass
  117:     
- 118:     def build(self, array: list) -> None:
- 119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
- 121:     
+ 118:     @classmethod
+ 119:     def build(self, array: list) -> None:
+ 120:         
+ 121:         self.root = self.__build(array, None, 0, len(array) - 1)
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
  125:             return
--------------------------------------------------------------------------------
[0.07384 s] incompetent

TypeError: binarySearchTree2:121: TypeError: BST.__build() missing 1 required positional argument: 'right'

   - [#  24] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
- 122:     def __build(self, array: list, root, left: int, right: int):
- 123:         
- 124:         if left > right:
- 125:             return
- 126:         
- 127:         mid = (left + right) // 2
- 128:         
- 129:         if not root:
- 130:             
- 131:             root = Node(array[mid])
- 132:             self.size += 1
- 133:         else:
- 134:             
+ 122:     @classmethod
+ 123:     def __build(self, array: list, root, left: int, right: int):
+ 124:         
+ 125:         if left > right:
+ 126:             return
+ 127:         
+ 128:         mid = (left + right) // 2
+ 129:         
+ 130:         if not root:
+ 131:             
+ 132:             root = Node(array[mid])
+ 133:             self.size += 1
+ 134:         else:
  135:             
- 136:             self.__add(root, array[mid])
- 137:         
- 138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
- 140:         
- 141:         return root
- 142:     
+ 136:             
+ 137:             self.__add(root, array[mid])
+ 138:         
+ 139:         self.__build(array, root, left, mid - 1)
+ 140:         self.__build(array, root, mid + 1, right)
+ 141:         
+ 142:         return root
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
--------------------------------------------------------------------------------
[0.07340 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>, array = [698, 698, 698, 698]
root = <binarySearchTree2.Node object at 0x7f27aa29a6e0>, left = 0, right = 3

>   ???
E   AttributeError: type object 'BST' has no attribute 'size'

binarySearchTree2:133: AttributeError
   - [#  25] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
- 143:     def getOrder(self, order='inOrder'):
- 144:         def inOrder(root):
- 145:             if root:
- 146:                 inOrder(root.left)
- 147:                 traversal.append(root.value)
- 148:                 inOrder(root.right)
- 149:         
- 150:         def preOrder(root):
- 151:             if root:
- 152:                 traversal.append(root.value)
- 153:                 preOrder(root.left)
- 154:                 preOrder(root.right)
- 155:         
- 156:         def postOrder(root):
- 157:             if root:
- 158:                 preOrder(root.left)
- 159:                 preOrder(root.right)
- 160:                 traversal.append(root.value)
- 161:         
- 162:         traversal = []
- 163:         if order == 'inOrder':
- 164:             inOrder(self.root)
- 165:             return traversal
- 166:         elif order == 'preOrder':
- 167:             preOrder(self.root)
- 168:             return traversal
- 169:         elif order == 'postOrder':
- 170:             postOrder(self.root)
- 171:             return traversal
- 172:     
+ 143:     @classmethod
+ 144:     def getOrder(self, order='inOrder'):
+ 145:         def inOrder(root):
+ 146:             if root:
+ 147:                 inOrder(root.left)
+ 148:                 traversal.append(root.value)
+ 149:                 inOrder(root.right)
+ 150:         
+ 151:         def preOrder(root):
+ 152:             if root:
+ 153:                 traversal.append(root.value)
+ 154:                 preOrder(root.left)
+ 155:                 preOrder(root.right)
+ 156:         
+ 157:         def postOrder(root):
+ 158:             if root:
+ 159:                 preOrder(root.left)
+ 160:                 preOrder(root.right)
+ 161:                 traversal.append(root.value)
+ 162:         
+ 163:         traversal = []
+ 164:         if order == 'inOrder':
+ 165:             inOrder(self.root)
+ 166:             return traversal
+ 167:         elif order == 'preOrder':
+ 168:             preOrder(self.root)
+ 169:             return traversal
+ 170:         elif order == 'postOrder':
+ 171:             postOrder(self.root)
+ 172:             return traversal
  173:     def __len__(self):
  174:         return self.size
  175:     
  176:     def __str__(self):
--------------------------------------------------------------------------------
[0.08232 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_14

def test_case_14():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.getOrder()

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>, order = 'inOrder'

>   ???
E   AttributeError: type object 'BST' has no attribute 'root'

binarySearchTree2:165: AttributeError
   - [#  26] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
- 173:     def __len__(self):
- 174:         return self.size
- 175:     
+ 173:     @classmethod
+ 174:     def __len__(self):
+ 175:         return self.size
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
  179:         Returns:
--------------------------------------------------------------------------------
[0.07530 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_0

def test_case_0():
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree2.BST'>

>   ???
E   AttributeError: type object 'BST' has no attribute 'size'

binarySearchTree2:175: AttributeError
   - [#  27] CDI binarySearchTree2: 
--------------------------------------------------------------------------------
  172:     
  173:     def __len__(self):
  174:         return self.size
  175:     
- 176:     def __str__(self):
- 177:         '''Return String representation of BST values.
- 178: 
- 179:         Returns:
- 180:             String: String inorder representaion of BST.
- 181:         '''
- 182:         
- 183:         return str(self.getOrder())
- 184: 
+ 176:     @classmethod
+ 177:     def __str__(self):
+ 178:         '''Return String representation of BST values.
+ 179: 
+ 180:         Returns:
+ 181:             String: String inorder representaion of BST.
+ 182:         '''
+ 183:         
+ 184:         return str(self.getOrder())
  185: 
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
--------------------------------------------------------------------------------
[0.08184 s] incompetent

TypeError: binarySearchTree2:184: TypeError: BST.getOrder() missing 1 required positional argument: 'self'

   - [#  28] COD binarySearchTree2: 
--------------------------------------------------------------------------------
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
- 129:         if not root:
+ 129:         if root:
  130:             
  131:             root = Node(array[mid])
  132:             self.size += 1
  133:         else:
--------------------------------------------------------------------------------
[0.07399 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa6129b0>, root = None
value = 698

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  29] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   15:         self.root = None
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
-  19:         if self.contains(value):
+  19:         if not (self.contains(value)):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
--------------------------------------------------------------------------------
[0.07508 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
>       assert len(b_s_t_0) == 1
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:13: AssertionError
   - [#  30] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
-  21:         elif self.root == None:
+  21:         elif not (self.root == None):
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
--------------------------------------------------------------------------------
[0.07264 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:25: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa55e3b0>, root = None
value = <binarySearchTree2.BST object at 0x7f27aa55e3b0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  31] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
-  28:         if value < root.value:
+  28:         if not (value < root.value):
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
--------------------------------------------------------------------------------
[0.07252 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
        var_0 = b_s_t_0.add(bool_0)
>       assert len(b_s_t_0) == 5
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:26: AssertionError
   - [#  32] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
-  29:             if root.left == None:
+  29:             if not (root.left == None):
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
--------------------------------------------------------------------------------
[0.07366 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
>       var_0 = b_s_t_0.add(bool_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:25: in add
    ???
binarySearchTree2:33: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa3269e0>, root = None
value = True

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  33] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
-  34:         elif value >= root.value:
+  34:         elif not (value >= root.value):
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
--------------------------------------------------------------------------------
[0.07366 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [#  34] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
-  35:             if root.right == None:
+  35:             if not (root.right == None):
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
--------------------------------------------------------------------------------
[0.07569 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:39: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27a9f73370>, root = None
value = 698

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  35] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   42:         
   43:         return self.__contains(self.root, value)
   44:     
   45:     def __contains(self, root, value):
-  46:         if root == None:
+  46:         if not (root == None):
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
--------------------------------------------------------------------------------
[0.07285 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
binarySearchTree2:43: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa288fa0>, root = None
value = <binarySearchTree2.BST object at 0x7f27aa288fa0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:48: AttributeError
   - [#  36] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
-  48:         elif root.value == value:
+  48:         elif not (root.value == value):
   49:             return True
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
--------------------------------------------------------------------------------
[0.07329 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
        var_0 = b_s_t_0.add(bool_0)
>       assert len(b_s_t_0) == 5
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:26: AssertionError
   - [#  37] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
-  51:         elif value < root.value:
+  51:         elif not (value < root.value):
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
--------------------------------------------------------------------------------
[0.06864 s] survived
   - [#  38] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   55:     
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
-  59:         while current.left is not None:
+  59:         while not (current.left is not None):
   60:             current = current.left
   61:         
   62:         return current
   63:     
--------------------------------------------------------------------------------
[0.07691 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_8

def test_case_8():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
>       var_0 = b_s_t_0.minValueNode(node_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa200d90>
node = <binarySearchTree2.Node object at 0x7f27aa200b50>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree2:59: AttributeError
   - [#  39] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   62:         return current
   63:     
   64:     def remove(self, value):
   65:         
-  66:         if self.contains(value):
+  66:         if not (self.contains(value)):
   67:             if self.size == 1:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
--------------------------------------------------------------------------------
[0.10398 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_9

def test_case_9():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.remove(b_s_t_0)
>       assert len(b_s_t_0) == 0
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:85: AssertionError
   - [#  40] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
-  67:             if self.size == 1:
+  67:             if not (self.size == 1):
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[0.07798 s] incompetent

TypeError: binarySearchTree2:89: TypeError: '<' not supported between instances of 'BST' and 'BST'

   - [#  41] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
   79:             current = node
   80:             
-  81:             while current.left is not None:
+  81:             while not (current.left is not None):
   82:                 current = current.left
   83:             
   84:             return current
   85:         
--------------------------------------------------------------------------------
[0.06805 s] survived
   - [#  42] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   82:                 current = current.left
   83:             
   84:             return current
   85:         
-  86:         if root is None:
+  86:         if not (root is None):
   87:             return root
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
--------------------------------------------------------------------------------
[0.06840 s] survived
   - [#  43] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   85:         
   86:         if root is None:
   87:             return root
   88:         
-  89:         if value < root.value:
+  89:         if not (value < root.value):
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
--------------------------------------------------------------------------------
[0.06736 s] survived
   - [#  44] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
-  92:         elif value > root.value:
+  92:         elif not (value > root.value):
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
--------------------------------------------------------------------------------
[0.09305 s] survived
   - [#  45] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
-  97:             if root.left is None:
+  97:             if not (root.left is None):
   98:                 temp = root.right
   99:                 root = None
  100:                 return temp
  101:             
--------------------------------------------------------------------------------
[0.06701 s] survived
   - [#  46] COI binarySearchTree2: 
--------------------------------------------------------------------------------
   98:                 temp = root.right
   99:                 root = None
  100:                 return temp
  101:             
- 102:             elif root.right is None:
+ 102:             elif not (root.right is None):
  103:                 temp = root.left
  104:                 root = None
  105:                 return temp
  106:             
--------------------------------------------------------------------------------
[0.06745 s] survived
   - [#  47] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
- 124:         if left > right:
+ 124:         if not (left > right):
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
--------------------------------------------------------------------------------
[0.07445 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [#  48] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
- 129:         if not root:
+ 129:         if not ((not root)):
  130:             
  131:             root = Node(array[mid])
  132:             self.size += 1
  133:         else:
--------------------------------------------------------------------------------
[0.07349 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa245fc0>, root = None
value = 698

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  49] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
- 145:             if root:
+ 145:             if not root:
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
  148:                 inOrder(root.right)
  149:         
--------------------------------------------------------------------------------
[0.08278 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_14

def test_case_14():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.getOrder()

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:164: in getOrder
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree2:146: AttributeError
   - [#  50] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  147:                 traversal.append(root.value)
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
- 151:             if root:
+ 151:             if not root:
  152:                 traversal.append(root.value)
  153:                 preOrder(root.left)
  154:                 preOrder(root.right)
  155:         
--------------------------------------------------------------------------------
[0.06752 s] survived
   - [#  51] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  153:                 preOrder(root.left)
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
- 157:             if root:
+ 157:             if not root:
  158:                 preOrder(root.left)
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
--------------------------------------------------------------------------------
[0.06777 s] survived
   - [#  52] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
- 163:         if order == 'inOrder':
+ 163:         if not (order == 'inOrder'):
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[0.08273 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_19

def test_case_19():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:140: AssertionError
   - [#  53] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
- 166:         elif order == 'preOrder':
+ 166:         elif not (order == 'preOrder'):
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[0.09252 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_15

def test_case_15():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        str_0 = 'Uqfh9M*4'
        int_0 = 1695
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.getOrder(str_0)
        var_1 = var_0.__str__()
>       assert var_1 == 'None'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:190: AssertionError
   - [#  54] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
- 169:         elif order == 'postOrder':
+ 169:         elif not (order == 'postOrder'):
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[0.09215 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_15

def test_case_15():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        str_0 = 'Uqfh9M*4'
        int_0 = 1695
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.getOrder(str_0)
        var_1 = var_0.__str__()
>       assert var_1 == 'None'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:190: AssertionError
   - [#  55] COI binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
- 186: if __name__ == '__main__':
+ 186: if not (__name__ == '__main__'):
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[1, 2, 3] 3
[2, 3] 2
[2] 1
[] 0
[0.06797 s] survived
   - [#  56] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
    1: """Binary search tree, also called an ordered or sorted binary tree (BST), is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node's left subtree and less than those in its right subtree."""
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: T = TypeVar('mutpy')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[0.06718 s] survived
   - [#  57] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
    1: """Binary search tree, also called an ordered or sorted binary tree (BST), is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node's left subtree and less than those in its right subtree."""
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: T = TypeVar('')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[0.06711 s] survived
   - [#  58] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
-  16:         self.size = 0
+  16:         self.size = 1
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
--------------------------------------------------------------------------------
[0.07436 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_0

def test_case_0():
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:7: AssertionError
   - [#  59] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
-  23:             self.size += 1
+  23:             self.size += 2
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
--------------------------------------------------------------------------------
[0.07458 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
>       assert len(b_s_t_0) == 1
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:13: AssertionError
   - [#  60] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
-  31:                 self.size += 1
+  31:                 self.size += 2
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
--------------------------------------------------------------------------------
[0.07273 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
        var_0 = b_s_t_0.add(bool_0)
>       assert len(b_s_t_0) == 5
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:26: AssertionError
   - [#  61] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
-  37:                 self.size += 1
+  37:                 self.size += 2
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
--------------------------------------------------------------------------------
[0.07424 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [#  62] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
-  67:             if self.size == 1:
+  67:             if self.size == 2:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[0.07573 s] incompetent

TypeError: binarySearchTree2:89: TypeError: '<' not supported between instances of 'BST' and 'BST'

   - [#  63] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
   68:                 self.root = None
-  69:                 self.size -= 1
+  69:                 self.size -= 2
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
   73:                 self.size -= 1
--------------------------------------------------------------------------------
[0.07947 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_9

def test_case_9():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.remove(b_s_t_0)
>       assert len(b_s_t_0) == 0
E       ValueError: __len__() should return >= 0

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:85: ValueError
   - [#  64] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
-  73:                 self.size -= 1
+  73:                 self.size -= 2
   74:         else:
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
--------------------------------------------------------------------------------
[0.08907 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        bool_0 = False
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.add(bool_0)
        assert len(b_s_t_1) == 1
        var_1 = b_s_t_1.contains(bool_0)
        assert var_1 is True
        var_2 = b_s_t_1.add(var_1)
        assert len(b_s_t_1) == 2
        var_3 = var_1.__str__()
        assert var_3 == 'True'
        var_4 = b_s_t_1.remove(bool_0)
>       assert len(b_s_t_1) == 1
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:60: AssertionError
   - [#  65] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         self.root = self.__build(array, None, 1, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.07223 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [#  66] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         self.root = self.__build(array, None, 0, len(array) - 2)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.09225 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [#  67] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
- 127:         mid = (left + right) // 2
+ 127:         mid = (left + right) // 3
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[0.10000 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:139: in __build
    ???
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals & position)
   - [#  68] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
- 132:             self.size += 1
+ 132:             self.size += 2
  133:         else:
  134:             
  135:             
  136:             self.__add(root, array[mid])
--------------------------------------------------------------------------------
[0.07195 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [#  69] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
- 138:         self.__build(array, root, left, mid - 1)
+ 138:         self.__build(array, root, left, mid - 2)
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[0.07253 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [#  70] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
+ 139:         self.__build(array, root, mid + 2, right)
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[0.07286 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [#  71] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
- 143:     def getOrder(self, order='inOrder'):
+ 143:     def getOrder(self, order='mutpy'):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
--------------------------------------------------------------------------------
[0.08281 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_19

def test_case_19():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:140: AssertionError
   - [#  72] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
- 143:     def getOrder(self, order='inOrder'):
+ 143:     def getOrder(self, order=''):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
--------------------------------------------------------------------------------
[0.08234 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_19

def test_case_19():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:140: AssertionError
   - [#  73] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
- 163:         if order == 'inOrder':
+ 163:         if order == 'mutpy':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[0.08329 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_19

def test_case_19():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:140: AssertionError
   - [#  74] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
- 163:         if order == 'inOrder':
+ 163:         if order == '':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[0.08083 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_19

def test_case_19():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:140: AssertionError
   - [#  75] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
- 166:         elif order == 'preOrder':
+ 166:         elif order == 'mutpy':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[0.06691 s] survived
   - [#  76] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
- 166:         elif order == 'preOrder':
+ 166:         elif order == '':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[0.06763 s] survived
   - [#  77] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
- 169:         elif order == 'postOrder':
+ 169:         elif order == 'mutpy':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[0.06810 s] survived
   - [#  78] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
- 169:         elif order == 'postOrder':
+ 169:         elif order == '':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[0.06842 s] survived
   - [#  79] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
- 186: if __name__ == '__main__':
+ 186: if __name__ == 'mutpy':
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[0.09274 s] survived
   - [#  80] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
- 186: if __name__ == '__main__':
+ 186: if __name__ == '':
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[0.06780 s] survived
   - [#  81] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
  189:     
- 190:     tree.add(3)
+ 190:     tree.add(4)
  191:     tree.add(2)
  192:     tree.add(4)
  193:     
  194:     
--------------------------------------------------------------------------------
[0.06766 s] survived
   - [#  82] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
- 191:     tree.add(2)
+ 191:     tree.add(3)
  192:     tree.add(4)
  193:     
  194:     
  195:     
--------------------------------------------------------------------------------
[0.06882 s] survived
   - [#  83] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  188:     tree = BST()
  189:     
  190:     tree.add(3)
  191:     tree.add(2)
- 192:     tree.add(4)
+ 192:     tree.add(5)
  193:     
  194:     
  195:     
  196:     
--------------------------------------------------------------------------------
[0.06833 s] survived
   - [#  84] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
- 199:     tree2.build([1, 2, 3])
+ 199:     tree2.build([2, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[0.09161 s] survived
   - [#  85] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
- 199:     tree2.build([1, 2, 3])
+ 199:     tree2.build([1, 3, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[0.06906 s] survived
   - [#  86] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
- 199:     tree2.build([1, 2, 3])
+ 199:     tree2.build([1, 2, 4])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[0.06782 s] survived
   - [#  87] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  197:     
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
- 201:     tree2.remove(1)
+ 201:     tree2.remove(2)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
--------------------------------------------------------------------------------
[0.06733 s] survived
   - [#  88] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
- 203:     tree2.remove(3)
+ 203:     tree2.remove(4)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.06853 s] survived
   - [#  89] CRP binarySearchTree2: 
--------------------------------------------------------------------------------
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
- 205:     tree2.remove(2)
+ 205:     tree2.remove(3)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.09345 s] survived
   - [#  90] OIL binarySearchTree2: 
--------------------------------------------------------------------------------
   57:         current = node
   58:         
   59:         while current.left is not None:
   60:             current = current.left
-  61:         
+  61:             break
   62:         return current
   63:     
   64:     def remove(self, value):
   65:         
--------------------------------------------------------------------------------
[0.06698 s] survived
   - [#  91] OIL binarySearchTree2: 
--------------------------------------------------------------------------------
   79:             current = node
   80:             
   81:             while current.left is not None:
   82:                 current = current.left
-  83:             
+  83:                 break
   84:             return current
   85:         
   86:         if root is None:
   87:             return root
--------------------------------------------------------------------------------
[0.06781 s] survived
   - [#  92] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
-  21:         elif self.root == None:
+  21:         elif self.root != None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
--------------------------------------------------------------------------------
[0.07318 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:25: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27a9f95ba0>, root = None
value = <binarySearchTree2.BST object at 0x7f27a9f95ba0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  93] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
-  28:         if value < root.value:
+  28:         if value > root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
--------------------------------------------------------------------------------
[0.07182 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
        var_0 = b_s_t_0.add(bool_0)
>       assert len(b_s_t_0) == 5
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:26: AssertionError
   - [#  94] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
-  28:         if value < root.value:
+  28:         if value <= root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
--------------------------------------------------------------------------------
[0.06743 s] survived
   - [#  95] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
-  29:             if root.left == None:
+  29:             if root.left != None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
--------------------------------------------------------------------------------
[0.07377 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
>       var_0 = b_s_t_0.add(bool_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:25: in add
    ???
binarySearchTree2:33: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa2231c0>, root = None
value = True

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  96] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
-  34:         elif value >= root.value:
+  34:         elif value <= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
--------------------------------------------------------------------------------
[0.07588 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        str_0 = 'Oz9!2~3'
        none_type_0 = b_s_t_0.build(str_0)
>       assert len(b_s_t_0) == 7
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:44: AssertionError
   - [#  97] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
-  34:         elif value >= root.value:
+  34:         elif value > root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
--------------------------------------------------------------------------------
[0.07368 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [#  98] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
-  35:             if root.right == None:
+  35:             if root.right != None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
--------------------------------------------------------------------------------
[0.07488 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:39: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa0d2d10>, root = None
value = 698

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [#  99] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   42:         
   43:         return self.__contains(self.root, value)
   44:     
   45:     def __contains(self, root, value):
-  46:         if root == None:
+  46:         if root != None:
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
--------------------------------------------------------------------------------
[0.09687 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
binarySearchTree2:43: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa306950>, root = None
value = <binarySearchTree2.BST object at 0x7f27aa306950>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

binarySearchTree2:48: AttributeError
   - [# 100] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
-  48:         elif root.value == value:
+  48:         elif root.value != value:
   49:             return True
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
--------------------------------------------------------------------------------
[0.07224 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
        var_0 = b_s_t_0.add(bool_0)
>       assert len(b_s_t_0) == 5
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:26: AssertionError
   - [# 101] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
-  51:         elif value < root.value:
+  51:         elif value > root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
--------------------------------------------------------------------------------
[0.06773 s] survived
   - [# 102] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   47:             return False
   48:         elif root.value == value:
   49:             return True
   50:         
-  51:         elif value < root.value:
+  51:         elif value <= root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
--------------------------------------------------------------------------------
[0.06818 s] survived
   - [# 103] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
-  67:             if self.size == 1:
+  67:             if self.size != 1:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[0.07713 s] incompetent

TypeError: binarySearchTree2:89: TypeError: '<' not supported between instances of 'BST' and 'BST'

   - [# 104] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   85:         
   86:         if root is None:
   87:             return root
   88:         
-  89:         if value < root.value:
+  89:         if value > root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
--------------------------------------------------------------------------------
[0.09315 s] survived
   - [# 105] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   85:         
   86:         if root is None:
   87:             return root
   88:         
-  89:         if value < root.value:
+  89:         if value <= root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
--------------------------------------------------------------------------------
[0.06741 s] survived
   - [# 106] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
-  92:         elif value > root.value:
+  92:         elif value < root.value:
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
--------------------------------------------------------------------------------
[0.06793 s] survived
   - [# 107] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
-  92:         elif value > root.value:
+  92:         elif value >= root.value:
   93:             root.right = self.__remove(root.right, value)
   94:         else:
   95:             
   96:             
--------------------------------------------------------------------------------
[0.06793 s] survived
   - [# 108] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
- 124:         if left > right:
+ 124:         if left < right:
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
--------------------------------------------------------------------------------
[0.07274 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [# 109] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
- 124:         if left > right:
+ 124:         if left >= right:
  125:             return
  126:         
  127:         mid = (left + right) // 2
  128:         
--------------------------------------------------------------------------------
[0.09591 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [# 110] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
- 163:         if order == 'inOrder':
+ 163:         if order != 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
--------------------------------------------------------------------------------
[0.08283 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_19

def test_case_19():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:140: AssertionError
   - [# 111] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
- 166:         elif order == 'preOrder':
+ 166:         elif order != 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
--------------------------------------------------------------------------------
[0.09196 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_15

def test_case_15():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        str_0 = 'Uqfh9M*4'
        int_0 = 1695
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.getOrder(str_0)
        var_1 = var_0.__str__()
>       assert var_1 == 'None'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:190: AssertionError
   - [# 112] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
- 169:         elif order == 'postOrder':
+ 169:         elif order != 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
--------------------------------------------------------------------------------
[0.09294 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_15

def test_case_15():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        str_0 = 'Uqfh9M*4'
        int_0 = 1695
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.getOrder(str_0)
        var_1 = var_0.__str__()
>       assert var_1 == 'None'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:190: AssertionError
   - [# 113] ROR binarySearchTree2: 
--------------------------------------------------------------------------------
  182:         
  183:         return str(self.getOrder())
  184: 
  185: 
- 186: if __name__ == '__main__':
+ 186: if __name__ != '__main__':
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
--------------------------------------------------------------------------------
[1, 2, 3] 3
[2, 3] 2
[2] 1
[] 0
[0.06809 s] survived
   - [# 114] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
    4: 
    5: T = TypeVar('T')
    6: 
    7: class Node:
-   8:     def __init__(self, value: T):
-   9:         self.value = value
-  10:         self.left = None
-  11:         self.right = None
-  12: 
+   8:     @staticmethod
+   9:     def __init__(self, value: T):
+  10:         self.value = value
+  11:         self.left = None
+  12:         self.right = None
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
--------------------------------------------------------------------------------
[0.07230 s] incompetent

TypeError: binarySearchTree2:22: TypeError: Node.__init__() missing 1 required positional argument: 'value'

   - [# 115] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
-  14:     def __init__(self):
-  15:         self.root = None
-  16:         self.size = 0
-  17:     
+  14:     @staticmethod
+  15:     def __init__(self):
+  16:         self.root = None
+  17:         self.size = 0
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
--------------------------------------------------------------------------------
[0.07161 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:6: TypeError: BST.__init__() missing 1 required positional argument: 'self'

   - [# 116] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   14:     def __init__(self):
   15:         self.root = None
   16:         self.size = 0
   17:     
-  18:     def add(self, value: T):
-  19:         if self.contains(value):
-  20:             return False
-  21:         elif self.root == None:
-  22:             self.root = Node(value)
-  23:             self.size += 1
-  24:         else:
-  25:             self.__add(self.root, value)
-  26:     
+  18:     @staticmethod
+  19:     def add(self, value: T):
+  20:         if self.contains(value):
+  21:             return False
+  22:         elif self.root == None:
+  23:             self.root = Node(value)
+  24:             self.size += 1
+  25:         else:
+  26:             self.__add(self.root, value)
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
--------------------------------------------------------------------------------
[0.07243 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:12: TypeError: BST.add() missing 1 required positional argument: 'value'

   - [# 117] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
-  27:     def __add(self, root, value):
-  28:         if value < root.value:
-  29:             if root.left == None:
-  30:                 root.left = Node(value)
-  31:                 self.size += 1
-  32:             else:
-  33:                 self.__add(root.left, value)
-  34:         elif value >= root.value:
-  35:             if root.right == None:
-  36:                 root.right = Node(value)
-  37:                 self.size += 1
-  38:             else:
-  39:                 self.__add(root.right, value)
-  40:     
+  27:     @staticmethod
+  28:     def __add(self, root, value):
+  29:         if value < root.value:
+  30:             if root.left == None:
+  31:                 root.left = Node(value)
+  32:                 self.size += 1
+  33:             else:
+  34:                 self.__add(root.left, value)
+  35:         elif value >= root.value:
+  36:             if root.right == None:
+  37:                 root.right = Node(value)
+  38:                 self.size += 1
+  39:             else:
+  40:                 self.__add(root.right, value)
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
--------------------------------------------------------------------------------
[0.07368 s] incompetent

TypeError: binarySearchTree2:136: TypeError: BST.__add() missing 1 required positional argument: 'value'

   - [# 118] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
-  41:     def contains(self, value):
-  42:         
-  43:         return self.__contains(self.root, value)
-  44:     
+  41:     @staticmethod
+  42:     def contains(self, value):
+  43:         
+  44:         return self.__contains(self.root, value)
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
   48:         elif root.value == value:
--------------------------------------------------------------------------------
[0.07233 s] incompetent

TypeError: binarySearchTree2:19: TypeError: BST.contains() missing 1 required positional argument: 'value'

   - [# 119] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
   44:     
-  45:     def __contains(self, root, value):
-  46:         if root == None:
-  47:             return False
-  48:         elif root.value == value:
-  49:             return True
-  50:         
-  51:         elif value < root.value:
-  52:             return self.__contains(root.left, value)
-  53:         else:
-  54:             return self.__contains(root.right, value)
-  55:     
+  45:     @staticmethod
+  46:     def __contains(self, root, value):
+  47:         if root == None:
+  48:             return False
+  49:         elif root.value == value:
+  50:             return True
+  51:         
+  52:         elif value < root.value:
+  53:             return self.__contains(root.left, value)
+  54:         else:
+  55:             return self.__contains(root.right, value)
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
--------------------------------------------------------------------------------
[0.07221 s] incompetent

TypeError: binarySearchTree2:43: TypeError: BST.__contains() missing 1 required positional argument: 'value'

   - [# 120] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   52:             return self.__contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
-  56:     def minValueNode(self, node):
-  57:         current = node
-  58:         
-  59:         while current.left is not None:
-  60:             current = current.left
-  61:         
-  62:         return current
-  63:     
+  56:     @staticmethod
+  57:     def minValueNode(self, node):
+  58:         current = node
+  59:         
+  60:         while current.left is not None:
+  61:             current = current.left
+  62:         
+  63:         return current
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
--------------------------------------------------------------------------------
[0.07523 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:72: TypeError: BST.minValueNode() missing 1 required positional argument: 'node'

   - [# 121] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   60:             current = current.left
   61:         
   62:         return current
   63:     
-  64:     def remove(self, value):
-  65:         
-  66:         if self.contains(value):
-  67:             if self.size == 1:
-  68:                 self.root = None
-  69:                 self.size -= 1
-  70:             else:
-  71:                 
-  72:                 self.__remove(self.root, value)
-  73:                 self.size -= 1
-  74:         else:
-  75:             pass
-  76:     
+  64:     @staticmethod
+  65:     def remove(self, value):
+  66:         
+  67:         if self.contains(value):
+  68:             if self.size == 1:
+  69:                 self.root = None
+  70:                 self.size -= 1
+  71:             else:
+  72:                 
+  73:                 self.__remove(self.root, value)
+  74:                 self.size -= 1
+  75:         else:
+  76:             pass
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
   79:             current = node
   80:             
--------------------------------------------------------------------------------
[0.07549 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:29: TypeError: BST.remove() missing 1 required positional argument: 'value'

   - [# 122] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
-  77:     def __remove(self, root, value: T):
-  78:         def minValueNode(node):
-  79:             current = node
-  80:             
-  81:             while current.left is not None:
-  82:                 current = current.left
-  83:             
-  84:             return current
-  85:         
-  86:         if root is None:
-  87:             return root
-  88:         
-  89:         if value < root.value:
-  90:             root.left = self.__remove(root.left, value)
-  91:         
-  92:         elif value > root.value:
-  93:             root.right = self.__remove(root.right, value)
-  94:         else:
-  95:             
+  77:     @staticmethod
+  78:     def __remove(self, root, value: T):
+  79:         def minValueNode(node):
+  80:             current = node
+  81:             
+  82:             while current.left is not None:
+  83:                 current = current.left
+  84:             
+  85:             return current
+  86:         
+  87:         if root is None:
+  88:             return root
+  89:         
+  90:         if value < root.value:
+  91:             root.left = self.__remove(root.left, value)
+  92:         
+  93:         elif value > root.value:
+  94:             root.right = self.__remove(root.right, value)
+  95:         else:
   96:             
-  97:             if root.left is None:
-  98:                 temp = root.right
-  99:                 root = None
- 100:                 return temp
- 101:             
- 102:             elif root.right is None:
- 103:                 temp = root.left
- 104:                 root = None
- 105:                 return temp
- 106:             
- 107:             temp = minValueNode(root.right)
- 108:             
- 109:             root.value = temp.value
- 110:             
- 111:             root.right = self.__remove(root.right, temp.value)
- 112:         
- 113:         return root
- 114:     
+  97:             
+  98:             if root.left is None:
+  99:                 temp = root.right
+ 100:                 root = None
+ 101:                 return temp
+ 102:             
+ 103:             elif root.right is None:
+ 104:                 temp = root.left
+ 105:                 root = None
+ 106:                 return temp
+ 107:             
+ 108:             temp = minValueNode(root.right)
+ 109:             
+ 110:             root.value = temp.value
+ 111:             
+ 112:             root.right = self.__remove(root.right, temp.value)
+ 113:         
+ 114:         return root
  115:     def isValid(self):
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
--------------------------------------------------------------------------------
[0.08840 s] incompetent

TypeError: binarySearchTree2:72: TypeError: BST.__remove() missing 1 required positional argument: 'value'

   - [# 123] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
  113:         return root
  114:     
- 115:     def isValid(self):
- 116:         pass
- 117:     
+ 115:     @staticmethod
+ 116:     def isValid(self):
+ 117:         pass
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
--------------------------------------------------------------------------------
[0.10903 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:128: TypeError: BST.isValid() missing 1 required positional argument: 'self'

   - [# 124] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  114:     
  115:     def isValid(self):
  116:         pass
  117:     
- 118:     def build(self, array: list) -> None:
- 119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
- 121:     
+ 118:     @staticmethod
+ 119:     def build(self, array: list) -> None:
+ 120:         
+ 121:         self.root = self.__build(array, None, 0, len(array) - 1)
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
  125:             return
--------------------------------------------------------------------------------
[0.07265 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: TypeError: BST.build() missing 1 required positional argument: 'array'

   - [# 125] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  118:     def build(self, array: list) -> None:
  119:         
  120:         self.root = self.__build(array, None, 0, len(array) - 1)
  121:     
- 122:     def __build(self, array: list, root, left: int, right: int):
- 123:         
- 124:         if left > right:
- 125:             return
- 126:         
- 127:         mid = (left + right) // 2
- 128:         
- 129:         if not root:
- 130:             
- 131:             root = Node(array[mid])
- 132:             self.size += 1
- 133:         else:
- 134:             
+ 122:     @staticmethod
+ 123:     def __build(self, array: list, root, left: int, right: int):
+ 124:         
+ 125:         if left > right:
+ 126:             return
+ 127:         
+ 128:         mid = (left + right) // 2
+ 129:         
+ 130:         if not root:
+ 131:             
+ 132:             root = Node(array[mid])
+ 133:             self.size += 1
+ 134:         else:
  135:             
- 136:             self.__add(root, array[mid])
- 137:         
- 138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
- 140:         
- 141:         return root
- 142:     
+ 136:             
+ 137:             self.__add(root, array[mid])
+ 138:         
+ 139:         self.__build(array, root, left, mid - 1)
+ 140:         self.__build(array, root, mid + 1, right)
+ 141:         
+ 142:         return root
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
--------------------------------------------------------------------------------
[0.07314 s] incompetent

TypeError: binarySearchTree2:120: TypeError: BST.__build() missing 1 required positional argument: 'right'

   - [# 126] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
- 143:     def getOrder(self, order='inOrder'):
- 144:         def inOrder(root):
- 145:             if root:
- 146:                 inOrder(root.left)
- 147:                 traversal.append(root.value)
- 148:                 inOrder(root.right)
- 149:         
- 150:         def preOrder(root):
- 151:             if root:
- 152:                 traversal.append(root.value)
- 153:                 preOrder(root.left)
- 154:                 preOrder(root.right)
- 155:         
- 156:         def postOrder(root):
- 157:             if root:
- 158:                 preOrder(root.left)
- 159:                 preOrder(root.right)
- 160:                 traversal.append(root.value)
- 161:         
- 162:         traversal = []
- 163:         if order == 'inOrder':
- 164:             inOrder(self.root)
- 165:             return traversal
- 166:         elif order == 'preOrder':
- 167:             preOrder(self.root)
- 168:             return traversal
- 169:         elif order == 'postOrder':
- 170:             postOrder(self.root)
- 171:             return traversal
- 172:     
+ 143:     @staticmethod
+ 144:     def getOrder(self, order='inOrder'):
+ 145:         def inOrder(root):
+ 146:             if root:
+ 147:                 inOrder(root.left)
+ 148:                 traversal.append(root.value)
+ 149:                 inOrder(root.right)
+ 150:         
+ 151:         def preOrder(root):
+ 152:             if root:
+ 153:                 traversal.append(root.value)
+ 154:                 preOrder(root.left)
+ 155:                 preOrder(root.right)
+ 156:         
+ 157:         def postOrder(root):
+ 158:             if root:
+ 159:                 preOrder(root.left)
+ 160:                 preOrder(root.right)
+ 161:                 traversal.append(root.value)
+ 162:         
+ 163:         traversal = []
+ 164:         if order == 'inOrder':
+ 165:             inOrder(self.root)
+ 166:             return traversal
+ 167:         elif order == 'preOrder':
+ 168:             preOrder(self.root)
+ 169:             return traversal
+ 170:         elif order == 'postOrder':
+ 171:             postOrder(self.root)
+ 172:             return traversal
  173:     def __len__(self):
  174:         return self.size
  175:     
  176:     def __str__(self):
--------------------------------------------------------------------------------
[0.08240 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:110: TypeError: BST.getOrder() missing 1 required positional argument: 'self'

   - [# 127] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
- 173:     def __len__(self):
- 174:         return self.size
- 175:     
+ 173:     @staticmethod
+ 174:     def __len__(self):
+ 175:         return self.size
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
  179:         Returns:
--------------------------------------------------------------------------------
[0.07469 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:7: TypeError: BST.__len__() missing 1 required positional argument: 'self'

   - [# 128] SDI binarySearchTree2: 
--------------------------------------------------------------------------------
  172:     
  173:     def __len__(self):
  174:         return self.size
  175:     
- 176:     def __str__(self):
- 177:         '''Return String representation of BST values.
- 178: 
- 179:         Returns:
- 180:             String: String inorder representaion of BST.
- 181:         '''
- 182:         
- 183:         return str(self.getOrder())
- 184: 
+ 176:     @staticmethod
+ 177:     def __str__(self):
+ 178:         '''Return String representation of BST values.
+ 179: 
+ 180:         Returns:
+ 181:             String: String inorder representaion of BST.
+ 182:         '''
+ 183:         
+ 184:         return str(self.getOrder())
  185: 
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
--------------------------------------------------------------------------------
[0.10727 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:117: TypeError: BST.__str__() missing 1 required positional argument: 'self'

   - [# 129] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    1: """Binary search tree, also called an ordered or sorted binary tree (BST), is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node's left subtree and less than those in its right subtree."""
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: pass
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[0.00000 s] incompetent

NameError: name 'T' is not defined

   - [# 130] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    5: T = TypeVar('T')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
-   9:         self.value = value
+   9:         pass
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
--------------------------------------------------------------------------------
[0.07412 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa602b60>
root = <binarySearchTree2.Node object at 0x7f27aa600fd0>, value = 698

>   ???
E   AttributeError: 'Node' object has no attribute 'value'

binarySearchTree2:28: AttributeError
   - [# 131] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
-  10:         self.left = None
+  10:         pass
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
--------------------------------------------------------------------------------
[0.07348 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
>       var_0 = b_s_t_0.add(bool_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
binarySearchTree2:43: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27a9f95c90>
root = <binarySearchTree2.Node object at 0x7f27a9f96530>, value = True

>   ???
E   AttributeError: 'Node' object has no attribute 'left'

binarySearchTree2:52: AttributeError
   - [# 132] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
   10:         self.left = None
-  11:         self.right = None
+  11:         pass
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
--------------------------------------------------------------------------------
[0.07435 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa0131c0>
root = <binarySearchTree2.Node object at 0x7f27aa013220>, value = 698

>   ???
E   AttributeError: 'Node' object has no attribute 'right'

binarySearchTree2:35: AttributeError
   - [# 133] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
-  15:         self.root = None
+  15:         pass
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
--------------------------------------------------------------------------------
[0.09561 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa23cdf0>
value = <binarySearchTree2.BST object at 0x7f27aa23cdf0>

>   ???
E   AttributeError: 'BST' object has no attribute 'root'

binarySearchTree2:43: AttributeError
   - [# 134] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
-  16:         self.size = 0
+  16:         pass
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
--------------------------------------------------------------------------------
[0.07579 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_0

def test_case_0():
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27a9fa1090>

>   ???
E   AttributeError: 'BST' object has no attribute 'size'

binarySearchTree2:174: AttributeError
   - [# 135] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
-  20:             return False
+  20:             pass
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
--------------------------------------------------------------------------------
[0.07610 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_3

def test_case_3():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.add(b_s_t_0)
>       assert var_1 is False
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:37: AssertionError
   - [# 136] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
-  22:             self.root = Node(value)
+  22:             pass
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
--------------------------------------------------------------------------------
[0.07659 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_3

def test_case_3():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.add(b_s_t_0)
>       assert var_1 is False
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:37: AssertionError
   - [# 137] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
-  25:             self.__add(self.root, value)
+  25:             pass
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
--------------------------------------------------------------------------------
[0.07303 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
        var_0 = b_s_t_0.add(bool_0)
>       assert len(b_s_t_0) == 5
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:26: AssertionError
   - [# 138] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
-  30:                 root.left = Node(value)
+  30:                 pass
   31:                 self.size += 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
--------------------------------------------------------------------------------
[0.09301 s] survived
   - [# 139] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
-  33:                 self.__add(root.left, value)
+  33:                 pass
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
--------------------------------------------------------------------------------
[0.07716 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        str_0 = 'Oz9!2~3'
        none_type_0 = b_s_t_0.build(str_0)
>       assert len(b_s_t_0) == 7
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:44: AssertionError
   - [# 140] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
-  36:                 root.right = Node(value)
+  36:                 pass
   37:                 self.size += 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
--------------------------------------------------------------------------------
[0.06910 s] survived
   - [# 141] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
-  39:                 self.__add(root.right, value)
+  39:                 pass
   40:     
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
--------------------------------------------------------------------------------
[0.07215 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [# 142] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
   42:         
-  43:         return self.__contains(self.root, value)
+  43:         pass
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
--------------------------------------------------------------------------------
[0.07431 s] incompetent

TypeError: binarySearchTree2:28: TypeError: '<' not supported between instances of 'BST' and 'BST'

   - [# 143] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   43:         return self.__contains(self.root, value)
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
-  47:             return False
+  47:             pass
   48:         elif root.value == value:
   49:             return True
   50:         
   51:         elif value < root.value:
--------------------------------------------------------------------------------
[0.10419 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_6

def test_case_6():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        str_0 = 'Oz9!2~3'
        none_type_0 = b_s_t_0.build(str_0)
        assert len(b_s_t_0) == 7
        var_0 = b_s_t_0.contains(str_0)
>       assert var_0 is False
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:59: AssertionError
   - [# 144] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
   48:         elif root.value == value:
-  49:             return True
+  49:             pass
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
--------------------------------------------------------------------------------
[0.07381 s] incompetent

TypeError: binarySearchTree2:28: TypeError: '<' not supported between instances of 'BST' and 'BST'

   - [# 145] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   48:         elif root.value == value:
   49:             return True
   50:         
   51:         elif value < root.value:
-  52:             return self.__contains(root.left, value)
+  52:             pass
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
   56:     def minValueNode(self, node):
--------------------------------------------------------------------------------
[0.07833 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_6

def test_case_6():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        str_0 = 'Oz9!2~3'
        none_type_0 = b_s_t_0.build(str_0)
        assert len(b_s_t_0) == 7
        var_0 = b_s_t_0.contains(str_0)
>       assert var_0 is False
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:59: AssertionError
   - [# 146] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
-  54:             return self.__contains(root.right, value)
+  54:             pass
   55:     
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
--------------------------------------------------------------------------------
[0.07933 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_6

def test_case_6():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        str_0 = 'Oz9!2~3'
        none_type_0 = b_s_t_0.build(str_0)
        assert len(b_s_t_0) == 7
        var_0 = b_s_t_0.contains(str_0)
>       assert var_0 is False
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:59: AssertionError
   - [# 147] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
   56:     def minValueNode(self, node):
-  57:         current = node
+  57:         pass
   58:         
   59:         while current.left is not None:
   60:             current = current.left
   61:         
--------------------------------------------------------------------------------
[0.07615 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_8

def test_case_8():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
>       var_0 = b_s_t_0.minValueNode(node_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa283cd0>
node = <binarySearchTree2.Node object at 0x7f27aa283a90>

>   ???
E   UnboundLocalError: local variable 'current' referenced before assignment

binarySearchTree2:59: UnboundLocalError
   - [# 148] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
-  60:             current = current.left
+  60:             pass
   61:         
   62:         return current
   63:     
   64:     def remove(self, value):
--------------------------------------------------------------------------------
[0.06771 s] survived
   - [# 149] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   58:         
   59:         while current.left is not None:
   60:             current = current.left
   61:         
-  62:         return current
+  62:         pass
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
--------------------------------------------------------------------------------
[0.07690 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_8

def test_case_8():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        node_0 = module_0.Node(b_s_t_0)
        assert len(node_0.value) == 0
        var_0 = b_s_t_0.minValueNode(node_0)
>       assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binarySearchTree2.Node'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:73: AssertionError
   - [# 150] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
-  68:                 self.root = None
+  68:                 pass
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
--------------------------------------------------------------------------------
[0.08659 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_0

def test_case_0():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
        assert len(b_s_t_0) == 1
        var_1 = b_s_t_0.remove(b_s_t_0)
        assert len(b_s_t_0) == 0
        var_2 = b_s_t_0.__str__()
>       assert var_2 == '[]'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:13: AssertionError
   - [# 151] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
-  72:                 self.__remove(self.root, value)
+  72:                 pass
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
--------------------------------------------------------------------------------
[0.06847 s] survived
   - [# 152] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
   78:         def minValueNode(node):
-  79:             current = node
+  79:             pass
   80:             
   81:             while current.left is not None:
   82:                 current = current.left
   83:             
--------------------------------------------------------------------------------
[0.06922 s] survived
   - [# 153] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   78:         def minValueNode(node):
   79:             current = node
   80:             
   81:             while current.left is not None:
-  82:                 current = current.left
+  82:                 pass
   83:             
   84:             return current
   85:         
   86:         if root is None:
--------------------------------------------------------------------------------
[0.06758 s] survived
   - [# 154] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   80:             
   81:             while current.left is not None:
   82:                 current = current.left
   83:             
-  84:             return current
+  84:             pass
   85:         
   86:         if root is None:
   87:             return root
   88:         
--------------------------------------------------------------------------------
[0.06713 s] survived
   - [# 155] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   83:             
   84:             return current
   85:         
   86:         if root is None:
-  87:             return root
+  87:             pass
   88:         
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
--------------------------------------------------------------------------------
[0.06905 s] survived
   - [# 156] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   86:         if root is None:
   87:             return root
   88:         
   89:         if value < root.value:
-  90:             root.left = self.__remove(root.left, value)
+  90:             pass
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
   94:         else:
--------------------------------------------------------------------------------
[0.06838 s] survived
   - [# 157] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
-  93:             root.right = self.__remove(root.right, value)
+  93:             pass
   94:         else:
   95:             
   96:             
   97:             if root.left is None:
--------------------------------------------------------------------------------
[0.06871 s] survived
   - [# 158] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   94:         else:
   95:             
   96:             
   97:             if root.left is None:
-  98:                 temp = root.right
+  98:                 pass
   99:                 root = None
  100:                 return temp
  101:             
  102:             elif root.right is None:
--------------------------------------------------------------------------------
[0.08834 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        bool_0 = False
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.add(bool_0)
        assert len(b_s_t_1) == 1
        var_1 = b_s_t_1.contains(bool_0)
        assert var_1 is True
        var_2 = b_s_t_1.add(var_1)
        assert len(b_s_t_1) == 2
        var_3 = var_1.__str__()
        assert var_3 == 'True'
>       var_4 = b_s_t_1.remove(bool_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:72: in remove
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa358eb0>, root = None
value = False

>   ???
E   UnboundLocalError: local variable 'temp' referenced before assignment

binarySearchTree2:100: UnboundLocalError
   - [# 159] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   95:             
   96:             
   97:             if root.left is None:
   98:                 temp = root.right
-  99:                 root = None
+  99:                 pass
  100:                 return temp
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
--------------------------------------------------------------------------------
[0.06715 s] survived
   - [# 160] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   96:             
   97:             if root.left is None:
   98:                 temp = root.right
   99:                 root = None
- 100:                 return temp
+ 100:                 pass
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
  104:                 root = None
--------------------------------------------------------------------------------
[0.08717 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        bool_0 = False
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.add(bool_0)
        assert len(b_s_t_1) == 1
        var_1 = b_s_t_1.contains(bool_0)
        assert var_1 is True
        var_2 = b_s_t_1.add(var_1)
        assert len(b_s_t_1) == 2
        var_3 = var_1.__str__()
        assert var_3 == 'True'
>       var_4 = b_s_t_1.remove(bool_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:72: in remove
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa55d150>, root = None
value = False

>   ???
E   AttributeError: 'NoneType' object has no attribute 'right'

binarySearchTree2:107: AttributeError
   - [# 161] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
   99:                 root = None
  100:                 return temp
  101:             
  102:             elif root.right is None:
- 103:                 temp = root.left
+ 103:                 pass
  104:                 root = None
  105:                 return temp
  106:             
  107:             temp = minValueNode(root.right)
--------------------------------------------------------------------------------
[0.06829 s] survived
   - [# 162] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  100:                 return temp
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
- 104:                 root = None
+ 104:                 pass
  105:                 return temp
  106:             
  107:             temp = minValueNode(root.right)
  108:             
--------------------------------------------------------------------------------
[0.06803 s] survived
   - [# 163] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  101:             
  102:             elif root.right is None:
  103:                 temp = root.left
  104:                 root = None
- 105:                 return temp
+ 105:                 pass
  106:             
  107:             temp = minValueNode(root.right)
  108:             
  109:             root.value = temp.value
--------------------------------------------------------------------------------
[0.06824 s] survived
   - [# 164] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  103:                 temp = root.left
  104:                 root = None
  105:                 return temp
  106:             
- 107:             temp = minValueNode(root.right)
+ 107:             pass
  108:             
  109:             root.value = temp.value
  110:             
  111:             root.right = self.__remove(root.right, temp.value)
--------------------------------------------------------------------------------
[0.06885 s] survived
   - [# 165] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  105:                 return temp
  106:             
  107:             temp = minValueNode(root.right)
  108:             
- 109:             root.value = temp.value
+ 109:             pass
  110:             
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
  113:         return root
--------------------------------------------------------------------------------
[0.06736 s] survived
   - [# 166] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  107:             temp = minValueNode(root.right)
  108:             
  109:             root.value = temp.value
  110:             
- 111:             root.right = self.__remove(root.right, temp.value)
+ 111:             pass
  112:         
  113:         return root
  114:     
  115:     def isValid(self):
--------------------------------------------------------------------------------
[0.06728 s] survived
   - [# 167] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  109:             root.value = temp.value
  110:             
  111:             root.right = self.__remove(root.right, temp.value)
  112:         
- 113:         return root
+ 113:         pass
  114:     
  115:     def isValid(self):
  116:         pass
  117:     
--------------------------------------------------------------------------------
[0.06794 s] survived
   - [# 168] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         pass
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.07316 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [# 169] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
- 125:             return
+ 125:             pass
  126:         
  127:         mid = (left + right) // 2
  128:         
  129:         if not root:
--------------------------------------------------------------------------------
[0.09935 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:138: in __build
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
   - [# 170] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  123:         
  124:         if left > right:
  125:             return
  126:         
- 127:         mid = (left + right) // 2
+ 127:         pass
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
--------------------------------------------------------------------------------
[0.07423 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa619810>
array = [698, 698, 698, 698], root = None, left = 0, right = 3

>   ???
E   NameError: name 'mid' is not defined

binarySearchTree2:131: NameError
   - [# 171] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  127:         mid = (left + right) // 2
  128:         
  129:         if not root:
  130:             
- 131:             root = Node(array[mid])
+ 131:             pass
  132:             self.size += 1
  133:         else:
  134:             
  135:             
--------------------------------------------------------------------------------
[0.06829 s] survived
   - [# 172] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  132:             self.size += 1
  133:         else:
  134:             
  135:             
- 136:             self.__add(root, array[mid])
+ 136:             pass
  137:         
  138:         self.__build(array, root, left, mid - 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
--------------------------------------------------------------------------------
[0.07292 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [# 173] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
- 138:         self.__build(array, root, left, mid - 1)
+ 138:         pass
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[0.07290 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [# 174] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
+ 139:         pass
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[0.07314 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
>       assert len(b_s_t_0) == 4
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:23: AssertionError
   - [# 175] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  137:         
  138:         self.__build(array, root, left, mid - 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
- 141:         return root
+ 141:         pass
  142:     
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
--------------------------------------------------------------------------------
[0.06882 s] survived
   - [# 176] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  142:     
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
- 146:                 inOrder(root.left)
+ 146:                 pass
  147:                 traversal.append(root.value)
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
--------------------------------------------------------------------------------
[0.06973 s] survived
   - [# 177] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  143:     def getOrder(self, order='inOrder'):
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
- 147:                 traversal.append(root.value)
+ 147:                 pass
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
  151:             if root:
--------------------------------------------------------------------------------
[0.06750 s] survived
   - [# 178] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  144:         def inOrder(root):
  145:             if root:
  146:                 inOrder(root.left)
  147:                 traversal.append(root.value)
- 148:                 inOrder(root.right)
+ 148:                 pass
  149:         
  150:         def preOrder(root):
  151:             if root:
  152:                 traversal.append(root.value)
--------------------------------------------------------------------------------
[0.06771 s] survived
   - [# 179] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  148:                 inOrder(root.right)
  149:         
  150:         def preOrder(root):
  151:             if root:
- 152:                 traversal.append(root.value)
+ 152:                 pass
  153:                 preOrder(root.left)
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
--------------------------------------------------------------------------------
[0.06938 s] survived
   - [# 180] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  149:         
  150:         def preOrder(root):
  151:             if root:
  152:                 traversal.append(root.value)
- 153:                 preOrder(root.left)
+ 153:                 pass
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
  157:             if root:
--------------------------------------------------------------------------------
[0.06740 s] survived
   - [# 181] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  150:         def preOrder(root):
  151:             if root:
  152:                 traversal.append(root.value)
  153:                 preOrder(root.left)
- 154:                 preOrder(root.right)
+ 154:                 pass
  155:         
  156:         def postOrder(root):
  157:             if root:
  158:                 preOrder(root.left)
--------------------------------------------------------------------------------
[0.06962 s] survived
   - [# 182] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  154:                 preOrder(root.right)
  155:         
  156:         def postOrder(root):
  157:             if root:
- 158:                 preOrder(root.left)
+ 158:                 pass
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
--------------------------------------------------------------------------------
[0.07030 s] survived
   - [# 183] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  155:         
  156:         def postOrder(root):
  157:             if root:
  158:                 preOrder(root.left)
- 159:                 preOrder(root.right)
+ 159:                 pass
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
--------------------------------------------------------------------------------
[0.06725 s] survived
   - [# 184] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  156:         def postOrder(root):
  157:             if root:
  158:                 preOrder(root.left)
  159:                 preOrder(root.right)
- 160:                 traversal.append(root.value)
+ 160:                 pass
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
--------------------------------------------------------------------------------
[0.06710 s] survived
   - [# 185] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  158:                 preOrder(root.left)
  159:                 preOrder(root.right)
  160:                 traversal.append(root.value)
  161:         
- 162:         traversal = []
+ 162:         pass
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
--------------------------------------------------------------------------------
[0.08231 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_14

def test_case_14():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.getOrder()

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa55d7e0>, order = 'inOrder'

>   ???
E   NameError: name 'traversal' is not defined

binarySearchTree2:165: NameError
   - [# 186] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
- 164:             inOrder(self.root)
+ 164:             pass
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
--------------------------------------------------------------------------------
[0.06825 s] survived
   - [# 187] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
- 165:             return traversal
+ 165:             pass
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
--------------------------------------------------------------------------------
[0.08272 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_19

def test_case_19():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:140: AssertionError
   - [# 188] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
- 167:             preOrder(self.root)
+ 167:             pass
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
--------------------------------------------------------------------------------
[0.06968 s] survived
   - [# 189] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
- 168:             return traversal
+ 168:             pass
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
  172:     
--------------------------------------------------------------------------------
[0.06829 s] survived
   - [# 190] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
- 170:             postOrder(self.root)
+ 170:             pass
  171:             return traversal
  172:     
  173:     def __len__(self):
  174:         return self.size
--------------------------------------------------------------------------------
[0.06706 s] survived
   - [# 191] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
- 171:             return traversal
+ 171:             pass
  172:     
  173:     def __len__(self):
  174:         return self.size
  175:     
--------------------------------------------------------------------------------
[0.06802 s] survived
   - [# 192] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
- 174:         return self.size
+ 174:         pass
  175:     
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
--------------------------------------------------------------------------------
[0.07432 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree2/MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:7: TypeError: 'NoneType' object cannot be interpreted as an integer

   - [# 193] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  179:         Returns:
  180:             String: String inorder representaion of BST.
  181:         '''
  182:         
- 183:         return str(self.getOrder())
+ 183:         pass
  184: 
  185: 
  186: if __name__ == '__main__':
  187:     
--------------------------------------------------------------------------------
[0.08271 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_19

def test_case_19():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.__str__()
>       assert var_0 == '[]'
E       AssertionError

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:140: AssertionError
   - [# 194] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  184: 
  185: 
  186: if __name__ == '__main__':
  187:     
- 188:     tree = BST()
+ 188:     pass
  189:     
  190:     tree.add(3)
  191:     tree.add(2)
  192:     tree.add(4)
--------------------------------------------------------------------------------
[0.09290 s] survived
   - [# 195] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  186: if __name__ == '__main__':
  187:     
  188:     tree = BST()
  189:     
- 190:     tree.add(3)
+ 190:     pass
  191:     tree.add(2)
  192:     tree.add(4)
  193:     
  194:     
--------------------------------------------------------------------------------
[0.06706 s] survived
   - [# 196] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  187:     
  188:     tree = BST()
  189:     
  190:     tree.add(3)
- 191:     tree.add(2)
+ 191:     pass
  192:     tree.add(4)
  193:     
  194:     
  195:     
--------------------------------------------------------------------------------
[0.06788 s] survived
   - [# 197] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  188:     tree = BST()
  189:     
  190:     tree.add(3)
  191:     tree.add(2)
- 192:     tree.add(4)
+ 192:     pass
  193:     
  194:     
  195:     
  196:     
--------------------------------------------------------------------------------
[0.06956 s] survived
   - [# 198] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  194:     
  195:     
  196:     
  197:     
- 198:     tree2 = BST()
+ 198:     pass
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.06809 s] survived
   - [# 199] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  195:     
  196:     
  197:     
  198:     tree2 = BST()
- 199:     tree2.build([1, 2, 3])
+ 199:     pass
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
--------------------------------------------------------------------------------
[0.09259 s] survived
   - [# 200] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  196:     
  197:     
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
- 200:     print(tree2, tree2.size)
+ 200:     pass
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.06899 s] survived
   - [# 201] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  197:     
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
- 201:     tree2.remove(1)
+ 201:     pass
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
--------------------------------------------------------------------------------
[0.06686 s] survived
   - [# 202] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  198:     tree2 = BST()
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
- 202:     print(tree2, tree2.size)
+ 202:     pass
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.06766 s] survived
   - [# 203] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  199:     tree2.build([1, 2, 3])
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
- 203:     tree2.remove(3)
+ 203:     pass
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.06932 s] survived
   - [# 204] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  200:     print(tree2, tree2.size)
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
- 204:     print(tree2, tree2.size)
+ 204:     pass
  205:     tree2.remove(2)
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.09416 s] survived
   - [# 205] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  201:     tree2.remove(1)
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
- 205:     tree2.remove(2)
+ 205:     pass
  206:     print(tree2, tree2.size)
--------------------------------------------------------------------------------
[0.06805 s] survived
   - [# 206] SDL binarySearchTree2: 
--------------------------------------------------------------------------------
  202:     print(tree2, tree2.size)
  203:     tree2.remove(3)
  204:     print(tree2, tree2.size)
  205:     tree2.remove(2)
- 206:     print(tree2, tree2.size)
+ 206:     pass
--------------------------------------------------------------------------------
[0.06927 s] survived
   - [# 207] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
    5: T = TypeVar('T')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
-   9:         self.value = value
+   9:         value = value
   10:         self.left = None
   11:         self.right = None
   12: 
   13: class BST:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 208] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
-  10:         self.left = None
+  10:         left = None
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 209] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
   10:         self.left = None
-  11:         self.right = None
+  11:         right = None
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 210] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   11:         self.right = None
   12: 
   13: class BST:
   14:     def __init__(self):
-  15:         self.root = None
+  15:         root = None
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 211] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   12: 
   13: class BST:
   14:     def __init__(self):
   15:         self.root = None
-  16:         self.size = 0
+  16:         size = 0
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 212] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   15:         self.root = None
   16:         self.size = 0
   17:     
   18:     def add(self, value: T):
-  19:         if self.contains(value):
+  19:         if contains(value):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
--------------------------------------------------------------------------------
[0.07264 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa636ec0>
value = <binarySearchTree2.BST object at 0x7f27aa636ec0>

>   ???
E   NameError: name 'contains' is not defined

binarySearchTree2:19: NameError
   - [# 213] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   17:     
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
-  21:         elif self.root == None:
+  21:         elif root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
--------------------------------------------------------------------------------
[0.07241 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa2327d0>
value = <binarySearchTree2.BST object at 0x7f27aa2327d0>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:21: NameError
   - [# 214] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   18:     def add(self, value: T):
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
-  22:             self.root = Node(value)
+  22:             root = Node(value)
   23:             self.size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 215] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   19:         if self.contains(value):
   20:             return False
   21:         elif self.root == None:
   22:             self.root = Node(value)
-  23:             self.size += 1
+  23:             size += 1
   24:         else:
   25:             self.__add(self.root, value)
   26:     
   27:     def __add(self, root, value):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 216] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
-  25:             self.__add(self.root, value)
+  25:             __add(self.root, value)
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
--------------------------------------------------------------------------------
[0.07321 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
>       var_0 = b_s_t_0.add(bool_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa6034f0>, value = True

>   ???
E   NameError: name '_BST__add' is not defined

binarySearchTree2:25: NameError
   - [# 217] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   21:         elif self.root == None:
   22:             self.root = Node(value)
   23:             self.size += 1
   24:         else:
-  25:             self.__add(self.root, value)
+  25:             self.__add(root, value)
   26:     
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
--------------------------------------------------------------------------------
[0.07504 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
>       var_0 = b_s_t_0.add(bool_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa5e88b0>, value = True

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:25: NameError
   - [# 218] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   27:     def __add(self, root, value):
   28:         if value < root.value:
   29:             if root.left == None:
   30:                 root.left = Node(value)
-  31:                 self.size += 1
+  31:                 size += 1
   32:             else:
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 219] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   29:             if root.left == None:
   30:                 root.left = Node(value)
   31:                 self.size += 1
   32:             else:
-  33:                 self.__add(root.left, value)
+  33:                 __add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
--------------------------------------------------------------------------------
[0.07620 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_4

def test_case_4():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        str_0 = 'Oz9!2~3'
>       none_type_0 = b_s_t_0.build(str_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:136: in __build
    ???
binarySearchTree2:39: in __add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa231b70>
root = <binarySearchTree2.Node object at 0x7f27aa231c30>, value = '9'

>   ???
E   NameError: name '_BST__add' is not defined

binarySearchTree2:33: NameError
   - [# 220] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   33:                 self.__add(root.left, value)
   34:         elif value >= root.value:
   35:             if root.right == None:
   36:                 root.right = Node(value)
-  37:                 self.size += 1
+  37:                 size += 1
   38:             else:
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 221] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   35:             if root.right == None:
   36:                 root.right = Node(value)
   37:                 self.size += 1
   38:             else:
-  39:                 self.__add(root.right, value)
+  39:                 __add(root.right, value)
   40:     
   41:     def contains(self, value):
   42:         
   43:         return self.__contains(self.root, value)
--------------------------------------------------------------------------------
[0.07448 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:139: in __build
    ???
binarySearchTree2:136: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa2c8c10>
root = <binarySearchTree2.Node object at 0x7f27aa2cbe20>, value = 698

>   ???
E   NameError: name '_BST__add' is not defined

binarySearchTree2:39: NameError
   - [# 222] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
   42:         
-  43:         return self.__contains(self.root, value)
+  43:         return __contains(self.root, value)
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
--------------------------------------------------------------------------------
[0.07329 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa2ca9b0>
value = <binarySearchTree2.BST object at 0x7f27aa2ca9b0>

>   ???
E   NameError: name '_BST__contains' is not defined

binarySearchTree2:43: NameError
   - [# 223] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   39:                 self.__add(root.right, value)
   40:     
   41:     def contains(self, value):
   42:         
-  43:         return self.__contains(self.root, value)
+  43:         return self.__contains(root, value)
   44:     
   45:     def __contains(self, root, value):
   46:         if root == None:
   47:             return False
--------------------------------------------------------------------------------
[0.07367 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_1

def test_case_1():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.add(b_s_t_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa265ff0>
value = <binarySearchTree2.BST object at 0x7f27aa265ff0>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:43: NameError
   - [# 224] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   48:         elif root.value == value:
   49:             return True
   50:         
   51:         elif value < root.value:
-  52:             return self.__contains(root.left, value)
+  52:             return __contains(root.left, value)
   53:         else:
   54:             return self.__contains(root.right, value)
   55:     
   56:     def minValueNode(self, node):
--------------------------------------------------------------------------------
[0.07500 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
>       var_0 = b_s_t_0.add(bool_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:19: in add
    ???
binarySearchTree2:43: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa3068c0>
root = <binarySearchTree2.Node object at 0x7f27aa306920>, value = True

>   ???
E   NameError: name '_BST__contains' is not defined

binarySearchTree2:52: NameError
   - [# 225] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   50:         
   51:         elif value < root.value:
   52:             return self.__contains(root.left, value)
   53:         else:
-  54:             return self.__contains(root.right, value)
+  54:             return __contains(root.right, value)
   55:     
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
--------------------------------------------------------------------------------
[0.07510 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_6

def test_case_6():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        str_0 = 'Oz9!2~3'
        none_type_0 = b_s_t_0.build(str_0)
        assert len(b_s_t_0) == 7
>       var_0 = b_s_t_0.contains(str_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:43: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa611270>
root = <binarySearchTree2.Node object at 0x7f27aa611a50>, value = 'Oz9!2~3'

>   ???
E   NameError: name '_BST__contains' is not defined

binarySearchTree2:54: NameError
   - [# 226] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   62:         return current
   63:     
   64:     def remove(self, value):
   65:         
-  66:         if self.contains(value):
+  66:         if contains(value):
   67:             if self.size == 1:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
--------------------------------------------------------------------------------
[0.07577 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        none_type_0 = b_s_t_0.build(list_0)
        assert len(b_s_t_0) == 4
        bool_0 = True
        var_0 = b_s_t_0.add(bool_0)
        assert len(b_s_t_0) == 5
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
>       var_1 = b_s_t_1.remove(b_s_t_1)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa602ad0>
value = <binarySearchTree2.BST object at 0x7f27aa602ad0>

>   ???
E   NameError: name 'contains' is not defined

binarySearchTree2:66: NameError
   - [# 227] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   63:     
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
-  67:             if self.size == 1:
+  67:             if size == 1:
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
--------------------------------------------------------------------------------
[0.07746 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_9

def test_case_9():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
        assert len(b_s_t_0) == 1
>       var_1 = b_s_t_0.remove(b_s_t_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa5e88e0>
value = <binarySearchTree2.BST object at 0x7f27aa5e88e0>

>   ???
E   NameError: name 'size' is not defined

binarySearchTree2:67: NameError
   - [# 228] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   64:     def remove(self, value):
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
-  68:                 self.root = None
+  68:                 root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 229] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   65:         
   66:         if self.contains(value):
   67:             if self.size == 1:
   68:                 self.root = None
-  69:                 self.size -= 1
+  69:                 size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
   73:                 self.size -= 1
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 230] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
-  72:                 self.__remove(self.root, value)
+  72:                 __remove(self.root, value)
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
--------------------------------------------------------------------------------
[0.08682 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        bool_0 = False
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.add(bool_0)
        assert len(b_s_t_1) == 1
        var_1 = b_s_t_1.contains(bool_0)
        assert var_1 is True
        var_2 = b_s_t_1.add(var_1)
        assert len(b_s_t_1) == 2
        var_3 = var_1.__str__()
        assert var_3 == 'True'
>       var_4 = b_s_t_1.remove(bool_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa75f610>, value = False

>   ???
E   NameError: name '_BST__remove' is not defined

binarySearchTree2:72: NameError
   - [# 231] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   68:                 self.root = None
   69:                 self.size -= 1
   70:             else:
   71:                 
-  72:                 self.__remove(self.root, value)
+  72:                 self.__remove(root, value)
   73:                 self.size -= 1
   74:         else:
   75:             pass
   76:     
--------------------------------------------------------------------------------
[0.08662 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py::test_case_4

def test_case_4():
        none_type_0 = None
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        bool_0 = False
        b_s_t_1 = module_0.BST()
        assert len(b_s_t_1) == 0
        var_0 = b_s_t_1.add(bool_0)
        assert len(b_s_t_1) == 1
        var_1 = b_s_t_1.contains(bool_0)
        assert var_1 is True
        var_2 = b_s_t_1.add(var_1)
        assert len(b_s_t_1) == 2
        var_3 = var_1.__str__()
        assert var_3 == 'True'
>       var_4 = b_s_t_1.remove(bool_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_WHOLE_SUITE.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa24d1e0>, value = False

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:72: NameError
   - [# 232] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   69:                 self.size -= 1
   70:             else:
   71:                 
   72:                 self.__remove(self.root, value)
-  73:                 self.size -= 1
+  73:                 size -= 1
   74:         else:
   75:             pass
   76:     
   77:     def __remove(self, root, value: T):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 233] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   86:         if root is None:
   87:             return root
   88:         
   89:         if value < root.value:
-  90:             root.left = self.__remove(root.left, value)
+  90:             root.left = __remove(root.left, value)
   91:         
   92:         elif value > root.value:
   93:             root.right = self.__remove(root.right, value)
   94:         else:
--------------------------------------------------------------------------------
[0.07236 s] survived
   - [# 234] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
   89:         if value < root.value:
   90:             root.left = self.__remove(root.left, value)
   91:         
   92:         elif value > root.value:
-  93:             root.right = self.__remove(root.right, value)
+  93:             root.right = __remove(root.right, value)
   94:         else:
   95:             
   96:             
   97:             if root.left is None:
--------------------------------------------------------------------------------
[0.06873 s] survived
   - [# 235] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  107:             temp = minValueNode(root.right)
  108:             
  109:             root.value = temp.value
  110:             
- 111:             root.right = self.__remove(root.right, temp.value)
+ 111:             root.right = __remove(root.right, temp.value)
  112:         
  113:         return root
  114:     
  115:     def isValid(self):
--------------------------------------------------------------------------------
[0.06793 s] survived
   - [# 236] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         root = self.__build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 237] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  116:         pass
  117:     
  118:     def build(self, array: list) -> None:
  119:         
- 120:         self.root = self.__build(array, None, 0, len(array) - 1)
+ 120:         self.root = __build(array, None, 0, len(array) - 1)
  121:     
  122:     def __build(self, array: list, root, left: int, right: int):
  123:         
  124:         if left > right:
--------------------------------------------------------------------------------
[0.07272 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa82b8e0>
array = [698, 698, 698, 698]

>   ???
E   NameError: name '_BST__build' is not defined

binarySearchTree2:120: NameError
   - [# 238] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  128:         
  129:         if not root:
  130:             
  131:             root = Node(array[mid])
- 132:             self.size += 1
+ 132:             size += 1
  133:         else:
  134:             
  135:             
  136:             self.__add(root, array[mid])
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 239] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  132:             self.size += 1
  133:         else:
  134:             
  135:             
- 136:             self.__add(root, array[mid])
+ 136:             __add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
--------------------------------------------------------------------------------
[0.07409 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa061e10>
array = [698, 698, 698, 698]
root = <binarySearchTree2.Node object at 0x7f27aa0623e0>, left = 0, right = 0

>   ???
E   NameError: name '_BST__add' is not defined

binarySearchTree2:136: NameError
   - [# 240] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  134:             
  135:             
  136:             self.__add(root, array[mid])
  137:         
- 138:         self.__build(array, root, left, mid - 1)
+ 138:         __build(array, root, left, mid - 1)
  139:         self.__build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
--------------------------------------------------------------------------------
[0.07330 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa61e9b0>
array = [698, 698, 698, 698]
root = <binarySearchTree2.Node object at 0x7f27aa61d8d0>, left = 0, right = 3

>   ???
E   NameError: name '_BST__build' is not defined

binarySearchTree2:138: NameError
   - [# 241] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  135:             
  136:             self.__add(root, array[mid])
  137:         
  138:         self.__build(array, root, left, mid - 1)
- 139:         self.__build(array, root, mid + 1, right)
+ 139:         __build(array, root, mid + 1, right)
  140:         
  141:         return root
  142:     
  143:     def getOrder(self, order='inOrder'):
--------------------------------------------------------------------------------
[0.07397 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_2

def test_case_2():
        dict_0 = {}
        node_0 = module_0.Node(dict_0)
        int_0 = 698
        list_0 = [int_0, int_0, int_0, int_0]
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       none_type_0 = b_s_t_0.build(list_0)

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree2:120: in build
    ???
binarySearchTree2:138: in __build
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa5fd870>
array = [698, 698, 698, 698]
root = <binarySearchTree2.Node object at 0x7f27aa5fc3a0>, left = 0, right = 0

>   ???
E   NameError: name '_BST__build' is not defined

binarySearchTree2:139: NameError
   - [# 242] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  160:                 traversal.append(root.value)
  161:         
  162:         traversal = []
  163:         if order == 'inOrder':
- 164:             inOrder(self.root)
+ 164:             inOrder(root)
  165:             return traversal
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
--------------------------------------------------------------------------------
[0.08350 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_14

def test_case_14():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
>       var_0 = b_s_t_0.getOrder()

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa5ff220>, order = 'inOrder'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree2:164: NameError
   - [# 243] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  163:         if order == 'inOrder':
  164:             inOrder(self.root)
  165:             return traversal
  166:         elif order == 'preOrder':
- 167:             preOrder(self.root)
+ 167:             preOrder(root)
  168:             return traversal
  169:         elif order == 'postOrder':
  170:             postOrder(self.root)
  171:             return traversal
--------------------------------------------------------------------------------
[0.06787 s] survived
   - [# 244] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  166:         elif order == 'preOrder':
  167:             preOrder(self.root)
  168:             return traversal
  169:         elif order == 'postOrder':
- 170:             postOrder(self.root)
+ 170:             postOrder(root)
  171:             return traversal
  172:     
  173:     def __len__(self):
  174:         return self.size
--------------------------------------------------------------------------------
[0.06783 s] survived
   - [# 245] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  170:             postOrder(self.root)
  171:             return traversal
  172:     
  173:     def __len__(self):
- 174:         return self.size
+ 174:         return size
  175:     
  176:     def __str__(self):
  177:         '''Return String representation of BST values.
  178: 
--------------------------------------------------------------------------------
[0.07467 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_0

def test_case_0():
        b_s_t_0 = module_0.BST()
>       assert len(b_s_t_0) == 0

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa6428f0>

>   ???
E   NameError: name 'size' is not defined

binarySearchTree2:174: NameError
   - [# 246] SVD binarySearchTree2: 
--------------------------------------------------------------------------------
  179:         Returns:
  180:             String: String inorder representaion of BST.
  181:         '''
  182:         
- 183:         return str(self.getOrder())
+ 183:         return str(getOrder())
  184: 
  185: 
  186: if __name__ == '__main__':
  187:     
--------------------------------------------------------------------------------
[0.08470 s] killed by MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py::test_case_15

def test_case_15():
        b_s_t_0 = module_0.BST()
        assert len(b_s_t_0) == 0
        var_0 = b_s_t_0.add(b_s_t_0)
        assert len(b_s_t_0) == 1
>       var_1 = b_s_t_0.__str__()

MIO-WHOLE_SUITE/test_binarySearchTree2_MIO.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree2.BST object at 0x7f27aa220220>

>   ???
E   NameError: name 'getOrder' is not defined

binarySearchTree2:183: NameError
   - [# 247] ZIL binarySearchTree2: 
--------------------------------------------------------------------------------
   56:     def minValueNode(self, node):
   57:         current = node
   58:         
   59:         while current.left is not None:
-  60:             current = current.left
+  60:             break
   61:         
   62:         return current
   63:     
   64:     def remove(self, value):
--------------------------------------------------------------------------------
[0.06832 s] survived
   - [# 248] ZIL binarySearchTree2: 
--------------------------------------------------------------------------------
   78:         def minValueNode(node):
   79:             current = node
   80:             
   81:             while current.left is not None:
-  82:                 current = current.left
+  82:                 break
   83:             
   84:             return current
   85:         
   86:         if root is None:
--------------------------------------------------------------------------------
[0.06747 s] survived
[*] Mutation score [42.05636 s]: 53.6%
   - all: 248
   - killed: 111 (44.8%)
   - survived: 96 (38.7%)
   - incompetent: 41 (16.5%)
   - timeout: 0 (0.0%)
