[*] Start mutation process:
   - targets: queue3.py
   - tests: ./RANDOM
[*] 2110 tests passed:
   - test_queue3_RANDOM [2.74032 s]
[*] Start mutants generation and execution:
   - [#   1] ASR queue3: 
--------------------------------------------------------------------------------
   26:             newNode = Node(value)
   27:             self.__sentinel.next = newNode
   28:             newNode.prev = self.__sentinel
   29:             self.__tail = newNode
-  30:             self.__size += 1
+  30:             self.__size -= 1
   31:         else:
   32:             newNode = Node(value)
   33:             nextNode = self.__sentinel.next
   34:             self.__sentinel.next = newNode
--------------------------------------------------------------------------------
[3.82014 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_47

def test_case_47():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
>       assert len(doubly_linked_list_0) == 1
E       ValueError: __len__() should return >= 0

RANDOM/test_queue3_RANDOM.py:1400: ValueError
   - [#   2] ASR queue3: 
--------------------------------------------------------------------------------
   34:             self.__sentinel.next = newNode
   35:             newNode.prev = self.__sentinel
   36:             newNode.next = nextNode
   37:             nextNode.prev = newNode
-  38:             self.__size += 1
+  38:             self.__size -= 1
   39:     
   40:     def addAtTail(self, value: T) -> None:
   41:         
   42:         '''Add node at tail end.'''
--------------------------------------------------------------------------------
[4.06228 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_117

def test_case_117():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        queue_1 = module_0.Queue()
        queue_2 = module_0.Queue()
        bool_1 = queue_2.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        none_type_1 = doubly_linked_list_2.addAtHead(queue_3)
        assert len(doubly_linked_list_2) == 1
        int_2 = 0
        node_2 = module_0.Node(int_2)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_0 = doubly_linked_list_3.removeAtHead()
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        int_3 = 0
        node_4 = module_0.Node(int_3)
        none_type_3 = None
        node_5 = module_0.Node(none_type_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_4.getSize()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_4 = None
        node_7 = module_0.Node(none_type_4)
        queue_5 = module_0.Queue()
        int_6 = queue_5.getSize()
        queue_6 = module_0.Queue()
        bool_4 = queue_6.isEmpty()
        assert bool_4 is True
        str_0 = queue_6.__str__()
        assert str_0 == '[]'
        none_type_5 = doubly_linked_list_2.addAtHead(int_0)
>       assert len(doubly_linked_list_2) == 2
E       AssertionError

RANDOM/test_queue3_RANDOM.py:4022: AssertionError
   - [#   3] ASR queue3: 
--------------------------------------------------------------------------------
   45:             newNode = Node(value)
   46:             self.__sentinel.next = newNode
   47:             newNode.prev = self.__sentinel
   48:             self.__tail = newNode
-  49:             self.__size += 1
+  49:             self.__size -= 1
   50:         else:
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
   53:             newNode.prev = self.__tail
--------------------------------------------------------------------------------
[4.11549 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_30

def test_case_30():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        queue_0 = module_0.Queue()
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_0.getTail()
        queue_1 = module_0.Queue()
        bool_0 = queue_1.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = 0
        node_3 = module_0.Node(int_2)
        none_type_1 = doubly_linked_list_0.addAtTail(bool_0)
>       assert len(doubly_linked_list_0) == 1
E       ValueError: __len__() should return >= 0

RANDOM/test_queue3_RANDOM.py:697: ValueError
   - [#   4] ASR queue3: 
--------------------------------------------------------------------------------
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
   53:             newNode.prev = self.__tail
   54:             self.__tail = newNode
-  55:             self.__size += 1
+  55:             self.__size -= 1
   56:     
   57:     def removeAtHead(self):
   58:         
   59:         '''Remove node at head end.'''
--------------------------------------------------------------------------------
[4.08920 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_170

def test_case_170():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        var_0 = queue_0.dequeue()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = doubly_linked_list_1.__str__()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        str_2 = queue_2.__str__()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_1 = queue_3.dequeue()
        int_0 = 0
        node_1 = module_0.Node(int_0)
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        none_type_2 = doubly_linked_list_4.addAtHead(queue_4)
        assert len(doubly_linked_list_4) == 1
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_5.removeAtHead()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        queue_6 = module_0.Queue()
        bool_6 = queue_6.isEmpty()
        assert bool_6 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        none_type_4 = None
        node_5 = module_0.Node(none_type_4)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        int_3 = doubly_linked_list_6.getSize()
        queue_7 = module_0.Queue()
        none_type_5 = doubly_linked_list_1.addAtTail(var_2)
>       assert len(doubly_linked_list_1) == 2
E       AssertionError

RANDOM/test_queue3_RANDOM.py:6048: AssertionError
   - [#   5] ASR queue3: 
--------------------------------------------------------------------------------
   63:         elif self.__size == 1:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
   66:             nodeToRemove.prev = None
-  67:             self.__size -= 1
+  67:             self.__size += 1
   68:             return nodeToRemove
   69:         else:
   70:             nodeToRemove = self.__head.next
   71:             nextNode = nodeToRemove.next
--------------------------------------------------------------------------------
[4.14144 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_208

def test_case_208():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = queue_0.dequeue()
        int_0 = doubly_linked_list_1.getSize()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        var_1 = queue_1.dequeue()
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_4.__len__()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_2 = None
        node_4 = module_0.Node(none_type_2)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_6.removeAtHead()
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        none_type_3 = doubly_linked_list_7.addAtHead(queue_5)
        assert len(doubly_linked_list_7) == 1
        str_1 = doubly_linked_list_7.__str__()
        var_4 = doubly_linked_list_7.removeAtHead()
>       assert len(doubly_linked_list_7) == 0
E       AssertionError

RANDOM/test_queue3_RANDOM.py:7585: AssertionError
   - [#   6] ASR queue3: 
--------------------------------------------------------------------------------
   72:             self.__sentinel.next = nextNode
   73:             nextNode.prev = self.__sentinel
   74:             nodeToRemove.next = None
   75:             nodeToRemove.prev = None
-  76:             self.__size -= 1
+  76:             self.__size += 1
   77:             return nodeToRemove
   78:     
   79:     def removeAtTail(self):
   80:         
--------------------------------------------------------------------------------
[5.31013 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
        var_9 = doubly_linked_list_1.removeAtHead()
>       assert len(doubly_linked_list_1) == 1
E       AssertionError

RANDOM/test_queue3_RANDOM.py:48711: AssertionError
   - [#   7] ASR queue3: 
--------------------------------------------------------------------------------
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
   90:             self.__tail = self.__sentinel
-  91:             self.__size -= 1
+  91:             self.__size += 1
   92:             return nodeToRemove
   93:         else:
   94:             nodeToRemove = self.__tail
   95:             previous = nodeToRemove.prev
--------------------------------------------------------------------------------
[3.94519 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_138

def test_case_138():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_1.addAtHead(queue_2)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_2)
        var_1 = queue_2.dequeue()
        var_2 = doubly_linked_list_1.removeAtTail()
>       assert len(doubly_linked_list_1) == 0
E       AssertionError

RANDOM/test_queue3_RANDOM.py:4805: AssertionError
   - [#   8] ASR queue3: 
--------------------------------------------------------------------------------
   95:             previous = nodeToRemove.prev
   96:             nodeToRemove.prev = None
   97:             previous.next = None
   98:             self.__tail = previous
-  99:             self.__size -= 1
+  99:             self.__size += 1
  100:             return nodeToRemove
  101:     
  102:     def isEmpty(self) -> bool:
  103:         
--------------------------------------------------------------------------------
[2.70841 s] survived
   - [#   9] CDI queue3: 
--------------------------------------------------------------------------------
    4: 
    5: T = TypeVar('T')
    6: 
    7: class Node:
-   8:     def __init__(self, value: T):
-   9:         self.value = value
-  10:         self.next = None
-  11:         self.prev = None
-  12: 
+   8:     @classmethod
+   9:     def __init__(self, value: T):
+  10:         self.value = value
+  11:         self.next = None
+  12:         self.prev = None
   13: 
   14: class DoublyLinkedList:
   15:     def __init__(self):
   16:         self.__sentinel = Node(None)
--------------------------------------------------------------------------------
[4.05356 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_155

def test_case_155():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        queue_2 = module_0.Queue()
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        var_0 = queue_2.getTail()
        var_1 = doubly_linked_list_0.removeAtTail()
        assert len(doubly_linked_list_0) == 0
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'queue3.Node'
>       assert f'{type(var_1.value).__module__}.{type(var_1.value).__qualname__}' == 'queue3.Queue'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:5494: AssertionError
   - [#  10] CDI queue3: 
--------------------------------------------------------------------------------
   11:         self.prev = None
   12: 
   13: 
   14: class DoublyLinkedList:
-  15:     def __init__(self):
-  16:         self.__sentinel = Node(None)
-  17:         self.__head = self.__sentinel
-  18:         self.__tail = self.__sentinel
-  19:         self.__size = 0
-  20:     
+  15:     @classmethod
+  16:     def __init__(self):
+  17:         self.__sentinel = Node(None)
+  18:         self.__head = self.__sentinel
+  19:         self.__tail = self.__sentinel
+  20:         self.__size = 0
   21:     def addAtHead(self, value: T) -> None:
   22:         
   23:         '''Add node at head end.'''
   24:         
--------------------------------------------------------------------------------
[3.86627 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_50

def test_case_50():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
>       assert str_0 == '[]'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:1488: AssertionError
   - [#  11] CDI queue3: 
--------------------------------------------------------------------------------
   17:         self.__head = self.__sentinel
   18:         self.__tail = self.__sentinel
   19:         self.__size = 0
   20:     
-  21:     def addAtHead(self, value: T) -> None:
-  22:         
-  23:         '''Add node at head end.'''
-  24:         
-  25:         if self.__size == 0:
-  26:             newNode = Node(value)
-  27:             self.__sentinel.next = newNode
-  28:             newNode.prev = self.__sentinel
-  29:             self.__tail = newNode
-  30:             self.__size += 1
-  31:         else:
-  32:             newNode = Node(value)
-  33:             nextNode = self.__sentinel.next
-  34:             self.__sentinel.next = newNode
-  35:             newNode.prev = self.__sentinel
-  36:             newNode.next = nextNode
-  37:             nextNode.prev = newNode
-  38:             self.__size += 1
-  39:     
+  21:     @classmethod
+  22:     def addAtHead(self, value: T) -> None:
+  23:         
+  24:         '''Add node at head end.'''
+  25:         
+  26:         if self.__size == 0:
+  27:             newNode = Node(value)
+  28:             self.__sentinel.next = newNode
+  29:             newNode.prev = self.__sentinel
+  30:             self.__tail = newNode
+  31:             self.__size += 1
+  32:         else:
+  33:             newNode = Node(value)
+  34:             nextNode = self.__sentinel.next
+  35:             self.__sentinel.next = newNode
+  36:             newNode.prev = self.__sentinel
+  37:             newNode.next = nextNode
+  38:             nextNode.prev = newNode
+  39:             self.__size += 1
   40:     def addAtTail(self, value: T) -> None:
   41:         
   42:         '''Add node at tail end.'''
   43:         
--------------------------------------------------------------------------------
[3.91680 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_47

def test_case_47():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       none_type_0 = doubly_linked_list_0.addAtHead(queue_0)

RANDOM/test_queue3_RANDOM.py:1399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.DoublyLinkedList'>
value = <queue3.Queue object at 0x7f96e7ec57b0>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute '_DoublyLinkedList__size'

queue3:26: AttributeError
   - [#  12] CDI queue3: 
--------------------------------------------------------------------------------
   36:             newNode.next = nextNode
   37:             nextNode.prev = newNode
   38:             self.__size += 1
   39:     
-  40:     def addAtTail(self, value: T) -> None:
-  41:         
-  42:         '''Add node at tail end.'''
-  43:         
-  44:         if self.__size == 0:
-  45:             newNode = Node(value)
-  46:             self.__sentinel.next = newNode
-  47:             newNode.prev = self.__sentinel
-  48:             self.__tail = newNode
-  49:             self.__size += 1
-  50:         else:
-  51:             newNode = Node(value)
-  52:             self.__tail.next = newNode
-  53:             newNode.prev = self.__tail
-  54:             self.__tail = newNode
-  55:             self.__size += 1
-  56:     
+  40:     @classmethod
+  41:     def addAtTail(self, value: T) -> None:
+  42:         
+  43:         '''Add node at tail end.'''
+  44:         
+  45:         if self.__size == 0:
+  46:             newNode = Node(value)
+  47:             self.__sentinel.next = newNode
+  48:             newNode.prev = self.__sentinel
+  49:             self.__tail = newNode
+  50:             self.__size += 1
+  51:         else:
+  52:             newNode = Node(value)
+  53:             self.__tail.next = newNode
+  54:             newNode.prev = self.__tail
+  55:             self.__tail = newNode
+  56:             self.__size += 1
   57:     def removeAtHead(self):
   58:         
   59:         '''Remove node at head end.'''
   60:         
--------------------------------------------------------------------------------
[3.78355 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_24

def test_case_24():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        var_0 = queue_0.getHead()
        int_2 = 0
        node_3 = module_0.Node(int_2)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_0.removeAtHead()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_3 = 0
        node_5 = module_0.Node(int_3)
        none_type_2 = None
        node_6 = module_0.Node(none_type_2)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_1.getSize()
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
>       none_type_3 = queue_3.enqueue(queue_3)

RANDOM/test_queue3_RANDOM.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:172: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.DoublyLinkedList'>
value = <queue3.Queue object at 0x7f96e74ff580>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute '_DoublyLinkedList__size'

queue3:45: AttributeError
   - [#  13] CDI queue3: 
--------------------------------------------------------------------------------
   53:             newNode.prev = self.__tail
   54:             self.__tail = newNode
   55:             self.__size += 1
   56:     
-  57:     def removeAtHead(self):
-  58:         
-  59:         '''Remove node at head end.'''
-  60:         
-  61:         if self.__size == 0:
-  62:             return None
-  63:         elif self.__size == 1:
-  64:             nodeToRemove = self.__head.next
-  65:             self.__sentinel.next = None
-  66:             nodeToRemove.prev = None
-  67:             self.__size -= 1
-  68:             return nodeToRemove
-  69:         else:
-  70:             nodeToRemove = self.__head.next
-  71:             nextNode = nodeToRemove.next
-  72:             self.__sentinel.next = nextNode
-  73:             nextNode.prev = self.__sentinel
-  74:             nodeToRemove.next = None
-  75:             nodeToRemove.prev = None
-  76:             self.__size -= 1
-  77:             return nodeToRemove
-  78:     
+  57:     @classmethod
+  58:     def removeAtHead(self):
+  59:         
+  60:         '''Remove node at head end.'''
+  61:         
+  62:         if self.__size == 0:
+  63:             return None
+  64:         elif self.__size == 1:
+  65:             nodeToRemove = self.__head.next
+  66:             self.__sentinel.next = None
+  67:             nodeToRemove.prev = None
+  68:             self.__size -= 1
+  69:             return nodeToRemove
+  70:         else:
+  71:             nodeToRemove = self.__head.next
+  72:             nextNode = nodeToRemove.next
+  73:             self.__sentinel.next = nextNode
+  74:             nextNode.prev = self.__sentinel
+  75:             nodeToRemove.next = None
+  76:             nodeToRemove.prev = None
+  77:             self.__size -= 1
+  78:             return nodeToRemove
   79:     def removeAtTail(self):
   80:         
   81:         '''Remove node at tail end.'''
   82:         
--------------------------------------------------------------------------------
[3.80974 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_4

def test_case_4():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        var_0 = queue_0.getHead()
        int_3 = 0
        node_5 = module_0.Node(int_3)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
>       var_1 = queue_1.dequeue()

RANDOM/test_queue3_RANDOM.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:166: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute '_DoublyLinkedList__size'

queue3:62: AttributeError
   - [#  14] CDI queue3: 
--------------------------------------------------------------------------------
   75:             nodeToRemove.prev = None
   76:             self.__size -= 1
   77:             return nodeToRemove
   78:     
-  79:     def removeAtTail(self):
-  80:         
-  81:         '''Remove node at tail end.'''
-  82:         
-  83:         if self.__size == 0:
-  84:             return None
-  85:         elif self.__size == 1:
-  86:             nodeToRemove = self.__tail
-  87:             nodeToRemove.prev = None
-  88:             self.__sentinel.next = None
-  89:             self.__head = self.__sentinel
-  90:             self.__tail = self.__sentinel
-  91:             self.__size -= 1
-  92:             return nodeToRemove
-  93:         else:
-  94:             nodeToRemove = self.__tail
-  95:             previous = nodeToRemove.prev
-  96:             nodeToRemove.prev = None
-  97:             previous.next = None
-  98:             self.__tail = previous
-  99:             self.__size -= 1
- 100:             return nodeToRemove
- 101:     
+  79:     @classmethod
+  80:     def removeAtTail(self):
+  81:         
+  82:         '''Remove node at tail end.'''
+  83:         
+  84:         if self.__size == 0:
+  85:             return None
+  86:         elif self.__size == 1:
+  87:             nodeToRemove = self.__tail
+  88:             nodeToRemove.prev = None
+  89:             self.__sentinel.next = None
+  90:             self.__head = self.__sentinel
+  91:             self.__tail = self.__sentinel
+  92:             self.__size -= 1
+  93:             return nodeToRemove
+  94:         else:
+  95:             nodeToRemove = self.__tail
+  96:             previous = nodeToRemove.prev
+  97:             nodeToRemove.prev = None
+  98:             previous.next = None
+  99:             self.__tail = previous
+ 100:             self.__size -= 1
+ 101:             return nodeToRemove
  102:     def isEmpty(self) -> bool:
  103:         
  104:         '''Check if linkedlist is empty'''
  105:         
--------------------------------------------------------------------------------
[3.91921 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_14

def test_case_14():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
>       var_0 = doubly_linked_list_1.removeAtTail()

RANDOM/test_queue3_RANDOM.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute '_DoublyLinkedList__size'

queue3:84: AttributeError
   - [#  15] CDI queue3: 
--------------------------------------------------------------------------------
   98:             self.__tail = previous
   99:             self.__size -= 1
  100:             return nodeToRemove
  101:     
- 102:     def isEmpty(self) -> bool:
- 103:         
- 104:         '''Check if linkedlist is empty'''
- 105:         
- 106:         return True if self.__size == 0 else False
- 107:     
+ 102:     @classmethod
+ 103:     def isEmpty(self) -> bool:
+ 104:         
+ 105:         '''Check if linkedlist is empty'''
+ 106:         
+ 107:         return True if self.__size == 0 else False
  108:     def getHead(self):
  109:         
  110:         '''Get value at the front end of the list.'''
  111:         
--------------------------------------------------------------------------------
[3.89500 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
>       bool_0 = queue_0.isEmpty()

RANDOM/test_queue3_RANDOM.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:184: in isEmpty
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute '_DoublyLinkedList__size'

queue3:107: AttributeError
   - [#  16] CDI queue3: 
--------------------------------------------------------------------------------
  104:         '''Check if linkedlist is empty'''
  105:         
  106:         return True if self.__size == 0 else False
  107:     
- 108:     def getHead(self):
- 109:         
- 110:         '''Get value at the front end of the list.'''
- 111:         
- 112:         if self.__size == 0:
- 113:             return None
- 114:         else:
- 115:             return self.__head.next.value
- 116:     
+ 108:     @classmethod
+ 109:     def getHead(self):
+ 110:         
+ 111:         '''Get value at the front end of the list.'''
+ 112:         
+ 113:         if self.__size == 0:
+ 114:             return None
+ 115:         else:
+ 116:             return self.__head.next.value
  117:     def getTail(self) -> T:
  118:         
  119:         '''Get value at the tail of the list.'''
  120:         
--------------------------------------------------------------------------------
[3.98768 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_3

def test_case_3():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
>       var_0 = queue_0.getHead()

RANDOM/test_queue3_RANDOM.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:154: in getHead
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute '_DoublyLinkedList__size'

queue3:113: AttributeError
   - [#  17] CDI queue3: 
--------------------------------------------------------------------------------
  113:             return None
  114:         else:
  115:             return self.__head.next.value
  116:     
- 117:     def getTail(self) -> T:
- 118:         
- 119:         '''Get value at the tail of the list.'''
- 120:         
- 121:         return self.__tail.value
- 122:     
+ 117:     @classmethod
+ 118:     def getTail(self) -> T:
+ 119:         
+ 120:         '''Get value at the tail of the list.'''
+ 121:         
+ 122:         return self.__tail.value
  123:     def getSize(self) -> int:
  124:         
  125:         '''Get length of the linked list.'''
  126:         
--------------------------------------------------------------------------------
[3.96011 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_18

def test_case_18():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        queue_0 = module_0.Queue()
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       var_0 = queue_0.getTail()

RANDOM/test_queue3_RANDOM.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:160: in getTail
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute '_DoublyLinkedList__tail'

queue3:122: AttributeError
   - [#  18] CDI queue3: 
--------------------------------------------------------------------------------
  119:         '''Get value at the tail of the list.'''
  120:         
  121:         return self.__tail.value
  122:     
- 123:     def getSize(self) -> int:
- 124:         
- 125:         '''Get length of the linked list.'''
- 126:         
- 127:         return self.__size
- 128:     
+ 123:     @classmethod
+ 124:     def getSize(self) -> int:
+ 125:         
+ 126:         '''Get length of the linked list.'''
+ 127:         
+ 128:         return self.__size
  129:     def __len__(self) -> int:
  130:         
  131:         '''Get length of the linked list.'''
  132:         
--------------------------------------------------------------------------------
[3.92816 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_9

def test_case_9():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        var_0 = queue_0.getHead()
        int_3 = 0
        node_5 = module_0.Node(int_3)
        none_type_2 = None
        node_6 = module_0.Node(none_type_2)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_0.removeAtHead()
>       int_4 = doubly_linked_list_0.getSize()

RANDOM/test_queue3_RANDOM.py:166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute '_DoublyLinkedList__size'

queue3:128: AttributeError
   - [#  19] CDI queue3: 
--------------------------------------------------------------------------------
  125:         '''Get length of the linked list.'''
  126:         
  127:         return self.__size
  128:     
- 129:     def __len__(self) -> int:
- 130:         
- 131:         '''Get length of the linked list.'''
- 132:         
- 133:         return self.__size
- 134:     
+ 129:     @classmethod
+ 130:     def __len__(self) -> int:
+ 131:         
+ 132:         '''Get length of the linked list.'''
+ 133:         
+ 134:         return self.__size
  135:     def __str__(self) -> str:
  136:         
  137:         '''Return String representation of linkedlist values.'''
  138:         
--------------------------------------------------------------------------------
[3.99497 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_5

def test_case_5():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

RANDOM/test_queue3_RANDOM.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute '_DoublyLinkedList__size'

queue3:134: AttributeError
   - [#  20] CDI queue3: 
--------------------------------------------------------------------------------
  131:         '''Get length of the linked list.'''
  132:         
  133:         return self.__size
  134:     
- 135:     def __str__(self) -> str:
- 136:         
- 137:         '''Return String representation of linkedlist values.'''
- 138:         
- 139:         arr = []
- 140:         current = self.__head.next
- 141:         while current:
- 142:             arr.append(current.value)
- 143:             current = current.next
- 144:         return str(arr)
- 145: 
+ 135:     @classmethod
+ 136:     def __str__(self) -> str:
+ 137:         
+ 138:         '''Return String representation of linkedlist values.'''
+ 139:         
+ 140:         arr = []
+ 141:         current = self.__head.next
+ 142:         while current:
+ 143:             arr.append(current.value)
+ 144:             current = current.next
+ 145:         return str(arr)
  146: class Queue:
  147:     def __init__(self):
  148:         self.__queue = DoublyLinkedList()
  149:     
--------------------------------------------------------------------------------
[4.07614 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_28

def test_case_28():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = doubly_linked_list_1.getSize()
        assert int_2 == 0
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_4 = 0
        node_5 = module_0.Node(int_4)
        var_0 = queue_1.getHead()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_2 = None
        node_7 = module_0.Node(none_type_2)
        int_6 = 0
        node_8 = module_0.Node(int_6)
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_7 = 0
        node_9 = module_0.Node(int_7)
        none_type_3 = None
        node_10 = module_0.Node(none_type_3)
        int_8 = 0
        node_11 = module_0.Node(int_8)
        none_type_4 = None
        node_12 = module_0.Node(none_type_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        int_9 = 0
        node_13 = module_0.Node(int_9)
        none_type_5 = None
        node_14 = module_0.Node(none_type_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        queue_5 = module_0.Queue()
>       str_0 = queue_2.__str__()

RANDOM/test_queue3_RANDOM.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:190: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.DoublyLinkedList'>

>   ???
E   AttributeError: type object 'DoublyLinkedList' has no attribute '_DoublyLinkedList__head'

queue3:141: AttributeError
   - [#  21] CDI queue3: 
--------------------------------------------------------------------------------
  143:             current = current.next
  144:         return str(arr)
  145: 
  146: class Queue:
- 147:     def __init__(self):
- 148:         self.__queue = DoublyLinkedList()
- 149:     
+ 147:     @classmethod
+ 148:     def __init__(self):
+ 149:         self.__queue = DoublyLinkedList()
  150:     def getHead(self) -> T:
  151:         
  152:         '''View first element in the queue.'''
  153:         
--------------------------------------------------------------------------------
[4.81192 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_578

def test_case_578():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        var_0 = queue_0.getTail()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        str_1 = queue_1.__str__()
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_1.removeAtTail()
        str_2 = var_1.__str__()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        int_0 = doubly_linked_list_2.getSize()
        var_2 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        str_3 = queue_2.__str__()
        int_1 = 0
        node_0 = module_0.Node(int_1)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        queue_3 = module_0.Queue()
        var_3 = queue_3.getTail()
        none_type_2 = queue_3.enqueue(int_1)
        int_2 = 0
        node_2 = module_0.Node(int_2)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        queue_4 = module_0.Queue()
        var_4 = queue_4.getTail()
        none_type_4 = queue_4.enqueue(int_2)
        queue_5 = module_0.Queue()
        queue_6 = module_0.Queue()
        int_3 = 0
        node_4 = module_0.Node(int_3)
        none_type_5 = None
        node_5 = module_0.Node(none_type_5)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_5 = doubly_linked_list_3.removeAtHead()
        node_6 = module_0.Node(none_type_5)
        queue_7 = module_0.Queue()
        bool_3 = queue_7.isEmpty()
        assert bool_3 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        none_type_6 = doubly_linked_list_4.addAtHead(queue_7)
        assert len(doubly_linked_list_4) == 1
        str_4 = queue_7.__str__()
        node_7 = module_0.Node(queue_7)
        bool_4 = queue_7.isEmpty()
        assert bool_4 is True
        var_6 = doubly_linked_list_4.getTail()
        int_4 = doubly_linked_list_4.getSize()
        assert int_4 == 1
        int_5 = 0
        node_8 = module_0.Node(int_5)
        none_type_7 = None
        node_9 = module_0.Node(none_type_7)
        queue_8 = module_0.Queue()
        bool_5 = queue_8.isEmpty()
        assert bool_5 is True
        int_6 = 0
        node_10 = module_0.Node(int_6)
        none_type_8 = None
        node_11 = module_0.Node(none_type_8)
        queue_9 = module_0.Queue()
        bool_6 = queue_9.isEmpty()
        assert bool_6 is True
        int_7 = 0
        node_12 = module_0.Node(int_7)
        var_7 = queue_9.getHead()
        var_8 = queue_4.dequeue()
>       assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue3.Node'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:22134: AssertionError
   - [#  22] CDI queue3: 
--------------------------------------------------------------------------------
  146: class Queue:
  147:     def __init__(self):
  148:         self.__queue = DoublyLinkedList()
  149:     
- 150:     def getHead(self) -> T:
- 151:         
- 152:         '''View first element in the queue.'''
- 153:         
- 154:         return self.__queue.getHead()
- 155:     
+ 150:     @classmethod
+ 151:     def getHead(self) -> T:
+ 152:         
+ 153:         '''View first element in the queue.'''
+ 154:         
+ 155:         return self.__queue.getHead()
  156:     def getTail(self):
  157:         
  158:         '''View last element in the queue.'''
  159:         
--------------------------------------------------------------------------------
[3.95485 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_3

def test_case_3():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
>       var_0 = queue_0.getHead()

RANDOM/test_queue3_RANDOM.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_Queue__queue'

queue3:155: AttributeError
   - [#  23] CDI queue3: 
--------------------------------------------------------------------------------
  152:         '''View first element in the queue.'''
  153:         
  154:         return self.__queue.getHead()
  155:     
- 156:     def getTail(self):
- 157:         
- 158:         '''View last element in the queue.'''
- 159:         
- 160:         return self.__queue.getTail()
- 161:     
+ 156:     @classmethod
+ 157:     def getTail(self):
+ 158:         
+ 159:         '''View last element in the queue.'''
+ 160:         
+ 161:         return self.__queue.getTail()
  162:     def dequeue(self) -> T:
  163:         
  164:         '''Remove element from the queue.'''
  165:         
--------------------------------------------------------------------------------
[4.13867 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_18

def test_case_18():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        queue_0 = module_0.Queue()
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       var_0 = queue_0.getTail()

RANDOM/test_queue3_RANDOM.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_Queue__queue'

queue3:161: AttributeError
   - [#  24] CDI queue3: 
--------------------------------------------------------------------------------
  158:         '''View last element in the queue.'''
  159:         
  160:         return self.__queue.getTail()
  161:     
- 162:     def dequeue(self) -> T:
- 163:         
- 164:         '''Remove element from the queue.'''
- 165:         
- 166:         return self.__queue.removeAtHead()
- 167:     
+ 162:     @classmethod
+ 163:     def dequeue(self) -> T:
+ 164:         
+ 165:         '''Remove element from the queue.'''
+ 166:         
+ 167:         return self.__queue.removeAtHead()
  168:     def enqueue(self, value: T) -> None:
  169:         
  170:         '''Add element to queue.'''
  171:         
--------------------------------------------------------------------------------
[4.28725 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_4

def test_case_4():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        var_0 = queue_0.getHead()
        int_3 = 0
        node_5 = module_0.Node(int_3)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
>       var_1 = queue_1.dequeue()

RANDOM/test_queue3_RANDOM.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_Queue__queue'

queue3:167: AttributeError
   - [#  25] CDI queue3: 
--------------------------------------------------------------------------------
  164:         '''Remove element from the queue.'''
  165:         
  166:         return self.__queue.removeAtHead()
  167:     
- 168:     def enqueue(self, value: T) -> None:
- 169:         
- 170:         '''Add element to queue.'''
- 171:         
- 172:         self.__queue.addAtTail(value)
- 173:     
+ 168:     @classmethod
+ 169:     def enqueue(self, value: T) -> None:
+ 170:         
+ 171:         '''Add element to queue.'''
+ 172:         
+ 173:         self.__queue.addAtTail(value)
  174:     def getSize(self) -> int:
  175:         
  176:         '''Get size of the queue.'''
  177:         
--------------------------------------------------------------------------------
[4.09915 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_24

def test_case_24():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        var_0 = queue_0.getHead()
        int_2 = 0
        node_3 = module_0.Node(int_2)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_0.removeAtHead()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_3 = 0
        node_5 = module_0.Node(int_3)
        none_type_2 = None
        node_6 = module_0.Node(none_type_2)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_1.getSize()
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
>       none_type_3 = queue_3.enqueue(queue_3)

RANDOM/test_queue3_RANDOM.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.Queue'>, value = <queue3.Queue object at 0x7f96e7f6f010>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_Queue__queue'

queue3:173: AttributeError
   - [#  26] CDI queue3: 
--------------------------------------------------------------------------------
  170:         '''Add element to queue.'''
  171:         
  172:         self.__queue.addAtTail(value)
  173:     
- 174:     def getSize(self) -> int:
- 175:         
- 176:         '''Get size of the queue.'''
- 177:         
- 178:         return self.__queue.getSize()
- 179:     
+ 174:     @classmethod
+ 175:     def getSize(self) -> int:
+ 176:         
+ 177:         '''Get size of the queue.'''
+ 178:         
+ 179:         return self.__queue.getSize()
  180:     def isEmpty(self) -> bool:
  181:         
  182:         '''Check if queue is empty.'''
  183:         
--------------------------------------------------------------------------------
[4.18168 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_23

def test_case_23():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        var_0 = queue_0.getHead()
        queue_1 = module_0.Queue()
        int_2 = 0
        node_3 = module_0.Node(int_2)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        int_3 = 0
        node_5 = module_0.Node(int_3)
        queue_2 = module_0.Queue()
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_4 = 0
        node_6 = module_0.Node(int_4)
>       int_5 = queue_0.getSize()

RANDOM/test_queue3_RANDOM.py:483: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_Queue__queue'

queue3:179: AttributeError
   - [#  27] CDI queue3: 
--------------------------------------------------------------------------------
  176:         '''Get size of the queue.'''
  177:         
  178:         return self.__queue.getSize()
  179:     
- 180:     def isEmpty(self) -> bool:
- 181:         
- 182:         '''Check if queue is empty.'''
- 183:         
- 184:         return self.__queue.isEmpty()
- 185:     
+ 180:     @classmethod
+ 181:     def isEmpty(self) -> bool:
+ 182:         
+ 183:         '''Check if queue is empty.'''
+ 184:         
+ 185:         return self.__queue.isEmpty()
  186:     def __str__(self) -> str:
  187:         
  188:         '''Get string representation of the queue.'''
  189:         
--------------------------------------------------------------------------------
[3.89123 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
>       bool_0 = queue_0.isEmpty()

RANDOM/test_queue3_RANDOM.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_Queue__queue'

queue3:185: AttributeError
   - [#  28] CDI queue3: 
--------------------------------------------------------------------------------
  182:         '''Check if queue is empty.'''
  183:         
  184:         return self.__queue.isEmpty()
  185:     
- 186:     def __str__(self) -> str:
- 187:         
- 188:         '''Get string representation of the queue.'''
- 189:         
- 190:         return self.__queue.__str__()
- 191: 
+ 186:     @classmethod
+ 187:     def __str__(self) -> str:
+ 188:         
+ 189:         '''Get string representation of the queue.'''
+ 190:         
+ 191:         return self.__queue.__str__()
  192: 
  193: if __name__ == '__main__':
  194:     pass
--------------------------------------------------------------------------------
[4.15100 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_28

def test_case_28():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = doubly_linked_list_1.getSize()
        assert int_2 == 0
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_4 = 0
        node_5 = module_0.Node(int_4)
        var_0 = queue_1.getHead()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_2 = None
        node_7 = module_0.Node(none_type_2)
        int_6 = 0
        node_8 = module_0.Node(int_6)
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_7 = 0
        node_9 = module_0.Node(int_7)
        none_type_3 = None
        node_10 = module_0.Node(none_type_3)
        int_8 = 0
        node_11 = module_0.Node(int_8)
        none_type_4 = None
        node_12 = module_0.Node(none_type_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        int_9 = 0
        node_13 = module_0.Node(int_9)
        none_type_5 = None
        node_14 = module_0.Node(none_type_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        queue_5 = module_0.Queue()
>       str_0 = queue_2.__str__()

RANDOM/test_queue3_RANDOM.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'queue3.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_Queue__queue'

queue3:191: AttributeError
   - [#  29] COI queue3: 
--------------------------------------------------------------------------------
   21:     def addAtHead(self, value: T) -> None:
   22:         
   23:         '''Add node at head end.'''
   24:         
-  25:         if self.__size == 0:
+  25:         if not (self.__size == 0):
   26:             newNode = Node(value)
   27:             self.__sentinel.next = newNode
   28:             newNode.prev = self.__sentinel
   29:             self.__tail = newNode
--------------------------------------------------------------------------------
[4.25664 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_47

def test_case_47():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       none_type_0 = doubly_linked_list_0.addAtHead(queue_0)

RANDOM/test_queue3_RANDOM.py:1399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96ea7101f0>
value = <queue3.Queue object at 0x7f96ea7131c0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:37: AttributeError
   - [#  30] COI queue3: 
--------------------------------------------------------------------------------
   40:     def addAtTail(self, value: T) -> None:
   41:         
   42:         '''Add node at tail end.'''
   43:         
-  44:         if self.__size == 0:
+  44:         if not (self.__size == 0):
   45:             newNode = Node(value)
   46:             self.__sentinel.next = newNode
   47:             newNode.prev = self.__sentinel
   48:             self.__tail = newNode
--------------------------------------------------------------------------------
[5.03005 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
>       var_9 = doubly_linked_list_1.removeAtHead()

RANDOM/test_queue3_RANDOM.py:48710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9368fd0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:73: AttributeError
   - [#  31] COI queue3: 
--------------------------------------------------------------------------------
   57:     def removeAtHead(self):
   58:         
   59:         '''Remove node at head end.'''
   60:         
-  61:         if self.__size == 0:
+  61:         if not (self.__size == 0):
   62:             return None
   63:         elif self.__size == 1:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
--------------------------------------------------------------------------------
[4.06602 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_4

def test_case_4():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        var_0 = queue_0.getHead()
        int_3 = 0
        node_5 = module_0.Node(int_3)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
>       var_1 = queue_1.dequeue()

RANDOM/test_queue3_RANDOM.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:166: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96eaf0eb30>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

queue3:71: AttributeError
   - [#  32] COI queue3: 
--------------------------------------------------------------------------------
   59:         '''Remove node at head end.'''
   60:         
   61:         if self.__size == 0:
   62:             return None
-  63:         elif self.__size == 1:
+  63:         elif not (self.__size == 1):
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
   66:             nodeToRemove.prev = None
   67:             self.__size -= 1
--------------------------------------------------------------------------------
[4.02588 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_208

def test_case_208():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = queue_0.dequeue()
        int_0 = doubly_linked_list_1.getSize()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        var_1 = queue_1.dequeue()
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_4.__len__()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_2 = None
        node_4 = module_0.Node(none_type_2)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_6.removeAtHead()
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        none_type_3 = doubly_linked_list_7.addAtHead(queue_5)
        assert len(doubly_linked_list_7) == 1
        str_1 = doubly_linked_list_7.__str__()
>       var_4 = doubly_linked_list_7.removeAtHead()

RANDOM/test_queue3_RANDOM.py:7584: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e918efe0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:73: AttributeError
   - [#  33] COI queue3: 
--------------------------------------------------------------------------------
   79:     def removeAtTail(self):
   80:         
   81:         '''Remove node at tail end.'''
   82:         
-  83:         if self.__size == 0:
+  83:         if not (self.__size == 0):
   84:             return None
   85:         elif self.__size == 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
--------------------------------------------------------------------------------
[3.67842 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_14

def test_case_14():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
>       var_0 = doubly_linked_list_1.removeAtTail()

RANDOM/test_queue3_RANDOM.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e92edd20>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

queue3:97: AttributeError
   - [#  34] COI queue3: 
--------------------------------------------------------------------------------
   81:         '''Remove node at tail end.'''
   82:         
   83:         if self.__size == 0:
   84:             return None
-  85:         elif self.__size == 1:
+  85:         elif not (self.__size == 1):
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
--------------------------------------------------------------------------------
[2.81455 s] survived
   - [#  35] COI queue3: 
--------------------------------------------------------------------------------
  108:     def getHead(self):
  109:         
  110:         '''Get value at the front end of the list.'''
  111:         
- 112:         if self.__size == 0:
+ 112:         if not (self.__size == 0):
  113:             return None
  114:         else:
  115:             return self.__head.next.value
  116:     
--------------------------------------------------------------------------------
[3.94626 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_3

def test_case_3():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
>       var_0 = queue_0.getHead()

RANDOM/test_queue3_RANDOM.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:154: in getHead
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9c6d8a0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

queue3:115: AttributeError
   - [#  36] COI queue3: 
--------------------------------------------------------------------------------
  137:         '''Return String representation of linkedlist values.'''
  138:         
  139:         arr = []
  140:         current = self.__head.next
- 141:         while current:
+ 141:         while not current:
  142:             arr.append(current.value)
  143:             current = current.next
  144:         return str(arr)
  145: 
--------------------------------------------------------------------------------
[3.90183 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_28

def test_case_28():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = doubly_linked_list_1.getSize()
        assert int_2 == 0
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_4 = 0
        node_5 = module_0.Node(int_4)
        var_0 = queue_1.getHead()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_2 = None
        node_7 = module_0.Node(none_type_2)
        int_6 = 0
        node_8 = module_0.Node(int_6)
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_7 = 0
        node_9 = module_0.Node(int_7)
        none_type_3 = None
        node_10 = module_0.Node(none_type_3)
        int_8 = 0
        node_11 = module_0.Node(int_8)
        none_type_4 = None
        node_12 = module_0.Node(none_type_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        int_9 = 0
        node_13 = module_0.Node(int_9)
        none_type_5 = None
        node_14 = module_0.Node(none_type_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        queue_5 = module_0.Queue()
>       str_0 = queue_2.__str__()

RANDOM/test_queue3_RANDOM.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:190: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e7542b30>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

queue3:142: AttributeError
   - [#  37] COI queue3: 
--------------------------------------------------------------------------------
  189:         
  190:         return self.__queue.__str__()
  191: 
  192: 
- 193: if __name__ == '__main__':
+ 193: if not (__name__ == '__main__'):
  194:     pass
--------------------------------------------------------------------------------
[2.77553 s] survived
   - [#  38] CRP queue3: 
--------------------------------------------------------------------------------
    1: '''In computer science, a queue is a collection of entities that are maintained in a sequence and can be modified by the addition of entities at one end of the sequence and the removal of entities from the other end of the sequence.'''
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: T = TypeVar('mutpy')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[2.61125 s] survived
   - [#  39] CRP queue3: 
--------------------------------------------------------------------------------
    1: '''In computer science, a queue is a collection of entities that are maintained in a sequence and can be modified by the addition of entities at one end of the sequence and the removal of entities from the other end of the sequence.'''
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: T = TypeVar('')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[2.84339 s] survived
   - [#  40] CRP queue3: 
--------------------------------------------------------------------------------
   15:     def __init__(self):
   16:         self.__sentinel = Node(None)
   17:         self.__head = self.__sentinel
   18:         self.__tail = self.__sentinel
-  19:         self.__size = 0
+  19:         self.__size = 1
   20:     
   21:     def addAtHead(self, value: T) -> None:
   22:         
   23:         '''Add node at head end.'''
--------------------------------------------------------------------------------
[3.98484 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

RANDOM/test_queue3_RANDOM.py:19: AssertionError
   - [#  41] CRP queue3: 
--------------------------------------------------------------------------------
   21:     def addAtHead(self, value: T) -> None:
   22:         
   23:         '''Add node at head end.'''
   24:         
-  25:         if self.__size == 0:
+  25:         if self.__size == 1:
   26:             newNode = Node(value)
   27:             self.__sentinel.next = newNode
   28:             newNode.prev = self.__sentinel
   29:             self.__tail = newNode
--------------------------------------------------------------------------------
[4.32614 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_47

def test_case_47():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       none_type_0 = doubly_linked_list_0.addAtHead(queue_0)

RANDOM/test_queue3_RANDOM.py:1399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96ea710640>
value = <queue3.Queue object at 0x7f96ea713e20>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:37: AttributeError
   - [#  42] CRP queue3: 
--------------------------------------------------------------------------------
   26:             newNode = Node(value)
   27:             self.__sentinel.next = newNode
   28:             newNode.prev = self.__sentinel
   29:             self.__tail = newNode
-  30:             self.__size += 1
+  30:             self.__size += 2
   31:         else:
   32:             newNode = Node(value)
   33:             nextNode = self.__sentinel.next
   34:             self.__sentinel.next = newNode
--------------------------------------------------------------------------------
[4.14081 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_47

def test_case_47():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
>       assert len(doubly_linked_list_0) == 1
E       AssertionError

RANDOM/test_queue3_RANDOM.py:1400: AssertionError
   - [#  43] CRP queue3: 
--------------------------------------------------------------------------------
   34:             self.__sentinel.next = newNode
   35:             newNode.prev = self.__sentinel
   36:             newNode.next = nextNode
   37:             nextNode.prev = newNode
-  38:             self.__size += 1
+  38:             self.__size += 2
   39:     
   40:     def addAtTail(self, value: T) -> None:
   41:         
   42:         '''Add node at tail end.'''
--------------------------------------------------------------------------------
[4.17097 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_117

def test_case_117():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        queue_1 = module_0.Queue()
        queue_2 = module_0.Queue()
        bool_1 = queue_2.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        none_type_1 = doubly_linked_list_2.addAtHead(queue_3)
        assert len(doubly_linked_list_2) == 1
        int_2 = 0
        node_2 = module_0.Node(int_2)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_0 = doubly_linked_list_3.removeAtHead()
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        int_3 = 0
        node_4 = module_0.Node(int_3)
        none_type_3 = None
        node_5 = module_0.Node(none_type_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_4.getSize()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_4 = None
        node_7 = module_0.Node(none_type_4)
        queue_5 = module_0.Queue()
        int_6 = queue_5.getSize()
        queue_6 = module_0.Queue()
        bool_4 = queue_6.isEmpty()
        assert bool_4 is True
        str_0 = queue_6.__str__()
        assert str_0 == '[]'
        none_type_5 = doubly_linked_list_2.addAtHead(int_0)
>       assert len(doubly_linked_list_2) == 2
E       AssertionError

RANDOM/test_queue3_RANDOM.py:4022: AssertionError
   - [#  44] CRP queue3: 
--------------------------------------------------------------------------------
   40:     def addAtTail(self, value: T) -> None:
   41:         
   42:         '''Add node at tail end.'''
   43:         
-  44:         if self.__size == 0:
+  44:         if self.__size == 1:
   45:             newNode = Node(value)
   46:             self.__sentinel.next = newNode
   47:             newNode.prev = self.__sentinel
   48:             self.__tail = newNode
--------------------------------------------------------------------------------
[5.66423 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
>       var_9 = doubly_linked_list_1.removeAtHead()

RANDOM/test_queue3_RANDOM.py:48710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9c03b20>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:73: AttributeError
   - [#  45] CRP queue3: 
--------------------------------------------------------------------------------
   45:             newNode = Node(value)
   46:             self.__sentinel.next = newNode
   47:             newNode.prev = self.__sentinel
   48:             self.__tail = newNode
-  49:             self.__size += 1
+  49:             self.__size += 2
   50:         else:
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
   53:             newNode.prev = self.__tail
--------------------------------------------------------------------------------
[4.17429 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_30

def test_case_30():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        queue_0 = module_0.Queue()
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_0.getTail()
        queue_1 = module_0.Queue()
        bool_0 = queue_1.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = 0
        node_3 = module_0.Node(int_2)
        none_type_1 = doubly_linked_list_0.addAtTail(bool_0)
>       assert len(doubly_linked_list_0) == 1
E       AssertionError

RANDOM/test_queue3_RANDOM.py:697: AssertionError
   - [#  46] CRP queue3: 
--------------------------------------------------------------------------------
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
   53:             newNode.prev = self.__tail
   54:             self.__tail = newNode
-  55:             self.__size += 1
+  55:             self.__size += 2
   56:     
   57:     def removeAtHead(self):
   58:         
   59:         '''Remove node at head end.'''
--------------------------------------------------------------------------------
[4.18880 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_170

def test_case_170():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        var_0 = queue_0.dequeue()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = doubly_linked_list_1.__str__()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        str_2 = queue_2.__str__()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_1 = queue_3.dequeue()
        int_0 = 0
        node_1 = module_0.Node(int_0)
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        none_type_2 = doubly_linked_list_4.addAtHead(queue_4)
        assert len(doubly_linked_list_4) == 1
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_5.removeAtHead()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        queue_6 = module_0.Queue()
        bool_6 = queue_6.isEmpty()
        assert bool_6 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        none_type_4 = None
        node_5 = module_0.Node(none_type_4)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        int_3 = doubly_linked_list_6.getSize()
        queue_7 = module_0.Queue()
        none_type_5 = doubly_linked_list_1.addAtTail(var_2)
>       assert len(doubly_linked_list_1) == 2
E       AssertionError

RANDOM/test_queue3_RANDOM.py:6048: AssertionError
   - [#  47] CRP queue3: 
--------------------------------------------------------------------------------
   57:     def removeAtHead(self):
   58:         
   59:         '''Remove node at head end.'''
   60:         
-  61:         if self.__size == 0:
+  61:         if self.__size == 1:
   62:             return None
   63:         elif self.__size == 1:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
--------------------------------------------------------------------------------
[4.24922 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_4

def test_case_4():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        var_0 = queue_0.getHead()
        int_3 = 0
        node_5 = module_0.Node(int_3)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
>       var_1 = queue_1.dequeue()

RANDOM/test_queue3_RANDOM.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:166: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e904a6e0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

queue3:71: AttributeError
   - [#  48] CRP queue3: 
--------------------------------------------------------------------------------
   59:         '''Remove node at head end.'''
   60:         
   61:         if self.__size == 0:
   62:             return None
-  63:         elif self.__size == 1:
+  63:         elif self.__size == 2:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
   66:             nodeToRemove.prev = None
   67:             self.__size -= 1
--------------------------------------------------------------------------------
[4.34140 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_208

def test_case_208():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = queue_0.dequeue()
        int_0 = doubly_linked_list_1.getSize()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        var_1 = queue_1.dequeue()
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_4.__len__()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_2 = None
        node_4 = module_0.Node(none_type_2)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_6.removeAtHead()
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        none_type_3 = doubly_linked_list_7.addAtHead(queue_5)
        assert len(doubly_linked_list_7) == 1
        str_1 = doubly_linked_list_7.__str__()
>       var_4 = doubly_linked_list_7.removeAtHead()

RANDOM/test_queue3_RANDOM.py:7584: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e92cab30>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:73: AttributeError
   - [#  49] CRP queue3: 
--------------------------------------------------------------------------------
   63:         elif self.__size == 1:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
   66:             nodeToRemove.prev = None
-  67:             self.__size -= 1
+  67:             self.__size -= 2
   68:             return nodeToRemove
   69:         else:
   70:             nodeToRemove = self.__head.next
   71:             nextNode = nodeToRemove.next
--------------------------------------------------------------------------------
[4.52181 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_208

def test_case_208():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = queue_0.dequeue()
        int_0 = doubly_linked_list_1.getSize()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        var_1 = queue_1.dequeue()
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_4.__len__()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_2 = None
        node_4 = module_0.Node(none_type_2)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_6.removeAtHead()
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        none_type_3 = doubly_linked_list_7.addAtHead(queue_5)
        assert len(doubly_linked_list_7) == 1
        str_1 = doubly_linked_list_7.__str__()
        var_4 = doubly_linked_list_7.removeAtHead()
>       assert len(doubly_linked_list_7) == 0
E       ValueError: __len__() should return >= 0

RANDOM/test_queue3_RANDOM.py:7585: ValueError
   - [#  50] CRP queue3: 
--------------------------------------------------------------------------------
   72:             self.__sentinel.next = nextNode
   73:             nextNode.prev = self.__sentinel
   74:             nodeToRemove.next = None
   75:             nodeToRemove.prev = None
-  76:             self.__size -= 1
+  76:             self.__size -= 2
   77:             return nodeToRemove
   78:     
   79:     def removeAtTail(self):
   80:         
--------------------------------------------------------------------------------
[5.13781 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
        var_9 = doubly_linked_list_1.removeAtHead()
>       assert len(doubly_linked_list_1) == 1
E       AssertionError

RANDOM/test_queue3_RANDOM.py:48711: AssertionError
   - [#  51] CRP queue3: 
--------------------------------------------------------------------------------
   79:     def removeAtTail(self):
   80:         
   81:         '''Remove node at tail end.'''
   82:         
-  83:         if self.__size == 0:
+  83:         if self.__size == 1:
   84:             return None
   85:         elif self.__size == 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
--------------------------------------------------------------------------------
[4.21042 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_14

def test_case_14():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
>       var_0 = doubly_linked_list_1.removeAtTail()

RANDOM/test_queue3_RANDOM.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e92ca7a0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

queue3:97: AttributeError
   - [#  52] CRP queue3: 
--------------------------------------------------------------------------------
   81:         '''Remove node at tail end.'''
   82:         
   83:         if self.__size == 0:
   84:             return None
-  85:         elif self.__size == 1:
+  85:         elif self.__size == 2:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
--------------------------------------------------------------------------------
[2.66056 s] survived
   - [#  53] CRP queue3: 
--------------------------------------------------------------------------------
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
   90:             self.__tail = self.__sentinel
-  91:             self.__size -= 1
+  91:             self.__size -= 2
   92:             return nodeToRemove
   93:         else:
   94:             nodeToRemove = self.__tail
   95:             previous = nodeToRemove.prev
--------------------------------------------------------------------------------
[4.32804 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_138

def test_case_138():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_1.addAtHead(queue_2)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_2)
        var_1 = queue_2.dequeue()
        var_2 = doubly_linked_list_1.removeAtTail()
>       assert len(doubly_linked_list_1) == 0
E       ValueError: __len__() should return >= 0

RANDOM/test_queue3_RANDOM.py:4805: ValueError
   - [#  54] CRP queue3: 
--------------------------------------------------------------------------------
   95:             previous = nodeToRemove.prev
   96:             nodeToRemove.prev = None
   97:             previous.next = None
   98:             self.__tail = previous
-  99:             self.__size -= 1
+  99:             self.__size -= 2
  100:             return nodeToRemove
  101:     
  102:     def isEmpty(self) -> bool:
  103:         
--------------------------------------------------------------------------------
[2.79905 s] survived
   - [#  55] CRP queue3: 
--------------------------------------------------------------------------------
  102:     def isEmpty(self) -> bool:
  103:         
  104:         '''Check if linkedlist is empty'''
  105:         
- 106:         return True if self.__size == 0 else False
+ 106:         return True if self.__size == 1 else False
  107:     
  108:     def getHead(self):
  109:         
  110:         '''Get value at the front end of the list.'''
--------------------------------------------------------------------------------
[4.07904 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

RANDOM/test_queue3_RANDOM.py:19: AssertionError
   - [#  56] CRP queue3: 
--------------------------------------------------------------------------------
  108:     def getHead(self):
  109:         
  110:         '''Get value at the front end of the list.'''
  111:         
- 112:         if self.__size == 0:
+ 112:         if self.__size == 1:
  113:             return None
  114:         else:
  115:             return self.__head.next.value
  116:     
--------------------------------------------------------------------------------
[4.04644 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_3

def test_case_3():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
>       var_0 = queue_0.getHead()

RANDOM/test_queue3_RANDOM.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:154: in getHead
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9c00c40>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

queue3:115: AttributeError
   - [#  57] CRP queue3: 
--------------------------------------------------------------------------------
  189:         
  190:         return self.__queue.__str__()
  191: 
  192: 
- 193: if __name__ == '__main__':
+ 193: if __name__ == 'mutpy':
  194:     pass
--------------------------------------------------------------------------------
[2.98827 s] survived
   - [#  58] CRP queue3: 
--------------------------------------------------------------------------------
  189:         
  190:         return self.__queue.__str__()
  191: 
  192: 
- 193: if __name__ == '__main__':
+ 193: if __name__ == '':
  194:     pass
--------------------------------------------------------------------------------
[2.84729 s] survived
   - [#  59] OIL queue3: 
--------------------------------------------------------------------------------
  140:         current = self.__head.next
  141:         while current:
  142:             arr.append(current.value)
  143:             current = current.next
- 144:         return str(arr)
- 145: 
+ 144:             break
+ 145:         return str(arr)
  146: class Queue:
  147:     def __init__(self):
  148:         self.__queue = DoublyLinkedList()
  149:     
--------------------------------------------------------------------------------
[2.57817 s] survived
   - [#  60] ROR queue3: 
--------------------------------------------------------------------------------
   21:     def addAtHead(self, value: T) -> None:
   22:         
   23:         '''Add node at head end.'''
   24:         
-  25:         if self.__size == 0:
+  25:         if self.__size != 0:
   26:             newNode = Node(value)
   27:             self.__sentinel.next = newNode
   28:             newNode.prev = self.__sentinel
   29:             self.__tail = newNode
--------------------------------------------------------------------------------
[3.93096 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_47

def test_case_47():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       none_type_0 = doubly_linked_list_0.addAtHead(queue_0)

RANDOM/test_queue3_RANDOM.py:1399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9b4cb20>
value = <queue3.Queue object at 0x7f96e9b4efe0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:37: AttributeError
   - [#  61] ROR queue3: 
--------------------------------------------------------------------------------
   40:     def addAtTail(self, value: T) -> None:
   41:         
   42:         '''Add node at tail end.'''
   43:         
-  44:         if self.__size == 0:
+  44:         if self.__size != 0:
   45:             newNode = Node(value)
   46:             self.__sentinel.next = newNode
   47:             newNode.prev = self.__sentinel
   48:             self.__tail = newNode
--------------------------------------------------------------------------------
[5.18847 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
>       var_9 = doubly_linked_list_1.removeAtHead()

RANDOM/test_queue3_RANDOM.py:48710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9358e20>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:73: AttributeError
   - [#  62] ROR queue3: 
--------------------------------------------------------------------------------
   57:     def removeAtHead(self):
   58:         
   59:         '''Remove node at head end.'''
   60:         
-  61:         if self.__size == 0:
+  61:         if self.__size != 0:
   62:             return None
   63:         elif self.__size == 1:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
--------------------------------------------------------------------------------
[4.10614 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_4

def test_case_4():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        var_0 = queue_0.getHead()
        int_3 = 0
        node_5 = module_0.Node(int_3)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
>       var_1 = queue_1.dequeue()

RANDOM/test_queue3_RANDOM.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:166: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9362a10>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

queue3:71: AttributeError
   - [#  63] ROR queue3: 
--------------------------------------------------------------------------------
   59:         '''Remove node at head end.'''
   60:         
   61:         if self.__size == 0:
   62:             return None
-  63:         elif self.__size == 1:
+  63:         elif self.__size != 1:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
   66:             nodeToRemove.prev = None
   67:             self.__size -= 1
--------------------------------------------------------------------------------
[4.37091 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_208

def test_case_208():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = queue_0.dequeue()
        int_0 = doubly_linked_list_1.getSize()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        var_1 = queue_1.dequeue()
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_4.__len__()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_2 = None
        node_4 = module_0.Node(none_type_2)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_6.removeAtHead()
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        none_type_3 = doubly_linked_list_7.addAtHead(queue_5)
        assert len(doubly_linked_list_7) == 1
        str_1 = doubly_linked_list_7.__str__()
>       var_4 = doubly_linked_list_7.removeAtHead()

RANDOM/test_queue3_RANDOM.py:7584: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9b4c280>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:73: AttributeError
   - [#  64] ROR queue3: 
--------------------------------------------------------------------------------
   79:     def removeAtTail(self):
   80:         
   81:         '''Remove node at tail end.'''
   82:         
-  83:         if self.__size == 0:
+  83:         if self.__size != 0:
   84:             return None
   85:         elif self.__size == 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
--------------------------------------------------------------------------------
[4.15376 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_14

def test_case_14():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
>       var_0 = doubly_linked_list_1.removeAtTail()

RANDOM/test_queue3_RANDOM.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e92d9b70>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

queue3:97: AttributeError
   - [#  65] ROR queue3: 
--------------------------------------------------------------------------------
   81:         '''Remove node at tail end.'''
   82:         
   83:         if self.__size == 0:
   84:             return None
-  85:         elif self.__size == 1:
+  85:         elif self.__size != 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
--------------------------------------------------------------------------------
[2.99948 s] survived
   - [#  66] ROR queue3: 
--------------------------------------------------------------------------------
  102:     def isEmpty(self) -> bool:
  103:         
  104:         '''Check if linkedlist is empty'''
  105:         
- 106:         return True if self.__size == 0 else False
+ 106:         return True if self.__size != 0 else False
  107:     
  108:     def getHead(self):
  109:         
  110:         '''Get value at the front end of the list.'''
--------------------------------------------------------------------------------
[3.92200 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

RANDOM/test_queue3_RANDOM.py:19: AssertionError
   - [#  67] ROR queue3: 
--------------------------------------------------------------------------------
  108:     def getHead(self):
  109:         
  110:         '''Get value at the front end of the list.'''
  111:         
- 112:         if self.__size == 0:
+ 112:         if self.__size != 0:
  113:             return None
  114:         else:
  115:             return self.__head.next.value
  116:     
--------------------------------------------------------------------------------
[4.19566 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_3

def test_case_3():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
>       var_0 = queue_0.getHead()

RANDOM/test_queue3_RANDOM.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:154: in getHead
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96eaf82200>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'value'

queue3:115: AttributeError
   - [#  68] ROR queue3: 
--------------------------------------------------------------------------------
  189:         
  190:         return self.__queue.__str__()
  191: 
  192: 
- 193: if __name__ == '__main__':
+ 193: if __name__ != '__main__':
  194:     pass
--------------------------------------------------------------------------------
[3.08273 s] survived
   - [#  69] SDI queue3: 
--------------------------------------------------------------------------------
    4: 
    5: T = TypeVar('T')
    6: 
    7: class Node:
-   8:     def __init__(self, value: T):
-   9:         self.value = value
-  10:         self.next = None
-  11:         self.prev = None
-  12: 
+   8:     @staticmethod
+   9:     def __init__(self, value: T):
+  10:         self.value = value
+  11:         self.next = None
+  12:         self.prev = None
   13: 
   14: class DoublyLinkedList:
   15:     def __init__(self):
   16:         self.__sentinel = Node(None)
--------------------------------------------------------------------------------
[4.14945 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:8: TypeError: Node.__init__() missing 1 required positional argument: 'value'

   - [#  70] SDI queue3: 
--------------------------------------------------------------------------------
   11:         self.prev = None
   12: 
   13: 
   14: class DoublyLinkedList:
-  15:     def __init__(self):
-  16:         self.__sentinel = Node(None)
-  17:         self.__head = self.__sentinel
-  18:         self.__tail = self.__sentinel
-  19:         self.__size = 0
-  20:     
+  15:     @staticmethod
+  16:     def __init__(self):
+  17:         self.__sentinel = Node(None)
+  18:         self.__head = self.__sentinel
+  19:         self.__tail = self.__sentinel
+  20:         self.__size = 0
   21:     def addAtHead(self, value: T) -> None:
   22:         
   23:         '''Add node at head end.'''
   24:         
--------------------------------------------------------------------------------
[4.15269 s] incompetent

TypeError: queue3:148: TypeError: DoublyLinkedList.__init__() missing 1 required positional argument: 'self'

   - [#  71] SDI queue3: 
--------------------------------------------------------------------------------
   17:         self.__head = self.__sentinel
   18:         self.__tail = self.__sentinel
   19:         self.__size = 0
   20:     
-  21:     def addAtHead(self, value: T) -> None:
-  22:         
-  23:         '''Add node at head end.'''
-  24:         
-  25:         if self.__size == 0:
-  26:             newNode = Node(value)
-  27:             self.__sentinel.next = newNode
-  28:             newNode.prev = self.__sentinel
-  29:             self.__tail = newNode
-  30:             self.__size += 1
-  31:         else:
-  32:             newNode = Node(value)
-  33:             nextNode = self.__sentinel.next
-  34:             self.__sentinel.next = newNode
-  35:             newNode.prev = self.__sentinel
-  36:             newNode.next = nextNode
-  37:             nextNode.prev = newNode
-  38:             self.__size += 1
-  39:     
+  21:     @staticmethod
+  22:     def addAtHead(self, value: T) -> None:
+  23:         
+  24:         '''Add node at head end.'''
+  25:         
+  26:         if self.__size == 0:
+  27:             newNode = Node(value)
+  28:             self.__sentinel.next = newNode
+  29:             newNode.prev = self.__sentinel
+  30:             self.__tail = newNode
+  31:             self.__size += 1
+  32:         else:
+  33:             newNode = Node(value)
+  34:             nextNode = self.__sentinel.next
+  35:             self.__sentinel.next = newNode
+  36:             newNode.prev = self.__sentinel
+  37:             newNode.next = nextNode
+  38:             nextNode.prev = newNode
+  39:             self.__size += 1
   40:     def addAtTail(self, value: T) -> None:
   41:         
   42:         '''Add node at tail end.'''
   43:         
--------------------------------------------------------------------------------
[4.00489 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:1399: TypeError: DoublyLinkedList.addAtHead() missing 1 required positional argument: 'value'

   - [#  72] SDI queue3: 
--------------------------------------------------------------------------------
   36:             newNode.next = nextNode
   37:             nextNode.prev = newNode
   38:             self.__size += 1
   39:     
-  40:     def addAtTail(self, value: T) -> None:
-  41:         
-  42:         '''Add node at tail end.'''
-  43:         
-  44:         if self.__size == 0:
-  45:             newNode = Node(value)
-  46:             self.__sentinel.next = newNode
-  47:             newNode.prev = self.__sentinel
-  48:             self.__tail = newNode
-  49:             self.__size += 1
-  50:         else:
-  51:             newNode = Node(value)
-  52:             self.__tail.next = newNode
-  53:             newNode.prev = self.__tail
-  54:             self.__tail = newNode
-  55:             self.__size += 1
-  56:     
+  40:     @staticmethod
+  41:     def addAtTail(self, value: T) -> None:
+  42:         
+  43:         '''Add node at tail end.'''
+  44:         
+  45:         if self.__size == 0:
+  46:             newNode = Node(value)
+  47:             self.__sentinel.next = newNode
+  48:             newNode.prev = self.__sentinel
+  49:             self.__tail = newNode
+  50:             self.__size += 1
+  51:         else:
+  52:             newNode = Node(value)
+  53:             self.__tail.next = newNode
+  54:             newNode.prev = self.__tail
+  55:             self.__tail = newNode
+  56:             self.__size += 1
   57:     def removeAtHead(self):
   58:         
   59:         '''Remove node at head end.'''
   60:         
--------------------------------------------------------------------------------
[4.45892 s] incompetent

TypeError: queue3:172: TypeError: DoublyLinkedList.addAtTail() missing 1 required positional argument: 'value'

   - [#  73] SDI queue3: 
--------------------------------------------------------------------------------
   53:             newNode.prev = self.__tail
   54:             self.__tail = newNode
   55:             self.__size += 1
   56:     
-  57:     def removeAtHead(self):
-  58:         
-  59:         '''Remove node at head end.'''
-  60:         
-  61:         if self.__size == 0:
-  62:             return None
-  63:         elif self.__size == 1:
-  64:             nodeToRemove = self.__head.next
-  65:             self.__sentinel.next = None
-  66:             nodeToRemove.prev = None
-  67:             self.__size -= 1
-  68:             return nodeToRemove
-  69:         else:
-  70:             nodeToRemove = self.__head.next
-  71:             nextNode = nodeToRemove.next
-  72:             self.__sentinel.next = nextNode
-  73:             nextNode.prev = self.__sentinel
-  74:             nodeToRemove.next = None
-  75:             nodeToRemove.prev = None
-  76:             self.__size -= 1
-  77:             return nodeToRemove
-  78:     
+  57:     @staticmethod
+  58:     def removeAtHead(self):
+  59:         
+  60:         '''Remove node at head end.'''
+  61:         
+  62:         if self.__size == 0:
+  63:             return None
+  64:         elif self.__size == 1:
+  65:             nodeToRemove = self.__head.next
+  66:             self.__sentinel.next = None
+  67:             nodeToRemove.prev = None
+  68:             self.__size -= 1
+  69:             return nodeToRemove
+  70:         else:
+  71:             nodeToRemove = self.__head.next
+  72:             nextNode = nodeToRemove.next
+  73:             self.__sentinel.next = nextNode
+  74:             nextNode.prev = self.__sentinel
+  75:             nodeToRemove.next = None
+  76:             nodeToRemove.prev = None
+  77:             self.__size -= 1
+  78:             return nodeToRemove
   79:     def removeAtTail(self):
   80:         
   81:         '''Remove node at tail end.'''
   82:         
--------------------------------------------------------------------------------
[4.11307 s] incompetent

TypeError: queue3:166: TypeError: DoublyLinkedList.removeAtHead() missing 1 required positional argument: 'self'

   - [#  74] SDI queue3: 
--------------------------------------------------------------------------------
   75:             nodeToRemove.prev = None
   76:             self.__size -= 1
   77:             return nodeToRemove
   78:     
-  79:     def removeAtTail(self):
-  80:         
-  81:         '''Remove node at tail end.'''
-  82:         
-  83:         if self.__size == 0:
-  84:             return None
-  85:         elif self.__size == 1:
-  86:             nodeToRemove = self.__tail
-  87:             nodeToRemove.prev = None
-  88:             self.__sentinel.next = None
-  89:             self.__head = self.__sentinel
-  90:             self.__tail = self.__sentinel
-  91:             self.__size -= 1
-  92:             return nodeToRemove
-  93:         else:
-  94:             nodeToRemove = self.__tail
-  95:             previous = nodeToRemove.prev
-  96:             nodeToRemove.prev = None
-  97:             previous.next = None
-  98:             self.__tail = previous
-  99:             self.__size -= 1
- 100:             return nodeToRemove
- 101:     
+  79:     @staticmethod
+  80:     def removeAtTail(self):
+  81:         
+  82:         '''Remove node at tail end.'''
+  83:         
+  84:         if self.__size == 0:
+  85:             return None
+  86:         elif self.__size == 1:
+  87:             nodeToRemove = self.__tail
+  88:             nodeToRemove.prev = None
+  89:             self.__sentinel.next = None
+  90:             self.__head = self.__sentinel
+  91:             self.__tail = self.__sentinel
+  92:             self.__size -= 1
+  93:             return nodeToRemove
+  94:         else:
+  95:             nodeToRemove = self.__tail
+  96:             previous = nodeToRemove.prev
+  97:             nodeToRemove.prev = None
+  98:             previous.next = None
+  99:             self.__tail = previous
+ 100:             self.__size -= 1
+ 101:             return nodeToRemove
  102:     def isEmpty(self) -> bool:
  103:         
  104:         '''Check if linkedlist is empty'''
  105:         
--------------------------------------------------------------------------------
[3.86014 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:239: TypeError: DoublyLinkedList.removeAtTail() missing 1 required positional argument: 'self'

   - [#  75] SDI queue3: 
--------------------------------------------------------------------------------
   98:             self.__tail = previous
   99:             self.__size -= 1
  100:             return nodeToRemove
  101:     
- 102:     def isEmpty(self) -> bool:
- 103:         
- 104:         '''Check if linkedlist is empty'''
- 105:         
- 106:         return True if self.__size == 0 else False
- 107:     
+ 102:     @staticmethod
+ 103:     def isEmpty(self) -> bool:
+ 104:         
+ 105:         '''Check if linkedlist is empty'''
+ 106:         
+ 107:         return True if self.__size == 0 else False
  108:     def getHead(self):
  109:         
  110:         '''Get value at the front end of the list.'''
  111:         
--------------------------------------------------------------------------------
[3.95021 s] incompetent

TypeError: queue3:184: TypeError: DoublyLinkedList.isEmpty() missing 1 required positional argument: 'self'

   - [#  76] SDI queue3: 
--------------------------------------------------------------------------------
  104:         '''Check if linkedlist is empty'''
  105:         
  106:         return True if self.__size == 0 else False
  107:     
- 108:     def getHead(self):
- 109:         
- 110:         '''Get value at the front end of the list.'''
- 111:         
- 112:         if self.__size == 0:
- 113:             return None
- 114:         else:
- 115:             return self.__head.next.value
- 116:     
+ 108:     @staticmethod
+ 109:     def getHead(self):
+ 110:         
+ 111:         '''Get value at the front end of the list.'''
+ 112:         
+ 113:         if self.__size == 0:
+ 114:             return None
+ 115:         else:
+ 116:             return self.__head.next.value
  117:     def getTail(self) -> T:
  118:         
  119:         '''Get value at the tail of the list.'''
  120:         
--------------------------------------------------------------------------------
[3.89596 s] incompetent

TypeError: queue3:154: TypeError: DoublyLinkedList.getHead() missing 1 required positional argument: 'self'

   - [#  77] SDI queue3: 
--------------------------------------------------------------------------------
  113:             return None
  114:         else:
  115:             return self.__head.next.value
  116:     
- 117:     def getTail(self) -> T:
- 118:         
- 119:         '''Get value at the tail of the list.'''
- 120:         
- 121:         return self.__tail.value
- 122:     
+ 117:     @staticmethod
+ 118:     def getTail(self) -> T:
+ 119:         
+ 120:         '''Get value at the tail of the list.'''
+ 121:         
+ 122:         return self.__tail.value
  123:     def getSize(self) -> int:
  124:         
  125:         '''Get length of the linked list.'''
  126:         
--------------------------------------------------------------------------------
[3.91353 s] incompetent

TypeError: queue3:160: TypeError: DoublyLinkedList.getTail() missing 1 required positional argument: 'self'

   - [#  78] SDI queue3: 
--------------------------------------------------------------------------------
  119:         '''Get value at the tail of the list.'''
  120:         
  121:         return self.__tail.value
  122:     
- 123:     def getSize(self) -> int:
- 124:         
- 125:         '''Get length of the linked list.'''
- 126:         
- 127:         return self.__size
- 128:     
+ 123:     @staticmethod
+ 124:     def getSize(self) -> int:
+ 125:         
+ 126:         '''Get length of the linked list.'''
+ 127:         
+ 128:         return self.__size
  129:     def __len__(self) -> int:
  130:         
  131:         '''Get length of the linked list.'''
  132:         
--------------------------------------------------------------------------------
[3.99491 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:166: TypeError: DoublyLinkedList.getSize() missing 1 required positional argument: 'self'

   - [#  79] SDI queue3: 
--------------------------------------------------------------------------------
  125:         '''Get length of the linked list.'''
  126:         
  127:         return self.__size
  128:     
- 129:     def __len__(self) -> int:
- 130:         
- 131:         '''Get length of the linked list.'''
- 132:         
- 133:         return self.__size
- 134:     
+ 129:     @staticmethod
+ 130:     def __len__(self) -> int:
+ 131:         
+ 132:         '''Get length of the linked list.'''
+ 133:         
+ 134:         return self.__size
  135:     def __str__(self) -> str:
  136:         
  137:         '''Return String representation of linkedlist values.'''
  138:         
--------------------------------------------------------------------------------
[4.02098 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:61: TypeError: DoublyLinkedList.__len__() missing 1 required positional argument: 'self'

   - [#  80] SDI queue3: 
--------------------------------------------------------------------------------
  131:         '''Get length of the linked list.'''
  132:         
  133:         return self.__size
  134:     
- 135:     def __str__(self) -> str:
- 136:         
- 137:         '''Return String representation of linkedlist values.'''
- 138:         
- 139:         arr = []
- 140:         current = self.__head.next
- 141:         while current:
- 142:             arr.append(current.value)
- 143:             current = current.next
- 144:         return str(arr)
- 145: 
+ 135:     @staticmethod
+ 136:     def __str__(self) -> str:
+ 137:         
+ 138:         '''Return String representation of linkedlist values.'''
+ 139:         
+ 140:         arr = []
+ 141:         current = self.__head.next
+ 142:         while current:
+ 143:             arr.append(current.value)
+ 144:             current = current.next
+ 145:         return str(arr)
  146: class Queue:
  147:     def __init__(self):
  148:         self.__queue = DoublyLinkedList()
  149:     
--------------------------------------------------------------------------------
[3.89930 s] incompetent

TypeError: queue3:190: TypeError: DoublyLinkedList.__str__() missing 1 required positional argument: 'self'

   - [#  81] SDI queue3: 
--------------------------------------------------------------------------------
  143:             current = current.next
  144:         return str(arr)
  145: 
  146: class Queue:
- 147:     def __init__(self):
- 148:         self.__queue = DoublyLinkedList()
- 149:     
+ 147:     @staticmethod
+ 148:     def __init__(self):
+ 149:         self.__queue = DoublyLinkedList()
  150:     def getHead(self) -> T:
  151:         
  152:         '''View first element in the queue.'''
  153:         
--------------------------------------------------------------------------------
[3.83973 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:17: TypeError: Queue.__init__() missing 1 required positional argument: 'self'

   - [#  82] SDI queue3: 
--------------------------------------------------------------------------------
  146: class Queue:
  147:     def __init__(self):
  148:         self.__queue = DoublyLinkedList()
  149:     
- 150:     def getHead(self) -> T:
- 151:         
- 152:         '''View first element in the queue.'''
- 153:         
- 154:         return self.__queue.getHead()
- 155:     
+ 150:     @staticmethod
+ 151:     def getHead(self) -> T:
+ 152:         
+ 153:         '''View first element in the queue.'''
+ 154:         
+ 155:         return self.__queue.getHead()
  156:     def getTail(self):
  157:         
  158:         '''View last element in the queue.'''
  159:         
--------------------------------------------------------------------------------
[3.86530 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:31: TypeError: Queue.getHead() missing 1 required positional argument: 'self'

   - [#  83] SDI queue3: 
--------------------------------------------------------------------------------
  152:         '''View first element in the queue.'''
  153:         
  154:         return self.__queue.getHead()
  155:     
- 156:     def getTail(self):
- 157:         
- 158:         '''View last element in the queue.'''
- 159:         
- 160:         return self.__queue.getTail()
- 161:     
+ 156:     @staticmethod
+ 157:     def getTail(self):
+ 158:         
+ 159:         '''View last element in the queue.'''
+ 160:         
+ 161:         return self.__queue.getTail()
  162:     def dequeue(self) -> T:
  163:         
  164:         '''Remove element from the queue.'''
  165:         
--------------------------------------------------------------------------------
[3.86494 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:287: TypeError: Queue.getTail() missing 1 required positional argument: 'self'

   - [#  84] SDI queue3: 
--------------------------------------------------------------------------------
  158:         '''View last element in the queue.'''
  159:         
  160:         return self.__queue.getTail()
  161:     
- 162:     def dequeue(self) -> T:
- 163:         
- 164:         '''Remove element from the queue.'''
- 165:         
- 166:         return self.__queue.removeAtHead()
- 167:     
+ 162:     @staticmethod
+ 163:     def dequeue(self) -> T:
+ 164:         
+ 165:         '''Remove element from the queue.'''
+ 166:         
+ 167:         return self.__queue.removeAtHead()
  168:     def enqueue(self, value: T) -> None:
  169:         
  170:         '''Add element to queue.'''
  171:         
--------------------------------------------------------------------------------
[4.00832 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:53: TypeError: Queue.dequeue() missing 1 required positional argument: 'self'

   - [#  85] SDI queue3: 
--------------------------------------------------------------------------------
  164:         '''Remove element from the queue.'''
  165:         
  166:         return self.__queue.removeAtHead()
  167:     
- 168:     def enqueue(self, value: T) -> None:
- 169:         
- 170:         '''Add element to queue.'''
- 171:         
- 172:         self.__queue.addAtTail(value)
- 173:     
+ 168:     @staticmethod
+ 169:     def enqueue(self, value: T) -> None:
+ 170:         
+ 171:         '''Add element to queue.'''
+ 172:         
+ 173:         self.__queue.addAtTail(value)
  174:     def getSize(self) -> int:
  175:         
  176:         '''Get size of the queue.'''
  177:         
--------------------------------------------------------------------------------
[4.00652 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:517: TypeError: Queue.enqueue() missing 1 required positional argument: 'value'

   - [#  86] SDI queue3: 
--------------------------------------------------------------------------------
  170:         '''Add element to queue.'''
  171:         
  172:         self.__queue.addAtTail(value)
  173:     
- 174:     def getSize(self) -> int:
- 175:         
- 176:         '''Get size of the queue.'''
- 177:         
- 178:         return self.__queue.getSize()
- 179:     
+ 174:     @staticmethod
+ 175:     def getSize(self) -> int:
+ 176:         
+ 177:         '''Get size of the queue.'''
+ 178:         
+ 179:         return self.__queue.getSize()
  180:     def isEmpty(self) -> bool:
  181:         
  182:         '''Check if queue is empty.'''
  183:         
--------------------------------------------------------------------------------
[4.19173 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:483: TypeError: Queue.getSize() missing 1 required positional argument: 'self'

   - [#  87] SDI queue3: 
--------------------------------------------------------------------------------
  176:         '''Get size of the queue.'''
  177:         
  178:         return self.__queue.getSize()
  179:     
- 180:     def isEmpty(self) -> bool:
- 181:         
- 182:         '''Check if queue is empty.'''
- 183:         
- 184:         return self.__queue.isEmpty()
- 185:     
+ 180:     @staticmethod
+ 181:     def isEmpty(self) -> bool:
+ 182:         
+ 183:         '''Check if queue is empty.'''
+ 184:         
+ 185:         return self.__queue.isEmpty()
  186:     def __str__(self) -> str:
  187:         
  188:         '''Get string representation of the queue.'''
  189:         
--------------------------------------------------------------------------------
[4.07583 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:18: TypeError: Queue.isEmpty() missing 1 required positional argument: 'self'

   - [#  88] SDI queue3: 
--------------------------------------------------------------------------------
  182:         '''Check if queue is empty.'''
  183:         
  184:         return self.__queue.isEmpty()
  185:     
- 186:     def __str__(self) -> str:
- 187:         
- 188:         '''Get string representation of the queue.'''
- 189:         
- 190:         return self.__queue.__str__()
- 191: 
+ 186:     @staticmethod
+ 187:     def __str__(self) -> str:
+ 188:         
+ 189:         '''Get string representation of the queue.'''
+ 190:         
+ 191:         return self.__queue.__str__()
  192: 
  193: if __name__ == '__main__':
  194:     pass
--------------------------------------------------------------------------------
[3.92709 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:632: TypeError: Queue.__str__() missing 1 required positional argument: 'self'

   - [#  89] SDL queue3: 
--------------------------------------------------------------------------------
    1: '''In computer science, a queue is a collection of entities that are maintained in a sequence and can be modified by the addition of entities at one end of the sequence and the removal of entities from the other end of the sequence.'''
    2: 
    3: from typing import TypeVar
    4: 
-   5: T = TypeVar('T')
+   5: pass
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
--------------------------------------------------------------------------------
[0.00000 s] incompetent

NameError: name 'T' is not defined

   - [#  90] SDL queue3: 
--------------------------------------------------------------------------------
    5: T = TypeVar('T')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
-   9:         self.value = value
+   9:         pass
   10:         self.next = None
   11:         self.prev = None
   12: 
   13: 
--------------------------------------------------------------------------------
[4.11951 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_18

def test_case_18():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        queue_0 = module_0.Queue()
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       var_0 = queue_0.getTail()

RANDOM/test_queue3_RANDOM.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:160: in getTail
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e904a3b0>

>   ???
E   AttributeError: 'Node' object has no attribute 'value'

queue3:121: AttributeError
   - [#  91] SDL queue3: 
--------------------------------------------------------------------------------
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
-  10:         self.next = None
+  10:         pass
   11:         self.prev = None
   12: 
   13: 
   14: class DoublyLinkedList:
--------------------------------------------------------------------------------
[4.04317 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_28

def test_case_28():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = doubly_linked_list_1.getSize()
        assert int_2 == 0
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_4 = 0
        node_5 = module_0.Node(int_4)
        var_0 = queue_1.getHead()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_2 = None
        node_7 = module_0.Node(none_type_2)
        int_6 = 0
        node_8 = module_0.Node(int_6)
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_7 = 0
        node_9 = module_0.Node(int_7)
        none_type_3 = None
        node_10 = module_0.Node(none_type_3)
        int_8 = 0
        node_11 = module_0.Node(int_8)
        none_type_4 = None
        node_12 = module_0.Node(none_type_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        int_9 = 0
        node_13 = module_0.Node(int_9)
        none_type_5 = None
        node_14 = module_0.Node(none_type_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        queue_5 = module_0.Queue()
>       str_0 = queue_2.__str__()

RANDOM/test_queue3_RANDOM.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:190: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e91a0fd0>

>   ???
E   AttributeError: 'Node' object has no attribute 'next'

queue3:140: AttributeError
   - [#  92] SDL queue3: 
--------------------------------------------------------------------------------
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
   10:         self.next = None
-  11:         self.prev = None
+  11:         pass
   12: 
   13: 
   14: class DoublyLinkedList:
   15:     def __init__(self):
--------------------------------------------------------------------------------
[3.15656 s] survived
   - [#  93] SDL queue3: 
--------------------------------------------------------------------------------
   12: 
   13: 
   14: class DoublyLinkedList:
   15:     def __init__(self):
-  16:         self.__sentinel = Node(None)
+  16:         pass
   17:         self.__head = self.__sentinel
   18:         self.__tail = self.__sentinel
   19:         self.__size = 0
   20:     
--------------------------------------------------------------------------------
[3.91129 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
>       queue_0 = module_0.Queue()

RANDOM/test_queue3_RANDOM.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:148: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e7545720>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute '_DoublyLinkedList__sentinel'

queue3:17: AttributeError
   - [#  94] SDL queue3: 
--------------------------------------------------------------------------------
   13: 
   14: class DoublyLinkedList:
   15:     def __init__(self):
   16:         self.__sentinel = Node(None)
-  17:         self.__head = self.__sentinel
+  17:         pass
   18:         self.__tail = self.__sentinel
   19:         self.__size = 0
   20:     
   21:     def addAtHead(self, value: T) -> None:
--------------------------------------------------------------------------------
[4.17407 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_28

def test_case_28():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = doubly_linked_list_1.getSize()
        assert int_2 == 0
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_4 = 0
        node_5 = module_0.Node(int_4)
        var_0 = queue_1.getHead()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_2 = None
        node_7 = module_0.Node(none_type_2)
        int_6 = 0
        node_8 = module_0.Node(int_6)
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_7 = 0
        node_9 = module_0.Node(int_7)
        none_type_3 = None
        node_10 = module_0.Node(none_type_3)
        int_8 = 0
        node_11 = module_0.Node(int_8)
        none_type_4 = None
        node_12 = module_0.Node(none_type_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        int_9 = 0
        node_13 = module_0.Node(int_9)
        none_type_5 = None
        node_14 = module_0.Node(none_type_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        queue_5 = module_0.Queue()
>       str_0 = queue_2.__str__()

RANDOM/test_queue3_RANDOM.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:190: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e74e8f10>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute '_DoublyLinkedList__head'. Did you mean: '_DoublyLinkedList__size'?

queue3:140: AttributeError
   - [#  95] SDL queue3: 
--------------------------------------------------------------------------------
   14: class DoublyLinkedList:
   15:     def __init__(self):
   16:         self.__sentinel = Node(None)
   17:         self.__head = self.__sentinel
-  18:         self.__tail = self.__sentinel
+  18:         pass
   19:         self.__size = 0
   20:     
   21:     def addAtHead(self, value: T) -> None:
   22:         
--------------------------------------------------------------------------------
[4.04610 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_18

def test_case_18():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        queue_0 = module_0.Queue()
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       var_0 = queue_0.getTail()

RANDOM/test_queue3_RANDOM.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:160: in getTail
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e7545d20>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute '_DoublyLinkedList__tail'. Did you mean: '_DoublyLinkedList__head'?

queue3:121: AttributeError
   - [#  96] SDL queue3: 
--------------------------------------------------------------------------------
   15:     def __init__(self):
   16:         self.__sentinel = Node(None)
   17:         self.__head = self.__sentinel
   18:         self.__tail = self.__sentinel
-  19:         self.__size = 0
+  19:         pass
   20:     
   21:     def addAtHead(self, value: T) -> None:
   22:         
   23:         '''Add node at head end.'''
--------------------------------------------------------------------------------
[4.02100 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
>       bool_0 = queue_0.isEmpty()

RANDOM/test_queue3_RANDOM.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:184: in isEmpty
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9220df0>

>   ???
E   AttributeError: 'DoublyLinkedList' object has no attribute '_DoublyLinkedList__size'. Did you mean: '_DoublyLinkedList__head'?

queue3:106: AttributeError
   - [#  97] SDL queue3: 
--------------------------------------------------------------------------------
   22:         
   23:         '''Add node at head end.'''
   24:         
   25:         if self.__size == 0:
-  26:             newNode = Node(value)
+  26:             pass
   27:             self.__sentinel.next = newNode
   28:             newNode.prev = self.__sentinel
   29:             self.__tail = newNode
   30:             self.__size += 1
--------------------------------------------------------------------------------
[4.33437 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_47

def test_case_47():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       none_type_0 = doubly_linked_list_0.addAtHead(queue_0)

RANDOM/test_queue3_RANDOM.py:1399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e92c78b0>
value = <queue3.Queue object at 0x7f96e92c4e50>

>   ???
E   UnboundLocalError: local variable 'newNode' referenced before assignment

queue3:27: UnboundLocalError
   - [#  98] SDL queue3: 
--------------------------------------------------------------------------------
   23:         '''Add node at head end.'''
   24:         
   25:         if self.__size == 0:
   26:             newNode = Node(value)
-  27:             self.__sentinel.next = newNode
+  27:             pass
   28:             newNode.prev = self.__sentinel
   29:             self.__tail = newNode
   30:             self.__size += 1
   31:         else:
--------------------------------------------------------------------------------
[4.07950 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_117

def test_case_117():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        queue_1 = module_0.Queue()
        queue_2 = module_0.Queue()
        bool_1 = queue_2.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        none_type_1 = doubly_linked_list_2.addAtHead(queue_3)
        assert len(doubly_linked_list_2) == 1
        int_2 = 0
        node_2 = module_0.Node(int_2)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_0 = doubly_linked_list_3.removeAtHead()
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        int_3 = 0
        node_4 = module_0.Node(int_3)
        none_type_3 = None
        node_5 = module_0.Node(none_type_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_4.getSize()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_4 = None
        node_7 = module_0.Node(none_type_4)
        queue_5 = module_0.Queue()
        int_6 = queue_5.getSize()
        queue_6 = module_0.Queue()
        bool_4 = queue_6.isEmpty()
        assert bool_4 is True
        str_0 = queue_6.__str__()
        assert str_0 == '[]'
>       none_type_5 = doubly_linked_list_2.addAtHead(int_0)

RANDOM/test_queue3_RANDOM.py:4021: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9cd1870>, value = 0

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:37: AttributeError
   - [#  99] SDL queue3: 
--------------------------------------------------------------------------------
   24:         
   25:         if self.__size == 0:
   26:             newNode = Node(value)
   27:             self.__sentinel.next = newNode
-  28:             newNode.prev = self.__sentinel
+  28:             pass
   29:             self.__tail = newNode
   30:             self.__size += 1
   31:         else:
   32:             newNode = Node(value)
--------------------------------------------------------------------------------
[2.87276 s] survived
   - [# 100] SDL queue3: 
--------------------------------------------------------------------------------
   25:         if self.__size == 0:
   26:             newNode = Node(value)
   27:             self.__sentinel.next = newNode
   28:             newNode.prev = self.__sentinel
-  29:             self.__tail = newNode
+  29:             pass
   30:             self.__size += 1
   31:         else:
   32:             newNode = Node(value)
   33:             nextNode = self.__sentinel.next
--------------------------------------------------------------------------------
[4.40215 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_138

def test_case_138():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_1.addAtHead(queue_2)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_2)
        var_1 = queue_2.dequeue()
        var_2 = doubly_linked_list_1.removeAtTail()
        assert len(doubly_linked_list_1) == 0
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue3.Node'
>       assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'queue3.Queue'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:4807: AssertionError
   - [# 101] SDL queue3: 
--------------------------------------------------------------------------------
   28:             newNode.prev = self.__sentinel
   29:             self.__tail = newNode
   30:             self.__size += 1
   31:         else:
-  32:             newNode = Node(value)
+  32:             pass
   33:             nextNode = self.__sentinel.next
   34:             self.__sentinel.next = newNode
   35:             newNode.prev = self.__sentinel
   36:             newNode.next = nextNode
--------------------------------------------------------------------------------
[4.21514 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_117

def test_case_117():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        queue_1 = module_0.Queue()
        queue_2 = module_0.Queue()
        bool_1 = queue_2.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        none_type_1 = doubly_linked_list_2.addAtHead(queue_3)
        assert len(doubly_linked_list_2) == 1
        int_2 = 0
        node_2 = module_0.Node(int_2)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_0 = doubly_linked_list_3.removeAtHead()
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        int_3 = 0
        node_4 = module_0.Node(int_3)
        none_type_3 = None
        node_5 = module_0.Node(none_type_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_4.getSize()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_4 = None
        node_7 = module_0.Node(none_type_4)
        queue_5 = module_0.Queue()
        int_6 = queue_5.getSize()
        queue_6 = module_0.Queue()
        bool_4 = queue_6.isEmpty()
        assert bool_4 is True
        str_0 = queue_6.__str__()
        assert str_0 == '[]'
>       none_type_5 = doubly_linked_list_2.addAtHead(int_0)

RANDOM/test_queue3_RANDOM.py:4021: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9312170>, value = 0

>   ???
E   UnboundLocalError: local variable 'newNode' referenced before assignment

queue3:34: UnboundLocalError
   - [# 102] SDL queue3: 
--------------------------------------------------------------------------------
   29:             self.__tail = newNode
   30:             self.__size += 1
   31:         else:
   32:             newNode = Node(value)
-  33:             nextNode = self.__sentinel.next
+  33:             pass
   34:             self.__sentinel.next = newNode
   35:             newNode.prev = self.__sentinel
   36:             newNode.next = nextNode
   37:             nextNode.prev = newNode
--------------------------------------------------------------------------------
[4.13570 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_117

def test_case_117():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        queue_1 = module_0.Queue()
        queue_2 = module_0.Queue()
        bool_1 = queue_2.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        none_type_1 = doubly_linked_list_2.addAtHead(queue_3)
        assert len(doubly_linked_list_2) == 1
        int_2 = 0
        node_2 = module_0.Node(int_2)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_0 = doubly_linked_list_3.removeAtHead()
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        int_3 = 0
        node_4 = module_0.Node(int_3)
        none_type_3 = None
        node_5 = module_0.Node(none_type_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_4.getSize()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_4 = None
        node_7 = module_0.Node(none_type_4)
        queue_5 = module_0.Queue()
        int_6 = queue_5.getSize()
        queue_6 = module_0.Queue()
        bool_4 = queue_6.isEmpty()
        assert bool_4 is True
        str_0 = queue_6.__str__()
        assert str_0 == '[]'
>       none_type_5 = doubly_linked_list_2.addAtHead(int_0)

RANDOM/test_queue3_RANDOM.py:4021: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9310790>, value = 0

>   ???
E   NameError: name 'nextNode' is not defined

queue3:36: NameError
   - [# 103] SDL queue3: 
--------------------------------------------------------------------------------
   30:             self.__size += 1
   31:         else:
   32:             newNode = Node(value)
   33:             nextNode = self.__sentinel.next
-  34:             self.__sentinel.next = newNode
+  34:             pass
   35:             newNode.prev = self.__sentinel
   36:             newNode.next = nextNode
   37:             nextNode.prev = newNode
   38:             self.__size += 1
--------------------------------------------------------------------------------
[2.76178 s] survived
   - [# 104] SDL queue3: 
--------------------------------------------------------------------------------
   31:         else:
   32:             newNode = Node(value)
   33:             nextNode = self.__sentinel.next
   34:             self.__sentinel.next = newNode
-  35:             newNode.prev = self.__sentinel
+  35:             pass
   36:             newNode.next = nextNode
   37:             nextNode.prev = newNode
   38:             self.__size += 1
   39:     
--------------------------------------------------------------------------------
[2.84945 s] survived
   - [# 105] SDL queue3: 
--------------------------------------------------------------------------------
   32:             newNode = Node(value)
   33:             nextNode = self.__sentinel.next
   34:             self.__sentinel.next = newNode
   35:             newNode.prev = self.__sentinel
-  36:             newNode.next = nextNode
+  36:             pass
   37:             nextNode.prev = newNode
   38:             self.__size += 1
   39:     
   40:     def addAtTail(self, value: T) -> None:
--------------------------------------------------------------------------------
[2.73506 s] survived
   - [# 106] SDL queue3: 
--------------------------------------------------------------------------------
   33:             nextNode = self.__sentinel.next
   34:             self.__sentinel.next = newNode
   35:             newNode.prev = self.__sentinel
   36:             newNode.next = nextNode
-  37:             nextNode.prev = newNode
+  37:             pass
   38:             self.__size += 1
   39:     
   40:     def addAtTail(self, value: T) -> None:
   41:         
--------------------------------------------------------------------------------
[2.59602 s] survived
   - [# 107] SDL queue3: 
--------------------------------------------------------------------------------
   41:         
   42:         '''Add node at tail end.'''
   43:         
   44:         if self.__size == 0:
-  45:             newNode = Node(value)
+  45:             pass
   46:             self.__sentinel.next = newNode
   47:             newNode.prev = self.__sentinel
   48:             self.__tail = newNode
   49:             self.__size += 1
--------------------------------------------------------------------------------
[3.88633 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_24

def test_case_24():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        var_0 = queue_0.getHead()
        int_2 = 0
        node_3 = module_0.Node(int_2)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_0.removeAtHead()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_3 = 0
        node_5 = module_0.Node(int_3)
        none_type_2 = None
        node_6 = module_0.Node(none_type_2)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_1.getSize()
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
>       none_type_3 = queue_3.enqueue(queue_3)

RANDOM/test_queue3_RANDOM.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:172: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e74e9930>
value = <queue3.Queue object at 0x7f96e74ea440>

>   ???
E   UnboundLocalError: local variable 'newNode' referenced before assignment

queue3:46: UnboundLocalError
   - [# 108] SDL queue3: 
--------------------------------------------------------------------------------
   42:         '''Add node at tail end.'''
   43:         
   44:         if self.__size == 0:
   45:             newNode = Node(value)
-  46:             self.__sentinel.next = newNode
+  46:             pass
   47:             newNode.prev = self.__sentinel
   48:             self.__tail = newNode
   49:             self.__size += 1
   50:         else:
--------------------------------------------------------------------------------
[4.28001 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_290

def test_case_290():
        queue_0 = module_0.Queue()
        var_0 = queue_0.dequeue()
        str_0 = var_0.__str__()
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_0.getTail()
        str_1 = var_1.__str__()
        queue_1 = module_0.Queue()
        int_0 = queue_1.getSize()
        bool_0 = queue_1.isEmpty()
        assert bool_0 is True
        queue_2 = module_0.Queue()
        int_1 = queue_2.getSize()
        int_2 = 0
        node_0 = module_0.Node(int_2)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_3 = module_0.Queue()
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtTail(none_type_0)
        assert len(doubly_linked_list_1) == 1
        int_3 = 0
        node_2 = module_0.Node(int_3)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
>       none_type_3 = doubly_linked_list_1.addAtHead(var_0)

RANDOM/test_queue3_RANDOM.py:10318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e93590f0>, value = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:37: AttributeError
   - [# 109] SDL queue3: 
--------------------------------------------------------------------------------
   43:         
   44:         if self.__size == 0:
   45:             newNode = Node(value)
   46:             self.__sentinel.next = newNode
-  47:             newNode.prev = self.__sentinel
+  47:             pass
   48:             self.__tail = newNode
   49:             self.__size += 1
   50:         else:
   51:             newNode = Node(value)
--------------------------------------------------------------------------------
[2.80426 s] survived
   - [# 110] SDL queue3: 
--------------------------------------------------------------------------------
   44:         if self.__size == 0:
   45:             newNode = Node(value)
   46:             self.__sentinel.next = newNode
   47:             newNode.prev = self.__sentinel
-  48:             self.__tail = newNode
+  48:             pass
   49:             self.__size += 1
   50:         else:
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
--------------------------------------------------------------------------------
[2.79243 s] survived
   - [# 111] SDL queue3: 
--------------------------------------------------------------------------------
   47:             newNode.prev = self.__sentinel
   48:             self.__tail = newNode
   49:             self.__size += 1
   50:         else:
-  51:             newNode = Node(value)
+  51:             pass
   52:             self.__tail.next = newNode
   53:             newNode.prev = self.__tail
   54:             self.__tail = newNode
   55:             self.__size += 1
--------------------------------------------------------------------------------
[4.03488 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_170

def test_case_170():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        var_0 = queue_0.dequeue()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = doubly_linked_list_1.__str__()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        str_2 = queue_2.__str__()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_1 = queue_3.dequeue()
        int_0 = 0
        node_1 = module_0.Node(int_0)
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        none_type_2 = doubly_linked_list_4.addAtHead(queue_4)
        assert len(doubly_linked_list_4) == 1
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_5.removeAtHead()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        queue_6 = module_0.Queue()
        bool_6 = queue_6.isEmpty()
        assert bool_6 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        none_type_4 = None
        node_5 = module_0.Node(none_type_4)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        int_3 = doubly_linked_list_6.getSize()
        queue_7 = module_0.Queue()
>       none_type_5 = doubly_linked_list_1.addAtTail(var_2)

RANDOM/test_queue3_RANDOM.py:6047: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9c4c490>, value = None

>   ???
E   UnboundLocalError: local variable 'newNode' referenced before assignment

queue3:52: UnboundLocalError
   - [# 112] SDL queue3: 
--------------------------------------------------------------------------------
   48:             self.__tail = newNode
   49:             self.__size += 1
   50:         else:
   51:             newNode = Node(value)
-  52:             self.__tail.next = newNode
+  52:             pass
   53:             newNode.prev = self.__tail
   54:             self.__tail = newNode
   55:             self.__size += 1
   56:     
--------------------------------------------------------------------------------
[5.24946 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
>       var_9 = doubly_linked_list_1.removeAtHead()

RANDOM/test_queue3_RANDOM.py:48710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9310100>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

queue3:73: AttributeError
   - [# 113] SDL queue3: 
--------------------------------------------------------------------------------
   49:             self.__size += 1
   50:         else:
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
-  53:             newNode.prev = self.__tail
+  53:             pass
   54:             self.__tail = newNode
   55:             self.__size += 1
   56:     
   57:     def removeAtHead(self):
--------------------------------------------------------------------------------
[2.83690 s] survived
   - [# 114] SDL queue3: 
--------------------------------------------------------------------------------
   50:         else:
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
   53:             newNode.prev = self.__tail
-  54:             self.__tail = newNode
+  54:             pass
   55:             self.__size += 1
   56:     
   57:     def removeAtHead(self):
   58:         
--------------------------------------------------------------------------------
[2.90564 s] survived
   - [# 115] SDL queue3: 
--------------------------------------------------------------------------------
   58:         
   59:         '''Remove node at head end.'''
   60:         
   61:         if self.__size == 0:
-  62:             return None
+  62:             pass
   63:         elif self.__size == 1:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
   66:             nodeToRemove.prev = None
--------------------------------------------------------------------------------
[2.87988 s] survived
   - [# 116] SDL queue3: 
--------------------------------------------------------------------------------
   60:         
   61:         if self.__size == 0:
   62:             return None
   63:         elif self.__size == 1:
-  64:             nodeToRemove = self.__head.next
+  64:             pass
   65:             self.__sentinel.next = None
   66:             nodeToRemove.prev = None
   67:             self.__size -= 1
   68:             return nodeToRemove
--------------------------------------------------------------------------------
[4.21101 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_208

def test_case_208():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = queue_0.dequeue()
        int_0 = doubly_linked_list_1.getSize()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        var_1 = queue_1.dequeue()
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_4.__len__()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_2 = None
        node_4 = module_0.Node(none_type_2)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_6.removeAtHead()
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        none_type_3 = doubly_linked_list_7.addAtHead(queue_5)
        assert len(doubly_linked_list_7) == 1
        str_1 = doubly_linked_list_7.__str__()
>       var_4 = doubly_linked_list_7.removeAtHead()

RANDOM/test_queue3_RANDOM.py:7584: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9311d80>

>   ???
E   UnboundLocalError: local variable 'nodeToRemove' referenced before assignment

queue3:66: UnboundLocalError
   - [# 117] SDL queue3: 
--------------------------------------------------------------------------------
   61:         if self.__size == 0:
   62:             return None
   63:         elif self.__size == 1:
   64:             nodeToRemove = self.__head.next
-  65:             self.__sentinel.next = None
+  65:             pass
   66:             nodeToRemove.prev = None
   67:             self.__size -= 1
   68:             return nodeToRemove
   69:         else:
--------------------------------------------------------------------------------
[2.87662 s] survived
   - [# 118] SDL queue3: 
--------------------------------------------------------------------------------
   62:             return None
   63:         elif self.__size == 1:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
-  66:             nodeToRemove.prev = None
+  66:             pass
   67:             self.__size -= 1
   68:             return nodeToRemove
   69:         else:
   70:             nodeToRemove = self.__head.next
--------------------------------------------------------------------------------
[4.27738 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_208

def test_case_208():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = queue_0.dequeue()
        int_0 = doubly_linked_list_1.getSize()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        var_1 = queue_1.dequeue()
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_4.__len__()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_2 = None
        node_4 = module_0.Node(none_type_2)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_6.removeAtHead()
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        none_type_3 = doubly_linked_list_7.addAtHead(queue_5)
        assert len(doubly_linked_list_7) == 1
        str_1 = doubly_linked_list_7.__str__()
        var_4 = doubly_linked_list_7.removeAtHead()
        assert len(doubly_linked_list_7) == 0
        assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue3.Node'
        assert f'{type(var_4.value).__module__}.{type(var_4.value).__qualname__}' == 'queue3.Queue'
        assert var_4.next is None
>       assert var_4.prev is None
E       AssertionError

RANDOM/test_queue3_RANDOM.py:7589: AssertionError
   - [# 119] SDL queue3: 
--------------------------------------------------------------------------------
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
   66:             nodeToRemove.prev = None
   67:             self.__size -= 1
-  68:             return nodeToRemove
+  68:             pass
   69:         else:
   70:             nodeToRemove = self.__head.next
   71:             nextNode = nodeToRemove.next
   72:             self.__sentinel.next = nextNode
--------------------------------------------------------------------------------
[4.42103 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_208

def test_case_208():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = queue_0.dequeue()
        int_0 = doubly_linked_list_1.getSize()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        var_1 = queue_1.dequeue()
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_4.__len__()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_2 = None
        node_4 = module_0.Node(none_type_2)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_6.removeAtHead()
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        none_type_3 = doubly_linked_list_7.addAtHead(queue_5)
        assert len(doubly_linked_list_7) == 1
        str_1 = doubly_linked_list_7.__str__()
        var_4 = doubly_linked_list_7.removeAtHead()
        assert len(doubly_linked_list_7) == 0
>       assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'queue3.Node'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:7586: AssertionError
   - [# 120] SDL queue3: 
--------------------------------------------------------------------------------
   66:             nodeToRemove.prev = None
   67:             self.__size -= 1
   68:             return nodeToRemove
   69:         else:
-  70:             nodeToRemove = self.__head.next
+  70:             pass
   71:             nextNode = nodeToRemove.next
   72:             self.__sentinel.next = nextNode
   73:             nextNode.prev = self.__sentinel
   74:             nodeToRemove.next = None
--------------------------------------------------------------------------------
[5.23864 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
>       var_9 = doubly_linked_list_1.removeAtHead()

RANDOM/test_queue3_RANDOM.py:48710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9bce710>

>   ???
E   UnboundLocalError: local variable 'nodeToRemove' referenced before assignment

queue3:71: UnboundLocalError
   - [# 121] SDL queue3: 
--------------------------------------------------------------------------------
   67:             self.__size -= 1
   68:             return nodeToRemove
   69:         else:
   70:             nodeToRemove = self.__head.next
-  71:             nextNode = nodeToRemove.next
+  71:             pass
   72:             self.__sentinel.next = nextNode
   73:             nextNode.prev = self.__sentinel
   74:             nodeToRemove.next = None
   75:             nodeToRemove.prev = None
--------------------------------------------------------------------------------
[5.71133 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
>       var_9 = doubly_linked_list_1.removeAtHead()

RANDOM/test_queue3_RANDOM.py:48710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e92c6860>

>   ???
E   NameError: name 'nextNode' is not defined

queue3:72: NameError
   - [# 122] SDL queue3: 
--------------------------------------------------------------------------------
   68:             return nodeToRemove
   69:         else:
   70:             nodeToRemove = self.__head.next
   71:             nextNode = nodeToRemove.next
-  72:             self.__sentinel.next = nextNode
+  72:             pass
   73:             nextNode.prev = self.__sentinel
   74:             nodeToRemove.next = None
   75:             nodeToRemove.prev = None
   76:             self.__size -= 1
--------------------------------------------------------------------------------
[2.90048 s] survived
   - [# 123] SDL queue3: 
--------------------------------------------------------------------------------
   69:         else:
   70:             nodeToRemove = self.__head.next
   71:             nextNode = nodeToRemove.next
   72:             self.__sentinel.next = nextNode
-  73:             nextNode.prev = self.__sentinel
+  73:             pass
   74:             nodeToRemove.next = None
   75:             nodeToRemove.prev = None
   76:             self.__size -= 1
   77:             return nodeToRemove
--------------------------------------------------------------------------------
[3.19036 s] survived
   - [# 124] SDL queue3: 
--------------------------------------------------------------------------------
   70:             nodeToRemove = self.__head.next
   71:             nextNode = nodeToRemove.next
   72:             self.__sentinel.next = nextNode
   73:             nextNode.prev = self.__sentinel
-  74:             nodeToRemove.next = None
+  74:             pass
   75:             nodeToRemove.prev = None
   76:             self.__size -= 1
   77:             return nodeToRemove
   78:     
--------------------------------------------------------------------------------
[5.19691 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
        var_9 = doubly_linked_list_1.removeAtHead()
        assert len(doubly_linked_list_1) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue3.Node'
        assert f'{type(var_9.value).__module__}.{type(var_9.value).__qualname__}' == 'queue3.Queue'
>       assert var_9.next is None
E       AssertionError

RANDOM/test_queue3_RANDOM.py:48714: AssertionError
   - [# 125] SDL queue3: 
--------------------------------------------------------------------------------
   71:             nextNode = nodeToRemove.next
   72:             self.__sentinel.next = nextNode
   73:             nextNode.prev = self.__sentinel
   74:             nodeToRemove.next = None
-  75:             nodeToRemove.prev = None
+  75:             pass
   76:             self.__size -= 1
   77:             return nodeToRemove
   78:     
   79:     def removeAtTail(self):
--------------------------------------------------------------------------------
[5.41671 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
        var_9 = doubly_linked_list_1.removeAtHead()
        assert len(doubly_linked_list_1) == 1
        assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue3.Node'
        assert f'{type(var_9.value).__module__}.{type(var_9.value).__qualname__}' == 'queue3.Queue'
        assert var_9.next is None
>       assert var_9.prev is None
E       AssertionError

RANDOM/test_queue3_RANDOM.py:48715: AssertionError
   - [# 126] SDL queue3: 
--------------------------------------------------------------------------------
   73:             nextNode.prev = self.__sentinel
   74:             nodeToRemove.next = None
   75:             nodeToRemove.prev = None
   76:             self.__size -= 1
-  77:             return nodeToRemove
+  77:             pass
   78:     
   79:     def removeAtTail(self):
   80:         
   81:         '''Remove node at tail end.'''
--------------------------------------------------------------------------------
[5.13273 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
        var_9 = doubly_linked_list_1.removeAtHead()
        assert len(doubly_linked_list_1) == 1
>       assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'queue3.Node'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:48712: AssertionError
   - [# 127] SDL queue3: 
--------------------------------------------------------------------------------
   80:         
   81:         '''Remove node at tail end.'''
   82:         
   83:         if self.__size == 0:
-  84:             return None
+  84:             pass
   85:         elif self.__size == 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
--------------------------------------------------------------------------------
[2.71042 s] survived
   - [# 128] SDL queue3: 
--------------------------------------------------------------------------------
   82:         
   83:         if self.__size == 0:
   84:             return None
   85:         elif self.__size == 1:
-  86:             nodeToRemove = self.__tail
+  86:             pass
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
   90:             self.__tail = self.__sentinel
--------------------------------------------------------------------------------
[3.93233 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_138

def test_case_138():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_1.addAtHead(queue_2)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_2)
        var_1 = queue_2.dequeue()
>       var_2 = doubly_linked_list_1.removeAtTail()

RANDOM/test_queue3_RANDOM.py:4804: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e950e260>

>   ???
E   UnboundLocalError: local variable 'nodeToRemove' referenced before assignment

queue3:87: UnboundLocalError
   - [# 129] SDL queue3: 
--------------------------------------------------------------------------------
   83:         if self.__size == 0:
   84:             return None
   85:         elif self.__size == 1:
   86:             nodeToRemove = self.__tail
-  87:             nodeToRemove.prev = None
+  87:             pass
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
   90:             self.__tail = self.__sentinel
   91:             self.__size -= 1
--------------------------------------------------------------------------------
[4.02741 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_138

def test_case_138():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_1.addAtHead(queue_2)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_2)
        var_1 = queue_2.dequeue()
        var_2 = doubly_linked_list_1.removeAtTail()
        assert len(doubly_linked_list_1) == 0
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue3.Node'
        assert f'{type(var_2.value).__module__}.{type(var_2.value).__qualname__}' == 'queue3.Queue'
        assert var_2.next is None
>       assert var_2.prev is None
E       AssertionError

RANDOM/test_queue3_RANDOM.py:4809: AssertionError
   - [# 130] SDL queue3: 
--------------------------------------------------------------------------------
   84:             return None
   85:         elif self.__size == 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
-  88:             self.__sentinel.next = None
+  88:             pass
   89:             self.__head = self.__sentinel
   90:             self.__tail = self.__sentinel
   91:             self.__size -= 1
   92:             return nodeToRemove
--------------------------------------------------------------------------------
[2.77149 s] survived
   - [# 131] SDL queue3: 
--------------------------------------------------------------------------------
   85:         elif self.__size == 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
-  89:             self.__head = self.__sentinel
+  89:             pass
   90:             self.__tail = self.__sentinel
   91:             self.__size -= 1
   92:             return nodeToRemove
   93:         else:
--------------------------------------------------------------------------------
[2.72108 s] survived
   - [# 132] SDL queue3: 
--------------------------------------------------------------------------------
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
-  90:             self.__tail = self.__sentinel
+  90:             pass
   91:             self.__size -= 1
   92:             return nodeToRemove
   93:         else:
   94:             nodeToRemove = self.__tail
--------------------------------------------------------------------------------
[2.77156 s] survived
   - [# 133] SDL queue3: 
--------------------------------------------------------------------------------
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
   90:             self.__tail = self.__sentinel
   91:             self.__size -= 1
-  92:             return nodeToRemove
+  92:             pass
   93:         else:
   94:             nodeToRemove = self.__tail
   95:             previous = nodeToRemove.prev
   96:             nodeToRemove.prev = None
--------------------------------------------------------------------------------
[4.13391 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_138

def test_case_138():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_1.addAtHead(queue_2)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_2)
        var_1 = queue_2.dequeue()
        var_2 = doubly_linked_list_1.removeAtTail()
        assert len(doubly_linked_list_1) == 0
>       assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue3.Node'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:4806: AssertionError
   - [# 134] SDL queue3: 
--------------------------------------------------------------------------------
   90:             self.__tail = self.__sentinel
   91:             self.__size -= 1
   92:             return nodeToRemove
   93:         else:
-  94:             nodeToRemove = self.__tail
+  94:             pass
   95:             previous = nodeToRemove.prev
   96:             nodeToRemove.prev = None
   97:             previous.next = None
   98:             self.__tail = previous
--------------------------------------------------------------------------------
[2.85165 s] survived
   - [# 135] SDL queue3: 
--------------------------------------------------------------------------------
   91:             self.__size -= 1
   92:             return nodeToRemove
   93:         else:
   94:             nodeToRemove = self.__tail
-  95:             previous = nodeToRemove.prev
+  95:             pass
   96:             nodeToRemove.prev = None
   97:             previous.next = None
   98:             self.__tail = previous
   99:             self.__size -= 1
--------------------------------------------------------------------------------
[2.76468 s] survived
   - [# 136] SDL queue3: 
--------------------------------------------------------------------------------
   92:             return nodeToRemove
   93:         else:
   94:             nodeToRemove = self.__tail
   95:             previous = nodeToRemove.prev
-  96:             nodeToRemove.prev = None
+  96:             pass
   97:             previous.next = None
   98:             self.__tail = previous
   99:             self.__size -= 1
  100:             return nodeToRemove
--------------------------------------------------------------------------------
[3.01145 s] survived
   - [# 137] SDL queue3: 
--------------------------------------------------------------------------------
   93:         else:
   94:             nodeToRemove = self.__tail
   95:             previous = nodeToRemove.prev
   96:             nodeToRemove.prev = None
-  97:             previous.next = None
+  97:             pass
   98:             self.__tail = previous
   99:             self.__size -= 1
  100:             return nodeToRemove
  101:     
--------------------------------------------------------------------------------
[2.85256 s] survived
   - [# 138] SDL queue3: 
--------------------------------------------------------------------------------
   94:             nodeToRemove = self.__tail
   95:             previous = nodeToRemove.prev
   96:             nodeToRemove.prev = None
   97:             previous.next = None
-  98:             self.__tail = previous
+  98:             pass
   99:             self.__size -= 1
  100:             return nodeToRemove
  101:     
  102:     def isEmpty(self) -> bool:
--------------------------------------------------------------------------------
[2.81264 s] survived
   - [# 139] SDL queue3: 
--------------------------------------------------------------------------------
   96:             nodeToRemove.prev = None
   97:             previous.next = None
   98:             self.__tail = previous
   99:             self.__size -= 1
- 100:             return nodeToRemove
+ 100:             pass
  101:     
  102:     def isEmpty(self) -> bool:
  103:         
  104:         '''Check if linkedlist is empty'''
--------------------------------------------------------------------------------
[2.74056 s] survived
   - [# 140] SDL queue3: 
--------------------------------------------------------------------------------
  102:     def isEmpty(self) -> bool:
  103:         
  104:         '''Check if linkedlist is empty'''
  105:         
- 106:         return True if self.__size == 0 else False
+ 106:         pass
  107:     
  108:     def getHead(self):
  109:         
  110:         '''Get value at the front end of the list.'''
--------------------------------------------------------------------------------
[3.94544 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

RANDOM/test_queue3_RANDOM.py:19: AssertionError
   - [# 141] SDL queue3: 
--------------------------------------------------------------------------------
  109:         
  110:         '''Get value at the front end of the list.'''
  111:         
  112:         if self.__size == 0:
- 113:             return None
+ 113:             pass
  114:         else:
  115:             return self.__head.next.value
  116:     
  117:     def getTail(self) -> T:
--------------------------------------------------------------------------------
[2.81187 s] survived
   - [# 142] SDL queue3: 
--------------------------------------------------------------------------------
  111:         
  112:         if self.__size == 0:
  113:             return None
  114:         else:
- 115:             return self.__head.next.value
+ 115:             pass
  116:     
  117:     def getTail(self) -> T:
  118:         
  119:         '''Get value at the tail of the list.'''
--------------------------------------------------------------------------------
[4.25412 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_260

def test_case_260():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_0 = doubly_linked_list_2.getTail()
        str_1 = var_0.__str__()
        queue_2 = module_0.Queue()
        int_0 = 0
        node_1 = module_0.Node(int_0)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        queue_3 = module_0.Queue()
        var_1 = queue_3.getTail()
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_1.getHead()
>       assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'queue3.Queue'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:9253: AssertionError
   - [# 143] SDL queue3: 
--------------------------------------------------------------------------------
  117:     def getTail(self) -> T:
  118:         
  119:         '''Get value at the tail of the list.'''
  120:         
- 121:         return self.__tail.value
+ 121:         pass
  122:     
  123:     def getSize(self) -> int:
  124:         
  125:         '''Get length of the linked list.'''
--------------------------------------------------------------------------------
[4.12383 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_389

def test_case_389():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        var_0 = queue_1.getHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_0.removeAtTail()
        str_1 = var_1.__str__()
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_1.getSize()
        queue_3 = module_0.Queue()
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_2.addAtHead(queue_4)
        assert len(doubly_linked_list_2) == 1
        str_2 = queue_4.__str__()
        node_3 = module_0.Node(queue_4)
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        var_2 = doubly_linked_list_2.getTail()
>       var_3 = var_2.getHead()
E       AttributeError: 'NoneType' object has no attribute 'getHead'

RANDOM/test_queue3_RANDOM.py:14376: AttributeError
   - [# 144] SDL queue3: 
--------------------------------------------------------------------------------
  123:     def getSize(self) -> int:
  124:         
  125:         '''Get length of the linked list.'''
  126:         
- 127:         return self.__size
+ 127:         pass
  128:     
  129:     def __len__(self) -> int:
  130:         
  131:         '''Get length of the linked list.'''
--------------------------------------------------------------------------------
[3.93494 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_11

def test_case_11():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
>       assert int_1 == 0
E       AssertionError

RANDOM/test_queue3_RANDOM.py:198: AssertionError
   - [# 145] SDL queue3: 
--------------------------------------------------------------------------------
  129:     def __len__(self) -> int:
  130:         
  131:         '''Get length of the linked list.'''
  132:         
- 133:         return self.__size
+ 133:         pass
  134:     
  135:     def __str__(self) -> str:
  136:         
  137:         '''Return String representation of linkedlist values.'''
--------------------------------------------------------------------------------
[3.96515 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/queue3/RANDOM/test_queue3_RANDOM.py:61: TypeError: 'NoneType' object cannot be interpreted as an integer

   - [# 146] SDL queue3: 
--------------------------------------------------------------------------------
  135:     def __str__(self) -> str:
  136:         
  137:         '''Return String representation of linkedlist values.'''
  138:         
- 139:         arr = []
+ 139:         pass
  140:         current = self.__head.next
  141:         while current:
  142:             arr.append(current.value)
  143:             current = current.next
--------------------------------------------------------------------------------
[3.87689 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_28

def test_case_28():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = doubly_linked_list_1.getSize()
        assert int_2 == 0
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_4 = 0
        node_5 = module_0.Node(int_4)
        var_0 = queue_1.getHead()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_2 = None
        node_7 = module_0.Node(none_type_2)
        int_6 = 0
        node_8 = module_0.Node(int_6)
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_7 = 0
        node_9 = module_0.Node(int_7)
        none_type_3 = None
        node_10 = module_0.Node(none_type_3)
        int_8 = 0
        node_11 = module_0.Node(int_8)
        none_type_4 = None
        node_12 = module_0.Node(none_type_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        int_9 = 0
        node_13 = module_0.Node(int_9)
        none_type_5 = None
        node_14 = module_0.Node(none_type_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        queue_5 = module_0.Queue()
>       str_0 = queue_2.__str__()

RANDOM/test_queue3_RANDOM.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:190: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e950e5c0>

>   ???
E   NameError: name 'arr' is not defined

queue3:144: NameError
   - [# 147] SDL queue3: 
--------------------------------------------------------------------------------
  136:         
  137:         '''Return String representation of linkedlist values.'''
  138:         
  139:         arr = []
- 140:         current = self.__head.next
+ 140:         pass
  141:         while current:
  142:             arr.append(current.value)
  143:             current = current.next
  144:         return str(arr)
--------------------------------------------------------------------------------
[4.08398 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_28

def test_case_28():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = doubly_linked_list_1.getSize()
        assert int_2 == 0
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_4 = 0
        node_5 = module_0.Node(int_4)
        var_0 = queue_1.getHead()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_2 = None
        node_7 = module_0.Node(none_type_2)
        int_6 = 0
        node_8 = module_0.Node(int_6)
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_7 = 0
        node_9 = module_0.Node(int_7)
        none_type_3 = None
        node_10 = module_0.Node(none_type_3)
        int_8 = 0
        node_11 = module_0.Node(int_8)
        none_type_4 = None
        node_12 = module_0.Node(none_type_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        int_9 = 0
        node_13 = module_0.Node(int_9)
        none_type_5 = None
        node_14 = module_0.Node(none_type_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        queue_5 = module_0.Queue()
>       str_0 = queue_2.__str__()

RANDOM/test_queue3_RANDOM.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:190: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96eaf93e50>

>   ???
E   UnboundLocalError: local variable 'current' referenced before assignment

queue3:141: UnboundLocalError
   - [# 148] SDL queue3: 
--------------------------------------------------------------------------------
  138:         
  139:         arr = []
  140:         current = self.__head.next
  141:         while current:
- 142:             arr.append(current.value)
+ 142:             pass
  143:             current = current.next
  144:         return str(arr)
  145: 
  146: class Queue:
--------------------------------------------------------------------------------
[4.56020 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_554

def test_case_554():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.removeAtHead()
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_2 = doubly_linked_list_1.addAtTail(none_type_1)
        assert len(doubly_linked_list_1) == 1
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        bool_1 = doubly_linked_list_2.isEmpty()
        assert bool_1 is True
        none_type_3 = None
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_3.addAtHead(none_type_3)
        assert len(doubly_linked_list_3) == 1
        int_2 = 0
        node_4 = module_0.Node(int_2)
        none_type_5 = None
        node_5 = module_0.Node(none_type_5)
        queue_2 = module_0.Queue()
        var_1 = queue_2.getTail()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        var_2 = queue_4.dequeue()
        str_0 = var_2.__str__()
        queue_5 = module_0.Queue()
        int_3 = 0
        node_6 = module_0.Node(int_3)
        none_type_6 = None
        node_7 = module_0.Node(none_type_6)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        str_1 = doubly_linked_list_1.__str__()
>       assert str_1 == '[None]'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:21005: AssertionError
   - [# 149] SDL queue3: 
--------------------------------------------------------------------------------
  139:         arr = []
  140:         current = self.__head.next
  141:         while current:
  142:             arr.append(current.value)
- 143:             current = current.next
+ 143:             pass
  144:         return str(arr)
  145: 
  146: class Queue:
  147:     def __init__(self):
--------------------------------------------------------------------------------
[13.71976 s] timeout
   - [# 150] SDL queue3: 
--------------------------------------------------------------------------------
  140:         current = self.__head.next
  141:         while current:
  142:             arr.append(current.value)
  143:             current = current.next
- 144:         return str(arr)
+ 144:         pass
  145: 
  146: class Queue:
  147:     def __init__(self):
  148:         self.__queue = DoublyLinkedList()
--------------------------------------------------------------------------------
[4.01397 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_28

def test_case_28():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = doubly_linked_list_1.getSize()
        assert int_2 == 0
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_4 = 0
        node_5 = module_0.Node(int_4)
        var_0 = queue_1.getHead()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_2 = None
        node_7 = module_0.Node(none_type_2)
        int_6 = 0
        node_8 = module_0.Node(int_6)
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_7 = 0
        node_9 = module_0.Node(int_7)
        none_type_3 = None
        node_10 = module_0.Node(none_type_3)
        int_8 = 0
        node_11 = module_0.Node(int_8)
        none_type_4 = None
        node_12 = module_0.Node(none_type_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        int_9 = 0
        node_13 = module_0.Node(int_9)
        none_type_5 = None
        node_14 = module_0.Node(none_type_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        queue_5 = module_0.Queue()
        str_0 = queue_2.__str__()
>       assert str_0 == '[]'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:633: AssertionError
   - [# 151] SDL queue3: 
--------------------------------------------------------------------------------
  144:         return str(arr)
  145: 
  146: class Queue:
  147:     def __init__(self):
- 148:         self.__queue = DoublyLinkedList()
+ 148:         pass
  149:     
  150:     def getHead(self) -> T:
  151:         
  152:         '''View first element in the queue.'''
--------------------------------------------------------------------------------
[3.92438 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
>       bool_0 = queue_0.isEmpty()

RANDOM/test_queue3_RANDOM.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.Queue object at 0x7f96e9049360>

>   ???
E   AttributeError: 'Queue' object has no attribute '_Queue__queue'

queue3:184: AttributeError
   - [# 152] SDL queue3: 
--------------------------------------------------------------------------------
  150:     def getHead(self) -> T:
  151:         
  152:         '''View first element in the queue.'''
  153:         
- 154:         return self.__queue.getHead()
+ 154:         pass
  155:     
  156:     def getTail(self):
  157:         
  158:         '''View last element in the queue.'''
--------------------------------------------------------------------------------
[2.82280 s] survived
   - [# 153] SDL queue3: 
--------------------------------------------------------------------------------
  156:     def getTail(self):
  157:         
  158:         '''View last element in the queue.'''
  159:         
- 160:         return self.__queue.getTail()
+ 160:         pass
  161:     
  162:     def dequeue(self) -> T:
  163:         
  164:         '''Remove element from the queue.'''
--------------------------------------------------------------------------------
[2.79899 s] survived
   - [# 154] SDL queue3: 
--------------------------------------------------------------------------------
  162:     def dequeue(self) -> T:
  163:         
  164:         '''Remove element from the queue.'''
  165:         
- 166:         return self.__queue.removeAtHead()
+ 166:         pass
  167:     
  168:     def enqueue(self, value: T) -> None:
  169:         
  170:         '''Add element to queue.'''
--------------------------------------------------------------------------------
[4.63781 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_578

def test_case_578():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        var_0 = queue_0.getTail()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        str_1 = queue_1.__str__()
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_1.removeAtTail()
        str_2 = var_1.__str__()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        int_0 = doubly_linked_list_2.getSize()
        var_2 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        str_3 = queue_2.__str__()
        int_1 = 0
        node_0 = module_0.Node(int_1)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        queue_3 = module_0.Queue()
        var_3 = queue_3.getTail()
        none_type_2 = queue_3.enqueue(int_1)
        int_2 = 0
        node_2 = module_0.Node(int_2)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        queue_4 = module_0.Queue()
        var_4 = queue_4.getTail()
        none_type_4 = queue_4.enqueue(int_2)
        queue_5 = module_0.Queue()
        queue_6 = module_0.Queue()
        int_3 = 0
        node_4 = module_0.Node(int_3)
        none_type_5 = None
        node_5 = module_0.Node(none_type_5)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_5 = doubly_linked_list_3.removeAtHead()
        node_6 = module_0.Node(none_type_5)
        queue_7 = module_0.Queue()
        bool_3 = queue_7.isEmpty()
        assert bool_3 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        none_type_6 = doubly_linked_list_4.addAtHead(queue_7)
        assert len(doubly_linked_list_4) == 1
        str_4 = queue_7.__str__()
        node_7 = module_0.Node(queue_7)
        bool_4 = queue_7.isEmpty()
        assert bool_4 is True
        var_6 = doubly_linked_list_4.getTail()
        int_4 = doubly_linked_list_4.getSize()
        assert int_4 == 1
        int_5 = 0
        node_8 = module_0.Node(int_5)
        none_type_7 = None
        node_9 = module_0.Node(none_type_7)
        queue_8 = module_0.Queue()
        bool_5 = queue_8.isEmpty()
        assert bool_5 is True
        int_6 = 0
        node_10 = module_0.Node(int_6)
        none_type_8 = None
        node_11 = module_0.Node(none_type_8)
        queue_9 = module_0.Queue()
        bool_6 = queue_9.isEmpty()
        assert bool_6 is True
        int_7 = 0
        node_12 = module_0.Node(int_7)
        var_7 = queue_9.getHead()
        var_8 = queue_4.dequeue()
>       assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'queue3.Node'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:22134: AssertionError
   - [# 155] SDL queue3: 
--------------------------------------------------------------------------------
  168:     def enqueue(self, value: T) -> None:
  169:         
  170:         '''Add element to queue.'''
  171:         
- 172:         self.__queue.addAtTail(value)
+ 172:         pass
  173:     
  174:     def getSize(self) -> int:
  175:         
  176:         '''Get size of the queue.'''
--------------------------------------------------------------------------------
[4.56595 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_490

def test_case_490():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = doubly_linked_list_0.__str__()
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        int_0 = doubly_linked_list_1.__len__()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_1 = queue_1.__str__()
        assert str_1 == '[]'
        node_0 = module_0.Node(queue_1)
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        var_0 = doubly_linked_list_2.getTail()
        bool_3 = var_0.isEmpty()
        assert bool_3 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_3.getTail()
        str_2 = var_1.__str__()
        none_type_2 = doubly_linked_list_3.addAtHead(str_2)
        assert len(doubly_linked_list_3) == 1
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_1 = doubly_linked_list_4.getSize()
        int_2 = 0
        node_1 = module_0.Node(int_2)
        none_type_3 = None
        node_2 = module_0.Node(none_type_3)
        queue_2 = module_0.Queue()
        var_2 = queue_2.getTail()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_4 = None
        node_4 = module_0.Node(none_type_4)
        queue_3 = module_0.Queue()
        var_3 = queue_3.getTail()
        none_type_5 = queue_3.enqueue(int_3)
        int_4 = queue_3.getSize()
>       assert int_4 == 1
E       AssertionError

RANDOM/test_queue3_RANDOM.py:18300: AssertionError
   - [# 156] SDL queue3: 
--------------------------------------------------------------------------------
  174:     def getSize(self) -> int:
  175:         
  176:         '''Get size of the queue.'''
  177:         
- 178:         return self.__queue.getSize()
+ 178:         pass
  179:     
  180:     def isEmpty(self) -> bool:
  181:         
  182:         '''Check if queue is empty.'''
--------------------------------------------------------------------------------
[4.08519 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_91

def test_case_91():
        queue_0 = module_0.Queue()
        int_0 = queue_0.getSize()
>       assert int_0 == 0
E       AssertionError

RANDOM/test_queue3_RANDOM.py:2966: AssertionError
   - [# 157] SDL queue3: 
--------------------------------------------------------------------------------
  180:     def isEmpty(self) -> bool:
  181:         
  182:         '''Check if queue is empty.'''
  183:         
- 184:         return self.__queue.isEmpty()
+ 184:         pass
  185:     
  186:     def __str__(self) -> str:
  187:         
  188:         '''Get string representation of the queue.'''
--------------------------------------------------------------------------------
[3.87616 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
>       assert bool_0 is True
E       AssertionError

RANDOM/test_queue3_RANDOM.py:19: AssertionError
   - [# 158] SDL queue3: 
--------------------------------------------------------------------------------
  186:     def __str__(self) -> str:
  187:         
  188:         '''Get string representation of the queue.'''
  189:         
- 190:         return self.__queue.__str__()
+ 190:         pass
  191: 
  192: 
  193: if __name__ == '__main__':
  194:     pass
--------------------------------------------------------------------------------
[3.99691 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_28

def test_case_28():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = doubly_linked_list_1.getSize()
        assert int_2 == 0
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_4 = 0
        node_5 = module_0.Node(int_4)
        var_0 = queue_1.getHead()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_2 = None
        node_7 = module_0.Node(none_type_2)
        int_6 = 0
        node_8 = module_0.Node(int_6)
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_7 = 0
        node_9 = module_0.Node(int_7)
        none_type_3 = None
        node_10 = module_0.Node(none_type_3)
        int_8 = 0
        node_11 = module_0.Node(int_8)
        none_type_4 = None
        node_12 = module_0.Node(none_type_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        int_9 = 0
        node_13 = module_0.Node(int_9)
        none_type_5 = None
        node_14 = module_0.Node(none_type_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        queue_5 = module_0.Queue()
        str_0 = queue_2.__str__()
>       assert str_0 == '[]'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:633: AssertionError
   - [# 159] SVD queue3: 
--------------------------------------------------------------------------------
    5: T = TypeVar('T')
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
-   9:         self.value = value
+   9:         value = value
   10:         self.next = None
   11:         self.prev = None
   12: 
   13: 
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 160] SVD queue3: 
--------------------------------------------------------------------------------
    6: 
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
-  10:         self.next = None
+  10:         next = None
   11:         self.prev = None
   12: 
   13: 
   14: class DoublyLinkedList:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 161] SVD queue3: 
--------------------------------------------------------------------------------
    7: class Node:
    8:     def __init__(self, value: T):
    9:         self.value = value
   10:         self.next = None
-  11:         self.prev = None
+  11:         prev = None
   12: 
   13: 
   14: class DoublyLinkedList:
   15:     def __init__(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 162] SVD queue3: 
--------------------------------------------------------------------------------
   12: 
   13: 
   14: class DoublyLinkedList:
   15:     def __init__(self):
-  16:         self.__sentinel = Node(None)
+  16:         __sentinel = Node(None)
   17:         self.__head = self.__sentinel
   18:         self.__tail = self.__sentinel
   19:         self.__size = 0
   20:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 163] SVD queue3: 
--------------------------------------------------------------------------------
   13: 
   14: class DoublyLinkedList:
   15:     def __init__(self):
   16:         self.__sentinel = Node(None)
-  17:         self.__head = self.__sentinel
+  17:         __head = self.__sentinel
   18:         self.__tail = self.__sentinel
   19:         self.__size = 0
   20:     
   21:     def addAtHead(self, value: T) -> None:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 164] SVD queue3: 
--------------------------------------------------------------------------------
   13: 
   14: class DoublyLinkedList:
   15:     def __init__(self):
   16:         self.__sentinel = Node(None)
-  17:         self.__head = self.__sentinel
+  17:         self.__head = __sentinel
   18:         self.__tail = self.__sentinel
   19:         self.__size = 0
   20:     
   21:     def addAtHead(self, value: T) -> None:
--------------------------------------------------------------------------------
[3.81174 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
>       queue_0 = module_0.Queue()

RANDOM/test_queue3_RANDOM.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:148: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9310190>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:17: NameError
   - [# 165] SVD queue3: 
--------------------------------------------------------------------------------
   14: class DoublyLinkedList:
   15:     def __init__(self):
   16:         self.__sentinel = Node(None)
   17:         self.__head = self.__sentinel
-  18:         self.__tail = self.__sentinel
+  18:         __tail = self.__sentinel
   19:         self.__size = 0
   20:     
   21:     def addAtHead(self, value: T) -> None:
   22:         
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 166] SVD queue3: 
--------------------------------------------------------------------------------
   14: class DoublyLinkedList:
   15:     def __init__(self):
   16:         self.__sentinel = Node(None)
   17:         self.__head = self.__sentinel
-  18:         self.__tail = self.__sentinel
+  18:         self.__tail = __sentinel
   19:         self.__size = 0
   20:     
   21:     def addAtHead(self, value: T) -> None:
   22:         
--------------------------------------------------------------------------------
[4.07917 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
>       queue_0 = module_0.Queue()

RANDOM/test_queue3_RANDOM.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:148: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e91a0fa0>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:18: NameError
   - [# 167] SVD queue3: 
--------------------------------------------------------------------------------
   15:     def __init__(self):
   16:         self.__sentinel = Node(None)
   17:         self.__head = self.__sentinel
   18:         self.__tail = self.__sentinel
-  19:         self.__size = 0
+  19:         __size = 0
   20:     
   21:     def addAtHead(self, value: T) -> None:
   22:         
   23:         '''Add node at head end.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 168] SVD queue3: 
--------------------------------------------------------------------------------
   21:     def addAtHead(self, value: T) -> None:
   22:         
   23:         '''Add node at head end.'''
   24:         
-  25:         if self.__size == 0:
+  25:         if __size == 0:
   26:             newNode = Node(value)
   27:             self.__sentinel.next = newNode
   28:             newNode.prev = self.__sentinel
   29:             self.__tail = newNode
--------------------------------------------------------------------------------
[3.99505 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_47

def test_case_47():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       none_type_0 = doubly_linked_list_0.addAtHead(queue_0)

RANDOM/test_queue3_RANDOM.py:1399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e7540730>
value = <queue3.Queue object at 0x7f96e7540d60>

>   ???
E   NameError: name '_DoublyLinkedList__size' is not defined

queue3:25: NameError
   - [# 169] SVD queue3: 
--------------------------------------------------------------------------------
   23:         '''Add node at head end.'''
   24:         
   25:         if self.__size == 0:
   26:             newNode = Node(value)
-  27:             self.__sentinel.next = newNode
+  27:             __sentinel.next = newNode
   28:             newNode.prev = self.__sentinel
   29:             self.__tail = newNode
   30:             self.__size += 1
   31:         else:
--------------------------------------------------------------------------------
[3.89692 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_47

def test_case_47():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       none_type_0 = doubly_linked_list_0.addAtHead(queue_0)

RANDOM/test_queue3_RANDOM.py:1399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e7503af0>
value = <queue3.Queue object at 0x7f96e7500970>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:27: NameError
   - [# 170] SVD queue3: 
--------------------------------------------------------------------------------
   24:         
   25:         if self.__size == 0:
   26:             newNode = Node(value)
   27:             self.__sentinel.next = newNode
-  28:             newNode.prev = self.__sentinel
+  28:             newNode.prev = __sentinel
   29:             self.__tail = newNode
   30:             self.__size += 1
   31:         else:
   32:             newNode = Node(value)
--------------------------------------------------------------------------------
[3.80925 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_47

def test_case_47():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       none_type_0 = doubly_linked_list_0.addAtHead(queue_0)

RANDOM/test_queue3_RANDOM.py:1399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e935bdc0>
value = <queue3.Queue object at 0x7f96e9359f60>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:28: NameError
   - [# 171] SVD queue3: 
--------------------------------------------------------------------------------
   25:         if self.__size == 0:
   26:             newNode = Node(value)
   27:             self.__sentinel.next = newNode
   28:             newNode.prev = self.__sentinel
-  29:             self.__tail = newNode
+  29:             __tail = newNode
   30:             self.__size += 1
   31:         else:
   32:             newNode = Node(value)
   33:             nextNode = self.__sentinel.next
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 172] SVD queue3: 
--------------------------------------------------------------------------------
   26:             newNode = Node(value)
   27:             self.__sentinel.next = newNode
   28:             newNode.prev = self.__sentinel
   29:             self.__tail = newNode
-  30:             self.__size += 1
+  30:             __size += 1
   31:         else:
   32:             newNode = Node(value)
   33:             nextNode = self.__sentinel.next
   34:             self.__sentinel.next = newNode
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 173] SVD queue3: 
--------------------------------------------------------------------------------
   29:             self.__tail = newNode
   30:             self.__size += 1
   31:         else:
   32:             newNode = Node(value)
-  33:             nextNode = self.__sentinel.next
+  33:             nextNode = __sentinel.next
   34:             self.__sentinel.next = newNode
   35:             newNode.prev = self.__sentinel
   36:             newNode.next = nextNode
   37:             nextNode.prev = newNode
--------------------------------------------------------------------------------
[4.02345 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_117

def test_case_117():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        queue_1 = module_0.Queue()
        queue_2 = module_0.Queue()
        bool_1 = queue_2.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        none_type_1 = doubly_linked_list_2.addAtHead(queue_3)
        assert len(doubly_linked_list_2) == 1
        int_2 = 0
        node_2 = module_0.Node(int_2)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_0 = doubly_linked_list_3.removeAtHead()
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        int_3 = 0
        node_4 = module_0.Node(int_3)
        none_type_3 = None
        node_5 = module_0.Node(none_type_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_4.getSize()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_4 = None
        node_7 = module_0.Node(none_type_4)
        queue_5 = module_0.Queue()
        int_6 = queue_5.getSize()
        queue_6 = module_0.Queue()
        bool_4 = queue_6.isEmpty()
        assert bool_4 is True
        str_0 = queue_6.__str__()
        assert str_0 == '[]'
>       none_type_5 = doubly_linked_list_2.addAtHead(int_0)

RANDOM/test_queue3_RANDOM.py:4021: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e918e7a0>, value = 0

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:33: NameError
   - [# 174] SVD queue3: 
--------------------------------------------------------------------------------
   30:             self.__size += 1
   31:         else:
   32:             newNode = Node(value)
   33:             nextNode = self.__sentinel.next
-  34:             self.__sentinel.next = newNode
+  34:             __sentinel.next = newNode
   35:             newNode.prev = self.__sentinel
   36:             newNode.next = nextNode
   37:             nextNode.prev = newNode
   38:             self.__size += 1
--------------------------------------------------------------------------------
[4.07244 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_117

def test_case_117():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        queue_1 = module_0.Queue()
        queue_2 = module_0.Queue()
        bool_1 = queue_2.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        none_type_1 = doubly_linked_list_2.addAtHead(queue_3)
        assert len(doubly_linked_list_2) == 1
        int_2 = 0
        node_2 = module_0.Node(int_2)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_0 = doubly_linked_list_3.removeAtHead()
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        int_3 = 0
        node_4 = module_0.Node(int_3)
        none_type_3 = None
        node_5 = module_0.Node(none_type_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_4.getSize()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_4 = None
        node_7 = module_0.Node(none_type_4)
        queue_5 = module_0.Queue()
        int_6 = queue_5.getSize()
        queue_6 = module_0.Queue()
        bool_4 = queue_6.isEmpty()
        assert bool_4 is True
        str_0 = queue_6.__str__()
        assert str_0 == '[]'
>       none_type_5 = doubly_linked_list_2.addAtHead(int_0)

RANDOM/test_queue3_RANDOM.py:4021: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e95580d0>, value = 0

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:34: NameError
   - [# 175] SVD queue3: 
--------------------------------------------------------------------------------
   31:         else:
   32:             newNode = Node(value)
   33:             nextNode = self.__sentinel.next
   34:             self.__sentinel.next = newNode
-  35:             newNode.prev = self.__sentinel
+  35:             newNode.prev = __sentinel
   36:             newNode.next = nextNode
   37:             nextNode.prev = newNode
   38:             self.__size += 1
   39:     
--------------------------------------------------------------------------------
[3.92751 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_117

def test_case_117():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        queue_1 = module_0.Queue()
        queue_2 = module_0.Queue()
        bool_1 = queue_2.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_2) == 0
        none_type_1 = doubly_linked_list_2.addAtHead(queue_3)
        assert len(doubly_linked_list_2) == 1
        int_2 = 0
        node_2 = module_0.Node(int_2)
        none_type_2 = None
        node_3 = module_0.Node(none_type_2)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_0 = doubly_linked_list_3.removeAtHead()
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        int_3 = 0
        node_4 = module_0.Node(int_3)
        none_type_3 = None
        node_5 = module_0.Node(none_type_3)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_4.getSize()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_4 = None
        node_7 = module_0.Node(none_type_4)
        queue_5 = module_0.Queue()
        int_6 = queue_5.getSize()
        queue_6 = module_0.Queue()
        bool_4 = queue_6.isEmpty()
        assert bool_4 is True
        str_0 = queue_6.__str__()
        assert str_0 == '[]'
>       none_type_5 = doubly_linked_list_2.addAtHead(int_0)

RANDOM/test_queue3_RANDOM.py:4021: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9c6ea40>, value = 0

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:35: NameError
   - [# 176] SVD queue3: 
--------------------------------------------------------------------------------
   34:             self.__sentinel.next = newNode
   35:             newNode.prev = self.__sentinel
   36:             newNode.next = nextNode
   37:             nextNode.prev = newNode
-  38:             self.__size += 1
+  38:             __size += 1
   39:     
   40:     def addAtTail(self, value: T) -> None:
   41:         
   42:         '''Add node at tail end.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 177] SVD queue3: 
--------------------------------------------------------------------------------
   40:     def addAtTail(self, value: T) -> None:
   41:         
   42:         '''Add node at tail end.'''
   43:         
-  44:         if self.__size == 0:
+  44:         if __size == 0:
   45:             newNode = Node(value)
   46:             self.__sentinel.next = newNode
   47:             newNode.prev = self.__sentinel
   48:             self.__tail = newNode
--------------------------------------------------------------------------------
[3.93629 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_24

def test_case_24():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        var_0 = queue_0.getHead()
        int_2 = 0
        node_3 = module_0.Node(int_2)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_0.removeAtHead()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_3 = 0
        node_5 = module_0.Node(int_3)
        none_type_2 = None
        node_6 = module_0.Node(none_type_2)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_1.getSize()
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
>       none_type_3 = queue_3.enqueue(queue_3)

RANDOM/test_queue3_RANDOM.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:172: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9b509d0>
value = <queue3.Queue object at 0x7f96e9b52050>

>   ???
E   NameError: name '_DoublyLinkedList__size' is not defined

queue3:44: NameError
   - [# 178] SVD queue3: 
--------------------------------------------------------------------------------
   42:         '''Add node at tail end.'''
   43:         
   44:         if self.__size == 0:
   45:             newNode = Node(value)
-  46:             self.__sentinel.next = newNode
+  46:             __sentinel.next = newNode
   47:             newNode.prev = self.__sentinel
   48:             self.__tail = newNode
   49:             self.__size += 1
   50:         else:
--------------------------------------------------------------------------------
[4.02732 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_24

def test_case_24():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        var_0 = queue_0.getHead()
        int_2 = 0
        node_3 = module_0.Node(int_2)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_0.removeAtHead()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_3 = 0
        node_5 = module_0.Node(int_3)
        none_type_2 = None
        node_6 = module_0.Node(none_type_2)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_1.getSize()
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
>       none_type_3 = queue_3.enqueue(queue_3)

RANDOM/test_queue3_RANDOM.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:172: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e92c5210>
value = <queue3.Queue object at 0x7f96e92c6c80>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:46: NameError
   - [# 179] SVD queue3: 
--------------------------------------------------------------------------------
   43:         
   44:         if self.__size == 0:
   45:             newNode = Node(value)
   46:             self.__sentinel.next = newNode
-  47:             newNode.prev = self.__sentinel
+  47:             newNode.prev = __sentinel
   48:             self.__tail = newNode
   49:             self.__size += 1
   50:         else:
   51:             newNode = Node(value)
--------------------------------------------------------------------------------
[3.84584 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_24

def test_case_24():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        var_0 = queue_0.getHead()
        int_2 = 0
        node_3 = module_0.Node(int_2)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_0.removeAtHead()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_3 = 0
        node_5 = module_0.Node(int_3)
        none_type_2 = None
        node_6 = module_0.Node(none_type_2)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_1.getSize()
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
>       none_type_3 = queue_3.enqueue(queue_3)

RANDOM/test_queue3_RANDOM.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:172: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9b4f100>
value = <queue3.Queue object at 0x7f96e9b4dea0>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:47: NameError
   - [# 180] SVD queue3: 
--------------------------------------------------------------------------------
   44:         if self.__size == 0:
   45:             newNode = Node(value)
   46:             self.__sentinel.next = newNode
   47:             newNode.prev = self.__sentinel
-  48:             self.__tail = newNode
+  48:             __tail = newNode
   49:             self.__size += 1
   50:         else:
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 181] SVD queue3: 
--------------------------------------------------------------------------------
   45:             newNode = Node(value)
   46:             self.__sentinel.next = newNode
   47:             newNode.prev = self.__sentinel
   48:             self.__tail = newNode
-  49:             self.__size += 1
+  49:             __size += 1
   50:         else:
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
   53:             newNode.prev = self.__tail
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 182] SVD queue3: 
--------------------------------------------------------------------------------
   48:             self.__tail = newNode
   49:             self.__size += 1
   50:         else:
   51:             newNode = Node(value)
-  52:             self.__tail.next = newNode
+  52:             __tail.next = newNode
   53:             newNode.prev = self.__tail
   54:             self.__tail = newNode
   55:             self.__size += 1
   56:     
--------------------------------------------------------------------------------
[3.97082 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_170

def test_case_170():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        var_0 = queue_0.dequeue()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = doubly_linked_list_1.__str__()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        str_2 = queue_2.__str__()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_1 = queue_3.dequeue()
        int_0 = 0
        node_1 = module_0.Node(int_0)
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        none_type_2 = doubly_linked_list_4.addAtHead(queue_4)
        assert len(doubly_linked_list_4) == 1
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_5.removeAtHead()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        queue_6 = module_0.Queue()
        bool_6 = queue_6.isEmpty()
        assert bool_6 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        none_type_4 = None
        node_5 = module_0.Node(none_type_4)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        int_3 = doubly_linked_list_6.getSize()
        queue_7 = module_0.Queue()
>       none_type_5 = doubly_linked_list_1.addAtTail(var_2)

RANDOM/test_queue3_RANDOM.py:6047: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e7543640>, value = None

>   ???
E   NameError: name '_DoublyLinkedList__tail' is not defined

queue3:52: NameError
   - [# 183] SVD queue3: 
--------------------------------------------------------------------------------
   49:             self.__size += 1
   50:         else:
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
-  53:             newNode.prev = self.__tail
+  53:             newNode.prev = __tail
   54:             self.__tail = newNode
   55:             self.__size += 1
   56:     
   57:     def removeAtHead(self):
--------------------------------------------------------------------------------
[3.89496 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_170

def test_case_170():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        var_0 = queue_0.dequeue()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = doubly_linked_list_1.__str__()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        str_2 = queue_2.__str__()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_1 = queue_3.dequeue()
        int_0 = 0
        node_1 = module_0.Node(int_0)
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        none_type_2 = doubly_linked_list_4.addAtHead(queue_4)
        assert len(doubly_linked_list_4) == 1
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_5.removeAtHead()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        queue_6 = module_0.Queue()
        bool_6 = queue_6.isEmpty()
        assert bool_6 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        none_type_4 = None
        node_5 = module_0.Node(none_type_4)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        int_3 = doubly_linked_list_6.getSize()
        queue_7 = module_0.Queue()
>       none_type_5 = doubly_linked_list_1.addAtTail(var_2)

RANDOM/test_queue3_RANDOM.py:6047: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9269ff0>, value = None

>   ???
E   NameError: name '_DoublyLinkedList__tail' is not defined

queue3:53: NameError
   - [# 184] SVD queue3: 
--------------------------------------------------------------------------------
   50:         else:
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
   53:             newNode.prev = self.__tail
-  54:             self.__tail = newNode
+  54:             __tail = newNode
   55:             self.__size += 1
   56:     
   57:     def removeAtHead(self):
   58:         
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 185] SVD queue3: 
--------------------------------------------------------------------------------
   51:             newNode = Node(value)
   52:             self.__tail.next = newNode
   53:             newNode.prev = self.__tail
   54:             self.__tail = newNode
-  55:             self.__size += 1
+  55:             __size += 1
   56:     
   57:     def removeAtHead(self):
   58:         
   59:         '''Remove node at head end.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 186] SVD queue3: 
--------------------------------------------------------------------------------
   57:     def removeAtHead(self):
   58:         
   59:         '''Remove node at head end.'''
   60:         
-  61:         if self.__size == 0:
+  61:         if __size == 0:
   62:             return None
   63:         elif self.__size == 1:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
--------------------------------------------------------------------------------
[3.92991 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_4

def test_case_4():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        var_0 = queue_0.getHead()
        int_3 = 0
        node_5 = module_0.Node(int_3)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
>       var_1 = queue_1.dequeue()

RANDOM/test_queue3_RANDOM.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:166: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e950dea0>

>   ???
E   NameError: name '_DoublyLinkedList__size' is not defined

queue3:61: NameError
   - [# 187] SVD queue3: 
--------------------------------------------------------------------------------
   59:         '''Remove node at head end.'''
   60:         
   61:         if self.__size == 0:
   62:             return None
-  63:         elif self.__size == 1:
+  63:         elif __size == 1:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
   66:             nodeToRemove.prev = None
   67:             self.__size -= 1
--------------------------------------------------------------------------------
[4.06359 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_208

def test_case_208():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = queue_0.dequeue()
        int_0 = doubly_linked_list_1.getSize()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        var_1 = queue_1.dequeue()
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_4.__len__()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_2 = None
        node_4 = module_0.Node(none_type_2)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_6.removeAtHead()
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        none_type_3 = doubly_linked_list_7.addAtHead(queue_5)
        assert len(doubly_linked_list_7) == 1
        str_1 = doubly_linked_list_7.__str__()
>       var_4 = doubly_linked_list_7.removeAtHead()

RANDOM/test_queue3_RANDOM.py:7584: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e75462f0>

>   ???
E   NameError: name '_DoublyLinkedList__size' is not defined

queue3:63: NameError
   - [# 188] SVD queue3: 
--------------------------------------------------------------------------------
   60:         
   61:         if self.__size == 0:
   62:             return None
   63:         elif self.__size == 1:
-  64:             nodeToRemove = self.__head.next
+  64:             nodeToRemove = __head.next
   65:             self.__sentinel.next = None
   66:             nodeToRemove.prev = None
   67:             self.__size -= 1
   68:             return nodeToRemove
--------------------------------------------------------------------------------
[4.02339 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_208

def test_case_208():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = queue_0.dequeue()
        int_0 = doubly_linked_list_1.getSize()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        var_1 = queue_1.dequeue()
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_4.__len__()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_2 = None
        node_4 = module_0.Node(none_type_2)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_6.removeAtHead()
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        none_type_3 = doubly_linked_list_7.addAtHead(queue_5)
        assert len(doubly_linked_list_7) == 1
        str_1 = doubly_linked_list_7.__str__()
>       var_4 = doubly_linked_list_7.removeAtHead()

RANDOM/test_queue3_RANDOM.py:7584: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e75442b0>

>   ???
E   NameError: name '_DoublyLinkedList__head' is not defined

queue3:64: NameError
   - [# 189] SVD queue3: 
--------------------------------------------------------------------------------
   61:         if self.__size == 0:
   62:             return None
   63:         elif self.__size == 1:
   64:             nodeToRemove = self.__head.next
-  65:             self.__sentinel.next = None
+  65:             __sentinel.next = None
   66:             nodeToRemove.prev = None
   67:             self.__size -= 1
   68:             return nodeToRemove
   69:         else:
--------------------------------------------------------------------------------
[4.13523 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_208

def test_case_208():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        var_0 = queue_0.dequeue()
        int_0 = doubly_linked_list_1.getSize()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_2.addAtHead(queue_1)
        assert len(doubly_linked_list_2) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        var_1 = queue_1.dequeue()
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_1 = None
        node_2 = module_0.Node(none_type_1)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        int_2 = doubly_linked_list_4.__len__()
        queue_3 = module_0.Queue()
        bool_3 = queue_3.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_2 = None
        node_4 = module_0.Node(none_type_2)
        doubly_linked_list_6 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_6.removeAtHead()
        queue_4 = module_0.Queue()
        bool_4 = queue_4.isEmpty()
        assert bool_4 is True
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_7 = module_0.DoublyLinkedList()
        none_type_3 = doubly_linked_list_7.addAtHead(queue_5)
        assert len(doubly_linked_list_7) == 1
        str_1 = doubly_linked_list_7.__str__()
>       var_4 = doubly_linked_list_7.removeAtHead()

RANDOM/test_queue3_RANDOM.py:7584: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9049390>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:65: NameError
   - [# 190] SVD queue3: 
--------------------------------------------------------------------------------
   63:         elif self.__size == 1:
   64:             nodeToRemove = self.__head.next
   65:             self.__sentinel.next = None
   66:             nodeToRemove.prev = None
-  67:             self.__size -= 1
+  67:             __size -= 1
   68:             return nodeToRemove
   69:         else:
   70:             nodeToRemove = self.__head.next
   71:             nextNode = nodeToRemove.next
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 191] SVD queue3: 
--------------------------------------------------------------------------------
   66:             nodeToRemove.prev = None
   67:             self.__size -= 1
   68:             return nodeToRemove
   69:         else:
-  70:             nodeToRemove = self.__head.next
+  70:             nodeToRemove = __head.next
   71:             nextNode = nodeToRemove.next
   72:             self.__sentinel.next = nextNode
   73:             nextNode.prev = self.__sentinel
   74:             nodeToRemove.next = None
--------------------------------------------------------------------------------
[4.97104 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
>       var_9 = doubly_linked_list_1.removeAtHead()

RANDOM/test_queue3_RANDOM.py:48710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9222290>

>   ???
E   NameError: name '_DoublyLinkedList__head' is not defined

queue3:70: NameError
   - [# 192] SVD queue3: 
--------------------------------------------------------------------------------
   68:             return nodeToRemove
   69:         else:
   70:             nodeToRemove = self.__head.next
   71:             nextNode = nodeToRemove.next
-  72:             self.__sentinel.next = nextNode
+  72:             __sentinel.next = nextNode
   73:             nextNode.prev = self.__sentinel
   74:             nodeToRemove.next = None
   75:             nodeToRemove.prev = None
   76:             self.__size -= 1
--------------------------------------------------------------------------------
[5.09759 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
>       var_9 = doubly_linked_list_1.removeAtHead()

RANDOM/test_queue3_RANDOM.py:48710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e91ca0e0>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:72: NameError
   - [# 193] SVD queue3: 
--------------------------------------------------------------------------------
   69:         else:
   70:             nodeToRemove = self.__head.next
   71:             nextNode = nodeToRemove.next
   72:             self.__sentinel.next = nextNode
-  73:             nextNode.prev = self.__sentinel
+  73:             nextNode.prev = __sentinel
   74:             nodeToRemove.next = None
   75:             nodeToRemove.prev = None
   76:             self.__size -= 1
   77:             return nodeToRemove
--------------------------------------------------------------------------------
[5.02267 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_1189

def test_case_1189():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        str_0 = queue_0.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_0)
        bool_1 = queue_0.isEmpty()
        assert bool_1 is True
        queue_1 = module_0.Queue()
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_1 = queue_1.__str__()
        node_1 = module_0.Node(queue_1)
        bool_3 = queue_1.isEmpty()
        assert bool_3 is True
        none_type_2 = doubly_linked_list_1.addAtTail(str_1)
        assert len(doubly_linked_list_1) == 2
        queue_2 = module_0.Queue()
        var_0 = queue_2.getTail()
        bool_4 = queue_2.isEmpty()
        assert bool_4 is True
        var_1 = queue_2.getTail()
        int_0 = 0
        node_2 = module_0.Node(int_0)
        none_type_3 = None
        node_3 = module_0.Node(none_type_3)
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_2.removeAtHead()
        node_4 = module_0.Node(none_type_3)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_3.getTail()
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        var_4 = queue_3.getTail()
        var_5 = queue_3.dequeue()
        str_2 = queue_3.__str__()
        queue_4 = module_0.Queue()
        var_6 = queue_4.getTail()
        var_7 = queue_4.dequeue()
        queue_5 = module_0.Queue()
        bool_5 = queue_5.isEmpty()
        assert bool_5 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_5.addAtHead(queue_5)
        assert len(doubly_linked_list_5) == 1
        str_3 = doubly_linked_list_5.__str__()
        var_8 = queue_5.getTail()
>       var_9 = doubly_linked_list_1.removeAtHead()

RANDOM/test_queue3_RANDOM.py:48710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e955a320>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:73: NameError
   - [# 194] SVD queue3: 
--------------------------------------------------------------------------------
   72:             self.__sentinel.next = nextNode
   73:             nextNode.prev = self.__sentinel
   74:             nodeToRemove.next = None
   75:             nodeToRemove.prev = None
-  76:             self.__size -= 1
+  76:             __size -= 1
   77:             return nodeToRemove
   78:     
   79:     def removeAtTail(self):
   80:         
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 195] SVD queue3: 
--------------------------------------------------------------------------------
   79:     def removeAtTail(self):
   80:         
   81:         '''Remove node at tail end.'''
   82:         
-  83:         if self.__size == 0:
+  83:         if __size == 0:
   84:             return None
   85:         elif self.__size == 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
--------------------------------------------------------------------------------
[3.87979 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_14

def test_case_14():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_1 = doubly_linked_list_0.getSize()
        assert int_1 == 0
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
>       var_0 = doubly_linked_list_1.removeAtTail()

RANDOM/test_queue3_RANDOM.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e7541780>

>   ???
E   NameError: name '_DoublyLinkedList__size' is not defined

queue3:83: NameError
   - [# 196] SVD queue3: 
--------------------------------------------------------------------------------
   81:         '''Remove node at tail end.'''
   82:         
   83:         if self.__size == 0:
   84:             return None
-  85:         elif self.__size == 1:
+  85:         elif __size == 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
--------------------------------------------------------------------------------
[3.87879 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_138

def test_case_138():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_1.addAtHead(queue_2)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_2)
        var_1 = queue_2.dequeue()
>       var_2 = doubly_linked_list_1.removeAtTail()

RANDOM/test_queue3_RANDOM.py:4804: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9b75cc0>

>   ???
E   NameError: name '_DoublyLinkedList__size' is not defined

queue3:85: NameError
   - [# 197] SVD queue3: 
--------------------------------------------------------------------------------
   82:         
   83:         if self.__size == 0:
   84:             return None
   85:         elif self.__size == 1:
-  86:             nodeToRemove = self.__tail
+  86:             nodeToRemove = __tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
   90:             self.__tail = self.__sentinel
--------------------------------------------------------------------------------
[3.89143 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_138

def test_case_138():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_1.addAtHead(queue_2)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_2)
        var_1 = queue_2.dequeue()
>       var_2 = doubly_linked_list_1.removeAtTail()

RANDOM/test_queue3_RANDOM.py:4804: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e757c430>

>   ???
E   NameError: name '_DoublyLinkedList__tail' is not defined

queue3:86: NameError
   - [# 198] SVD queue3: 
--------------------------------------------------------------------------------
   84:             return None
   85:         elif self.__size == 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
-  88:             self.__sentinel.next = None
+  88:             __sentinel.next = None
   89:             self.__head = self.__sentinel
   90:             self.__tail = self.__sentinel
   91:             self.__size -= 1
   92:             return nodeToRemove
--------------------------------------------------------------------------------
[3.80391 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_138

def test_case_138():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_1.addAtHead(queue_2)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_2)
        var_1 = queue_2.dequeue()
>       var_2 = doubly_linked_list_1.removeAtTail()

RANDOM/test_queue3_RANDOM.py:4804: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e7510430>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:88: NameError
   - [# 199] SVD queue3: 
--------------------------------------------------------------------------------
   85:         elif self.__size == 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
-  89:             self.__head = self.__sentinel
+  89:             __head = self.__sentinel
   90:             self.__tail = self.__sentinel
   91:             self.__size -= 1
   92:             return nodeToRemove
   93:         else:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 200] SVD queue3: 
--------------------------------------------------------------------------------
   85:         elif self.__size == 1:
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
-  89:             self.__head = self.__sentinel
+  89:             self.__head = __sentinel
   90:             self.__tail = self.__sentinel
   91:             self.__size -= 1
   92:             return nodeToRemove
   93:         else:
--------------------------------------------------------------------------------
[3.92399 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_138

def test_case_138():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_1.addAtHead(queue_2)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_2)
        var_1 = queue_2.dequeue()
>       var_2 = doubly_linked_list_1.removeAtTail()

RANDOM/test_queue3_RANDOM.py:4804: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9312920>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:89: NameError
   - [# 201] SVD queue3: 
--------------------------------------------------------------------------------
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
-  90:             self.__tail = self.__sentinel
+  90:             __tail = self.__sentinel
   91:             self.__size -= 1
   92:             return nodeToRemove
   93:         else:
   94:             nodeToRemove = self.__tail
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 202] SVD queue3: 
--------------------------------------------------------------------------------
   86:             nodeToRemove = self.__tail
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
-  90:             self.__tail = self.__sentinel
+  90:             self.__tail = __sentinel
   91:             self.__size -= 1
   92:             return nodeToRemove
   93:         else:
   94:             nodeToRemove = self.__tail
--------------------------------------------------------------------------------
[3.99343 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_138

def test_case_138():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = queue_1.dequeue()
        queue_2 = module_0.Queue()
        bool_2 = queue_2.isEmpty()
        assert bool_2 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_0 = doubly_linked_list_1.addAtHead(queue_2)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_2.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_2)
        var_1 = queue_2.dequeue()
>       var_2 = doubly_linked_list_1.removeAtTail()

RANDOM/test_queue3_RANDOM.py:4804: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e93121a0>

>   ???
E   NameError: name '_DoublyLinkedList__sentinel' is not defined

queue3:90: NameError
   - [# 203] SVD queue3: 
--------------------------------------------------------------------------------
   87:             nodeToRemove.prev = None
   88:             self.__sentinel.next = None
   89:             self.__head = self.__sentinel
   90:             self.__tail = self.__sentinel
-  91:             self.__size -= 1
+  91:             __size -= 1
   92:             return nodeToRemove
   93:         else:
   94:             nodeToRemove = self.__tail
   95:             previous = nodeToRemove.prev
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 204] SVD queue3: 
--------------------------------------------------------------------------------
   90:             self.__tail = self.__sentinel
   91:             self.__size -= 1
   92:             return nodeToRemove
   93:         else:
-  94:             nodeToRemove = self.__tail
+  94:             nodeToRemove = __tail
   95:             previous = nodeToRemove.prev
   96:             nodeToRemove.prev = None
   97:             previous.next = None
   98:             self.__tail = previous
--------------------------------------------------------------------------------
[2.71319 s] survived
   - [# 205] SVD queue3: 
--------------------------------------------------------------------------------
   94:             nodeToRemove = self.__tail
   95:             previous = nodeToRemove.prev
   96:             nodeToRemove.prev = None
   97:             previous.next = None
-  98:             self.__tail = previous
+  98:             __tail = previous
   99:             self.__size -= 1
  100:             return nodeToRemove
  101:     
  102:     def isEmpty(self) -> bool:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 206] SVD queue3: 
--------------------------------------------------------------------------------
   95:             previous = nodeToRemove.prev
   96:             nodeToRemove.prev = None
   97:             previous.next = None
   98:             self.__tail = previous
-  99:             self.__size -= 1
+  99:             __size -= 1
  100:             return nodeToRemove
  101:     
  102:     def isEmpty(self) -> bool:
  103:         
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 207] SVD queue3: 
--------------------------------------------------------------------------------
  102:     def isEmpty(self) -> bool:
  103:         
  104:         '''Check if linkedlist is empty'''
  105:         
- 106:         return True if self.__size == 0 else False
+ 106:         return True if __size == 0 else False
  107:     
  108:     def getHead(self):
  109:         
  110:         '''Get value at the front end of the list.'''
--------------------------------------------------------------------------------
[3.77856 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
>       bool_0 = queue_0.isEmpty()

RANDOM/test_queue3_RANDOM.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:184: in isEmpty
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e93337f0>

>   ???
E   NameError: name '_DoublyLinkedList__size' is not defined

queue3:106: NameError
   - [# 208] SVD queue3: 
--------------------------------------------------------------------------------
  108:     def getHead(self):
  109:         
  110:         '''Get value at the front end of the list.'''
  111:         
- 112:         if self.__size == 0:
+ 112:         if __size == 0:
  113:             return None
  114:         else:
  115:             return self.__head.next.value
  116:     
--------------------------------------------------------------------------------
[3.88226 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_3

def test_case_3():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
>       var_0 = queue_0.getHead()

RANDOM/test_queue3_RANDOM.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:154: in getHead
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e935a9e0>

>   ???
E   NameError: name '_DoublyLinkedList__size' is not defined

queue3:112: NameError
   - [# 209] SVD queue3: 
--------------------------------------------------------------------------------
  111:         
  112:         if self.__size == 0:
  113:             return None
  114:         else:
- 115:             return self.__head.next.value
+ 115:             return __head.next.value
  116:     
  117:     def getTail(self) -> T:
  118:         
  119:         '''Get value at the tail of the list.'''
--------------------------------------------------------------------------------
[4.07573 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_260

def test_case_260():
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        none_type_0 = doubly_linked_list_0.addAtHead(queue_0)
        assert len(doubly_linked_list_0) == 1
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_1 = doubly_linked_list_1.addAtHead(queue_1)
        assert len(doubly_linked_list_1) == 1
        str_0 = queue_1.__str__()
        assert str_0 == '[]'
        node_0 = module_0.Node(queue_1)
        bool_2 = queue_1.isEmpty()
        assert bool_2 is True
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_0 = doubly_linked_list_2.getTail()
        str_1 = var_0.__str__()
        queue_2 = module_0.Queue()
        int_0 = 0
        node_1 = module_0.Node(int_0)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        queue_3 = module_0.Queue()
        var_1 = queue_3.getTail()
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
>       var_2 = doubly_linked_list_1.getHead()

RANDOM/test_queue3_RANDOM.py:9252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e7541cf0>

>   ???
E   NameError: name '_DoublyLinkedList__head' is not defined

queue3:115: NameError
   - [# 210] SVD queue3: 
--------------------------------------------------------------------------------
  117:     def getTail(self) -> T:
  118:         
  119:         '''Get value at the tail of the list.'''
  120:         
- 121:         return self.__tail.value
+ 121:         return __tail.value
  122:     
  123:     def getSize(self) -> int:
  124:         
  125:         '''Get length of the linked list.'''
--------------------------------------------------------------------------------
[3.84380 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_18

def test_case_18():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        queue_0 = module_0.Queue()
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       var_0 = queue_0.getTail()

RANDOM/test_queue3_RANDOM.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:160: in getTail
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e91a3ee0>

>   ???
E   NameError: name '_DoublyLinkedList__tail' is not defined

queue3:121: NameError
   - [# 211] SVD queue3: 
--------------------------------------------------------------------------------
  123:     def getSize(self) -> int:
  124:         
  125:         '''Get length of the linked list.'''
  126:         
- 127:         return self.__size
+ 127:         return __size
  128:     
  129:     def __len__(self) -> int:
  130:         
  131:         '''Get length of the linked list.'''
--------------------------------------------------------------------------------
[3.84386 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_9

def test_case_9():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        var_0 = queue_0.getHead()
        int_3 = 0
        node_5 = module_0.Node(int_3)
        none_type_2 = None
        node_6 = module_0.Node(none_type_2)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_0.removeAtHead()
>       int_4 = doubly_linked_list_0.getSize()

RANDOM/test_queue3_RANDOM.py:166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9336e00>

>   ???
E   NameError: name '_DoublyLinkedList__size' is not defined

queue3:127: NameError
   - [# 212] SVD queue3: 
--------------------------------------------------------------------------------
  129:     def __len__(self) -> int:
  130:         
  131:         '''Get length of the linked list.'''
  132:         
- 133:         return self.__size
+ 133:         return __size
  134:     
  135:     def __str__(self) -> str:
  136:         
  137:         '''Return String representation of linkedlist values.'''
--------------------------------------------------------------------------------
[3.69684 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_5

def test_case_5():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
>       assert len(doubly_linked_list_0) == 0

RANDOM/test_queue3_RANDOM.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e9c6c370>

>   ???
E   NameError: name '_DoublyLinkedList__size' is not defined

queue3:133: NameError
   - [# 213] SVD queue3: 
--------------------------------------------------------------------------------
  136:         
  137:         '''Return String representation of linkedlist values.'''
  138:         
  139:         arr = []
- 140:         current = self.__head.next
+ 140:         current = __head.next
  141:         while current:
  142:             arr.append(current.value)
  143:             current = current.next
  144:         return str(arr)
--------------------------------------------------------------------------------
[4.01373 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_28

def test_case_28():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = doubly_linked_list_1.getSize()
        assert int_2 == 0
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_4 = 0
        node_5 = module_0.Node(int_4)
        var_0 = queue_1.getHead()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_2 = None
        node_7 = module_0.Node(none_type_2)
        int_6 = 0
        node_8 = module_0.Node(int_6)
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_7 = 0
        node_9 = module_0.Node(int_7)
        none_type_3 = None
        node_10 = module_0.Node(none_type_3)
        int_8 = 0
        node_11 = module_0.Node(int_8)
        none_type_4 = None
        node_12 = module_0.Node(none_type_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        int_9 = 0
        node_13 = module_0.Node(int_9)
        none_type_5 = None
        node_14 = module_0.Node(none_type_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        queue_5 = module_0.Queue()
>       str_0 = queue_2.__str__()

RANDOM/test_queue3_RANDOM.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
queue3:190: in __str__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.DoublyLinkedList object at 0x7f96e926a830>

>   ???
E   NameError: name '_DoublyLinkedList__head' is not defined

queue3:140: NameError
   - [# 214] SVD queue3: 
--------------------------------------------------------------------------------
  144:         return str(arr)
  145: 
  146: class Queue:
  147:     def __init__(self):
- 148:         self.__queue = DoublyLinkedList()
+ 148:         __queue = DoublyLinkedList()
  149:     
  150:     def getHead(self) -> T:
  151:         
  152:         '''View first element in the queue.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 215] SVD queue3: 
--------------------------------------------------------------------------------
  150:     def getHead(self) -> T:
  151:         
  152:         '''View first element in the queue.'''
  153:         
- 154:         return self.__queue.getHead()
+ 154:         return __queue.getHead()
  155:     
  156:     def getTail(self):
  157:         
  158:         '''View last element in the queue.'''
--------------------------------------------------------------------------------
[3.91603 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_3

def test_case_3():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
>       var_0 = queue_0.getHead()

RANDOM/test_queue3_RANDOM.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.Queue object at 0x7f96e9360130>

>   ???
E   NameError: name '_Queue__queue' is not defined

queue3:154: NameError
   - [# 216] SVD queue3: 
--------------------------------------------------------------------------------
  156:     def getTail(self):
  157:         
  158:         '''View last element in the queue.'''
  159:         
- 160:         return self.__queue.getTail()
+ 160:         return __queue.getTail()
  161:     
  162:     def dequeue(self) -> T:
  163:         
  164:         '''Remove element from the queue.'''
--------------------------------------------------------------------------------
[3.86435 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_18

def test_case_18():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        queue_0 = module_0.Queue()
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
>       var_0 = queue_0.getTail()

RANDOM/test_queue3_RANDOM.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.Queue object at 0x7f96e9269030>

>   ???
E   NameError: name '_Queue__queue' is not defined

queue3:160: NameError
   - [# 217] SVD queue3: 
--------------------------------------------------------------------------------
  162:     def dequeue(self) -> T:
  163:         
  164:         '''Remove element from the queue.'''
  165:         
- 166:         return self.__queue.removeAtHead()
+ 166:         return __queue.removeAtHead()
  167:     
  168:     def enqueue(self, value: T) -> None:
  169:         
  170:         '''Add element to queue.'''
--------------------------------------------------------------------------------
[3.73411 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_4

def test_case_4():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_2 = 0
        node_4 = module_0.Node(int_2)
        var_0 = queue_0.getHead()
        int_3 = 0
        node_5 = module_0.Node(int_3)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
>       var_1 = queue_1.dequeue()

RANDOM/test_queue3_RANDOM.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.Queue object at 0x7f96ea13cfa0>

>   ???
E   NameError: name '_Queue__queue' is not defined

queue3:166: NameError
   - [# 218] SVD queue3: 
--------------------------------------------------------------------------------
  168:     def enqueue(self, value: T) -> None:
  169:         
  170:         '''Add element to queue.'''
  171:         
- 172:         self.__queue.addAtTail(value)
+ 172:         __queue.addAtTail(value)
  173:     
  174:     def getSize(self) -> int:
  175:         
  176:         '''Get size of the queue.'''
--------------------------------------------------------------------------------
[3.84723 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_24

def test_case_24():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        var_0 = queue_0.getHead()
        int_2 = 0
        node_3 = module_0.Node(int_2)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        var_1 = doubly_linked_list_0.removeAtHead()
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_3 = 0
        node_5 = module_0.Node(int_3)
        none_type_2 = None
        node_6 = module_0.Node(none_type_2)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        int_4 = doubly_linked_list_1.getSize()
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        doubly_linked_list_3 = module_0.DoublyLinkedList()
>       none_type_3 = queue_3.enqueue(queue_3)

RANDOM/test_queue3_RANDOM.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.Queue object at 0x7f96e9332440>
value = <queue3.Queue object at 0x7f96e9332440>

>   ???
E   NameError: name '_Queue__queue' is not defined

queue3:172: NameError
   - [# 219] SVD queue3: 
--------------------------------------------------------------------------------
  174:     def getSize(self) -> int:
  175:         
  176:         '''Get size of the queue.'''
  177:         
- 178:         return self.__queue.getSize()
+ 178:         return __queue.getSize()
  179:     
  180:     def isEmpty(self) -> bool:
  181:         
  182:         '''Check if queue is empty.'''
--------------------------------------------------------------------------------
[3.85726 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_23

def test_case_23():
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        var_0 = queue_0.getHead()
        queue_1 = module_0.Queue()
        int_2 = 0
        node_3 = module_0.Node(int_2)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        int_3 = 0
        node_5 = module_0.Node(int_3)
        queue_2 = module_0.Queue()
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_4 = 0
        node_6 = module_0.Node(int_4)
>       int_5 = queue_0.getSize()

RANDOM/test_queue3_RANDOM.py:483: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.Queue object at 0x7f96e950f280>

>   ???
E   NameError: name '_Queue__queue' is not defined

queue3:178: NameError
   - [# 220] SVD queue3: 
--------------------------------------------------------------------------------
  180:     def isEmpty(self) -> bool:
  181:         
  182:         '''Check if queue is empty.'''
  183:         
- 184:         return self.__queue.isEmpty()
+ 184:         return __queue.isEmpty()
  185:     
  186:     def __str__(self) -> str:
  187:         
  188:         '''Get string representation of the queue.'''
--------------------------------------------------------------------------------
[3.97616 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_2

def test_case_2():
        queue_0 = module_0.Queue()
>       bool_0 = queue_0.isEmpty()

RANDOM/test_queue3_RANDOM.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.Queue object at 0x7f96e904b670>

>   ???
E   NameError: name '_Queue__queue' is not defined

queue3:184: NameError
   - [# 221] SVD queue3: 
--------------------------------------------------------------------------------
  186:     def __str__(self) -> str:
  187:         
  188:         '''Get string representation of the queue.'''
  189:         
- 190:         return self.__queue.__str__()
+ 190:         return __queue.__str__()
  191: 
  192: 
  193: if __name__ == '__main__':
  194:     pass
--------------------------------------------------------------------------------
[3.93841 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_28

def test_case_28():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_1 = module_0.Node(int_1)
        none_type_0 = None
        node_2 = module_0.Node(none_type_0)
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_1) == 0
        int_2 = doubly_linked_list_1.getSize()
        assert int_2 == 0
        int_3 = 0
        node_3 = module_0.Node(int_3)
        none_type_1 = None
        node_4 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        bool_1 = queue_1.isEmpty()
        assert bool_1 is True
        int_4 = 0
        node_5 = module_0.Node(int_4)
        var_0 = queue_1.getHead()
        int_5 = 0
        node_6 = module_0.Node(int_5)
        none_type_2 = None
        node_7 = module_0.Node(none_type_2)
        int_6 = 0
        node_8 = module_0.Node(int_6)
        queue_2 = module_0.Queue()
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        var_1 = queue_2.getTail()
        int_7 = 0
        node_9 = module_0.Node(int_7)
        none_type_3 = None
        node_10 = module_0.Node(none_type_3)
        int_8 = 0
        node_11 = module_0.Node(int_8)
        none_type_4 = None
        node_12 = module_0.Node(none_type_4)
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        var_2 = doubly_linked_list_3.removeAtHead()
        int_9 = 0
        node_13 = module_0.Node(int_9)
        none_type_5 = None
        node_14 = module_0.Node(none_type_5)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        bool_3 = queue_4.isEmpty()
        assert bool_3 is True
        doubly_linked_list_5 = module_0.DoublyLinkedList()
        queue_5 = module_0.Queue()
>       str_0 = queue_2.__str__()

RANDOM/test_queue3_RANDOM.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <queue3.Queue object at 0x7f96e9330fa0>

>   ???
E   NameError: name '_Queue__queue' is not defined

queue3:190: NameError
   - [# 222] ZIL queue3: 
--------------------------------------------------------------------------------
  138:         
  139:         arr = []
  140:         current = self.__head.next
  141:         while current:
- 142:             arr.append(current.value)
- 143:             current = current.next
+ 142:             break
+ 143:         
  144:         return str(arr)
  145: 
  146: class Queue:
  147:     def __init__(self):
--------------------------------------------------------------------------------
[4.37532 s] killed by RANDOM/test_queue3_RANDOM.py::test_case_554

def test_case_554():
        int_0 = 0
        node_0 = module_0.Node(int_0)
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        doubly_linked_list_0 = module_0.DoublyLinkedList()
        assert len(doubly_linked_list_0) == 0
        var_0 = doubly_linked_list_0.removeAtHead()
        queue_0 = module_0.Queue()
        bool_0 = queue_0.isEmpty()
        assert bool_0 is True
        int_1 = 0
        node_2 = module_0.Node(int_1)
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        queue_1 = module_0.Queue()
        doubly_linked_list_1 = module_0.DoublyLinkedList()
        none_type_2 = doubly_linked_list_1.addAtTail(none_type_1)
        assert len(doubly_linked_list_1) == 1
        doubly_linked_list_2 = module_0.DoublyLinkedList()
        bool_1 = doubly_linked_list_2.isEmpty()
        assert bool_1 is True
        none_type_3 = None
        doubly_linked_list_3 = module_0.DoublyLinkedList()
        none_type_4 = doubly_linked_list_3.addAtHead(none_type_3)
        assert len(doubly_linked_list_3) == 1
        int_2 = 0
        node_4 = module_0.Node(int_2)
        none_type_5 = None
        node_5 = module_0.Node(none_type_5)
        queue_2 = module_0.Queue()
        var_1 = queue_2.getTail()
        queue_3 = module_0.Queue()
        bool_2 = queue_3.isEmpty()
        assert bool_2 is True
        queue_4 = module_0.Queue()
        var_2 = queue_4.dequeue()
        str_0 = var_2.__str__()
        queue_5 = module_0.Queue()
        int_3 = 0
        node_6 = module_0.Node(int_3)
        none_type_6 = None
        node_7 = module_0.Node(none_type_6)
        doubly_linked_list_4 = module_0.DoublyLinkedList()
        var_3 = doubly_linked_list_4.removeAtHead()
        str_1 = doubly_linked_list_1.__str__()
>       assert str_1 == '[None]'
E       AssertionError

RANDOM/test_queue3_RANDOM.py:21005: AssertionError
[*] Mutation score [823.00126 s]: 77.5%
   - all: 222
   - killed: 137 (61.7%)
   - survived: 40 (18.0%)
   - incompetent: 44 (19.8%)
   - timeout: 1 (0.5%)
