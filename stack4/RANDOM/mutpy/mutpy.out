[*] Start mutation process:
   - targets: stack4.py
   - tests: ./RANDOM
[*] 2259 tests passed:
   - test_stack4_RANDOM [2.82991 s]
[*] Start mutants generation and execution:
   - [#   1] AOD stack4: 
--------------------------------------------------------------------------------
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
-  86:         return display[:-2] + ')'
+  86:         return display[:2] + ')'
   87: 
   88: 
   89: class Stack(object):
   90:     '''Implementation of Stack.
--------------------------------------------------------------------------------
[4.68960 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_20

def test_case_20():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_1)
        stack_0 = module_0.Stack()
        none_type_3 = None
        node_2 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_2 = module_0.LinkedList(none_type_4)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        node_5 = module_0.Node(none_type_7)
        none_type_8 = None
        linked_list_6 = module_0.LinkedList(none_type_8)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        var_5 = linked_list_6.remove(node_5)
        var_6 = linked_list_6.size()
        assert var_6 == 0
        var_7 = linked_list_3.display()
>       assert var_7 == ')'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:493: AssertionError
   - [#   2] AOR stack4: 
--------------------------------------------------------------------------------
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
   82:         display = '('
   83:         while curr:
-  84:             display += str(curr.data) + ', '
+  84:             display += str(curr.data) - ', '
   85:             curr = curr.next
   86:         return display[:-2] + ')'
   87: 
   88: 
--------------------------------------------------------------------------------
[4.65822 s] incompetent

TypeError: stack4:84: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#   3] AOR stack4: 
--------------------------------------------------------------------------------
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
-  86:         return display[:-2] + ')'
+  86:         return display[:+2] + ')'
   87: 
   88: 
   89: class Stack(object):
   90:     '''Implementation of Stack.
--------------------------------------------------------------------------------
[4.61271 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_20

def test_case_20():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_1)
        stack_0 = module_0.Stack()
        none_type_3 = None
        node_2 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_2 = module_0.LinkedList(none_type_4)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        node_5 = module_0.Node(none_type_7)
        none_type_8 = None
        linked_list_6 = module_0.LinkedList(none_type_8)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        var_5 = linked_list_6.remove(node_5)
        var_6 = linked_list_6.size()
        assert var_6 == 0
        var_7 = linked_list_3.display()
>       assert var_7 == ')'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:493: AssertionError
   - [#   4] AOR stack4: 
--------------------------------------------------------------------------------
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
-  86:         return display[:-2] + ')'
+  86:         return display[:-2] - ')'
   87: 
   88: 
   89: class Stack(object):
   90:     '''Implementation of Stack.
--------------------------------------------------------------------------------
[4.59655 s] incompetent

TypeError: stack4:86: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#   5] ASR stack4: 
--------------------------------------------------------------------------------
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
   42:         old_head = self.head
   43:         self.head = Node(val, old_head)
-  44:         self._length += 1
+  44:         self._length -= 1
   45:     
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
--------------------------------------------------------------------------------
[4.64347 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_65

def test_case_65():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_1 = module_0.LinkedList(none_type_3)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        var_3 = linked_list_1.remove(node_1)
        var_4 = linked_list_1.size()
        assert var_4 == 0
        bytes_0 = b"'\xd2~&\xb0v@Y\x89Z\x7f"
        none_type_4 = None
        node_2 = module_0.Node(bytes_0, none_type_4)
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_2 = module_0.LinkedList(none_type_6)
        assert linked_list_2.head is None
        var_5 = linked_list_2.size()
        assert var_5 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_6 = linked_list_3.push(node_3)
        var_7 = linked_list_3.remove(var_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_8 = linked_list_4.size()
        assert var_8 == 0
        none_type_8 = None
        node_4 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_5 = module_0.LinkedList(none_type_9)
        assert linked_list_5.head is None
        var_9 = linked_list_5.size()
        assert var_9 == 0
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        var_10 = linked_list_6.push(node_4)
        stack_1 = module_0.Stack()
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_7 = module_0.LinkedList(none_type_11)
        assert linked_list_7.head is None
        var_11 = linked_list_7.size()
        assert var_11 == 0
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        var_12 = linked_list_8.push(node_5)
        var_13 = linked_list_8.remove(linked_list_8)
        var_14 = linked_list_3.size()
>       assert var_14 == 1
E       AssertionError

RANDOM/test_stack4_RANDOM.py:2306: AssertionError
   - [#   6] ASR stack4: 
--------------------------------------------------------------------------------
   48:         if not (self.head):
   49:             raise IndexError('Cannot pop from an empty list')
   50:         to_return = self.head
   51:         self.head = self.head.next
-  52:         self._length -= 1
+  52:         self._length += 1
   53:         return to_return.data
   54:     
   55:     def size(self):
   56:         '''Return the length of the list.'''
--------------------------------------------------------------------------------
[5.40160 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_826

def test_case_826():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(var_0)
        var_2 = linked_list_0.search(none_type_1)
        stack_0 = module_0.Stack()
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        float_0 = -2532.0
        none_type_2 = None
        linked_list_2 = module_0.LinkedList(none_type_2)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        var_4 = linked_list_1.size()
        assert var_4 == 0
        float_1 = -2532.0
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.push(float_1)
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        node_2 = module_0.Node(node_1)
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_9 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'stack4.Node'
        var_6 = linked_list_9.size()
        assert var_6 == 18
        linked_list_10 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'stack4.Node'
        node_3 = module_0.Node(var_6)
        assert node_3.data == 18
        float_2 = -484.6
        stack_1 = module_0.Stack(float_2)
        none_type_5 = None
        linked_list_11 = module_0.LinkedList(none_type_5)
        assert linked_list_11.head is None
        var_7 = linked_list_11.search(stack_1)
        node_4 = module_0.Node(var_7, none_type_5)
        var_8 = linked_list_11.display()
        assert var_8 == ')'
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_9 = linked_list_12.size()
        assert var_9 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_10 = linked_list_13.push(node_5)
        var_11 = linked_list_13.remove(var_10)
        stack_2 = module_0.Stack()
        float_3 = -2532.0
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_12 = linked_list_14.push(float_3)
        var_13 = linked_list_14.pop()
        assert var_13 == pytest.approx(-2532.0, abs=0.01, rel=0.01)
        assert linked_list_14.head is None
        none_type_9 = None
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        var_14 = linked_list_15.remove(none_type_9)
        stack_3 = module_0.Stack(linked_list_15)
        linked_list_16 = module_0.LinkedList()
        assert linked_list_16.head is None
        none_type_10 = None
        var_15 = linked_list_16.search(none_type_10)
        none_type_11 = None
        node_6 = module_0.Node(none_type_11)
        linked_list_17 = module_0.LinkedList()
        assert linked_list_17.head is None
        stack_4 = module_0.Stack()
        var_16 = stack_4.push(node_6)
        none_type_12 = None
        node_7 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_18 = module_0.LinkedList(none_type_13)
        assert linked_list_18.head is None
        var_17 = linked_list_18.size()
        assert var_17 == 0
        var_18 = linked_list_18.remove(node_7)
        linked_list_19 = module_0.LinkedList()
        assert linked_list_19.head is None
        var_19 = linked_list_14.size()
>       assert var_19 == 0
E       AssertionError

RANDOM/test_stack4_RANDOM.py:35810: AssertionError
   - [#   7] ASR stack4: 
--------------------------------------------------------------------------------
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
   70:         if (curr and val is self.head.data):
   71:             self.head = self.head.next
-  72:             self._length -= 1
+  72:             self._length += 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
   76:                 self._length -= 1
--------------------------------------------------------------------------------
[2.84166 s] survived
   - [#   8] ASR stack4: 
--------------------------------------------------------------------------------
   72:             self._length -= 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
-  76:                 self._length -= 1
+  76:                 self._length += 1
   77:             curr = curr.next
   78:     
   79:     def display(self):
   80:         '''Display list as a tuple.'''
--------------------------------------------------------------------------------
[2.83392 s] survived
   - [#   9] ASR stack4: 
--------------------------------------------------------------------------------
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
   82:         display = '('
   83:         while curr:
-  84:             display += str(curr.data) + ', '
+  84:             display -= str(curr.data) + ', '
   85:             curr = curr.next
   86:         return display[:-2] + ')'
   87: 
   88: 
--------------------------------------------------------------------------------
[4.80174 s] incompetent

TypeError: stack4:84: TypeError: unsupported operand type(s) for -=: 'str' and 'str'

   - [#  10] CDI stack4: 
--------------------------------------------------------------------------------
    5: 
    6:     Data attribute for data storage and Next for pointer to next node.
    7:     '''
    8:     
-   9:     def __init__(self, data, next_node=None):
-  10:         '''Attribute data and next_node.'''
-  11:         self.data = data
-  12:         self.next = next_node
-  13: 
+   9:     @classmethod
+  10:     def __init__(self, data, next_node=None):
+  11:         '''Attribute data and next_node.'''
+  12:         self.data = data
+  13:         self.next = next_node
   14: 
   15: class LinkedList(object):
   16:     '''Method for linked list.
   17: 
--------------------------------------------------------------------------------
[4.82509 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_79

def test_case_79():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        float_0 = -2532.0
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_1)
        var_6 = linked_list_3.size()
        assert var_6 == 0
        none_type_6 = None
        node_2 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_7 = linked_list_4.size()
        assert var_7 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_8 = linked_list_5.push(node_2)
        var_9 = linked_list_4.search(linked_list_4)
        none_type_8 = None
        node_3 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_10 = linked_list_6.size()
        assert var_10 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_4 = module_0.Node(linked_list_6)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_8 = module_0.LinkedList(none_type_11)
        assert linked_list_8.head is None
        var_11 = linked_list_8.size()
        assert var_11 == 0
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_12 = linked_list_9.push(node_5)
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_10 = module_0.LinkedList(none_type_13)
        assert linked_list_10.head is None
        var_13 = linked_list_10.size()
        assert var_13 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_14 = linked_list_11.push(node_6)
        var_15 = linked_list_11.remove(linked_list_11)
        var_16 = linked_list_11.pop()
        assert linked_list_11.head is None
        assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'stack4.Node'
>       assert var_16.data is None
E       AssertionError

RANDOM/test_stack4_RANDOM.py:2984: AssertionError
   - [#  11] CDI stack4: 
--------------------------------------------------------------------------------
   25:     display() - will return a unicode string representing the list as
   26:     if it were a Python tuple literal: "(12, \'sam\', 37, \'tango\')"
   27:     '''
   28:     
-  29:     def __init__(self, data=None):
-  30:         '''Linked list initialized with head.'''
-  31:         self._length = 0
-  32:         self.head = None
-  33:         try:
-  34:             for val in data:
-  35:                 self.push(val)
-  36:         except TypeError:
-  37:             if data:
-  38:                 self.push(data)
-  39:     
+  29:     @classmethod
+  30:     def __init__(self, data=None):
+  31:         '''Linked list initialized with head.'''
+  32:         self._length = 0
+  33:         self.head = None
+  34:         try:
+  35:             for val in data:
+  36:                 self.push(val)
+  37:         except TypeError:
+  38:             if data:
+  39:                 self.push(data)
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
   42:         old_head = self.head
   43:         self.head = Node(val, old_head)
--------------------------------------------------------------------------------
[4.81722 s] incompetent

TypeError: stack4:39: TypeError: LinkedList.push() missing 1 required positional argument: 'val'

   - [#  12] CDI stack4: 
--------------------------------------------------------------------------------
   36:         except TypeError:
   37:             if data:
   38:                 self.push(data)
   39:     
-  40:     def push(self, val):
-  41:         '''Insert a value at the head of the list.'''
-  42:         old_head = self.head
-  43:         self.head = Node(val, old_head)
-  44:         self._length += 1
-  45:     
+  40:     @classmethod
+  41:     def push(self, val):
+  42:         '''Insert a value at the head of the list.'''
+  43:         old_head = self.head
+  44:         self.head = Node(val, old_head)
+  45:         self._length += 1
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
   49:             raise IndexError('Cannot pop from an empty list')
--------------------------------------------------------------------------------
[4.74859 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_7

def test_case_7():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
>       var_1 = linked_list_1.push(node_0)

RANDOM/test_stack4_RANDOM.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack4.LinkedList'>, val = <stack4.Node object at 0x7ff50a3c3700>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

stack4:43: AttributeError
   - [#  13] CDI stack4: 
--------------------------------------------------------------------------------
   42:         old_head = self.head
   43:         self.head = Node(val, old_head)
   44:         self._length += 1
   45:     
-  46:     def pop(self):
-  47:         '''Remove the first value and return it.'''
-  48:         if not (self.head):
-  49:             raise IndexError('Cannot pop from an empty list')
-  50:         to_return = self.head
-  51:         self.head = self.head.next
-  52:         self._length -= 1
-  53:         return to_return.data
-  54:     
+  46:     @classmethod
+  47:     def pop(self):
+  48:         '''Remove the first value and return it.'''
+  49:         if not (self.head):
+  50:             raise IndexError('Cannot pop from an empty list')
+  51:         to_return = self.head
+  52:         self.head = self.head.next
+  53:         self._length -= 1
+  54:         return to_return.data
   55:     def size(self):
   56:         '''Return the length of the list.'''
   57:         return self._length
   58:     
--------------------------------------------------------------------------------
[4.86622 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_79

def test_case_79():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        float_0 = -2532.0
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_1)
        var_6 = linked_list_3.size()
        assert var_6 == 0
        none_type_6 = None
        node_2 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_7 = linked_list_4.size()
        assert var_7 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_8 = linked_list_5.push(node_2)
        var_9 = linked_list_4.search(linked_list_4)
        none_type_8 = None
        node_3 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_10 = linked_list_6.size()
        assert var_10 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_4 = module_0.Node(linked_list_6)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_8 = module_0.LinkedList(none_type_11)
        assert linked_list_8.head is None
        var_11 = linked_list_8.size()
        assert var_11 == 0
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_12 = linked_list_9.push(node_5)
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_10 = module_0.LinkedList(none_type_13)
        assert linked_list_10.head is None
        var_13 = linked_list_10.size()
        assert var_13 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_14 = linked_list_11.push(node_6)
        var_15 = linked_list_11.remove(linked_list_11)
>       var_16 = linked_list_11.pop()

RANDOM/test_stack4_RANDOM.py:2981: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack4.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

stack4:49: AttributeError
   - [#  14] CDI stack4: 
--------------------------------------------------------------------------------
   51:         self.head = self.head.next
   52:         self._length -= 1
   53:         return to_return.data
   54:     
-  55:     def size(self):
-  56:         '''Return the length of the list.'''
-  57:         return self._length
-  58:     
+  55:     @classmethod
+  56:     def size(self):
+  57:         '''Return the length of the list.'''
+  58:         return self._length
   59:     def search(self, val):
   60:         '''Return the node containing val.'''
   61:         curr = self.head
   62:         while curr:
--------------------------------------------------------------------------------
[4.69683 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
>       var_0 = linked_list_0.size()

RANDOM/test_stack4_RANDOM.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack4.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute '_length'

stack4:58: AttributeError
   - [#  15] CDI stack4: 
--------------------------------------------------------------------------------
   55:     def size(self):
   56:         '''Return the length of the list.'''
   57:         return self._length
   58:     
-  59:     def search(self, val):
-  60:         '''Return the node containing val.'''
-  61:         curr = self.head
-  62:         while curr:
-  63:             if curr.data == val:
-  64:                 return curr
-  65:             curr = curr.next
-  66:     
+  59:     @classmethod
+  60:     def search(self, val):
+  61:         '''Return the node containing val.'''
+  62:         curr = self.head
+  63:         while curr:
+  64:             if curr.data == val:
+  65:                 return curr
+  66:             curr = curr.next
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
   70:         if (curr and val is self.head.data):
--------------------------------------------------------------------------------
[4.78767 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_17

def test_case_17():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_2 = linked_list_3.push(node_1)
        none_type_4 = None
        node_2 = module_0.Node(none_type_4)
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        linked_list_6 = module_0.LinkedList(none_type_7)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        none_type_8 = None
        node_5 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_7 = module_0.LinkedList(none_type_9)
        assert linked_list_7.head is None
        var_5 = linked_list_7.size()
        assert var_5 == 0
        var_6 = linked_list_7.remove(node_5)
        var_7 = linked_list_7.size()
        assert var_7 == 0
        str_0 = 'zEl8UtUv\n8yj=*z'
>       var_8 = linked_list_6.search(str_0)

RANDOM/test_stack4_RANDOM.py:403: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack4.LinkedList'>, val = 'zEl8UtUv\n8yj=*z'

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

stack4:62: AttributeError
   - [#  16] CDI stack4: 
--------------------------------------------------------------------------------
   63:             if curr.data == val:
   64:                 return curr
   65:             curr = curr.next
   66:     
-  67:     def remove(self, val):
-  68:         '''Remove node from list if exists.'''
-  69:         curr = self.head
-  70:         if (curr and val is self.head.data):
-  71:             self.head = self.head.next
-  72:             self._length -= 1
-  73:         while curr:
-  74:             if (curr.next and curr.next.data == val):
-  75:                 curr.next = curr.next.next
-  76:                 self._length -= 1
-  77:             curr = curr.next
-  78:     
+  67:     @classmethod
+  68:     def remove(self, val):
+  69:         '''Remove node from list if exists.'''
+  70:         curr = self.head
+  71:         if (curr and val is self.head.data):
+  72:             self.head = self.head.next
+  73:             self._length -= 1
+  74:         while curr:
+  75:             if (curr.next and curr.next.data == val):
+  76:                 curr.next = curr.next.next
+  77:                 self._length -= 1
+  78:             curr = curr.next
   79:     def display(self):
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
   82:         display = '('
--------------------------------------------------------------------------------
[4.75046 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_3

def test_case_3():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
>       var_2 = linked_list_2.remove(none_type_3)

RANDOM/test_stack4_RANDOM.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack4.LinkedList'>, val = None

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

stack4:70: AttributeError
   - [#  17] CDI stack4: 
--------------------------------------------------------------------------------
   75:                 curr.next = curr.next.next
   76:                 self._length -= 1
   77:             curr = curr.next
   78:     
-  79:     def display(self):
-  80:         '''Display list as a tuple.'''
-  81:         curr = self.head
-  82:         display = '('
-  83:         while curr:
-  84:             display += str(curr.data) + ', '
-  85:             curr = curr.next
-  86:         return display[:-2] + ')'
-  87: 
+  79:     @classmethod
+  80:     def display(self):
+  81:         '''Display list as a tuple.'''
+  82:         curr = self.head
+  83:         display = '('
+  84:         while curr:
+  85:             display += str(curr.data) + ', '
+  86:             curr = curr.next
+  87:         return display[:-2] + ')'
   88: 
   89: class Stack(object):
   90:     '''Implementation of Stack.
   91: 
--------------------------------------------------------------------------------
[4.73347 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_0)
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
>       var_3 = linked_list_1.display()

RANDOM/test_stack4_RANDOM.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack4.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

stack4:82: AttributeError
   - [#  18] CDI stack4: 
--------------------------------------------------------------------------------
   97:     If the stack is empty, attempts to call pop should raise an exception.
   98: 
   99:     '''
  100:     
- 101:     def __init__(self, data=None):
- 102:         '''Initialization.'''
- 103:         self._stack = LinkedList(data)
- 104:     
+ 101:     @classmethod
+ 102:     def __init__(self, data=None):
+ 103:         '''Initialization.'''
+ 104:         self._stack = LinkedList(data)
  105:     def push(self, val):
  106:         '''Add val to the stack.'''
  107:         self._stack.push(val)
  108:     
--------------------------------------------------------------------------------
[5.27439 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_385

def test_case_385():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        node_1 = module_0.Node(node_0)
        float_0 = -2532.0
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.push(float_0)
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        float_1 = -484.6
        stack_0 = module_0.Stack(float_1)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        node_3 = module_0.Node(node_2)
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        float_2 = -2532.0
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_1 = linked_list_4.push(float_2)
        var_2 = linked_list_4.size()
        assert var_2 == 1
        none_type_4 = None
        node_4 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_5 = module_0.LinkedList(none_type_5)
        assert linked_list_5.head is None
        var_3 = linked_list_5.size()
        assert var_3 == 0
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        node_5 = module_0.Node(linked_list_5)
        var_4 = linked_list_6.remove(var_3)
        var_5 = linked_list_5.display()
        assert var_5 == ')'
        none_type_6 = None
        node_6 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_7 = module_0.LinkedList(none_type_7)
        assert linked_list_7.head is None
        var_6 = linked_list_7.size()
        assert var_6 == 0
        var_7 = linked_list_7.remove(node_6)
        var_8 = linked_list_7.size()
        assert var_8 == 0
        float_3 = -484.6
        stack_1 = module_0.Stack(float_3)
        none_type_8 = None
        linked_list_8 = module_0.LinkedList(none_type_8)
        assert linked_list_8.head is None
        var_9 = linked_list_8.search(stack_1)
        none_type_9 = None
        node_7 = module_0.Node(none_type_9)
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_10 = linked_list_9.push(linked_list_9)
        var_11 = linked_list_9.display()
        stack_2 = module_0.Stack()
        none_type_10 = None
        node_8 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_10 = module_0.LinkedList(none_type_11)
        assert linked_list_10.head is None
        var_12 = linked_list_10.size()
        assert var_12 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_13 = linked_list_11.push(node_8)
        var_14 = linked_list_10.search(linked_list_10)
>       var_15 = stack_1.pop()

RANDOM/test_stack4_RANDOM.py:16765: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
stack4:111: in pop
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50a39cdc0>

>   ???
E   IndexError: Cannot pop from an empty list

stack4:49: IndexError
   - [#  19] CDI stack4: 
--------------------------------------------------------------------------------
  101:     def __init__(self, data=None):
  102:         '''Initialization.'''
  103:         self._stack = LinkedList(data)
  104:     
- 105:     def push(self, val):
- 106:         '''Add val to the stack.'''
- 107:         self._stack.push(val)
- 108:     
+ 105:     @classmethod
+ 106:     def push(self, val):
+ 107:         '''Add val to the stack.'''
+ 108:         self._stack.push(val)
  109:     def pop(self):
  110:         '''Remove item off the stack.'''
  111:         self._stack.pop()
--------------------------------------------------------------------------------
[5.03034 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_137

def test_case_137():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        var_2 = linked_list_0.size()
        assert var_2 == 0
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_1 = module_0.LinkedList(none_type_3)
        assert linked_list_1.head is None
        var_3 = linked_list_1.size()
        assert var_3 == 0
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        none_type_4 = None
        node_2 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_2)
        float_0 = -484.6
        stack_0 = module_0.Stack(float_0)
        none_type_6 = None
        node_3 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_6 = linked_list_4.size()
        assert var_6 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_7 = linked_list_5.push(node_3)
        none_type_8 = None
        node_4 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_8 = linked_list_6.size()
        assert var_8 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_5 = module_0.Node(linked_list_6)
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_10 = None
        var_9 = linked_list_8.search(none_type_10)
>       var_10 = stack_0.push(var_6)

RANDOM/test_stack4_RANDOM.py:5563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack4.Stack'>, val = 0

>   ???
E   AttributeError: type object 'Stack' has no attribute '_stack'

stack4:108: AttributeError
   - [#  20] CDI stack4: 
--------------------------------------------------------------------------------
  105:     def push(self, val):
  106:         '''Add val to the stack.'''
  107:         self._stack.push(val)
  108:     
- 109:     def pop(self):
- 110:         '''Remove item off the stack.'''
- 111:         self._stack.pop()
+ 109:     @classmethod
+ 110:     def pop(self):
+ 111:         '''Remove item off the stack.'''
+ 112:         self._stack.pop()
--------------------------------------------------------------------------------
[5.25531 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_360

def test_case_360():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        node_1 = module_0.Node(linked_list_0)
        var_1 = linked_list_1.remove(var_0)
        var_2 = linked_list_0.display()
        assert var_2 == ')'
        none_type_2 = None
        node_2 = module_0.Node(none_type_2, none_type_2)
        int_0 = 5663
        stack_0 = module_0.Stack(int_0)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.size()
        assert var_3 == 0
        var_4 = linked_list_2.remove(var_3)
        var_5 = linked_list_2.display()
        assert var_5 == ')'
        none_type_4 = None
        linked_list_3 = module_0.LinkedList(none_type_4)
        assert linked_list_3.head is None
        var_6 = linked_list_3.size()
        assert var_6 == 0
        var_7 = linked_list_3.remove(var_6)
        none_type_5 = None
        linked_list_4 = module_0.LinkedList(none_type_5)
        assert linked_list_4.head is None
        var_8 = linked_list_4.size()
        assert var_8 == 0
        var_9 = linked_list_4.search(none_type_5)
        none_type_6 = None
        node_3 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_5 = module_0.LinkedList(none_type_7)
        assert linked_list_5.head is None
        var_10 = linked_list_5.size()
        assert var_10 == 0
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        node_4 = module_0.Node(linked_list_5)
        var_11 = linked_list_6.remove(var_10)
        none_type_8 = None
        linked_list_7 = module_0.LinkedList(none_type_8)
        assert linked_list_7.head is None
        var_12 = linked_list_7.size()
        assert var_12 == 0
        var_13 = linked_list_7.search(var_12)
        int_1 = 5663
        stack_1 = module_0.Stack(int_1)
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_9 = None
        node_5 = module_0.Node(none_type_9)
        none_type_10 = None
        linked_list_9 = module_0.LinkedList(none_type_10)
        assert linked_list_9.head is None
        var_14 = linked_list_9.size()
        assert var_14 == 0
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        var_15 = linked_list_10.size()
        assert var_15 == 0
>       var_16 = stack_1.pop()

RANDOM/test_stack4_RANDOM.py:15434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'stack4.Stack'>

>   ???
E   AttributeError: type object 'Stack' has no attribute '_stack'

stack4:112: AttributeError
   - [#  21] COD stack4: 
--------------------------------------------------------------------------------
   44:         self._length += 1
   45:     
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
-  48:         if not (self.head):
+  48:         if self.head:
   49:             raise IndexError('Cannot pop from an empty list')
   50:         to_return = self.head
   51:         self.head = self.head.next
   52:         self._length -= 1
--------------------------------------------------------------------------------
[4.96017 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_79

def test_case_79():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        float_0 = -2532.0
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_1)
        var_6 = linked_list_3.size()
        assert var_6 == 0
        none_type_6 = None
        node_2 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_7 = linked_list_4.size()
        assert var_7 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_8 = linked_list_5.push(node_2)
        var_9 = linked_list_4.search(linked_list_4)
        none_type_8 = None
        node_3 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_10 = linked_list_6.size()
        assert var_10 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_4 = module_0.Node(linked_list_6)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_8 = module_0.LinkedList(none_type_11)
        assert linked_list_8.head is None
        var_11 = linked_list_8.size()
        assert var_11 == 0
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_12 = linked_list_9.push(node_5)
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_10 = module_0.LinkedList(none_type_13)
        assert linked_list_10.head is None
        var_13 = linked_list_10.size()
        assert var_13 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_14 = linked_list_11.push(node_6)
        var_15 = linked_list_11.remove(linked_list_11)
>       var_16 = linked_list_11.pop()

RANDOM/test_stack4_RANDOM.py:2981: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50a39f4c0>

>   ???
E   IndexError: Cannot pop from an empty list

stack4:49: IndexError
   - [#  22] COI stack4: 
--------------------------------------------------------------------------------
   33:         try:
   34:             for val in data:
   35:                 self.push(val)
   36:         except TypeError:
-  37:             if data:
+  37:             if not data:
   38:                 self.push(data)
   39:     
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
--------------------------------------------------------------------------------
[4.92979 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
>       assert linked_list_0.head is None
E       AssertionError

RANDOM/test_stack4_RANDOM.py:10: AssertionError
   - [#  23] COI stack4: 
--------------------------------------------------------------------------------
   44:         self._length += 1
   45:     
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
-  48:         if not (self.head):
+  48:         if not ((not (self.head))):
   49:             raise IndexError('Cannot pop from an empty list')
   50:         to_return = self.head
   51:         self.head = self.head.next
   52:         self._length -= 1
--------------------------------------------------------------------------------
[4.90242 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_79

def test_case_79():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        float_0 = -2532.0
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_1)
        var_6 = linked_list_3.size()
        assert var_6 == 0
        none_type_6 = None
        node_2 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_7 = linked_list_4.size()
        assert var_7 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_8 = linked_list_5.push(node_2)
        var_9 = linked_list_4.search(linked_list_4)
        none_type_8 = None
        node_3 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_10 = linked_list_6.size()
        assert var_10 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_4 = module_0.Node(linked_list_6)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_8 = module_0.LinkedList(none_type_11)
        assert linked_list_8.head is None
        var_11 = linked_list_8.size()
        assert var_11 == 0
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_12 = linked_list_9.push(node_5)
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_10 = module_0.LinkedList(none_type_13)
        assert linked_list_10.head is None
        var_13 = linked_list_10.size()
        assert var_13 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_14 = linked_list_11.push(node_6)
        var_15 = linked_list_11.remove(linked_list_11)
>       var_16 = linked_list_11.pop()

RANDOM/test_stack4_RANDOM.py:2981: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50c3c9e10>

>   ???
E   IndexError: Cannot pop from an empty list

stack4:49: IndexError
   - [#  24] COI stack4: 
--------------------------------------------------------------------------------
   58:     
   59:     def search(self, val):
   60:         '''Return the node containing val.'''
   61:         curr = self.head
-  62:         while curr:
+  62:         while not curr:
   63:             if curr.data == val:
   64:                 return curr
   65:             curr = curr.next
   66:     
--------------------------------------------------------------------------------
[4.81368 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_17

def test_case_17():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_2 = linked_list_3.push(node_1)
        none_type_4 = None
        node_2 = module_0.Node(none_type_4)
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        linked_list_6 = module_0.LinkedList(none_type_7)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        none_type_8 = None
        node_5 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_7 = module_0.LinkedList(none_type_9)
        assert linked_list_7.head is None
        var_5 = linked_list_7.size()
        assert var_5 == 0
        var_6 = linked_list_7.remove(node_5)
        var_7 = linked_list_7.size()
        assert var_7 == 0
        str_0 = 'zEl8UtUv\n8yj=*z'
>       var_8 = linked_list_6.search(str_0)

RANDOM/test_stack4_RANDOM.py:403: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50c3cace0>, val = 'zEl8UtUv\n8yj=*z'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

stack4:63: AttributeError
   - [#  25] COI stack4: 
--------------------------------------------------------------------------------
   59:     def search(self, val):
   60:         '''Return the node containing val.'''
   61:         curr = self.head
   62:         while curr:
-  63:             if curr.data == val:
+  63:             if not (curr.data == val):
   64:                 return curr
   65:             curr = curr.next
   66:     
   67:     def remove(self, val):
--------------------------------------------------------------------------------
[5.75074 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_993

def test_case_993():
        str_0 = '?8gsC*wZ'
        node_0 = module_0.Node(str_0)
        bytes_0 = b'O\xfe\r$|\x92^H\xebgM\xc1\xaaH\xa5'
        linked_list_0 = module_0.LinkedList(bytes_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.search(bytes_0)
        float_0 = -484.6
        stack_0 = module_0.Stack(float_0)
        assert f'{type(stack_0).__module__}.{type(stack_0).__qualname__}' == 'stack4.Stack'
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        node_2 = module_0.Node(node_1)
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_2 = module_0.LinkedList(none_type_2)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_2.remove(node_3)
        var_3 = linked_list_2.size()
        assert var_3 == 0
        node_4 = module_0.Node(var_1)
        assert node_4.data == 0
        node_5 = module_0.Node(var_1)
        assert node_5.data == 0
        none_type_3 = None
        node_6 = module_0.Node(none_type_3)
        linked_list_3 = module_0.LinkedList(var_0)
>       assert linked_list_3.head is None
E       AssertionError

RANDOM/test_stack4_RANDOM.py:43377: AssertionError
   - [#  26] COI stack4: 
--------------------------------------------------------------------------------
   66:     
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
-  70:         if (curr and val is self.head.data):
+  70:         if not ((curr and val is self.head.data)):
   71:             self.head = self.head.next
   72:             self._length -= 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
--------------------------------------------------------------------------------
[4.73617 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_3

def test_case_3():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
>       var_2 = linked_list_2.remove(none_type_3)

RANDOM/test_stack4_RANDOM.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50ba38190>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

stack4:71: AttributeError
   - [#  27] COI stack4: 
--------------------------------------------------------------------------------
   69:         curr = self.head
   70:         if (curr and val is self.head.data):
   71:             self.head = self.head.next
   72:             self._length -= 1
-  73:         while curr:
+  73:         while not curr:
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
   76:                 self._length -= 1
   77:             curr = curr.next
--------------------------------------------------------------------------------
[4.72673 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_3

def test_case_3():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
>       var_2 = linked_list_2.remove(none_type_3)

RANDOM/test_stack4_RANDOM.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50ba383a0>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

stack4:74: AttributeError
   - [#  28] COI stack4: 
--------------------------------------------------------------------------------
   70:         if (curr and val is self.head.data):
   71:             self.head = self.head.next
   72:             self._length -= 1
   73:         while curr:
-  74:             if (curr.next and curr.next.data == val):
+  74:             if not ((curr.next and curr.next.data == val)):
   75:                 curr.next = curr.next.next
   76:                 self._length -= 1
   77:             curr = curr.next
   78:     
--------------------------------------------------------------------------------
[4.74385 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_22

def test_case_22():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_0)
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        node_2 = module_0.Node(linked_list_2)
>       var_3 = linked_list_1.remove(var_2)

RANDOM/test_stack4_RANDOM.py:564: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50b2645e0>, val = 0

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

stack4:75: AttributeError
   - [#  29] COI stack4: 
--------------------------------------------------------------------------------
   79:     def display(self):
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
   82:         display = '('
-  83:         while curr:
+  83:         while not curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
   86:         return display[:-2] + ')'
   87: 
--------------------------------------------------------------------------------
[4.66682 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_20

def test_case_20():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_1)
        stack_0 = module_0.Stack()
        none_type_3 = None
        node_2 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_2 = module_0.LinkedList(none_type_4)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        node_5 = module_0.Node(none_type_7)
        none_type_8 = None
        linked_list_6 = module_0.LinkedList(none_type_8)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        var_5 = linked_list_6.remove(node_5)
        var_6 = linked_list_6.size()
        assert var_6 == 0
>       var_7 = linked_list_3.display()

RANDOM/test_stack4_RANDOM.py:492: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50b26d690>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

stack4:84: AttributeError
   - [#  30] CRP stack4: 
--------------------------------------------------------------------------------
   27:     '''
   28:     
   29:     def __init__(self, data=None):
   30:         '''Linked list initialized with head.'''
-  31:         self._length = 0
+  31:         self._length = 1
   32:         self.head = None
   33:         try:
   34:             for val in data:
   35:                 self.push(val)
--------------------------------------------------------------------------------
[4.65887 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
>       assert var_0 == 0
E       AssertionError

RANDOM/test_stack4_RANDOM.py:12: AssertionError
   - [#  31] CRP stack4: 
--------------------------------------------------------------------------------
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
   42:         old_head = self.head
   43:         self.head = Node(val, old_head)
-  44:         self._length += 1
+  44:         self._length += 2
   45:     
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
--------------------------------------------------------------------------------
[4.73915 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_65

def test_case_65():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_1 = module_0.LinkedList(none_type_3)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        var_3 = linked_list_1.remove(node_1)
        var_4 = linked_list_1.size()
        assert var_4 == 0
        bytes_0 = b"'\xd2~&\xb0v@Y\x89Z\x7f"
        none_type_4 = None
        node_2 = module_0.Node(bytes_0, none_type_4)
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_2 = module_0.LinkedList(none_type_6)
        assert linked_list_2.head is None
        var_5 = linked_list_2.size()
        assert var_5 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_6 = linked_list_3.push(node_3)
        var_7 = linked_list_3.remove(var_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_8 = linked_list_4.size()
        assert var_8 == 0
        none_type_8 = None
        node_4 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_5 = module_0.LinkedList(none_type_9)
        assert linked_list_5.head is None
        var_9 = linked_list_5.size()
        assert var_9 == 0
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        var_10 = linked_list_6.push(node_4)
        stack_1 = module_0.Stack()
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_7 = module_0.LinkedList(none_type_11)
        assert linked_list_7.head is None
        var_11 = linked_list_7.size()
        assert var_11 == 0
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        var_12 = linked_list_8.push(node_5)
        var_13 = linked_list_8.remove(linked_list_8)
        var_14 = linked_list_3.size()
>       assert var_14 == 1
E       AssertionError

RANDOM/test_stack4_RANDOM.py:2306: AssertionError
   - [#  32] CRP stack4: 
--------------------------------------------------------------------------------
   45:     
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
-  49:             raise IndexError('Cannot pop from an empty list')
+  49:             raise IndexError('mutpy')
   50:         to_return = self.head
   51:         self.head = self.head.next
   52:         self._length -= 1
   53:         return to_return.data
--------------------------------------------------------------------------------
[2.84238 s] survived
   - [#  33] CRP stack4: 
--------------------------------------------------------------------------------
   45:     
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
-  49:             raise IndexError('Cannot pop from an empty list')
+  49:             raise IndexError('')
   50:         to_return = self.head
   51:         self.head = self.head.next
   52:         self._length -= 1
   53:         return to_return.data
--------------------------------------------------------------------------------
[2.79639 s] survived
   - [#  34] CRP stack4: 
--------------------------------------------------------------------------------
   48:         if not (self.head):
   49:             raise IndexError('Cannot pop from an empty list')
   50:         to_return = self.head
   51:         self.head = self.head.next
-  52:         self._length -= 1
+  52:         self._length -= 2
   53:         return to_return.data
   54:     
   55:     def size(self):
   56:         '''Return the length of the list.'''
--------------------------------------------------------------------------------
[5.66817 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_826

def test_case_826():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(var_0)
        var_2 = linked_list_0.search(none_type_1)
        stack_0 = module_0.Stack()
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        float_0 = -2532.0
        none_type_2 = None
        linked_list_2 = module_0.LinkedList(none_type_2)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        var_4 = linked_list_1.size()
        assert var_4 == 0
        float_1 = -2532.0
        none_type_3 = None
        linked_list_5 = module_0.LinkedList(none_type_3)
        assert linked_list_5.head is None
        var_5 = linked_list_5.push(float_1)
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        node_2 = module_0.Node(node_1)
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_9 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_9.head).__module__}.{type(linked_list_9.head).__qualname__}' == 'stack4.Node'
        var_6 = linked_list_9.size()
        assert var_6 == 18
        linked_list_10 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_10.head).__module__}.{type(linked_list_10.head).__qualname__}' == 'stack4.Node'
        node_3 = module_0.Node(var_6)
        assert node_3.data == 18
        float_2 = -484.6
        stack_1 = module_0.Stack(float_2)
        none_type_5 = None
        linked_list_11 = module_0.LinkedList(none_type_5)
        assert linked_list_11.head is None
        var_7 = linked_list_11.search(stack_1)
        node_4 = module_0.Node(var_7, none_type_5)
        var_8 = linked_list_11.display()
        assert var_8 == ')'
        none_type_6 = None
        node_5 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_12 = module_0.LinkedList(none_type_7)
        assert linked_list_12.head is None
        var_9 = linked_list_12.size()
        assert var_9 == 0
        linked_list_13 = module_0.LinkedList()
        assert linked_list_13.head is None
        var_10 = linked_list_13.push(node_5)
        var_11 = linked_list_13.remove(var_10)
        stack_2 = module_0.Stack()
        float_3 = -2532.0
        none_type_8 = None
        linked_list_14 = module_0.LinkedList(none_type_8)
        assert linked_list_14.head is None
        var_12 = linked_list_14.push(float_3)
        var_13 = linked_list_14.pop()
        assert var_13 == pytest.approx(-2532.0, abs=0.01, rel=0.01)
        assert linked_list_14.head is None
        none_type_9 = None
        linked_list_15 = module_0.LinkedList()
        assert linked_list_15.head is None
        var_14 = linked_list_15.remove(none_type_9)
        stack_3 = module_0.Stack(linked_list_15)
        linked_list_16 = module_0.LinkedList()
        assert linked_list_16.head is None
        none_type_10 = None
        var_15 = linked_list_16.search(none_type_10)
        none_type_11 = None
        node_6 = module_0.Node(none_type_11)
        linked_list_17 = module_0.LinkedList()
        assert linked_list_17.head is None
        stack_4 = module_0.Stack()
        var_16 = stack_4.push(node_6)
        none_type_12 = None
        node_7 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_18 = module_0.LinkedList(none_type_13)
        assert linked_list_18.head is None
        var_17 = linked_list_18.size()
        assert var_17 == 0
        var_18 = linked_list_18.remove(node_7)
        linked_list_19 = module_0.LinkedList()
        assert linked_list_19.head is None
        var_19 = linked_list_14.size()
>       assert var_19 == 0
E       AssertionError

RANDOM/test_stack4_RANDOM.py:35810: AssertionError
   - [#  35] CRP stack4: 
--------------------------------------------------------------------------------
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
   70:         if (curr and val is self.head.data):
   71:             self.head = self.head.next
-  72:             self._length -= 1
+  72:             self._length -= 2
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
   76:                 self._length -= 1
--------------------------------------------------------------------------------
[2.80565 s] survived
   - [#  36] CRP stack4: 
--------------------------------------------------------------------------------
   72:             self._length -= 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
-  76:                 self._length -= 1
+  76:                 self._length -= 2
   77:             curr = curr.next
   78:     
   79:     def display(self):
   80:         '''Display list as a tuple.'''
--------------------------------------------------------------------------------
[2.81258 s] survived
   - [#  37] CRP stack4: 
--------------------------------------------------------------------------------
   78:     
   79:     def display(self):
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
-  82:         display = '('
+  82:         display = 'mutpy'
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
   86:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[4.81545 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_20

def test_case_20():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_1)
        stack_0 = module_0.Stack()
        none_type_3 = None
        node_2 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_2 = module_0.LinkedList(none_type_4)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        node_5 = module_0.Node(none_type_7)
        none_type_8 = None
        linked_list_6 = module_0.LinkedList(none_type_8)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        var_5 = linked_list_6.remove(node_5)
        var_6 = linked_list_6.size()
        assert var_6 == 0
        var_7 = linked_list_3.display()
>       assert var_7 == ')'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:493: AssertionError
   - [#  38] CRP stack4: 
--------------------------------------------------------------------------------
   78:     
   79:     def display(self):
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
-  82:         display = '('
+  82:         display = ''
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
   86:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.03265 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_274

def test_case_274():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.size()
        assert var_0 == 18
        linked_list_1 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'stack4.Node'
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_2 = linked_list_3.push(node_0)
        node_1 = module_0.Node(linked_list_2)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        var_4 = linked_list_4.remove(node_2)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_3 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_6 = module_0.LinkedList(none_type_5)
        assert linked_list_6.head is None
        var_5 = linked_list_6.size()
        assert var_5 == 0
        var_6 = linked_list_6.remove(node_3)
        none_type_6 = None
        node_4 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_7 = module_0.LinkedList(none_type_7)
        assert linked_list_7.head is None
        var_7 = linked_list_7.size()
        assert var_7 == 0
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        node_5 = module_0.Node(linked_list_7)
        node_6 = module_0.Node(node_4)
        none_type_8 = None
        node_7 = module_0.Node(none_type_8)
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        none_type_9 = None
        node_8 = module_0.Node(none_type_9)
        bytes_0 = b"'\xd2~&\xb0v@Y\x89Z\x7f"
        none_type_10 = None
        node_9 = module_0.Node(bytes_0, none_type_10)
        none_type_11 = None
        node_10 = module_0.Node(none_type_11)
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        var_8 = linked_list_10.display()
        assert var_8 == ')'
        none_type_12 = None
        linked_list_11 = module_0.LinkedList(none_type_12)
        assert linked_list_11.head is None
        var_9 = linked_list_11.size()
        assert var_9 == 0
        var_10 = linked_list_11.search(var_9)
        var_11 = linked_list_1.display()
>       assert var_11 == "(*, |, 7, i, s, ', 0, 2, }, Q, X, 0, c, 7, G, #, b, -)"
E       AssertionError

RANDOM/test_stack4_RANDOM.py:11459: AssertionError
   - [#  39] CRP stack4: 
--------------------------------------------------------------------------------
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
   82:         display = '('
   83:         while curr:
-  84:             display += str(curr.data) + ', '
+  84:             display += str(curr.data) + 'mutpy'
   85:             curr = curr.next
   86:         return display[:-2] + ')'
   87: 
   88: 
--------------------------------------------------------------------------------
[5.02381 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_274

def test_case_274():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.size()
        assert var_0 == 18
        linked_list_1 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'stack4.Node'
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_2 = linked_list_3.push(node_0)
        node_1 = module_0.Node(linked_list_2)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        var_4 = linked_list_4.remove(node_2)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_3 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_6 = module_0.LinkedList(none_type_5)
        assert linked_list_6.head is None
        var_5 = linked_list_6.size()
        assert var_5 == 0
        var_6 = linked_list_6.remove(node_3)
        none_type_6 = None
        node_4 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_7 = module_0.LinkedList(none_type_7)
        assert linked_list_7.head is None
        var_7 = linked_list_7.size()
        assert var_7 == 0
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        node_5 = module_0.Node(linked_list_7)
        node_6 = module_0.Node(node_4)
        none_type_8 = None
        node_7 = module_0.Node(none_type_8)
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        none_type_9 = None
        node_8 = module_0.Node(none_type_9)
        bytes_0 = b"'\xd2~&\xb0v@Y\x89Z\x7f"
        none_type_10 = None
        node_9 = module_0.Node(bytes_0, none_type_10)
        none_type_11 = None
        node_10 = module_0.Node(none_type_11)
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        var_8 = linked_list_10.display()
        assert var_8 == ')'
        none_type_12 = None
        linked_list_11 = module_0.LinkedList(none_type_12)
        assert linked_list_11.head is None
        var_9 = linked_list_11.size()
        assert var_9 == 0
        var_10 = linked_list_11.search(var_9)
        var_11 = linked_list_1.display()
>       assert var_11 == "(*, |, 7, i, s, ', 0, 2, }, Q, X, 0, c, 7, G, #, b, -)"
E       AssertionError

RANDOM/test_stack4_RANDOM.py:11459: AssertionError
   - [#  40] CRP stack4: 
--------------------------------------------------------------------------------
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
   82:         display = '('
   83:         while curr:
-  84:             display += str(curr.data) + ', '
+  84:             display += str(curr.data) + ''
   85:             curr = curr.next
   86:         return display[:-2] + ')'
   87: 
   88: 
--------------------------------------------------------------------------------
[5.01683 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_274

def test_case_274():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.size()
        assert var_0 == 18
        linked_list_1 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'stack4.Node'
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_2 = linked_list_3.push(node_0)
        node_1 = module_0.Node(linked_list_2)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        var_4 = linked_list_4.remove(node_2)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_3 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_6 = module_0.LinkedList(none_type_5)
        assert linked_list_6.head is None
        var_5 = linked_list_6.size()
        assert var_5 == 0
        var_6 = linked_list_6.remove(node_3)
        none_type_6 = None
        node_4 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_7 = module_0.LinkedList(none_type_7)
        assert linked_list_7.head is None
        var_7 = linked_list_7.size()
        assert var_7 == 0
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        node_5 = module_0.Node(linked_list_7)
        node_6 = module_0.Node(node_4)
        none_type_8 = None
        node_7 = module_0.Node(none_type_8)
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        none_type_9 = None
        node_8 = module_0.Node(none_type_9)
        bytes_0 = b"'\xd2~&\xb0v@Y\x89Z\x7f"
        none_type_10 = None
        node_9 = module_0.Node(bytes_0, none_type_10)
        none_type_11 = None
        node_10 = module_0.Node(none_type_11)
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        var_8 = linked_list_10.display()
        assert var_8 == ')'
        none_type_12 = None
        linked_list_11 = module_0.LinkedList(none_type_12)
        assert linked_list_11.head is None
        var_9 = linked_list_11.size()
        assert var_9 == 0
        var_10 = linked_list_11.search(var_9)
        var_11 = linked_list_1.display()
>       assert var_11 == "(*, |, 7, i, s, ', 0, 2, }, Q, X, 0, c, 7, G, #, b, -)"
E       AssertionError

RANDOM/test_stack4_RANDOM.py:11459: AssertionError
   - [#  41] CRP stack4: 
--------------------------------------------------------------------------------
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
-  86:         return display[:-2] + ')'
+  86:         return display[:-3] + ')'
   87: 
   88: 
   89: class Stack(object):
   90:     '''Implementation of Stack.
--------------------------------------------------------------------------------
[5.00945 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_274

def test_case_274():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.size()
        assert var_0 == 18
        linked_list_1 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'stack4.Node'
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_2 = linked_list_3.push(node_0)
        node_1 = module_0.Node(linked_list_2)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        var_4 = linked_list_4.remove(node_2)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_3 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_6 = module_0.LinkedList(none_type_5)
        assert linked_list_6.head is None
        var_5 = linked_list_6.size()
        assert var_5 == 0
        var_6 = linked_list_6.remove(node_3)
        none_type_6 = None
        node_4 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_7 = module_0.LinkedList(none_type_7)
        assert linked_list_7.head is None
        var_7 = linked_list_7.size()
        assert var_7 == 0
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        node_5 = module_0.Node(linked_list_7)
        node_6 = module_0.Node(node_4)
        none_type_8 = None
        node_7 = module_0.Node(none_type_8)
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        none_type_9 = None
        node_8 = module_0.Node(none_type_9)
        bytes_0 = b"'\xd2~&\xb0v@Y\x89Z\x7f"
        none_type_10 = None
        node_9 = module_0.Node(bytes_0, none_type_10)
        none_type_11 = None
        node_10 = module_0.Node(none_type_11)
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        var_8 = linked_list_10.display()
        assert var_8 == ')'
        none_type_12 = None
        linked_list_11 = module_0.LinkedList(none_type_12)
        assert linked_list_11.head is None
        var_9 = linked_list_11.size()
        assert var_9 == 0
        var_10 = linked_list_11.search(var_9)
        var_11 = linked_list_1.display()
>       assert var_11 == "(*, |, 7, i, s, ', 0, 2, }, Q, X, 0, c, 7, G, #, b, -)"
E       AssertionError

RANDOM/test_stack4_RANDOM.py:11459: AssertionError
   - [#  42] CRP stack4: 
--------------------------------------------------------------------------------
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
-  86:         return display[:-2] + ')'
+  86:         return display[:-2] + 'mutpy'
   87: 
   88: 
   89: class Stack(object):
   90:     '''Implementation of Stack.
--------------------------------------------------------------------------------
[4.81182 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_20

def test_case_20():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_1)
        stack_0 = module_0.Stack()
        none_type_3 = None
        node_2 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_2 = module_0.LinkedList(none_type_4)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        node_5 = module_0.Node(none_type_7)
        none_type_8 = None
        linked_list_6 = module_0.LinkedList(none_type_8)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        var_5 = linked_list_6.remove(node_5)
        var_6 = linked_list_6.size()
        assert var_6 == 0
        var_7 = linked_list_3.display()
>       assert var_7 == ')'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:493: AssertionError
   - [#  43] CRP stack4: 
--------------------------------------------------------------------------------
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
-  86:         return display[:-2] + ')'
+  86:         return display[:-2] + ''
   87: 
   88: 
   89: class Stack(object):
   90:     '''Implementation of Stack.
--------------------------------------------------------------------------------
[4.73059 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_20

def test_case_20():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_1)
        stack_0 = module_0.Stack()
        none_type_3 = None
        node_2 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_2 = module_0.LinkedList(none_type_4)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        node_5 = module_0.Node(none_type_7)
        none_type_8 = None
        linked_list_6 = module_0.LinkedList(none_type_8)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        var_5 = linked_list_6.remove(node_5)
        var_6 = linked_list_6.size()
        assert var_6 == 0
        var_7 = linked_list_3.display()
>       assert var_7 == ')'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:493: AssertionError
   - [#  44] EHD stack4: 
--------------------------------------------------------------------------------
   33:         try:
   34:             for val in data:
   35:                 self.push(val)
   36:         except TypeError:
-  37:             if data:
-  38:                 self.push(data)
+  37:             raise
+  38:     
   39:     
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
   42:         old_head = self.head
--------------------------------------------------------------------------------
[4.69225 s] incompetent

TypeError: stack4:34: TypeError: 'NoneType' object is not iterable

   - [#  45] EXS stack4: 
--------------------------------------------------------------------------------
   33:         try:
   34:             for val in data:
   35:                 self.push(val)
   36:         except TypeError:
-  37:             if data:
-  38:                 self.push(data)
+  37:             pass
+  38:     
   39:     
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
   42:         old_head = self.head
--------------------------------------------------------------------------------
[4.81057 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_112

def test_case_112():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.size()
        assert var_0 == 18
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_1 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_1.head is None
        var_1 = linked_list_1.size()
        assert var_1 == 0
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_3 = module_0.LinkedList(none_type_3)
        assert linked_list_3.head is None
        var_2 = linked_list_3.size()
        assert var_2 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        var_3 = linked_list_4.push(node_1)
        var_4 = linked_list_4.remove(var_3)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_2 = module_0.Node(none_type_4)
        float_0 = -2532.0
        none_type_5 = None
        linked_list_6 = module_0.LinkedList(none_type_5)
        assert linked_list_6.head is None
        var_5 = linked_list_6.push(float_0)
        none_type_6 = None
        linked_list_7 = module_0.LinkedList(none_type_6)
        assert linked_list_7.head is None
        var_6 = linked_list_7.size()
        assert var_6 == 0
        var_7 = linked_list_7.remove(var_6)
        linked_list_8 = module_0.LinkedList(node_0)
>       assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'stack4.Node'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:4390: AssertionError
   - [#  46] LCR stack4: 
--------------------------------------------------------------------------------
   66:     
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
-  70:         if (curr and val is self.head.data):
+  70:         if (curr or val is self.head.data):
   71:             self.head = self.head.next
   72:             self._length -= 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
--------------------------------------------------------------------------------
[4.65357 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_3

def test_case_3():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
>       var_2 = linked_list_2.remove(none_type_3)

RANDOM/test_stack4_RANDOM.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50a35ab90>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

stack4:70: AttributeError
   - [#  47] LCR stack4: 
--------------------------------------------------------------------------------
   70:         if (curr and val is self.head.data):
   71:             self.head = self.head.next
   72:             self._length -= 1
   73:         while curr:
-  74:             if (curr.next and curr.next.data == val):
+  74:             if (curr.next or curr.next.data == val):
   75:                 curr.next = curr.next.next
   76:                 self._length -= 1
   77:             curr = curr.next
   78:     
--------------------------------------------------------------------------------
[4.83620 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_22

def test_case_22():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_0)
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        node_2 = module_0.Node(linked_list_2)
>       var_3 = linked_list_1.remove(var_2)

RANDOM/test_stack4_RANDOM.py:564: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50c3c9d80>, val = 0

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

stack4:74: AttributeError
   - [#  48] OIL stack4: 
--------------------------------------------------------------------------------
   32:         self.head = None
   33:         try:
   34:             for val in data:
   35:                 self.push(val)
-  36:         except TypeError:
+  36:                 breakexcept TypeError:
   37:             if data:
   38:                 self.push(data)
   39:     
   40:     def push(self, val):
--------------------------------------------------------------------------------
[4.91130 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_111

def test_case_111():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.size()
>       assert var_0 == 18
E       AssertionError

RANDOM/test_stack4_RANDOM.py:4345: AssertionError
   - [#  49] OIL stack4: 
--------------------------------------------------------------------------------
   62:         while curr:
   63:             if curr.data == val:
   64:                 return curr
   65:             curr = curr.next
-  66:     
+  66:             break
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
   70:         if (curr and val is self.head.data):
--------------------------------------------------------------------------------
[2.71450 s] survived
   - [#  50] OIL stack4: 
--------------------------------------------------------------------------------
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
   76:                 self._length -= 1
   77:             curr = curr.next
-  78:     
+  78:             break
   79:     def display(self):
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
   82:         display = '('
--------------------------------------------------------------------------------
[2.83936 s] survived
   - [#  51] OIL stack4: 
--------------------------------------------------------------------------------
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
-  86:         return display[:-2] + ')'
-  87: 
+  86:             break
+  87:         return display[:-2] + ')'
   88: 
   89: class Stack(object):
   90:     '''Implementation of Stack.
   91: 
--------------------------------------------------------------------------------
[5.06171 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_274

def test_case_274():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.size()
        assert var_0 == 18
        linked_list_1 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'stack4.Node'
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_2 = linked_list_3.push(node_0)
        node_1 = module_0.Node(linked_list_2)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        var_4 = linked_list_4.remove(node_2)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_3 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_6 = module_0.LinkedList(none_type_5)
        assert linked_list_6.head is None
        var_5 = linked_list_6.size()
        assert var_5 == 0
        var_6 = linked_list_6.remove(node_3)
        none_type_6 = None
        node_4 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_7 = module_0.LinkedList(none_type_7)
        assert linked_list_7.head is None
        var_7 = linked_list_7.size()
        assert var_7 == 0
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        node_5 = module_0.Node(linked_list_7)
        node_6 = module_0.Node(node_4)
        none_type_8 = None
        node_7 = module_0.Node(none_type_8)
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        none_type_9 = None
        node_8 = module_0.Node(none_type_9)
        bytes_0 = b"'\xd2~&\xb0v@Y\x89Z\x7f"
        none_type_10 = None
        node_9 = module_0.Node(bytes_0, none_type_10)
        none_type_11 = None
        node_10 = module_0.Node(none_type_11)
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        var_8 = linked_list_10.display()
        assert var_8 == ')'
        none_type_12 = None
        linked_list_11 = module_0.LinkedList(none_type_12)
        assert linked_list_11.head is None
        var_9 = linked_list_11.size()
        assert var_9 == 0
        var_10 = linked_list_11.search(var_9)
        var_11 = linked_list_1.display()
>       assert var_11 == "(*, |, 7, i, s, ', 0, 2, }, Q, X, 0, c, 7, G, #, b, -)"
E       AssertionError

RANDOM/test_stack4_RANDOM.py:11459: AssertionError
   - [#  52] RIL stack4: 
--------------------------------------------------------------------------------
   30:         '''Linked list initialized with head.'''
   31:         self._length = 0
   32:         self.head = None
   33:         try:
-  34:             for val in data:
+  34:             for val in reversed(data):
   35:                 self.push(val)
   36:         except TypeError:
   37:             if data:
   38:                 self.push(data)
--------------------------------------------------------------------------------
[5.09770 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_274

def test_case_274():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.size()
        assert var_0 == 18
        linked_list_1 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'stack4.Node'
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_2 = linked_list_3.push(node_0)
        node_1 = module_0.Node(linked_list_2)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        var_4 = linked_list_4.remove(node_2)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_3 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_6 = module_0.LinkedList(none_type_5)
        assert linked_list_6.head is None
        var_5 = linked_list_6.size()
        assert var_5 == 0
        var_6 = linked_list_6.remove(node_3)
        none_type_6 = None
        node_4 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_7 = module_0.LinkedList(none_type_7)
        assert linked_list_7.head is None
        var_7 = linked_list_7.size()
        assert var_7 == 0
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        node_5 = module_0.Node(linked_list_7)
        node_6 = module_0.Node(node_4)
        none_type_8 = None
        node_7 = module_0.Node(none_type_8)
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        none_type_9 = None
        node_8 = module_0.Node(none_type_9)
        bytes_0 = b"'\xd2~&\xb0v@Y\x89Z\x7f"
        none_type_10 = None
        node_9 = module_0.Node(bytes_0, none_type_10)
        none_type_11 = None
        node_10 = module_0.Node(none_type_11)
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        var_8 = linked_list_10.display()
        assert var_8 == ')'
        none_type_12 = None
        linked_list_11 = module_0.LinkedList(none_type_12)
        assert linked_list_11.head is None
        var_9 = linked_list_11.size()
        assert var_9 == 0
        var_10 = linked_list_11.search(var_9)
        var_11 = linked_list_1.display()
>       assert var_11 == "(*, |, 7, i, s, ', 0, 2, }, Q, X, 0, c, 7, G, #, b, -)"
E       AssertionError

RANDOM/test_stack4_RANDOM.py:11459: AssertionError
   - [#  53] ROR stack4: 
--------------------------------------------------------------------------------
   59:     def search(self, val):
   60:         '''Return the node containing val.'''
   61:         curr = self.head
   62:         while curr:
-  63:             if curr.data == val:
+  63:             if curr.data != val:
   64:                 return curr
   65:             curr = curr.next
   66:     
   67:     def remove(self, val):
--------------------------------------------------------------------------------
[5.83510 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_993

def test_case_993():
        str_0 = '?8gsC*wZ'
        node_0 = module_0.Node(str_0)
        bytes_0 = b'O\xfe\r$|\x92^H\xebgM\xc1\xaaH\xa5'
        linked_list_0 = module_0.LinkedList(bytes_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.search(bytes_0)
        float_0 = -484.6
        stack_0 = module_0.Stack(float_0)
        assert f'{type(stack_0).__module__}.{type(stack_0).__qualname__}' == 'stack4.Stack'
        none_type_0 = None
        node_1 = module_0.Node(none_type_0)
        node_2 = module_0.Node(node_1)
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_1 = None
        node_3 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_2 = module_0.LinkedList(none_type_2)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        var_2 = linked_list_2.remove(node_3)
        var_3 = linked_list_2.size()
        assert var_3 == 0
        node_4 = module_0.Node(var_1)
        assert node_4.data == 0
        node_5 = module_0.Node(var_1)
        assert node_5.data == 0
        none_type_3 = None
        node_6 = module_0.Node(none_type_3)
        linked_list_3 = module_0.LinkedList(var_0)
>       assert linked_list_3.head is None
E       AssertionError

RANDOM/test_stack4_RANDOM.py:43377: AssertionError
   - [#  54] ROR stack4: 
--------------------------------------------------------------------------------
   70:         if (curr and val is self.head.data):
   71:             self.head = self.head.next
   72:             self._length -= 1
   73:         while curr:
-  74:             if (curr.next and curr.next.data == val):
+  74:             if (curr.next and curr.next.data != val):
   75:                 curr.next = curr.next.next
   76:                 self._length -= 1
   77:             curr = curr.next
   78:     
--------------------------------------------------------------------------------
[2.83790 s] survived
   - [#  55] SDI stack4: 
--------------------------------------------------------------------------------
    5: 
    6:     Data attribute for data storage and Next for pointer to next node.
    7:     '''
    8:     
-   9:     def __init__(self, data, next_node=None):
-  10:         '''Attribute data and next_node.'''
-  11:         self.data = data
-  12:         self.next = next_node
-  13: 
+   9:     @staticmethod
+  10:     def __init__(self, data, next_node=None):
+  11:         '''Attribute data and next_node.'''
+  12:         self.data = data
+  13:         self.next = next_node
   14: 
   15: class LinkedList(object):
   16:     '''Method for linked list.
   17: 
--------------------------------------------------------------------------------
[4.78192 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack4/RANDOM/test_stack4_RANDOM.py:16: TypeError: Node.__init__() missing 1 required positional argument: 'data'

   - [#  56] SDI stack4: 
--------------------------------------------------------------------------------
   25:     display() - will return a unicode string representing the list as
   26:     if it were a Python tuple literal: "(12, \'sam\', 37, \'tango\')"
   27:     '''
   28:     
-  29:     def __init__(self, data=None):
-  30:         '''Linked list initialized with head.'''
-  31:         self._length = 0
-  32:         self.head = None
-  33:         try:
-  34:             for val in data:
-  35:                 self.push(val)
-  36:         except TypeError:
-  37:             if data:
-  38:                 self.push(data)
-  39:     
+  29:     @staticmethod
+  30:     def __init__(self, data=None):
+  31:         '''Linked list initialized with head.'''
+  32:         self._length = 0
+  33:         self.head = None
+  34:         try:
+  35:             for val in data:
+  36:                 self.push(val)
+  37:         except TypeError:
+  38:             if data:
+  39:                 self.push(data)
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
   42:         old_head = self.head
   43:         self.head = Node(val, old_head)
--------------------------------------------------------------------------------
[4.71391 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
>       linked_list_0 = module_0.LinkedList(none_type_0)

RANDOM/test_stack4_RANDOM.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = None, data = None

>   ???
E   AttributeError: 'NoneType' object has no attribute '_length'

stack4:32: AttributeError
   - [#  57] SDI stack4: 
--------------------------------------------------------------------------------
   36:         except TypeError:
   37:             if data:
   38:                 self.push(data)
   39:     
-  40:     def push(self, val):
-  41:         '''Insert a value at the head of the list.'''
-  42:         old_head = self.head
-  43:         self.head = Node(val, old_head)
-  44:         self._length += 1
-  45:     
+  40:     @staticmethod
+  41:     def push(self, val):
+  42:         '''Insert a value at the head of the list.'''
+  43:         old_head = self.head
+  44:         self.head = Node(val, old_head)
+  45:         self._length += 1
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
   49:             raise IndexError('Cannot pop from an empty list')
--------------------------------------------------------------------------------
[4.71441 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack4/RANDOM/test_stack4_RANDOM.py:121: TypeError: LinkedList.push() missing 1 required positional argument: 'val'

   - [#  58] SDI stack4: 
--------------------------------------------------------------------------------
   42:         old_head = self.head
   43:         self.head = Node(val, old_head)
   44:         self._length += 1
   45:     
-  46:     def pop(self):
-  47:         '''Remove the first value and return it.'''
-  48:         if not (self.head):
-  49:             raise IndexError('Cannot pop from an empty list')
-  50:         to_return = self.head
-  51:         self.head = self.head.next
-  52:         self._length -= 1
-  53:         return to_return.data
-  54:     
+  46:     @staticmethod
+  47:     def pop(self):
+  48:         '''Remove the first value and return it.'''
+  49:         if not (self.head):
+  50:             raise IndexError('Cannot pop from an empty list')
+  51:         to_return = self.head
+  52:         self.head = self.head.next
+  53:         self._length -= 1
+  54:         return to_return.data
   55:     def size(self):
   56:         '''Return the length of the list.'''
   57:         return self._length
   58:     
--------------------------------------------------------------------------------
[4.77827 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack4/RANDOM/test_stack4_RANDOM.py:2981: TypeError: LinkedList.pop() missing 1 required positional argument: 'self'

   - [#  59] SDI stack4: 
--------------------------------------------------------------------------------
   51:         self.head = self.head.next
   52:         self._length -= 1
   53:         return to_return.data
   54:     
-  55:     def size(self):
-  56:         '''Return the length of the list.'''
-  57:         return self._length
-  58:     
+  55:     @staticmethod
+  56:     def size(self):
+  57:         '''Return the length of the list.'''
+  58:         return self._length
   59:     def search(self, val):
   60:         '''Return the node containing val.'''
   61:         curr = self.head
   62:         while curr:
--------------------------------------------------------------------------------
[4.68099 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack4/RANDOM/test_stack4_RANDOM.py:11: TypeError: LinkedList.size() missing 1 required positional argument: 'self'

   - [#  60] SDI stack4: 
--------------------------------------------------------------------------------
   55:     def size(self):
   56:         '''Return the length of the list.'''
   57:         return self._length
   58:     
-  59:     def search(self, val):
-  60:         '''Return the node containing val.'''
-  61:         curr = self.head
-  62:         while curr:
-  63:             if curr.data == val:
-  64:                 return curr
-  65:             curr = curr.next
-  66:     
+  59:     @staticmethod
+  60:     def search(self, val):
+  61:         '''Return the node containing val.'''
+  62:         curr = self.head
+  63:         while curr:
+  64:             if curr.data == val:
+  65:                 return curr
+  66:             curr = curr.next
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
   70:         if (curr and val is self.head.data):
--------------------------------------------------------------------------------
[4.88444 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack4/RANDOM/test_stack4_RANDOM.py:403: TypeError: LinkedList.search() missing 1 required positional argument: 'val'

   - [#  61] SDI stack4: 
--------------------------------------------------------------------------------
   63:             if curr.data == val:
   64:                 return curr
   65:             curr = curr.next
   66:     
-  67:     def remove(self, val):
-  68:         '''Remove node from list if exists.'''
-  69:         curr = self.head
-  70:         if (curr and val is self.head.data):
-  71:             self.head = self.head.next
-  72:             self._length -= 1
-  73:         while curr:
-  74:             if (curr.next and curr.next.data == val):
-  75:                 curr.next = curr.next.next
-  76:                 self._length -= 1
-  77:             curr = curr.next
-  78:     
+  67:     @staticmethod
+  68:     def remove(self, val):
+  69:         '''Remove node from list if exists.'''
+  70:         curr = self.head
+  71:         if (curr and val is self.head.data):
+  72:             self.head = self.head.next
+  73:             self._length -= 1
+  74:         while curr:
+  75:             if (curr.next and curr.next.data == val):
+  76:                 curr.next = curr.next.next
+  77:                 self._length -= 1
+  78:             curr = curr.next
   79:     def display(self):
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
   82:         display = '('
--------------------------------------------------------------------------------
[4.85066 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack4/RANDOM/test_stack4_RANDOM.py:48: TypeError: LinkedList.remove() missing 1 required positional argument: 'val'

   - [#  62] SDI stack4: 
--------------------------------------------------------------------------------
   75:                 curr.next = curr.next.next
   76:                 self._length -= 1
   77:             curr = curr.next
   78:     
-  79:     def display(self):
-  80:         '''Display list as a tuple.'''
-  81:         curr = self.head
-  82:         display = '('
-  83:         while curr:
-  84:             display += str(curr.data) + ', '
-  85:             curr = curr.next
-  86:         return display[:-2] + ')'
-  87: 
+  79:     @staticmethod
+  80:     def display(self):
+  81:         '''Display list as a tuple.'''
+  82:         curr = self.head
+  83:         display = '('
+  84:         while curr:
+  85:             display += str(curr.data) + ', '
+  86:             curr = curr.next
+  87:         return display[:-2] + ')'
   88: 
   89: class Stack(object):
   90:     '''Implementation of Stack.
   91: 
--------------------------------------------------------------------------------
[4.93949 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack4/RANDOM/test_stack4_RANDOM.py:157: TypeError: LinkedList.display() missing 1 required positional argument: 'self'

   - [#  63] SDI stack4: 
--------------------------------------------------------------------------------
   97:     If the stack is empty, attempts to call pop should raise an exception.
   98: 
   99:     '''
  100:     
- 101:     def __init__(self, data=None):
- 102:         '''Initialization.'''
- 103:         self._stack = LinkedList(data)
- 104:     
+ 101:     @staticmethod
+ 102:     def __init__(self, data=None):
+ 103:         '''Initialization.'''
+ 104:         self._stack = LinkedList(data)
  105:     def push(self, val):
  106:         '''Add val to the stack.'''
  107:         self._stack.push(val)
  108:     
--------------------------------------------------------------------------------
[4.89007 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack4/RANDOM/test_stack4_RANDOM.py:178: TypeError: Stack.__init__() missing 1 required positional argument: 'self'

   - [#  64] SDI stack4: 
--------------------------------------------------------------------------------
  101:     def __init__(self, data=None):
  102:         '''Initialization.'''
  103:         self._stack = LinkedList(data)
  104:     
- 105:     def push(self, val):
- 106:         '''Add val to the stack.'''
- 107:         self._stack.push(val)
- 108:     
+ 105:     @staticmethod
+ 106:     def push(self, val):
+ 107:         '''Add val to the stack.'''
+ 108:         self._stack.push(val)
  109:     def pop(self):
  110:         '''Remove item off the stack.'''
  111:         self._stack.pop()
--------------------------------------------------------------------------------
[4.93962 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack4/RANDOM/test_stack4_RANDOM.py:5563: TypeError: Stack.push() missing 1 required positional argument: 'val'

   - [#  65] SDI stack4: 
--------------------------------------------------------------------------------
  105:     def push(self, val):
  106:         '''Add val to the stack.'''
  107:         self._stack.push(val)
  108:     
- 109:     def pop(self):
- 110:         '''Remove item off the stack.'''
- 111:         self._stack.pop()
+ 109:     @staticmethod
+ 110:     def pop(self):
+ 111:         '''Remove item off the stack.'''
+ 112:         self._stack.pop()
--------------------------------------------------------------------------------
[5.21189 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/stack4/RANDOM/test_stack4_RANDOM.py:15434: TypeError: Stack.pop() missing 1 required positional argument: 'self'

   - [#  66] SDL stack4: 
--------------------------------------------------------------------------------
    7:     '''
    8:     
    9:     def __init__(self, data, next_node=None):
   10:         '''Attribute data and next_node.'''
-  11:         self.data = data
+  11:         pass
   12:         self.next = next_node
   13: 
   14: 
   15: class LinkedList(object):
--------------------------------------------------------------------------------
[4.87261 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_0)
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
>       var_3 = linked_list_1.display()

RANDOM/test_stack4_RANDOM.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50c5a6b00>

>   ???
E   AttributeError: 'Node' object has no attribute 'data'

stack4:84: AttributeError
   - [#  67] SDL stack4: 
--------------------------------------------------------------------------------
    8:     
    9:     def __init__(self, data, next_node=None):
   10:         '''Attribute data and next_node.'''
   11:         self.data = data
-  12:         self.next = next_node
+  12:         pass
   13: 
   14: 
   15: class LinkedList(object):
   16:     '''Method for linked list.
--------------------------------------------------------------------------------
[4.78614 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_0)
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
>       var_3 = linked_list_1.display()

RANDOM/test_stack4_RANDOM.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50c889cf0>

>   ???
E   AttributeError: 'Node' object has no attribute 'next'

stack4:85: AttributeError
   - [#  68] SDL stack4: 
--------------------------------------------------------------------------------
   27:     '''
   28:     
   29:     def __init__(self, data=None):
   30:         '''Linked list initialized with head.'''
-  31:         self._length = 0
+  31:         pass
   32:         self.head = None
   33:         try:
   34:             for val in data:
   35:                 self.push(val)
--------------------------------------------------------------------------------
[4.71870 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
>       var_0 = linked_list_0.size()

RANDOM/test_stack4_RANDOM.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50c8881f0>

>   ???
E   AttributeError: 'LinkedList' object has no attribute '_length'

stack4:57: AttributeError
   - [#  69] SDL stack4: 
--------------------------------------------------------------------------------
   28:     
   29:     def __init__(self, data=None):
   30:         '''Linked list initialized with head.'''
   31:         self._length = 0
-  32:         self.head = None
+  32:         pass
   33:         try:
   34:             for val in data:
   35:                 self.push(val)
   36:         except TypeError:
--------------------------------------------------------------------------------
[4.69402 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
>       assert linked_list_0.head is None
E       AttributeError: 'LinkedList' object has no attribute 'head'

RANDOM/test_stack4_RANDOM.py:10: AttributeError
   - [#  70] SDL stack4: 
--------------------------------------------------------------------------------
   31:         self._length = 0
   32:         self.head = None
   33:         try:
   34:             for val in data:
-  35:                 self.push(val)
+  35:                 pass
   36:         except TypeError:
   37:             if data:
   38:                 self.push(data)
   39:     
--------------------------------------------------------------------------------
[4.79614 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_111

def test_case_111():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
>       assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:4343: AssertionError
   - [#  71] SDL stack4: 
--------------------------------------------------------------------------------
   34:             for val in data:
   35:                 self.push(val)
   36:         except TypeError:
   37:             if data:
-  38:                 self.push(data)
+  38:                 pass
   39:     
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
   42:         old_head = self.head
--------------------------------------------------------------------------------
[4.81475 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_112

def test_case_112():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.size()
        assert var_0 == 18
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_1 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_1.head is None
        var_1 = linked_list_1.size()
        assert var_1 == 0
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_3 = module_0.LinkedList(none_type_3)
        assert linked_list_3.head is None
        var_2 = linked_list_3.size()
        assert var_2 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        var_3 = linked_list_4.push(node_1)
        var_4 = linked_list_4.remove(var_3)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_2 = module_0.Node(none_type_4)
        float_0 = -2532.0
        none_type_5 = None
        linked_list_6 = module_0.LinkedList(none_type_5)
        assert linked_list_6.head is None
        var_5 = linked_list_6.push(float_0)
        none_type_6 = None
        linked_list_7 = module_0.LinkedList(none_type_6)
        assert linked_list_7.head is None
        var_6 = linked_list_7.size()
        assert var_6 == 0
        var_7 = linked_list_7.remove(var_6)
        linked_list_8 = module_0.LinkedList(node_0)
>       assert f'{type(linked_list_8.head).__module__}.{type(linked_list_8.head).__qualname__}' == 'stack4.Node'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:4390: AssertionError
   - [#  72] SDL stack4: 
--------------------------------------------------------------------------------
   38:                 self.push(data)
   39:     
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
-  42:         old_head = self.head
+  42:         pass
   43:         self.head = Node(val, old_head)
   44:         self._length += 1
   45:     
   46:     def pop(self):
--------------------------------------------------------------------------------
[4.70278 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_7

def test_case_7():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
>       var_1 = linked_list_1.push(node_0)

RANDOM/test_stack4_RANDOM.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50c5a76a0>
val = <stack4.Node object at 0x7ff50c5a7b50>

>   ???
E   NameError: name 'old_head' is not defined

stack4:43: NameError
   - [#  73] SDL stack4: 
--------------------------------------------------------------------------------
   39:     
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
   42:         old_head = self.head
-  43:         self.head = Node(val, old_head)
+  43:         pass
   44:         self._length += 1
   45:     
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
--------------------------------------------------------------------------------
[4.76618 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_79

def test_case_79():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        float_0 = -2532.0
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_1)
        var_6 = linked_list_3.size()
        assert var_6 == 0
        none_type_6 = None
        node_2 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_7 = linked_list_4.size()
        assert var_7 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_8 = linked_list_5.push(node_2)
        var_9 = linked_list_4.search(linked_list_4)
        none_type_8 = None
        node_3 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_10 = linked_list_6.size()
        assert var_10 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_4 = module_0.Node(linked_list_6)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_8 = module_0.LinkedList(none_type_11)
        assert linked_list_8.head is None
        var_11 = linked_list_8.size()
        assert var_11 == 0
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_12 = linked_list_9.push(node_5)
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_10 = module_0.LinkedList(none_type_13)
        assert linked_list_10.head is None
        var_13 = linked_list_10.size()
        assert var_13 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_14 = linked_list_11.push(node_6)
        var_15 = linked_list_11.remove(linked_list_11)
>       var_16 = linked_list_11.pop()

RANDOM/test_stack4_RANDOM.py:2981: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50a4e7490>

>   ???
E   IndexError: Cannot pop from an empty list

stack4:49: IndexError
   - [#  74] SDL stack4: 
--------------------------------------------------------------------------------
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
   49:             raise IndexError('Cannot pop from an empty list')
-  50:         to_return = self.head
+  50:         pass
   51:         self.head = self.head.next
   52:         self._length -= 1
   53:         return to_return.data
   54:     
--------------------------------------------------------------------------------
[4.95317 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_79

def test_case_79():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        float_0 = -2532.0
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_1)
        var_6 = linked_list_3.size()
        assert var_6 == 0
        none_type_6 = None
        node_2 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_7 = linked_list_4.size()
        assert var_7 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_8 = linked_list_5.push(node_2)
        var_9 = linked_list_4.search(linked_list_4)
        none_type_8 = None
        node_3 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_10 = linked_list_6.size()
        assert var_10 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_4 = module_0.Node(linked_list_6)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_8 = module_0.LinkedList(none_type_11)
        assert linked_list_8.head is None
        var_11 = linked_list_8.size()
        assert var_11 == 0
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_12 = linked_list_9.push(node_5)
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_10 = module_0.LinkedList(none_type_13)
        assert linked_list_10.head is None
        var_13 = linked_list_10.size()
        assert var_13 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_14 = linked_list_11.push(node_6)
        var_15 = linked_list_11.remove(linked_list_11)
>       var_16 = linked_list_11.pop()

RANDOM/test_stack4_RANDOM.py:2981: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50c88b640>

>   ???
E   NameError: name 'to_return' is not defined

stack4:53: NameError
   - [#  75] SDL stack4: 
--------------------------------------------------------------------------------
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
   49:             raise IndexError('Cannot pop from an empty list')
   50:         to_return = self.head
-  51:         self.head = self.head.next
+  51:         pass
   52:         self._length -= 1
   53:         return to_return.data
   54:     
   55:     def size(self):
--------------------------------------------------------------------------------
[5.01371 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_79

def test_case_79():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        float_0 = -2532.0
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_1)
        var_6 = linked_list_3.size()
        assert var_6 == 0
        none_type_6 = None
        node_2 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_7 = linked_list_4.size()
        assert var_7 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_8 = linked_list_5.push(node_2)
        var_9 = linked_list_4.search(linked_list_4)
        none_type_8 = None
        node_3 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_10 = linked_list_6.size()
        assert var_10 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_4 = module_0.Node(linked_list_6)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_8 = module_0.LinkedList(none_type_11)
        assert linked_list_8.head is None
        var_11 = linked_list_8.size()
        assert var_11 == 0
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_12 = linked_list_9.push(node_5)
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_10 = module_0.LinkedList(none_type_13)
        assert linked_list_10.head is None
        var_13 = linked_list_10.size()
        assert var_13 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_14 = linked_list_11.push(node_6)
        var_15 = linked_list_11.remove(linked_list_11)
        var_16 = linked_list_11.pop()
>       assert linked_list_11.head is None
E       AssertionError

RANDOM/test_stack4_RANDOM.py:2982: AssertionError
   - [#  76] SDL stack4: 
--------------------------------------------------------------------------------
   49:             raise IndexError('Cannot pop from an empty list')
   50:         to_return = self.head
   51:         self.head = self.head.next
   52:         self._length -= 1
-  53:         return to_return.data
+  53:         pass
   54:     
   55:     def size(self):
   56:         '''Return the length of the list.'''
   57:         return self._length
--------------------------------------------------------------------------------
[4.93346 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_79

def test_case_79():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        float_0 = -2532.0
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_1)
        var_6 = linked_list_3.size()
        assert var_6 == 0
        none_type_6 = None
        node_2 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_7 = linked_list_4.size()
        assert var_7 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_8 = linked_list_5.push(node_2)
        var_9 = linked_list_4.search(linked_list_4)
        none_type_8 = None
        node_3 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_10 = linked_list_6.size()
        assert var_10 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_4 = module_0.Node(linked_list_6)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_8 = module_0.LinkedList(none_type_11)
        assert linked_list_8.head is None
        var_11 = linked_list_8.size()
        assert var_11 == 0
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_12 = linked_list_9.push(node_5)
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_10 = module_0.LinkedList(none_type_13)
        assert linked_list_10.head is None
        var_13 = linked_list_10.size()
        assert var_13 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_14 = linked_list_11.push(node_6)
        var_15 = linked_list_11.remove(linked_list_11)
        var_16 = linked_list_11.pop()
        assert linked_list_11.head is None
>       assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'stack4.Node'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:2983: AssertionError
   - [#  77] SDL stack4: 
--------------------------------------------------------------------------------
   53:         return to_return.data
   54:     
   55:     def size(self):
   56:         '''Return the length of the list.'''
-  57:         return self._length
+  57:         pass
   58:     
   59:     def search(self, val):
   60:         '''Return the node containing val.'''
   61:         curr = self.head
--------------------------------------------------------------------------------
[4.85623 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
>       assert var_0 == 0
E       AssertionError

RANDOM/test_stack4_RANDOM.py:12: AssertionError
   - [#  78] SDL stack4: 
--------------------------------------------------------------------------------
   57:         return self._length
   58:     
   59:     def search(self, val):
   60:         '''Return the node containing val.'''
-  61:         curr = self.head
+  61:         pass
   62:         while curr:
   63:             if curr.data == val:
   64:                 return curr
   65:             curr = curr.next
--------------------------------------------------------------------------------
[4.83619 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_17

def test_case_17():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_2 = linked_list_3.push(node_1)
        none_type_4 = None
        node_2 = module_0.Node(none_type_4)
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        linked_list_6 = module_0.LinkedList(none_type_7)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        none_type_8 = None
        node_5 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_7 = module_0.LinkedList(none_type_9)
        assert linked_list_7.head is None
        var_5 = linked_list_7.size()
        assert var_5 == 0
        var_6 = linked_list_7.remove(node_5)
        var_7 = linked_list_7.size()
        assert var_7 == 0
        str_0 = 'zEl8UtUv\n8yj=*z'
>       var_8 = linked_list_6.search(str_0)

RANDOM/test_stack4_RANDOM.py:403: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50c889b40>, val = 'zEl8UtUv\n8yj=*z'

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

stack4:62: UnboundLocalError
   - [#  79] SDL stack4: 
--------------------------------------------------------------------------------
   60:         '''Return the node containing val.'''
   61:         curr = self.head
   62:         while curr:
   63:             if curr.data == val:
-  64:                 return curr
+  64:                 pass
   65:             curr = curr.next
   66:     
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
--------------------------------------------------------------------------------
[6.70681 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_1903

def test_case_1903():
        bool_0 = True
        linked_list_0 = module_0.LinkedList(bool_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.search(bool_0)
>       assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack4.Node'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:83773: AssertionError
   - [#  80] SDL stack4: 
--------------------------------------------------------------------------------
   61:         curr = self.head
   62:         while curr:
   63:             if curr.data == val:
   64:                 return curr
-  65:             curr = curr.next
+  65:             pass
   66:     
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
--------------------------------------------------------------------------------
[14.17023 s] timeout
   - [#  81] SDL stack4: 
--------------------------------------------------------------------------------
   65:             curr = curr.next
   66:     
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
-  69:         curr = self.head
+  69:         pass
   70:         if (curr and val is self.head.data):
   71:             self.head = self.head.next
   72:             self._length -= 1
   73:         while curr:
--------------------------------------------------------------------------------
[4.77075 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_3

def test_case_3():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
>       var_2 = linked_list_2.remove(none_type_3)

RANDOM/test_stack4_RANDOM.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50b2ba380>, val = None

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

stack4:70: UnboundLocalError
   - [#  82] SDL stack4: 
--------------------------------------------------------------------------------
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
   70:         if (curr and val is self.head.data):
-  71:             self.head = self.head.next
+  71:             pass
   72:             self._length -= 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
--------------------------------------------------------------------------------
[4.95307 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_211

def test_case_211():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        float_0 = -2532.0
        none_type_1 = None
        linked_list_1 = module_0.LinkedList(none_type_1)
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(float_0)
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_4 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'stack4.Node'
        var_2 = linked_list_4.size()
        assert var_2 == 18
        linked_list_5 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'stack4.Node'
        float_1 = -484.6
        stack_0 = module_0.Stack(float_1)
        none_type_2 = None
        node_0 = module_0.Node(none_type_2)
        node_1 = module_0.Node(node_0)
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        var_3 = linked_list_1.remove(float_0)
>       assert linked_list_1.head is None
E       AssertionError

RANDOM/test_stack4_RANDOM.py:8642: AssertionError
   - [#  83] SDL stack4: 
--------------------------------------------------------------------------------
   71:             self.head = self.head.next
   72:             self._length -= 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
-  75:                 curr.next = curr.next.next
+  75:                 pass
   76:                 self._length -= 1
   77:             curr = curr.next
   78:     
   79:     def display(self):
--------------------------------------------------------------------------------
[2.77481 s] survived
   - [#  84] SDL stack4: 
--------------------------------------------------------------------------------
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
   76:                 self._length -= 1
-  77:             curr = curr.next
+  77:             pass
   78:     
   79:     def display(self):
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
--------------------------------------------------------------------------------
[14.17031 s] timeout
   - [#  85] SDL stack4: 
--------------------------------------------------------------------------------
   77:             curr = curr.next
   78:     
   79:     def display(self):
   80:         '''Display list as a tuple.'''
-  81:         curr = self.head
+  81:         pass
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
--------------------------------------------------------------------------------
[4.68973 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_0)
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
>       var_3 = linked_list_1.display()

RANDOM/test_stack4_RANDOM.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50a3534f0>

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

stack4:83: UnboundLocalError
   - [#  86] SDL stack4: 
--------------------------------------------------------------------------------
   78:     
   79:     def display(self):
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
-  82:         display = '('
+  82:         pass
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
   86:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[4.67487 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_0)
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
>       var_3 = linked_list_1.display()

RANDOM/test_stack4_RANDOM.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50a350d30>

>   ???
E   UnboundLocalError: local variable 'display' referenced before assignment

stack4:84: UnboundLocalError
   - [#  87] SDL stack4: 
--------------------------------------------------------------------------------
   81:         curr = self.head
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
-  85:             curr = curr.next
+  85:             pass
   86:         return display[:-2] + ')'
   87: 
   88: 
   89: class Stack(object):
--------------------------------------------------------------------------------
[14.17013 s] timeout
   - [#  88] SDL stack4: 
--------------------------------------------------------------------------------
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
-  86:         return display[:-2] + ')'
+  86:         pass
   87: 
   88: 
   89: class Stack(object):
   90:     '''Implementation of Stack.
--------------------------------------------------------------------------------
[4.87994 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_20

def test_case_20():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_1)
        stack_0 = module_0.Stack()
        none_type_3 = None
        node_2 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_2 = module_0.LinkedList(none_type_4)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        node_5 = module_0.Node(none_type_7)
        none_type_8 = None
        linked_list_6 = module_0.LinkedList(none_type_8)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        var_5 = linked_list_6.remove(node_5)
        var_6 = linked_list_6.size()
        assert var_6 == 0
        var_7 = linked_list_3.display()
>       assert var_7 == ')'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:493: AssertionError
   - [#  89] SDL stack4: 
--------------------------------------------------------------------------------
   99:     '''
  100:     
  101:     def __init__(self, data=None):
  102:         '''Initialization.'''
- 103:         self._stack = LinkedList(data)
+ 103:         pass
  104:     
  105:     def push(self, val):
  106:         '''Add val to the stack.'''
  107:         self._stack.push(val)
--------------------------------------------------------------------------------
[4.98384 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_137

def test_case_137():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        var_2 = linked_list_0.size()
        assert var_2 == 0
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_1 = module_0.LinkedList(none_type_3)
        assert linked_list_1.head is None
        var_3 = linked_list_1.size()
        assert var_3 == 0
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        none_type_4 = None
        node_2 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_2)
        float_0 = -484.6
        stack_0 = module_0.Stack(float_0)
        none_type_6 = None
        node_3 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_6 = linked_list_4.size()
        assert var_6 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_7 = linked_list_5.push(node_3)
        none_type_8 = None
        node_4 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_8 = linked_list_6.size()
        assert var_8 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_5 = module_0.Node(linked_list_6)
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_10 = None
        var_9 = linked_list_8.search(none_type_10)
>       var_10 = stack_0.push(var_6)

RANDOM/test_stack4_RANDOM.py:5563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.Stack object at 0x7ff50b298460>, val = 0

>   ???
E   AttributeError: 'Stack' object has no attribute '_stack'

stack4:107: AttributeError
   - [#  90] SDL stack4: 
--------------------------------------------------------------------------------
  103:         self._stack = LinkedList(data)
  104:     
  105:     def push(self, val):
  106:         '''Add val to the stack.'''
- 107:         self._stack.push(val)
+ 107:         pass
  108:     
  109:     def pop(self):
  110:         '''Remove item off the stack.'''
  111:         self._stack.pop()
--------------------------------------------------------------------------------
[2.76960 s] survived
   - [#  91] SDL stack4: 
--------------------------------------------------------------------------------
  107:         self._stack.push(val)
  108:     
  109:     def pop(self):
  110:         '''Remove item off the stack.'''
- 111:         self._stack.pop()
+ 111:         pass
--------------------------------------------------------------------------------
[2.87715 s] survived
   - [#  92] SIR stack4: 
--------------------------------------------------------------------------------
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
-  86:         return display[:-2] + ')'
+  86:         return display[:] + ')'
   87: 
   88: 
   89: class Stack(object):
   90:     '''Implementation of Stack.
--------------------------------------------------------------------------------
[4.87406 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_20

def test_case_20():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_1)
        stack_0 = module_0.Stack()
        none_type_3 = None
        node_2 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_2 = module_0.LinkedList(none_type_4)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        node_5 = module_0.Node(none_type_7)
        none_type_8 = None
        linked_list_6 = module_0.LinkedList(none_type_8)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        var_5 = linked_list_6.remove(node_5)
        var_6 = linked_list_6.size()
        assert var_6 == 0
        var_7 = linked_list_3.display()
>       assert var_7 == ')'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:493: AssertionError
   - [#  93] SVD stack4: 
--------------------------------------------------------------------------------
    7:     '''
    8:     
    9:     def __init__(self, data, next_node=None):
   10:         '''Attribute data and next_node.'''
-  11:         self.data = data
+  11:         data = data
   12:         self.next = next_node
   13: 
   14: 
   15: class LinkedList(object):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  94] SVD stack4: 
--------------------------------------------------------------------------------
    8:     
    9:     def __init__(self, data, next_node=None):
   10:         '''Attribute data and next_node.'''
   11:         self.data = data
-  12:         self.next = next_node
+  12:         next = next_node
   13: 
   14: 
   15: class LinkedList(object):
   16:     '''Method for linked list.
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  95] SVD stack4: 
--------------------------------------------------------------------------------
   27:     '''
   28:     
   29:     def __init__(self, data=None):
   30:         '''Linked list initialized with head.'''
-  31:         self._length = 0
+  31:         _length = 0
   32:         self.head = None
   33:         try:
   34:             for val in data:
   35:                 self.push(val)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  96] SVD stack4: 
--------------------------------------------------------------------------------
   28:     
   29:     def __init__(self, data=None):
   30:         '''Linked list initialized with head.'''
   31:         self._length = 0
-  32:         self.head = None
+  32:         head = None
   33:         try:
   34:             for val in data:
   35:                 self.push(val)
   36:         except TypeError:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  97] SVD stack4: 
--------------------------------------------------------------------------------
   31:         self._length = 0
   32:         self.head = None
   33:         try:
   34:             for val in data:
-  35:                 self.push(val)
+  35:                 push(val)
   36:         except TypeError:
   37:             if data:
   38:                 self.push(data)
   39:     
--------------------------------------------------------------------------------
[4.82385 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_111

def test_case_111():
        str_0 = "-b#G7c0XQ}20'si7|*"
>       linked_list_0 = module_0.LinkedList(str_0)

RANDOM/test_stack4_RANDOM.py:4342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50a340250>, data = "-b#G7c0XQ}20'si7|*"

>   ???
E   NameError: name 'push' is not defined

stack4:35: NameError
   - [#  98] SVD stack4: 
--------------------------------------------------------------------------------
   34:             for val in data:
   35:                 self.push(val)
   36:         except TypeError:
   37:             if data:
-  38:                 self.push(data)
+  38:                 push(data)
   39:     
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
   42:         old_head = self.head
--------------------------------------------------------------------------------
[4.73775 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_31

self = <stack4.LinkedList object at 0x7ff50a3b7b50>
data = <stack4.LinkedList object at 0x7ff50a3b6bc0>

>   ???
E   TypeError: 'LinkedList' object is not iterable

stack4:34: TypeError

During handling of the above exception, another exception occurred:

    def test_case_31():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        none_type_1 = None
        node_0 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_1 = linked_list_1.size()
        assert var_1 == 0
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        node_1 = module_0.Node(linked_list_1)
        none_type_3 = None
        node_2 = module_0.Node(none_type_3)
        none_type_4 = None
        linked_list_3 = module_0.LinkedList(none_type_4)
        assert linked_list_3.head is None
        var_2 = linked_list_3.size()
        assert var_2 == 0
        linked_list_4 = module_0.LinkedList()
        assert linked_list_4.head is None
        var_3 = linked_list_4.push(node_2)
        var_4 = linked_list_3.search(linked_list_3)
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_5 = module_0.LinkedList(none_type_6)
        assert linked_list_5.head is None
        var_5 = linked_list_5.size()
        assert var_5 == 0
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        none_type_7 = None
        node_4 = module_0.Node(none_type_7)
        none_type_8 = None
        linked_list_7 = module_0.LinkedList(none_type_8)
        assert linked_list_7.head is None
        var_6 = linked_list_7.size()
        assert var_6 == 0
        var_7 = linked_list_7.remove(node_4)
        none_type_9 = None
        linked_list_8 = module_0.LinkedList(none_type_9)
        assert linked_list_8.head is None
        var_8 = linked_list_8.size()
        assert var_8 == 0
        var_9 = linked_list_8.remove(var_8)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_9 = module_0.LinkedList(none_type_11)
        assert linked_list_9.head is None
        var_10 = linked_list_9.size()
        assert var_10 == 0
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        var_11 = linked_list_10.push(node_5)
        stack_0 = module_0.Stack()
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        node_7 = module_0.Node(none_type_13)
        none_type_14 = None
        linked_list_11 = module_0.LinkedList(none_type_14)
        assert linked_list_11.head is None
        var_12 = linked_list_11.size()
        assert var_12 == 0
        var_13 = linked_list_11.remove(node_7)
        var_14 = linked_list_11.size()
        assert var_14 == 0
>       stack_1 = module_0.Stack(linked_list_9)

RANDOM/test_stack4_RANDOM.py:917: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
stack4:103: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50a3b7b50>
data = <stack4.LinkedList object at 0x7ff50a3b6bc0>

>   ???
E   NameError: name 'push' is not defined

stack4:38: NameError
   - [#  99] SVD stack4: 
--------------------------------------------------------------------------------
   38:                 self.push(data)
   39:     
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
-  42:         old_head = self.head
+  42:         old_head = head
   43:         self.head = Node(val, old_head)
   44:         self._length += 1
   45:     
   46:     def pop(self):
--------------------------------------------------------------------------------
[4.75217 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_7

def test_case_7():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
>       var_1 = linked_list_1.push(node_0)

RANDOM/test_stack4_RANDOM.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50b4c7370>
val = <stack4.Node object at 0x7ff50b4c56c0>

>   ???
E   NameError: name 'head' is not defined

stack4:42: NameError
   - [# 100] SVD stack4: 
--------------------------------------------------------------------------------
   39:     
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
   42:         old_head = self.head
-  43:         self.head = Node(val, old_head)
+  43:         head = Node(val, old_head)
   44:         self._length += 1
   45:     
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 101] SVD stack4: 
--------------------------------------------------------------------------------
   40:     def push(self, val):
   41:         '''Insert a value at the head of the list.'''
   42:         old_head = self.head
   43:         self.head = Node(val, old_head)
-  44:         self._length += 1
+  44:         _length += 1
   45:     
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 102] SVD stack4: 
--------------------------------------------------------------------------------
   44:         self._length += 1
   45:     
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
-  48:         if not (self.head):
+  48:         if not head:
   49:             raise IndexError('Cannot pop from an empty list')
   50:         to_return = self.head
   51:         self.head = self.head.next
   52:         self._length -= 1
--------------------------------------------------------------------------------
[4.95873 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_79

def test_case_79():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        float_0 = -2532.0
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_1)
        var_6 = linked_list_3.size()
        assert var_6 == 0
        none_type_6 = None
        node_2 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_7 = linked_list_4.size()
        assert var_7 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_8 = linked_list_5.push(node_2)
        var_9 = linked_list_4.search(linked_list_4)
        none_type_8 = None
        node_3 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_10 = linked_list_6.size()
        assert var_10 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_4 = module_0.Node(linked_list_6)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_8 = module_0.LinkedList(none_type_11)
        assert linked_list_8.head is None
        var_11 = linked_list_8.size()
        assert var_11 == 0
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_12 = linked_list_9.push(node_5)
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_10 = module_0.LinkedList(none_type_13)
        assert linked_list_10.head is None
        var_13 = linked_list_10.size()
        assert var_13 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_14 = linked_list_11.push(node_6)
        var_15 = linked_list_11.remove(linked_list_11)
>       var_16 = linked_list_11.pop()

RANDOM/test_stack4_RANDOM.py:2981: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50b29c0a0>

>   ???
E   NameError: name 'head' is not defined

stack4:48: NameError
   - [# 103] SVD stack4: 
--------------------------------------------------------------------------------
   46:     def pop(self):
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
   49:             raise IndexError('Cannot pop from an empty list')
-  50:         to_return = self.head
+  50:         to_return = head
   51:         self.head = self.head.next
   52:         self._length -= 1
   53:         return to_return.data
   54:     
--------------------------------------------------------------------------------
[4.94413 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_79

def test_case_79():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        float_0 = -2532.0
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_1)
        var_6 = linked_list_3.size()
        assert var_6 == 0
        none_type_6 = None
        node_2 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_7 = linked_list_4.size()
        assert var_7 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_8 = linked_list_5.push(node_2)
        var_9 = linked_list_4.search(linked_list_4)
        none_type_8 = None
        node_3 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_10 = linked_list_6.size()
        assert var_10 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_4 = module_0.Node(linked_list_6)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_8 = module_0.LinkedList(none_type_11)
        assert linked_list_8.head is None
        var_11 = linked_list_8.size()
        assert var_11 == 0
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_12 = linked_list_9.push(node_5)
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_10 = module_0.LinkedList(none_type_13)
        assert linked_list_10.head is None
        var_13 = linked_list_10.size()
        assert var_13 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_14 = linked_list_11.push(node_6)
        var_15 = linked_list_11.remove(linked_list_11)
>       var_16 = linked_list_11.pop()

RANDOM/test_stack4_RANDOM.py:2981: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50b27b610>

>   ???
E   NameError: name 'head' is not defined

stack4:50: NameError
   - [# 104] SVD stack4: 
--------------------------------------------------------------------------------
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
   49:             raise IndexError('Cannot pop from an empty list')
   50:         to_return = self.head
-  51:         self.head = self.head.next
+  51:         head = self.head.next
   52:         self._length -= 1
   53:         return to_return.data
   54:     
   55:     def size(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 105] SVD stack4: 
--------------------------------------------------------------------------------
   47:         '''Remove the first value and return it.'''
   48:         if not (self.head):
   49:             raise IndexError('Cannot pop from an empty list')
   50:         to_return = self.head
-  51:         self.head = self.head.next
+  51:         self.head = head.next
   52:         self._length -= 1
   53:         return to_return.data
   54:     
   55:     def size(self):
--------------------------------------------------------------------------------
[4.93675 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_79

def test_case_79():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        stack_0 = module_0.Stack()
        none_type_2 = None
        linked_list_1 = module_0.LinkedList(none_type_2)
        assert linked_list_1.head is None
        var_2 = linked_list_1.size()
        assert var_2 == 0
        float_0 = -2532.0
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.push(float_0)
        none_type_4 = None
        node_1 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_1)
        var_6 = linked_list_3.size()
        assert var_6 == 0
        none_type_6 = None
        node_2 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_7 = linked_list_4.size()
        assert var_7 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_8 = linked_list_5.push(node_2)
        var_9 = linked_list_4.search(linked_list_4)
        none_type_8 = None
        node_3 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_10 = linked_list_6.size()
        assert var_10 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_4 = module_0.Node(linked_list_6)
        none_type_10 = None
        node_5 = module_0.Node(none_type_10)
        none_type_11 = None
        linked_list_8 = module_0.LinkedList(none_type_11)
        assert linked_list_8.head is None
        var_11 = linked_list_8.size()
        assert var_11 == 0
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        var_12 = linked_list_9.push(node_5)
        none_type_12 = None
        node_6 = module_0.Node(none_type_12)
        none_type_13 = None
        linked_list_10 = module_0.LinkedList(none_type_13)
        assert linked_list_10.head is None
        var_13 = linked_list_10.size()
        assert var_13 == 0
        linked_list_11 = module_0.LinkedList()
        assert linked_list_11.head is None
        var_14 = linked_list_11.push(node_6)
        var_15 = linked_list_11.remove(linked_list_11)
>       var_16 = linked_list_11.pop()

RANDOM/test_stack4_RANDOM.py:2981: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50b2a4070>

>   ???
E   NameError: name 'head' is not defined

stack4:51: NameError
   - [# 106] SVD stack4: 
--------------------------------------------------------------------------------
   48:         if not (self.head):
   49:             raise IndexError('Cannot pop from an empty list')
   50:         to_return = self.head
   51:         self.head = self.head.next
-  52:         self._length -= 1
+  52:         _length -= 1
   53:         return to_return.data
   54:     
   55:     def size(self):
   56:         '''Return the length of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 107] SVD stack4: 
--------------------------------------------------------------------------------
   53:         return to_return.data
   54:     
   55:     def size(self):
   56:         '''Return the length of the list.'''
-  57:         return self._length
+  57:         return _length
   58:     
   59:     def search(self, val):
   60:         '''Return the node containing val.'''
   61:         curr = self.head
--------------------------------------------------------------------------------
[4.82714 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_0

def test_case_0():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
>       var_0 = linked_list_0.size()

RANDOM/test_stack4_RANDOM.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50b27a950>

>   ???
E   NameError: name '_length' is not defined

stack4:57: NameError
   - [# 108] SVD stack4: 
--------------------------------------------------------------------------------
   57:         return self._length
   58:     
   59:     def search(self, val):
   60:         '''Return the node containing val.'''
-  61:         curr = self.head
+  61:         curr = head
   62:         while curr:
   63:             if curr.data == val:
   64:                 return curr
   65:             curr = curr.next
--------------------------------------------------------------------------------
[4.79937 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_17

def test_case_17():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_2 = linked_list_3.push(node_1)
        none_type_4 = None
        node_2 = module_0.Node(none_type_4)
        none_type_5 = None
        node_3 = module_0.Node(none_type_5)
        none_type_6 = None
        linked_list_4 = module_0.LinkedList(none_type_6)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        node_4 = module_0.Node(linked_list_4)
        none_type_7 = None
        linked_list_6 = module_0.LinkedList(none_type_7)
        assert linked_list_6.head is None
        var_4 = linked_list_6.size()
        assert var_4 == 0
        none_type_8 = None
        node_5 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_7 = module_0.LinkedList(none_type_9)
        assert linked_list_7.head is None
        var_5 = linked_list_7.size()
        assert var_5 == 0
        var_6 = linked_list_7.remove(node_5)
        var_7 = linked_list_7.size()
        assert var_7 == 0
        str_0 = 'zEl8UtUv\n8yj=*z'
>       var_8 = linked_list_6.search(str_0)

RANDOM/test_stack4_RANDOM.py:403: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50b27b100>, val = 'zEl8UtUv\n8yj=*z'

>   ???
E   NameError: name 'head' is not defined

stack4:61: NameError
   - [# 109] SVD stack4: 
--------------------------------------------------------------------------------
   65:             curr = curr.next
   66:     
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
-  69:         curr = self.head
+  69:         curr = head
   70:         if (curr and val is self.head.data):
   71:             self.head = self.head.next
   72:             self._length -= 1
   73:         while curr:
--------------------------------------------------------------------------------
[4.83496 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_3

def test_case_3():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        node_1 = module_0.Node(none_type_1)
        none_type_2 = None
        linked_list_0 = module_0.LinkedList(none_type_2)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
>       var_2 = linked_list_2.remove(none_type_3)

RANDOM/test_stack4_RANDOM.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50b28fee0>, val = None

>   ???
E   NameError: name 'head' is not defined

stack4:69: NameError
   - [# 110] SVD stack4: 
--------------------------------------------------------------------------------
   66:     
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
-  70:         if (curr and val is self.head.data):
+  70:         if (curr and val is head.data):
   71:             self.head = self.head.next
   72:             self._length -= 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
--------------------------------------------------------------------------------
[4.80998 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_22

def test_case_22():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_0)
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        node_2 = module_0.Node(linked_list_2)
>       var_3 = linked_list_1.remove(var_2)

RANDOM/test_stack4_RANDOM.py:564: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50b2f8640>, val = 0

>   ???
E   NameError: name 'head' is not defined

stack4:70: NameError
   - [# 111] SVD stack4: 
--------------------------------------------------------------------------------
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
   70:         if (curr and val is self.head.data):
-  71:             self.head = self.head.next
+  71:             head = self.head.next
   72:             self._length -= 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 112] SVD stack4: 
--------------------------------------------------------------------------------
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
   70:         if (curr and val is self.head.data):
-  71:             self.head = self.head.next
+  71:             self.head = head.next
   72:             self._length -= 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
--------------------------------------------------------------------------------
[4.89854 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_211

def test_case_211():
        none_type_0 = None
        linked_list_0 = module_0.LinkedList(none_type_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        float_0 = -2532.0
        none_type_1 = None
        linked_list_1 = module_0.LinkedList(none_type_1)
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(float_0)
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_4 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_4.head).__module__}.{type(linked_list_4.head).__qualname__}' == 'stack4.Node'
        var_2 = linked_list_4.size()
        assert var_2 == 18
        linked_list_5 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_5.head).__module__}.{type(linked_list_5.head).__qualname__}' == 'stack4.Node'
        float_1 = -484.6
        stack_0 = module_0.Stack(float_1)
        none_type_2 = None
        node_0 = module_0.Node(none_type_2)
        node_1 = module_0.Node(node_0)
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
>       var_3 = linked_list_1.remove(float_0)

RANDOM/test_stack4_RANDOM.py:8641: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50a3c2800>, val = -2532.0

>   ???
E   NameError: name 'head' is not defined

stack4:71: NameError
   - [# 113] SVD stack4: 
--------------------------------------------------------------------------------
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
   70:         if (curr and val is self.head.data):
   71:             self.head = self.head.next
-  72:             self._length -= 1
+  72:             _length -= 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
   76:                 self._length -= 1
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 114] SVD stack4: 
--------------------------------------------------------------------------------
   72:             self._length -= 1
   73:         while curr:
   74:             if (curr.next and curr.next.data == val):
   75:                 curr.next = curr.next.next
-  76:                 self._length -= 1
+  76:                 _length -= 1
   77:             curr = curr.next
   78:     
   79:     def display(self):
   80:         '''Display list as a tuple.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 115] SVD stack4: 
--------------------------------------------------------------------------------
   77:             curr = curr.next
   78:     
   79:     def display(self):
   80:         '''Display list as a tuple.'''
-  81:         curr = self.head
+  81:         curr = head
   82:         display = '('
   83:         while curr:
   84:             display += str(curr.data) + ', '
   85:             curr = curr.next
--------------------------------------------------------------------------------
[4.88891 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_9

def test_case_9():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        var_1 = linked_list_1.push(node_0)
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_2 = linked_list_2.size()
        assert var_2 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
>       var_3 = linked_list_1.display()

RANDOM/test_stack4_RANDOM.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.LinkedList object at 0x7ff50a312e30>

>   ???
E   NameError: name 'head' is not defined

stack4:81: NameError
   - [# 116] SVD stack4: 
--------------------------------------------------------------------------------
   99:     '''
  100:     
  101:     def __init__(self, data=None):
  102:         '''Initialization.'''
- 103:         self._stack = LinkedList(data)
+ 103:         _stack = LinkedList(data)
  104:     
  105:     def push(self, val):
  106:         '''Add val to the stack.'''
  107:         self._stack.push(val)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 117] SVD stack4: 
--------------------------------------------------------------------------------
  103:         self._stack = LinkedList(data)
  104:     
  105:     def push(self, val):
  106:         '''Add val to the stack.'''
- 107:         self._stack.push(val)
+ 107:         _stack.push(val)
  108:     
  109:     def pop(self):
  110:         '''Remove item off the stack.'''
  111:         self._stack.pop()
--------------------------------------------------------------------------------
[4.98978 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_137

def test_case_137():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        var_1 = linked_list_0.remove(node_0)
        var_2 = linked_list_0.size()
        assert var_2 == 0
        none_type_2 = None
        node_1 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_1 = module_0.LinkedList(none_type_3)
        assert linked_list_1.head is None
        var_3 = linked_list_1.size()
        assert var_3 == 0
        linked_list_2 = module_0.LinkedList()
        assert linked_list_2.head is None
        none_type_4 = None
        node_2 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_3 = module_0.LinkedList(none_type_5)
        assert linked_list_3.head is None
        var_4 = linked_list_3.size()
        assert var_4 == 0
        var_5 = linked_list_3.remove(node_2)
        float_0 = -484.6
        stack_0 = module_0.Stack(float_0)
        none_type_6 = None
        node_3 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_4 = module_0.LinkedList(none_type_7)
        assert linked_list_4.head is None
        var_6 = linked_list_4.size()
        assert var_6 == 0
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        var_7 = linked_list_5.push(node_3)
        none_type_8 = None
        node_4 = module_0.Node(none_type_8)
        none_type_9 = None
        linked_list_6 = module_0.LinkedList(none_type_9)
        assert linked_list_6.head is None
        var_8 = linked_list_6.size()
        assert var_8 == 0
        linked_list_7 = module_0.LinkedList()
        assert linked_list_7.head is None
        node_5 = module_0.Node(linked_list_6)
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_10 = None
        var_9 = linked_list_8.search(none_type_10)
>       var_10 = stack_0.push(var_6)

RANDOM/test_stack4_RANDOM.py:5563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.Stack object at 0x7ff50b2a8640>, val = 0

>   ???
E   NameError: name '_stack' is not defined

stack4:107: NameError
   - [# 118] SVD stack4: 
--------------------------------------------------------------------------------
  107:         self._stack.push(val)
  108:     
  109:     def pop(self):
  110:         '''Remove item off the stack.'''
- 111:         self._stack.pop()
+ 111:         _stack.pop()
--------------------------------------------------------------------------------
[5.21052 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_360

def test_case_360():
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_0 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_0.head is None
        var_0 = linked_list_0.size()
        assert var_0 == 0
        linked_list_1 = module_0.LinkedList()
        assert linked_list_1.head is None
        node_1 = module_0.Node(linked_list_0)
        var_1 = linked_list_1.remove(var_0)
        var_2 = linked_list_0.display()
        assert var_2 == ')'
        none_type_2 = None
        node_2 = module_0.Node(none_type_2, none_type_2)
        int_0 = 5663
        stack_0 = module_0.Stack(int_0)
        none_type_3 = None
        linked_list_2 = module_0.LinkedList(none_type_3)
        assert linked_list_2.head is None
        var_3 = linked_list_2.size()
        assert var_3 == 0
        var_4 = linked_list_2.remove(var_3)
        var_5 = linked_list_2.display()
        assert var_5 == ')'
        none_type_4 = None
        linked_list_3 = module_0.LinkedList(none_type_4)
        assert linked_list_3.head is None
        var_6 = linked_list_3.size()
        assert var_6 == 0
        var_7 = linked_list_3.remove(var_6)
        none_type_5 = None
        linked_list_4 = module_0.LinkedList(none_type_5)
        assert linked_list_4.head is None
        var_8 = linked_list_4.size()
        assert var_8 == 0
        var_9 = linked_list_4.search(none_type_5)
        none_type_6 = None
        node_3 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_5 = module_0.LinkedList(none_type_7)
        assert linked_list_5.head is None
        var_10 = linked_list_5.size()
        assert var_10 == 0
        linked_list_6 = module_0.LinkedList()
        assert linked_list_6.head is None
        node_4 = module_0.Node(linked_list_5)
        var_11 = linked_list_6.remove(var_10)
        none_type_8 = None
        linked_list_7 = module_0.LinkedList(none_type_8)
        assert linked_list_7.head is None
        var_12 = linked_list_7.size()
        assert var_12 == 0
        var_13 = linked_list_7.search(var_12)
        int_1 = 5663
        stack_1 = module_0.Stack(int_1)
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        none_type_9 = None
        node_5 = module_0.Node(none_type_9)
        none_type_10 = None
        linked_list_9 = module_0.LinkedList(none_type_10)
        assert linked_list_9.head is None
        var_14 = linked_list_9.size()
        assert var_14 == 0
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        var_15 = linked_list_10.size()
        assert var_15 == 0
>       var_16 = stack_1.pop()

RANDOM/test_stack4_RANDOM.py:15434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <stack4.Stack object at 0x7ff50b2b4c10>

>   ???
E   NameError: name '_stack' is not defined

stack4:111: NameError
   - [# 119] ZIL stack4: 
--------------------------------------------------------------------------------
   31:         self._length = 0
   32:         self.head = None
   33:         try:
   34:             for val in data:
-  35:                 self.push(val)
+  35:                 break
   36:         except TypeError:
   37:             if data:
   38:                 self.push(data)
   39:     
--------------------------------------------------------------------------------
[4.91464 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_111

def test_case_111():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
>       assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:4343: AssertionError
   - [# 120] ZIL stack4: 
--------------------------------------------------------------------------------
   59:     def search(self, val):
   60:         '''Return the node containing val.'''
   61:         curr = self.head
   62:         while curr:
-  63:             if curr.data == val:
-  64:                 return curr
-  65:             curr = curr.next
+  63:             break
+  64:     
+  65:     
   66:     
   67:     def remove(self, val):
   68:         '''Remove node from list if exists.'''
   69:         curr = self.head
--------------------------------------------------------------------------------
[6.67167 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_1903

def test_case_1903():
        bool_0 = True
        linked_list_0 = module_0.LinkedList(bool_0)
        assert f'{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}' == 'stack4.LinkedList'
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.search(bool_0)
>       assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'stack4.Node'
E       AssertionError

RANDOM/test_stack4_RANDOM.py:83773: AssertionError
   - [# 121] ZIL stack4: 
--------------------------------------------------------------------------------
   70:         if (curr and val is self.head.data):
   71:             self.head = self.head.next
   72:             self._length -= 1
   73:         while curr:
-  74:             if (curr.next and curr.next.data == val):
-  75:                 curr.next = curr.next.next
-  76:                 self._length -= 1
-  77:             curr = curr.next
+  74:             break
+  75:     
+  76:     
+  77:     
   78:     
   79:     def display(self):
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
--------------------------------------------------------------------------------
[2.81667 s] survived
   - [# 122] ZIL stack4: 
--------------------------------------------------------------------------------
   80:         '''Display list as a tuple.'''
   81:         curr = self.head
   82:         display = '('
   83:         while curr:
-  84:             display += str(curr.data) + ', '
-  85:             curr = curr.next
+  84:             break
+  85:         
   86:         return display[:-2] + ')'
   87: 
   88: 
   89: class Stack(object):
--------------------------------------------------------------------------------
[5.05297 s] killed by RANDOM/test_stack4_RANDOM.py::test_case_274

def test_case_274():
        str_0 = "-b#G7c0XQ}20'si7|*"
        linked_list_0 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'stack4.Node'
        var_0 = linked_list_0.size()
        assert var_0 == 18
        linked_list_1 = module_0.LinkedList(str_0)
        assert f'{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}' == 'stack4.Node'
        none_type_0 = None
        node_0 = module_0.Node(none_type_0)
        none_type_1 = None
        linked_list_2 = module_0.LinkedList(none_type_1)
        assert f'{type(linked_list_2).__module__}.{type(linked_list_2).__qualname__}' == 'stack4.LinkedList'
        assert linked_list_2.head is None
        var_1 = linked_list_2.size()
        assert var_1 == 0
        linked_list_3 = module_0.LinkedList()
        assert linked_list_3.head is None
        var_2 = linked_list_3.push(node_0)
        node_1 = module_0.Node(linked_list_2)
        none_type_2 = None
        node_2 = module_0.Node(none_type_2)
        none_type_3 = None
        linked_list_4 = module_0.LinkedList(none_type_3)
        assert linked_list_4.head is None
        var_3 = linked_list_4.size()
        assert var_3 == 0
        var_4 = linked_list_4.remove(node_2)
        linked_list_5 = module_0.LinkedList()
        assert linked_list_5.head is None
        none_type_4 = None
        node_3 = module_0.Node(none_type_4)
        none_type_5 = None
        linked_list_6 = module_0.LinkedList(none_type_5)
        assert linked_list_6.head is None
        var_5 = linked_list_6.size()
        assert var_5 == 0
        var_6 = linked_list_6.remove(node_3)
        none_type_6 = None
        node_4 = module_0.Node(none_type_6)
        none_type_7 = None
        linked_list_7 = module_0.LinkedList(none_type_7)
        assert linked_list_7.head is None
        var_7 = linked_list_7.size()
        assert var_7 == 0
        linked_list_8 = module_0.LinkedList()
        assert linked_list_8.head is None
        node_5 = module_0.Node(linked_list_7)
        node_6 = module_0.Node(node_4)
        none_type_8 = None
        node_7 = module_0.Node(none_type_8)
        linked_list_9 = module_0.LinkedList()
        assert linked_list_9.head is None
        none_type_9 = None
        node_8 = module_0.Node(none_type_9)
        bytes_0 = b"'\xd2~&\xb0v@Y\x89Z\x7f"
        none_type_10 = None
        node_9 = module_0.Node(bytes_0, none_type_10)
        none_type_11 = None
        node_10 = module_0.Node(none_type_11)
        linked_list_10 = module_0.LinkedList()
        assert linked_list_10.head is None
        var_8 = linked_list_10.display()
        assert var_8 == ')'
        none_type_12 = None
        linked_list_11 = module_0.LinkedList(none_type_12)
        assert linked_list_11.head is None
        var_9 = linked_list_11.size()
        assert var_9 == 0
        var_10 = linked_list_11.search(var_9)
        var_11 = linked_list_1.display()
>       assert var_11 == "(*, |, 7, i, s, ', 0, 2, }, Q, X, 0, c, 7, G, #, b, -)"
E       AssertionError

RANDOM/test_stack4_RANDOM.py:11459: AssertionError
[*] Mutation score [555.58293 s]: 86.3%
   - all: 122
   - killed: 79 (64.8%)
   - survived: 13 (10.7%)
   - incompetent: 27 (22.1%)
   - timeout: 3 (2.5%)
