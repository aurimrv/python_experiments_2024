[34m[*][0m Start mutation process:
[36m   -[0m targets: binarySearchTree3.py
[36m   -[0m tests: ./ALL-SMART-GPT-MUTATEST
[34m[*][0m 175 tests passed:
[36m   -[0m test_binarySearchTree3_DYNAMOSA [0.26787 s]
[36m   -[0m test_binarySearchTree3_MOSA [0.11444 s]
[36m   -[0m test_binarySearchTree3_MUTATEST [0.09640 s]
[36m   -[0m test_binarySearchTree3_WHOLE_SUITE [0.10533 s]
[36m   -[0m test_binarySearchTree3_MIO [0.12611 s]
[34m[*][0m Start mutants generation and execution:
[36m   -[0m [#   1] AOR binarySearchTree3: 
--------------------------------------------------------------------------------
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
[34m- 306:         return leftbranch - rightbranch[0m
[32m+ 306:         return leftbranch + rightbranch[0m
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
--------------------------------------------------------------------------------
[0.23665 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [#   2] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
[34m-  49:         self._length += 1[0m
[32m+  49:         self._length -= 1[0m
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
--------------------------------------------------------------------------------
[0.15658 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7abec130>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
[36m   -[0m [#   3] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
[34m-  61:         self._length -= 1[0m
[32m+  61:         self._length += 1[0m
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
--------------------------------------------------------------------------------
[0.18057 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
        popped_value = dll.pop()
    
        assert popped_value == 3
    
        assert dll.head.prev is None
    
>       assert dll._length == 2
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:15: AssertionError
[36m   -[0m [#   4] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
[34m-  74:         self._length += 1[0m
[32m+  74:         self._length -= 1[0m
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
--------------------------------------------------------------------------------
[0.22479 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
>       assert dll._repr() == [4, 3, 2, 1, 5]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:27: AssertionError
[36m   -[0m [#   5] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
[34m-  86:         self._length -= 1[0m
[32m+  86:         self._length += 1[0m
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
--------------------------------------------------------------------------------
[0.16209 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
>       assert dll._repr() == [3, 2, 1]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a969e70>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [#   6] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
[34m- 104:                 self._length -= 1[0m
[32m+ 104:                 self._length += 1[0m
  105:                 return
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
--------------------------------------------------------------------------------
[0.18010 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.remove(2)
>       assert dll._repr() == [3, 1]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a3c60b0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [#   7] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
[34m- 241:             self._size += 1[0m
[32m+ 241:             self._size -= 1[0m
  242:         else:
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
--------------------------------------------------------------------------------
[0.16855 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
>       assert bst_case1._size == 6
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:151: AssertionError
[36m   -[0m [#   8] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  255:         child = getattr(curr, side)
  256:         if child:
  257:             count = self._step(val, child)
  258:             if curr.height <= count:
[34m- 259:                 curr.height += 1[0m
[32m+ 259:                 curr.height -= 1[0m
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
  263:             if curr.height == 1:
--------------------------------------------------------------------------------
[0.21125 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [#   9] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
[34m- 262:             self._size += 1[0m
[32m+ 262:             self._size -= 1[0m
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
  266:     
--------------------------------------------------------------------------------
[0.15274 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [#  10] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
  263:             if curr.height == 1:
[34m- 264:                 curr.height += 1[0m
[32m+ 264:                 curr.height -= 1[0m
  265:         return curr
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
--------------------------------------------------------------------------------
[0.21691 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_WHOLE_SUITE.py::test_case_6

def test_case_6():
        bytes_0 = b'\xd0\x08\x1b$\xda'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.in_order()
        var_1 = bst_0.depth()
>       assert var_1 == 4
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_WHOLE_SUITE.py:81: AssertionError
[36m   -[0m [#  11] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
[34m- 378:             self._size += 1[0m
[32m+ 378:             self._size -= 1[0m
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
  382:             
--------------------------------------------------------------------------------
[0.16620 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case3.delete(5)
        assert list(bst_case3.in_order()) == [2, 3, 4, 6, 7, 8]
>       assert bst_case3._size == 6
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:163: AssertionError
[36m   -[0m [#  12] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
  388:                 self.root = child
  389:         
[34m- 390:         self._size -= 1[0m
[32m+ 390:         self._size += 1[0m
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
--------------------------------------------------------------------------------
[0.26239 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
>       assert bst_case1._size == 6
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:151: AssertionError
[36m   -[0m [#  13] BCR binarySearchTree3: 
--------------------------------------------------------------------------------
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
[34m- 118:                 break[0m
[32m+ 118:                 continue[0m
  119:         return l
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
--------------------------------------------------------------------------------
[5.00352 s] [33mtimeout[0m
[36m   -[0m [#  14] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
    2: 
    3: class NodeDLL(object):
    4:     '''Node class for data storage.'''
    5:     
[34m-   6:     def __init__(self, data=None, next_node=None, prev=None):[0m
[34m-   7:         '''Initialize Node.'''[0m
[34m-   8:         self.data = data[0m
[34m-   9:         self.next = next_node[0m
[34m-  10:         self.prev = prev[0m
[34m-  11:     [0m
[32m+   6:     @classmethod[0m
[32m+   7:     def __init__(self, data=None, next_node=None, prev=None):[0m
[32m+   8:         '''Initialize Node.'''[0m
[32m+   9:         self.data = data[0m
[32m+  10:         self.next = next_node[0m
[32m+  11:         self.prev = prev[0m
   12:     def __repr__(self):
   13:         '''String representation.'''
   14:         return 'Value: {}'.format(self.data)
   15: 
--------------------------------------------------------------------------------
[0.16739 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: AssertionError
[36m   -[0m [#  15] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
    8:         self.data = data
    9:         self.next = next_node
   10:         self.prev = prev
   11:     
[34m-  12:     def __repr__(self):[0m
[34m-  13:         '''String representation.'''[0m
[34m-  14:         return 'Value: {}'.format(self.data)[0m
[34m-  15: [0m
[32m+  12:     @classmethod[0m
[32m+  13:     def __repr__(self):[0m
[32m+  14:         '''String representation.'''[0m
[32m+  15:         return 'Value: {}'.format(self.data)[0m
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
   19: 
--------------------------------------------------------------------------------
[0.20910 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_45

def test_case_45():
        node_d_l_l_0 = module_0.NodeDLL()
>       var_0 = node_d_l_l_0.__repr__()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:369: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.NodeDLL'>

>   ???
E   AttributeError: type object 'NodeDLL' has no attribute 'data'

binarySearchTree3:15: AttributeError
[36m   -[0m [#  16] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   25:     remove(val) - will remove the first instance of (val) found in the list,
   26:     starting from the head.
   27:     '''
   28:     
[34m-  29:     def __init__(self, data=None):[0m
[34m-  30:         '''Initialize list.'''[0m
[34m-  31:         self.head = None[0m
[34m-  32:         self.tail = None[0m
[34m-  33:         self._length = 0[0m
[34m-  34:         try:[0m
[34m-  35:             for val in data:[0m
[34m-  36:                 self.push(val)[0m
[34m-  37:         except TypeError:[0m
[34m-  38:             if data:[0m
[34m-  39:                 self.push(data)[0m
[34m-  40:     [0m
[32m+  29:     @classmethod[0m
[32m+  30:     def __init__(self, data=None):[0m
[32m+  31:         '''Initialize list.'''[0m
[32m+  32:         self.head = None[0m
[32m+  33:         self.tail = None[0m
[32m+  34:         self._length = 0[0m
[32m+  35:         try:[0m
[32m+  36:             for val in data:[0m
[32m+  37:                 self.push(val)[0m
[32m+  38:         except TypeError:[0m
[32m+  39:             if data:[0m
[32m+  40:                 self.push(data)[0m
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
--------------------------------------------------------------------------------
[0.16330 s] [36mincompetent[0m

TypeError: binarySearchTree3:40: TypeError: DoubleLinkedList.push() missing 1 required positional argument: 'val'

[36m   -[0m [#  17] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
   40:     
[34m-  41:     def push(self, val):[0m
[34m-  42:         '''Add val to the head of the list.'''[0m
[34m-  43:         old_head = self.head[0m
[34m-  44:         self.head = NodeDLL(val, next_node=old_head)[0m
[34m-  45:         if old_head:[0m
[34m-  46:             old_head.prev = self.head[0m
[34m-  47:         if not (self.tail):[0m
[34m-  48:             self.tail = self.head[0m
[34m-  49:         self._length += 1[0m
[34m-  50:     [0m
[32m+  41:     @classmethod[0m
[32m+  42:     def push(self, val):[0m
[32m+  43:         '''Add val to the head of the list.'''[0m
[32m+  44:         old_head = self.head[0m
[32m+  45:         self.head = NodeDLL(val, next_node=old_head)[0m
[32m+  46:         if old_head:[0m
[32m+  47:             old_head.prev = self.head[0m
[32m+  48:         if not (self.tail):[0m
[32m+  49:             self.tail = self.head[0m
[32m+  50:         self._length += 1[0m
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
   54:         if self._length < 1:
--------------------------------------------------------------------------------
[0.15577 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.DoubleLinkedList'>, val = 1

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

binarySearchTree3:44: AttributeError
[36m   -[0m [#  18] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   47:         if not (self.tail):
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
[34m-  51:     def pop(self):[0m
[34m-  52:         '''Remove the val from the head of the list.'''[0m
[34m-  53:         to_return = self.head[0m
[34m-  54:         if self._length < 1:[0m
[34m-  55:             raise IndexError('Cannot pop from an empty list.')[0m
[34m-  56:         [0m
[34m-  57:         new_head = self.head.next[0m
[34m-  58:         if new_head:[0m
[34m-  59:             new_head.prev = None[0m
[34m-  60:         self.head = new_head[0m
[34m-  61:         self._length -= 1[0m
[34m-  62:         if self._length < 1:[0m
[34m-  63:             self.tail = None[0m
[34m-  64:         return to_return.data[0m
[34m-  65:     [0m
[32m+  51:     @classmethod[0m
[32m+  52:     def pop(self):[0m
[32m+  53:         '''Remove the val from the head of the list.'''[0m
[32m+  54:         to_return = self.head[0m
[32m+  55:         if self._length < 1:[0m
[32m+  56:             raise IndexError('Cannot pop from an empty list.')[0m
[32m+  57:         [0m
[32m+  58:         new_head = self.head.next[0m
[32m+  59:         if new_head:[0m
[32m+  60:             new_head.prev = None[0m
[32m+  61:         self.head = new_head[0m
[32m+  62:         self._length -= 1[0m
[32m+  63:         if self._length < 1:[0m
[32m+  64:             self.tail = None[0m
[32m+  65:         return to_return.data[0m
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
--------------------------------------------------------------------------------
[0.18167 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.DoubleLinkedList'>

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

binarySearchTree3:54: AttributeError
[36m   -[0m [#  19] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
[34m-  66:     def append(self, val):[0m
[34m-  67:         '''Add val to the tail of the list.'''[0m
[34m-  68:         old_tail = self.tail[0m
[34m-  69:         self.tail = NodeDLL(val, prev=old_tail)[0m
[34m-  70:         if old_tail:[0m
[34m-  71:             old_tail.next = self.tail[0m
[34m-  72:         if self._length < 1:[0m
[34m-  73:             self.head = self.tail[0m
[34m-  74:         self._length += 1[0m
[34m-  75:     [0m
[32m+  66:     @classmethod[0m
[32m+  67:     def append(self, val):[0m
[32m+  68:         '''Add val to the tail of the list.'''[0m
[32m+  69:         old_tail = self.tail[0m
[32m+  70:         self.tail = NodeDLL(val, prev=old_tail)[0m
[32m+  71:         if old_tail:[0m
[32m+  72:             old_tail.next = self.tail[0m
[32m+  73:         if self._length < 1:[0m
[32m+  74:             self.head = self.tail[0m
[32m+  75:         self._length += 1[0m
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
   79:         if self._length < 1:
--------------------------------------------------------------------------------
[0.17672 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
>       dll.append(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.DoubleLinkedList'>, val = 5

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'tail'

binarySearchTree3:69: AttributeError
[36m   -[0m [#  20] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   72:         if self._length < 1:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
[34m-  76:     def shift(self):[0m
[34m-  77:         '''Remove the val from the tail of the list.'''[0m
[34m-  78:         to_return = self.tail[0m
[34m-  79:         if self._length < 1:[0m
[34m-  80:             raise IndexError('Cannot shift from an empty list.')[0m
[34m-  81:         [0m
[34m-  82:         new_tail = self.tail.prev[0m
[34m-  83:         if new_tail:[0m
[34m-  84:             new_tail.next = None[0m
[34m-  85:         self.tail = new_tail[0m
[34m-  86:         self._length -= 1[0m
[34m-  87:         if self._length < 1:[0m
[34m-  88:             self.tail = None[0m
[34m-  89:         return to_return.data[0m
[34m-  90:     [0m
[32m+  76:     @classmethod[0m
[32m+  77:     def shift(self):[0m
[32m+  78:         '''Remove the val from the tail of the list.'''[0m
[32m+  79:         to_return = self.tail[0m
[32m+  80:         if self._length < 1:[0m
[32m+  81:             raise IndexError('Cannot shift from an empty list.')[0m
[32m+  82:         [0m
[32m+  83:         new_tail = self.tail.prev[0m
[32m+  84:         if new_tail:[0m
[32m+  85:             new_tail.next = None[0m
[32m+  86:         self.tail = new_tail[0m
[32m+  87:         self._length -= 1[0m
[32m+  88:         if self._length < 1:[0m
[32m+  89:             self.tail = None[0m
[32m+  90:         return to_return.data[0m
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
--------------------------------------------------------------------------------
[0.22026 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
>       dll.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.DoubleLinkedList'>

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'tail'

binarySearchTree3:79: AttributeError
[36m   -[0m [#  21] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
[34m-  91:     def remove(self, val):[0m
[34m-  92:         '''Remove first occurance of val from list.'''[0m
[34m-  93:         curr = self.head[0m
[34m-  94:         while curr:[0m
[34m-  95:             if curr.data is val:[0m
[34m-  96:                 if self._length == 1:[0m
[34m-  97:                     (self.head, self.tail) = (None, None)[0m
[34m-  98:                 elif (curr is not self.head and curr is not self.tail):[0m
[34m-  99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)[0m
[34m- 100:                 elif curr is self.head:[0m
[34m- 101:                     (self.head, curr.next.prev) = (curr.next, None)[0m
[34m- 102:                 elif curr is self.tail:[0m
[34m- 103:                     (self.tail, curr.prev.next) = (curr.prev, None)[0m
[34m- 104:                 self._length -= 1[0m
[34m- 105:                 return[0m
[34m- 106:             curr = curr.next[0m
[34m- 107:         [0m
[34m- 108:         raise ValueError('{} is not in the list'.format(val))[0m
[34m- 109:     [0m
[32m+  91:     @classmethod[0m
[32m+  92:     def remove(self, val):[0m
[32m+  93:         '''Remove first occurance of val from list.'''[0m
[32m+  94:         curr = self.head[0m
[32m+  95:         while curr:[0m
[32m+  96:             if curr.data is val:[0m
[32m+  97:                 if self._length == 1:[0m
[32m+  98:                     (self.head, self.tail) = (None, None)[0m
[32m+  99:                 elif (curr is not self.head and curr is not self.tail):[0m
[32m+ 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)[0m
[32m+ 101:                 elif curr is self.head:[0m
[32m+ 102:                     (self.head, curr.next.prev) = (curr.next, None)[0m
[32m+ 103:                 elif curr is self.tail:[0m
[32m+ 104:                     (self.tail, curr.prev.next) = (curr.prev, None)[0m
[32m+ 105:                 self._length -= 1[0m
[32m+ 106:                 return[0m
[32m+ 107:             curr = curr.next[0m
[32m+ 108:         [0m
[32m+ 109:         raise ValueError('{} is not in the list'.format(val))[0m
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
  113:         while True:
--------------------------------------------------------------------------------
[0.16904 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
>       dll.remove(2)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.DoubleLinkedList'>, val = 2

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

binarySearchTree3:94: AttributeError
[36m   -[0m [#  22] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
[34m- 110:     def _repr(self):[0m
[34m- 111:         '''Return list representation of dll.'''[0m
[34m- 112:         l = [][0m
[34m- 113:         while True:[0m
[34m- 114:             try:[0m
[34m- 115:                 popped_data = self.pop()[0m
[34m- 116:                 l.append(popped_data)[0m
[34m- 117:             except IndexError:[0m
[34m- 118:                 break[0m
[34m- 119:         return l[0m
[34m- 120: [0m
[32m+ 110:     @classmethod[0m
[32m+ 111:     def _repr(self):[0m
[32m+ 112:         '''Return list representation of dll.'''[0m
[32m+ 113:         l = [][0m
[32m+ 114:         while True:[0m
[32m+ 115:             try:[0m
[32m+ 116:                 popped_data = self.pop()[0m
[32m+ 117:                 l.append(popped_data)[0m
[32m+ 118:             except IndexError:[0m
[32m+ 119:                 break[0m
[32m+ 120:         return l[0m
  121: class Queue(object):
  122:     '''Implementation of Queue.
  123: 
  124:     This implementation supports the following public methods:
--------------------------------------------------------------------------------
[0.17646 s] [36mincompetent[0m

TypeError: binarySearchTree3:116: TypeError: DoubleLinkedList.pop() missing 1 required positional argument: 'self'

[36m   -[0m [#  23] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  129:     If the queue is empty, returns None
  130:     size(): return the size of the queue. Returns 0 if the queue is empty.
  131:     '''
  132:     
[34m- 133:     def __init__(self, data=None):[0m
[34m- 134:         '''Initialize queue data structure.'''[0m
[34m- 135:         self._container = DoubleLinkedList(data)[0m
[34m- 136:     [0m
[32m+ 133:     @classmethod[0m
[32m+ 134:     def __init__(self, data=None):[0m
[32m+ 135:         '''Initialize queue data structure.'''[0m
[32m+ 136:         self._container = DoubleLinkedList(data)[0m
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
  140:     
--------------------------------------------------------------------------------
[0.26585 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_DYNAMOSA.py::test_case_41

def test_case_41():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        var_2 = bst_0.depth()
        assert var_2 == 6
        var_3 = bst_0.post_order()
        queue_0 = module_0.Queue(var_1)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        queue_1 = module_0.Queue(var_3)
        assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'binarySearchTree3.Queue'
        var_4 = queue_0.size()
>       assert var_4 == 0
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_DYNAMOSA.py:495: AssertionError
[36m   -[0m [#  24] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  133:     def __init__(self, data=None):
  134:         '''Initialize queue data structure.'''
  135:         self._container = DoubleLinkedList(data)
  136:     
[34m- 137:     def enqueue(self, val):[0m
[34m- 138:         '''Add a value to the queue.'''[0m
[34m- 139:         self._container.append(val)[0m
[34m- 140:     [0m
[32m+ 137:     @classmethod[0m
[32m+ 138:     def enqueue(self, val):[0m
[32m+ 139:         '''Add a value to the queue.'''[0m
[32m+ 140:         self._container.append(val)[0m
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
  144:     
--------------------------------------------------------------------------------
[0.16983 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
        assert queue.dequeue() == 3
        assert queue.peek() == 2
        assert queue.size() == 2
>       queue.enqueue(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Queue'>, val = 4

>   ???
E   AttributeError: type object 'Queue' has no attribute '_container'

binarySearchTree3:140: AttributeError
[36m   -[0m [#  25] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
  140:     
[34m- 141:     def dequeue(self):[0m
[34m- 142:         '''Remove a value from the front of the queue.'''[0m
[34m- 143:         return self._container.pop()[0m
[34m- 144:     [0m
[32m+ 141:     @classmethod[0m
[32m+ 142:     def dequeue(self):[0m
[32m+ 143:         '''Remove a value from the front of the queue.'''[0m
[32m+ 144:         return self._container.pop()[0m
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
  148:             return self._container.head.data
--------------------------------------------------------------------------------
[0.26172 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
>       assert queue.dequeue() == 3

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_container'

binarySearchTree3:144: AttributeError
[36m   -[0m [#  26] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
  144:     
[34m- 145:     def peek(self):[0m
[34m- 146:         '''Return the next value in the queue without dequing it.'''[0m
[34m- 147:         try:[0m
[34m- 148:             return self._container.head.data[0m
[34m- 149:         except AttributeError:[0m
[34m- 150:             return None[0m
[34m- 151:     [0m
[32m+ 145:     @classmethod[0m
[32m+ 146:     def peek(self):[0m
[32m+ 147:         '''Return the next value in the queue without dequing it.'''[0m
[32m+ 148:         try:[0m
[32m+ 149:             return self._container.head.data[0m
[32m+ 150:         except AttributeError:[0m
[32m+ 151:             return None[0m
  152:     def size(self):
  153:         '''Return the size of the queue.'''
  154:         return self._container._length
  155: 
--------------------------------------------------------------------------------
[0.14379 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
        assert queue.dequeue() == 3
>       assert queue.peek() == 2
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:45: AssertionError
[36m   -[0m [#  27] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  148:             return self._container.head.data
  149:         except AttributeError:
  150:             return None
  151:     
[34m- 152:     def size(self):[0m
[34m- 153:         '''Return the size of the queue.'''[0m
[34m- 154:         return self._container._length[0m
[34m- 155: [0m
[32m+ 152:     @classmethod[0m
[32m+ 153:     def size(self):[0m
[32m+ 154:         '''Return the size of the queue.'''[0m
[32m+ 155:         return self._container._length[0m
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
  159:     def __init__(self, val=None, parent=None):
--------------------------------------------------------------------------------
[0.15427 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
>       assert queue.size() == 3

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_container'

binarySearchTree3:155: AttributeError
[36m   -[0m [#  28] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  155: 
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
[34m- 159:     def __init__(self, val=None, parent=None):[0m
[34m- 160:         '''Create node object.'''[0m
[34m- 161:         self.val = val[0m
[34m- 162:         self.right = None[0m
[34m- 163:         self.left = None[0m
[34m- 164:         self.parent = parent[0m
[34m- 165:         self.height = 1[0m
[34m- 166:     [0m
[32m+ 159:     @classmethod[0m
[32m+ 160:     def __init__(self, val=None, parent=None):[0m
[32m+ 161:         '''Create node object.'''[0m
[32m+ 162:         self.val = val[0m
[32m+ 163:         self.right = None[0m
[32m+ 164:         self.left = None[0m
[32m+ 165:         self.parent = parent[0m
[32m+ 166:         self.height = 1[0m
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
  170:     
--------------------------------------------------------------------------------
[0.26897 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
>       assert root.right._onlychild() is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:130: AssertionError
[36m   -[0m [#  29] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
  166:     
[34m- 167:     def _is_leaf(self):[0m
[34m- 168:         '''Return true if a leaf.'''[0m
[34m- 169:         return not ((self.right or self.left))[0m
[34m- 170:     [0m
[32m+ 167:     @classmethod[0m
[32m+ 168:     def _is_leaf(self):[0m
[32m+ 169:         '''Return true if a leaf.'''[0m
[32m+ 170:         return not ((self.right or self.left))[0m
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
  174:     
--------------------------------------------------------------------------------
[0.15520 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
>       assert root._is_leaf() is False

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Node'>

>   ???
E   AttributeError: type object 'Node' has no attribute 'right'

binarySearchTree3:170: AttributeError
[36m   -[0m [#  30] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
  170:     
[34m- 171:     def _is_interior(self):[0m
[34m- 172:         '''Return true if a interior node.'''[0m
[34m- 173:         return (self.right and self.left)[0m
[34m- 174:     [0m
[32m+ 171:     @classmethod[0m
[32m+ 172:     def _is_interior(self):[0m
[32m+ 173:         '''Return true if a interior node.'''[0m
[32m+ 174:         return (self.right and self.left)[0m
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
--------------------------------------------------------------------------------
[0.16654 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
>       assert root._is_interior() is not None

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Node'>

>   ???
E   AttributeError: type object 'Node' has no attribute 'right'

binarySearchTree3:174: AttributeError
[36m   -[0m [#  31] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
  174:     
[34m- 175:     def _onlychild(self):[0m
[34m- 176:         '''Return string depending on children.'''[0m
[34m- 177:         if (self.left and not (self.right)):[0m
[34m- 178:             return 'left'[0m
[34m- 179:         if (self.right and not (self.left)):[0m
[34m- 180:             return 'right'[0m
[34m- 181:     [0m
[32m+ 175:     @classmethod[0m
[32m+ 176:     def _onlychild(self):[0m
[32m+ 177:         '''Return string depending on children.'''[0m
[32m+ 178:         if (self.left and not (self.right)):[0m
[32m+ 179:             return 'left'[0m
[32m+ 180:         if (self.right and not (self.left)):[0m
[32m+ 181:             return 'right'[0m
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
  185:             return 'left' if self.parent.left == self else 'right'
--------------------------------------------------------------------------------
[0.16429 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
>       assert root.left.left._onlychild() is None

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Node'>

>   ???
E   AttributeError: type object 'Node' has no attribute 'left'

binarySearchTree3:178: AttributeError
[36m   -[0m [#  32] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
[34m- 182:     def _side(self):[0m
[34m- 183:         '''Return if left or right child of parent.'''[0m
[34m- 184:         if self.parent:[0m
[34m- 185:             return 'left' if self.parent.left == self else 'right'[0m
[34m- 186: [0m
[32m+ 182:     @classmethod[0m
[32m+ 183:     def _side(self):[0m
[32m+ 184:         '''Return if left or right child of parent.'''[0m
[32m+ 185:         if self.parent:[0m
[32m+ 186:             return 'left' if self.parent.left == self else 'right'[0m
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
  190: 
--------------------------------------------------------------------------------
[0.15948 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
        assert root.right._onlychild() is None
        assert root._onlychild() is None
    
        # Test _side method
>       assert root.left._side() == 'left'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Node'>

>   ???
E   AttributeError: type object 'Node' has no attribute 'parent'

binarySearchTree3:185: AttributeError
[36m   -[0m [#  33] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  224:     using breadth frist traversal, one at a time.
  225: 
  226:     '''
  227:     
[34m- 228:     def __init__(self, data=None):[0m
[34m- 229:         '''Initialize tree.'''[0m
[34m- 230:         self._size = 0[0m
[34m- 231:         self.root = None[0m
[34m- 232:         [0m
[34m- 233:         if data:[0m
[34m- 234:             for i in data:[0m
[34m- 235:                 self.insert(i)[0m
[34m- 236:     [0m
[32m+ 228:     @classmethod[0m
[32m+ 229:     def __init__(self, data=None):[0m
[32m+ 230:         '''Initialize tree.'''[0m
[32m+ 231:         self._size = 0[0m
[32m+ 232:         self.root = None[0m
[32m+ 233:         [0m
[32m+ 234:         if data:[0m
[32m+ 235:             for i in data:[0m
[32m+ 236:                 self.insert(i)[0m
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
--------------------------------------------------------------------------------
[0.23524 s] [36mincompetent[0m

TypeError: binarySearchTree3:236: TypeError: Bst.insert() missing 1 required positional argument: 'val'

[36m   -[0m [#  34] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  233:         if data:
  234:             for i in data:
  235:                 self.insert(i)
  236:     
[34m- 237:     def insert(self, val):[0m
[34m- 238:         '''Insert val into BST. If val is already present will be ignored.'''[0m
[34m- 239:         if not (self.root):[0m
[34m- 240:             self.root = Node(val)[0m
[34m- 241:             self._size += 1[0m
[34m- 242:         else:[0m
[34m- 243:             self._step(val, self.root)[0m
[34m- 244:     [0m
[32m+ 237:     @classmethod[0m
[32m+ 238:     def insert(self, val):[0m
[32m+ 239:         '''Insert val into BST. If val is already present will be ignored.'''[0m
[32m+ 240:         if not (self.root):[0m
[32m+ 241:             self.root = Node(val)[0m
[32m+ 242:             self._size += 1[0m
[32m+ 243:         else:[0m
[32m+ 244:             self._step(val, self.root)[0m
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
--------------------------------------------------------------------------------
[0.15987 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, val = 5

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:240: AttributeError
[36m   -[0m [#  35] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
  244:     
[34m- 245:     def _step(self, val, curr):[0m
[34m- 246:         '''Decide left or right and returns height.'''[0m
[34m- 247:         if val < curr.val:[0m
[34m- 248:             curr = self._set_child(curr, 'left', val)[0m
[34m- 249:         elif val > curr.val:[0m
[34m- 250:             curr = self._set_child(curr, 'right', val)[0m
[34m- 251:         return curr.height[0m
[34m- 252:     [0m
[32m+ 245:     @classmethod[0m
[32m+ 246:     def _step(self, val, curr):[0m
[32m+ 247:         '''Decide left or right and returns height.'''[0m
[32m+ 248:         if val < curr.val:[0m
[32m+ 249:             curr = self._set_child(curr, 'left', val)[0m
[32m+ 250:         elif val > curr.val:[0m
[32m+ 251:             curr = self._set_child(curr, 'right', val)[0m
[32m+ 252:         return curr.height[0m
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
--------------------------------------------------------------------------------
[0.16849 s] [36mincompetent[0m

TypeError: binarySearchTree3:249: TypeError: Bst._set_child() missing 1 required positional argument: 'val'

[36m   -[0m [#  36] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
[34m- 253:     def _set_child(self, curr, side, val):[0m
[34m- 254:         '''Helping.'''[0m
[34m- 255:         child = getattr(curr, side)[0m
[34m- 256:         if child:[0m
[34m- 257:             count = self._step(val, child)[0m
[34m- 258:             if curr.height <= count:[0m
[34m- 259:                 curr.height += 1[0m
[34m- 260:         else:[0m
[34m- 261:             setattr(curr, side, Node(val, curr))[0m
[34m- 262:             self._size += 1[0m
[34m- 263:             if curr.height == 1:[0m
[34m- 264:                 curr.height += 1[0m
[34m- 265:         return curr[0m
[34m- 266:     [0m
[32m+ 253:     @classmethod[0m
[32m+ 254:     def _set_child(self, curr, side, val):[0m
[32m+ 255:         '''Helping.'''[0m
[32m+ 256:         child = getattr(curr, side)[0m
[32m+ 257:         if child:[0m
[32m+ 258:             count = self._step(val, child)[0m
[32m+ 259:             if curr.height <= count:[0m
[32m+ 260:                 curr.height += 1[0m
[32m+ 261:         else:[0m
[32m+ 262:             setattr(curr, side, Node(val, curr))[0m
[32m+ 263:             self._size += 1[0m
[32m+ 264:             if curr.height == 1:[0m
[32m+ 265:                 curr.height += 1[0m
[32m+ 266:         return curr[0m
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
--------------------------------------------------------------------------------
[0.26435 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>
curr = <binarySearchTree3.Node object at 0x7f1f7a5054e0>, side = 'left', val = 3

>   ???
E   AttributeError: type object 'Bst' has no attribute '_size'

binarySearchTree3:263: AttributeError
[36m   -[0m [#  37] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
  266:     
[34m- 267:     def search(self, val):[0m
[34m- 268:         '''Return the node containing val.'''[0m
[34m- 269:         curr = self.root[0m
[34m- 270:         while curr:[0m
[34m- 271:             if curr.val == val:[0m
[34m- 272:                 return curr[0m
[34m- 273:             elif val < curr.val:[0m
[34m- 274:                 curr = curr.left[0m
[34m- 275:             else:[0m
[34m- 276:                 curr = curr.right[0m
[34m- 277:     [0m
[32m+ 267:     @classmethod[0m
[32m+ 268:     def search(self, val):[0m
[32m+ 269:         '''Return the node containing val.'''[0m
[32m+ 270:         curr = self.root[0m
[32m+ 271:         while curr:[0m
[32m+ 272:             if curr.val == val:[0m
[32m+ 273:                 return curr[0m
[32m+ 274:             elif val < curr.val:[0m
[32m+ 275:                 curr = curr.left[0m
[32m+ 276:             else:[0m
[32m+ 277:                 curr = curr.right[0m
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
  281:     
--------------------------------------------------------------------------------
[0.16779 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case1.delete(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:365: in delete
    ???
binarySearchTree3:288: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, val = 4

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:270: AttributeError
[36m   -[0m [#  38] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
  277:     
[34m- 278:     def size(self):[0m
[34m- 279:         '''Return the size of the BST.'''[0m
[34m- 280:         return self._size[0m
[34m- 281:     [0m
[32m+ 278:     @classmethod[0m
[32m+ 279:     def size(self):[0m
[32m+ 280:         '''Return the size of the BST.'''[0m
[32m+ 281:         return self._size[0m
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
  285:     
--------------------------------------------------------------------------------
[0.23935 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
>       var_1 = bst_0.size()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>

>   ???
E   AttributeError: type object 'Bst' has no attribute '_size'

binarySearchTree3:281: AttributeError
[36m   -[0m [#  39] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
  281:     
[34m- 282:     def depth(self):[0m
[34m- 283:         '''Return depth of the BST, representing total levels.'''[0m
[34m- 284:         return 0 if not (self.root) else self.root.height[0m
[34m- 285:     [0m
[32m+ 282:     @classmethod[0m
[32m+ 283:     def depth(self):[0m
[32m+ 284:         '''Return depth of the BST, representing total levels.'''[0m
[32m+ 285:         return 0 if not (self.root) else self.root.height[0m
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
  289:     
--------------------------------------------------------------------------------
[0.20970 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_30

def test_case_30():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_1 = bst_0.depth()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:242: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:285: AttributeError
[36m   -[0m [#  40] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
  285:     
[34m- 286:     def contains(self, val):[0m
[34m- 287:         '''Return true if val is in the bst.'''[0m
[34m- 288:         return self.search(val) is not None[0m
[34m- 289:     [0m
[32m+ 286:     @classmethod[0m
[32m+ 287:     def contains(self, val):[0m
[32m+ 288:         '''Return true if val is in the bst.'''[0m
[32m+ 289:         return self.search(val) is not None[0m
  290:     def balance(self, tree=None):
  291:         '''Return an integer of how well the tree is balanced.
  292: 
  293:         Trees which are higher on the left than the right should return a
--------------------------------------------------------------------------------
[0.18306 s] [36mincompetent[0m

TypeError: binarySearchTree3:289: TypeError: Bst.search() missing 1 required positional argument: 'val'

[36m   -[0m [#  41] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
  289:     
[34m- 290:     def balance(self, tree=None):[0m
[34m- 291:         '''Return an integer of how well the tree is balanced.[0m
[34m- 292: [0m
[34m- 293:         Trees which are higher on the left than the right should return a[0m
[34m- 294:         positive value, trees which are higher on the right than the left[0m
[34m- 295:         should return a negative value. An ideally-balanced tree should[0m
[34m- 296:         return 0.[0m
[34m- 297:         '''[0m
[34m- 298:         if not tree:[0m
[34m- 299:             tree = self.root[0m
[34m- 300:             if not tree:[0m
[34m- 301:                 return 0[0m
[34m- 302:         [0m
[34m- 303:         leftbranch = 0 if not (tree.left) else tree.left.height[0m
[34m- 304:         rightbranch = 0 if not (tree.right) else tree.right.height[0m
[34m- 305:         [0m
[34m- 306:         return leftbranch - rightbranch[0m
[34m- 307:     [0m
[32m+ 290:     @classmethod[0m
[32m+ 291:     def balance(self, tree=None):[0m
[32m+ 292:         '''Return an integer of how well the tree is balanced.[0m
[32m+ 293: [0m
[32m+ 294:         Trees which are higher on the left than the right should return a[0m
[32m+ 295:         positive value, trees which are higher on the right than the left[0m
[32m+ 296:         should return a negative value. An ideally-balanced tree should[0m
[32m+ 297:         return 0.[0m
[32m+ 298:         '''[0m
[32m+ 299:         if not tree:[0m
[32m+ 300:             tree = self.root[0m
[32m+ 301:             if not tree:[0m
[32m+ 302:                 return 0[0m
[32m+ 303:         [0m
[32m+ 304:         leftbranch = 0 if not (tree.left) else tree.left.height[0m
[32m+ 305:         rightbranch = 0 if not (tree.right) else tree.right.height[0m
[32m+ 306:         [0m
[32m+ 307:         return leftbranch - rightbranch[0m
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
--------------------------------------------------------------------------------
[0.28162 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, tree = None

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:300: AttributeError
[36m   -[0m [#  42] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
[34m- 308:     def pre_order(self, node='root'):[0m
[34m- 309:         '''Depth first pre-order traversal of tree.'''[0m
[34m- 310:         if node == 'root':[0m
[34m- 311:             node = self.root[0m
[34m- 312:         [0m
[34m- 313:         if not node:[0m
[34m- 314:             return[0m
[34m- 315:         [0m
[34m- 316:         yield node.val[0m
[34m- 317:         [0m
[34m- 318:         for n in self.pre_order(node=node.left):[0m
[34m- 319:             yield n[0m
[34m- 320:         for n in self.pre_order(node=node.right):[0m
[34m- 321:             yield n[0m
[34m- 322:     [0m
[32m+ 308:     @classmethod[0m
[32m+ 309:     def pre_order(self, node='root'):[0m
[32m+ 310:         '''Depth first pre-order traversal of tree.'''[0m
[32m+ 311:         if node == 'root':[0m
[32m+ 312:             node = self.root[0m
[32m+ 313:         [0m
[32m+ 314:         if not node:[0m
[32m+ 315:             return[0m
[32m+ 316:         [0m
[32m+ 317:         yield node.val[0m
[32m+ 318:         [0m
[32m+ 319:         for n in self.pre_order(node=node.left):[0m
[32m+ 320:             yield n[0m
[32m+ 321:         for n in self.pre_order(node=node.right):[0m
[32m+ 322:             yield n[0m
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
--------------------------------------------------------------------------------
[0.17549 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
>       result = list(bst.pre_order())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, node = 'root'

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:312: AttributeError
[36m   -[0m [#  43] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
[34m- 323:     def in_order(self, node='root'):[0m
[34m- 324:         '''Depth first in-order traversal of tree.'''[0m
[34m- 325:         if node == 'root':[0m
[34m- 326:             node = self.root[0m
[34m- 327:         [0m
[34m- 328:         if not node:[0m
[34m- 329:             return[0m
[34m- 330:         [0m
[34m- 331:         for n in self.in_order(node=node.left):[0m
[34m- 332:             yield n[0m
[34m- 333:         yield node.val[0m
[34m- 334:         for n in self.in_order(node=node.right):[0m
[34m- 335:             yield n[0m
[34m- 336:     [0m
[32m+ 323:     @classmethod[0m
[32m+ 324:     def in_order(self, node='root'):[0m
[32m+ 325:         '''Depth first in-order traversal of tree.'''[0m
[32m+ 326:         if node == 'root':[0m
[32m+ 327:             node = self.root[0m
[32m+ 328:         [0m
[32m+ 329:         if not node:[0m
[32m+ 330:             return[0m
[32m+ 331:         [0m
[32m+ 332:         for n in self.in_order(node=node.left):[0m
[32m+ 333:             yield n[0m
[32m+ 334:         yield node.val[0m
[32m+ 335:         for n in self.in_order(node=node.right):[0m
[32m+ 336:             yield n[0m
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
--------------------------------------------------------------------------------
[0.17454 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, node = 'root'

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:327: AttributeError
[36m   -[0m [#  44] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
[34m- 337:     def post_order(self, node='root'):[0m
[34m- 338:         '''Depth frist post_order traversal of tree.'''[0m
[34m- 339:         if node == 'root':[0m
[34m- 340:             node = self.root[0m
[34m- 341:         [0m
[34m- 342:         if not node:[0m
[34m- 343:             return[0m
[34m- 344:         [0m
[34m- 345:         for n in self.post_order(node=node.left):[0m
[34m- 346:             yield n[0m
[34m- 347:         for n in self.post_order(node=node.right):[0m
[34m- 348:             yield n[0m
[34m- 349:         yield node.val[0m
[34m- 350:     [0m
[32m+ 337:     @classmethod[0m
[32m+ 338:     def post_order(self, node='root'):[0m
[32m+ 339:         '''Depth frist post_order traversal of tree.'''[0m
[32m+ 340:         if node == 'root':[0m
[32m+ 341:             node = self.root[0m
[32m+ 342:         [0m
[32m+ 343:         if not node:[0m
[32m+ 344:             return[0m
[32m+ 345:         [0m
[32m+ 346:         for n in self.post_order(node=node.left):[0m
[32m+ 347:             yield n[0m
[32m+ 348:         for n in self.post_order(node=node.right):[0m
[32m+ 349:             yield n[0m
[32m+ 350:         yield node.val[0m
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.26799 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, node = 'root'

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:341: AttributeError
[36m   -[0m [#  45] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
  350:     
[34m- 351:     def breadth_first(self):[0m
[34m- 352:         '''Breadth first traversal of tree.'''[0m
[34m- 353:         q = Queue()[0m
[34m- 354:         q.enqueue(self.root)[0m
[34m- 355:         while q.peek():[0m
[34m- 356:             node = q.dequeue()[0m
[34m- 357:             yield node.val[0m
[34m- 358:             if node.left:[0m
[34m- 359:                 q.enqueue(node.left)[0m
[34m- 360:             if node.right:[0m
[34m- 361:                 q.enqueue(node.right)[0m
[34m- 362:     [0m
[32m+ 351:     @classmethod[0m
[32m+ 352:     def breadth_first(self):[0m
[32m+ 353:         '''Breadth first traversal of tree.'''[0m
[32m+ 354:         q = Queue()[0m
[32m+ 355:         q.enqueue(self.root)[0m
[32m+ 356:         while q.peek():[0m
[32m+ 357:             node = q.dequeue()[0m
[32m+ 358:             yield node.val[0m
[32m+ 359:             if node.left:[0m
[32m+ 360:                 q.enqueue(node.left)[0m
[32m+ 361:             if node.right:[0m
[32m+ 362:                 q.enqueue(node.right)[0m
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
  366:             return
--------------------------------------------------------------------------------
[0.16512 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
>       result = list(bst.breadth_first())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:355: AttributeError
[36m   -[0m [#  46] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  359:                 q.enqueue(node.left)
  360:             if node.right:
  361:                 q.enqueue(node.right)
  362:     
[34m- 363:     def delete(self, val):[0m
[34m- 364:         '''Remove a node from the tree.'''[0m
[34m- 365:         if (self._size < 1 or not (self.contains(val))):[0m
[34m- 366:             return[0m
[34m- 367:         [0m
[34m- 368:         node = self.search(val)[0m
[34m- 369:         [0m
[34m- 370:         if node._is_leaf():[0m
[34m- 371:             if node.parent:[0m
[34m- 372:                 setattr(node.parent, node._side(), None)[0m
[34m- 373:             else:[0m
[34m- 374:                 self.root = None[0m
[34m- 375:         [0m
[34m- 376:         elif node._is_interior():[0m
[34m- 377:             next_node = self._find_replacement(node)[0m
[34m- 378:             self._size += 1[0m
[34m- 379:             self.delete(next_node.val)[0m
[34m- 380:             node.val = next_node.val[0m
[34m- 381:         else:[0m
[34m- 382:             [0m
[34m- 383:             child = getattr(node, node._onlychild())[0m
[34m- 384:             if node.parent:[0m
[34m- 385:                 child.parent = node.parent[0m
[34m- 386:                 setattr(node.parent, node._side(), child)[0m
[34m- 387:             else:[0m
[34m- 388:                 self.root = child[0m
[34m- 389:         [0m
[34m- 390:         self._size -= 1[0m
[34m- 391:     [0m
[32m+ 363:     @classmethod[0m
[32m+ 364:     def delete(self, val):[0m
[32m+ 365:         '''Remove a node from the tree.'''[0m
[32m+ 366:         if (self._size < 1 or not (self.contains(val))):[0m
[32m+ 367:             return[0m
[32m+ 368:         [0m
[32m+ 369:         node = self.search(val)[0m
[32m+ 370:         [0m
[32m+ 371:         if node._is_leaf():[0m
[32m+ 372:             if node.parent:[0m
[32m+ 373:                 setattr(node.parent, node._side(), None)[0m
[32m+ 374:             else:[0m
[32m+ 375:                 self.root = None[0m
[32m+ 376:         [0m
[32m+ 377:         elif node._is_interior():[0m
[32m+ 378:             next_node = self._find_replacement(node)[0m
[32m+ 379:             self._size += 1[0m
[32m+ 380:             self.delete(next_node.val)[0m
[32m+ 381:             node.val = next_node.val[0m
[32m+ 382:         else:[0m
[32m+ 383:             [0m
[32m+ 384:             child = getattr(node, node._onlychild())[0m
[32m+ 385:             if node.parent:[0m
[32m+ 386:                 child.parent = node.parent[0m
[32m+ 387:                 setattr(node.parent, node._side(), child)[0m
[32m+ 388:             else:[0m
[32m+ 389:                 self.root = child[0m
[32m+ 390:         [0m
[32m+ 391:         self._size -= 1[0m
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
  395:             return self._findmin(node.right)
--------------------------------------------------------------------------------
[0.17245 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case1.delete(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, val = 4

>   ???
E   AttributeError: type object 'Bst' has no attribute '_size'

binarySearchTree3:366: AttributeError
[36m   -[0m [#  47] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  388:                 self.root = child
  389:         
  390:         self._size -= 1
  391:     
[34m- 392:     def _find_replacement(self, node):[0m
[34m- 393:         '''Find left most node of right subtree.'''[0m
[34m- 394:         if node.right:[0m
[34m- 395:             return self._findmin(node.right)[0m
[34m- 396:         [0m
[34m- 397:         elif node.parent:[0m
[34m- 398:             if node._side() == 'left':[0m
[34m- 399:                 return node.parent[0m
[34m- 400:             else:[0m
[34m- 401:                 node.parent.right = None[0m
[34m- 402:                 tmp = self._find_replacement(node.parent)[0m
[34m- 403:                 node.parent.right = node[0m
[34m- 404:                 return tmp[0m
[34m- 405:     [0m
[32m+ 392:     @classmethod[0m
[32m+ 393:     def _find_replacement(self, node):[0m
[32m+ 394:         '''Find left most node of right subtree.'''[0m
[32m+ 395:         if node.right:[0m
[32m+ 396:             return self._findmin(node.right)[0m
[32m+ 397:         [0m
[32m+ 398:         elif node.parent:[0m
[32m+ 399:             if node._side() == 'left':[0m
[32m+ 400:                 return node.parent[0m
[32m+ 401:             else:[0m
[32m+ 402:                 node.parent.right = None[0m
[32m+ 403:                 tmp = self._find_replacement(node.parent)[0m
[32m+ 404:                 node.parent.right = node[0m
[32m+ 405:                 return tmp[0m
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
  409:             node = node.left
--------------------------------------------------------------------------------
[0.17007 s] [36mincompetent[0m

TypeError: binarySearchTree3:396: TypeError: Bst._findmin() missing 1 required positional argument: 'node'

[36m   -[0m [#  48] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  402:                 tmp = self._find_replacement(node.parent)
  403:                 node.parent.right = node
  404:                 return tmp
  405:     
[34m- 406:     def _findmin(self, node):[0m
[34m- 407:         '''Find min of subtree, Min is always left most node.'''[0m
[34m- 408:         while node.left:[0m
[34m- 409:             node = node.left[0m
[34m- 410:         return node[0m
[32m+ 406:     @classmethod[0m
[32m+ 407:     def _findmin(self, node):[0m
[32m+ 408:         '''Find min of subtree, Min is always left most node.'''[0m
[32m+ 409:         while node.left:[0m
[32m+ 410:             node = node.left[0m
[32m+ 411:         return node[0m
--------------------------------------------------------------------------------
[0.29892 s] [31msurvived[0m
[36m   -[0m [#  49] COD binarySearchTree3: 
--------------------------------------------------------------------------------
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
[34m-  47:         if not (self.tail):[0m
[32m+  47:         if self.tail:[0m
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
   51:     def pop(self):
--------------------------------------------------------------------------------
[0.27365 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
>       assert dll._repr() == [4, 3, 2, 1, 5]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a446710>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [#  50] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
[34m- 169:         return not ((self.right or self.left))[0m
[32m+ 169:         return (self.right or self.left)[0m
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
--------------------------------------------------------------------------------
[0.16307 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
>       assert root._is_leaf() is False
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: AssertionError
[36m   -[0m [#  51] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  173:         return (self.right and self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
[34m- 177:         if (self.left and not (self.right)):[0m
[32m+ 177:         if (self.left and self.right):[0m
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
--------------------------------------------------------------------------------
[0.17477 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
>       assert root.right._onlychild() is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:130: AssertionError
[36m   -[0m [#  52] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
[34m- 179:         if (self.right and not (self.left)):[0m
[32m+ 179:         if (self.right and self.left):[0m
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.20917 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
>       assert root.right._onlychild() is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:130: AssertionError
[36m   -[0m [#  53] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  235:                 self.insert(i)
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
[34m- 239:         if not (self.root):[0m
[32m+ 239:         if self.root:[0m
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
--------------------------------------------------------------------------------
[0.19028 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a2507f0>, val = 5, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:247: AttributeError
[36m   -[0m [#  54] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  280:         return self._size
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
[34m- 284:         return 0 if not (self.root) else self.root.height[0m
[32m+ 284:         return 0 if self.root else self.root.height[0m
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.31015 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_30

def test_case_30():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.depth()
>       assert var_1 == 1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:243: AssertionError
[36m   -[0m [#  55] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  294:         positive value, trees which are higher on the right than the left
  295:         should return a negative value. An ideally-balanced tree should
  296:         return 0.
  297:         '''
[34m- 298:         if not tree:[0m
[32m+ 298:         if tree:[0m
  299:             tree = self.root
  300:             if not tree:
  301:                 return 0
  302:         
--------------------------------------------------------------------------------
[0.20586 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7abde710>, tree = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:303: AttributeError
[36m   -[0m [#  56] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  296:         return 0.
  297:         '''
  298:         if not tree:
  299:             tree = self.root
[34m- 300:             if not tree:[0m
[32m+ 300:             if tree:[0m
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
--------------------------------------------------------------------------------
[0.23575 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [#  57] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  299:             tree = self.root
  300:             if not tree:
  301:                 return 0
  302:         
[34m- 303:         leftbranch = 0 if not (tree.left) else tree.left.height[0m
[32m+ 303:         leftbranch = 0 if tree.left else tree.left.height[0m
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
--------------------------------------------------------------------------------
[0.30549 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [#  58] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  300:             if not tree:
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
[34m- 304:         rightbranch = 0 if not (tree.right) else tree.right.height[0m
[32m+ 304:         rightbranch = 0 if tree.right else tree.right.height[0m
  305:         
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
--------------------------------------------------------------------------------
[0.20135 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [#  59] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
  312:         
[34m- 313:         if not node:[0m
[32m+ 313:         if node:[0m
  314:             return
  315:         
  316:         yield node.val
  317:         
--------------------------------------------------------------------------------
[0.17131 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
        result = list(bst.pre_order())
>       assert result == [5, 3, 2, 4, 7, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:211: AssertionError
[36m   -[0m [#  60] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
  327:         
[34m- 328:         if not node:[0m
[32m+ 328:         if node:[0m
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
--------------------------------------------------------------------------------
[0.18190 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [#  61] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
  341:         
[34m- 342:         if not node:[0m
[32m+ 342:         if node:[0m
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
--------------------------------------------------------------------------------
[0.23103 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:322: AssertionError
[36m   -[0m [#  62] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
[34m- 365:         if (self._size < 1 or not (self.contains(val))):[0m
[32m+ 365:         if (self._size < 1 or self.contains(val)):[0m
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.15939 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [#  63] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
[34m-  38:             if data:[0m
[32m+  38:             if not data:[0m
   39:                 self.push(data)
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
--------------------------------------------------------------------------------
[0.16537 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_empty_queue

def test_empty_queue():
        # Create an empty queue
        empty_queue = Queue()
    
        # Verify that the queue is empty
>       assert empty_queue.size() == 0
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:101: AssertionError
[36m   -[0m [#  64] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
[34m-  45:         if old_head:[0m
[32m+  45:         if not old_head:[0m
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
   49:         self._length += 1
--------------------------------------------------------------------------------
[0.18722 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ab5f0a0>, val = 1

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:46: AttributeError
[36m   -[0m [#  65] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
[34m-  47:         if not (self.tail):[0m
[32m+  47:         if not ((not (self.tail))):[0m
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
   51:     def pop(self):
--------------------------------------------------------------------------------
[0.23945 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
>       assert dll._repr() == [4, 3, 2, 1, 5]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a4802e0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [#  66] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
[34m-  54:         if self._length < 1:[0m
[32m+  54:         if not (self._length < 1):[0m
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
--------------------------------------------------------------------------------
[0.15649 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a973e20>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
[36m   -[0m [#  67] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   54:         if self._length < 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
[34m-  58:         if new_head:[0m
[32m+  58:         if not new_head:[0m
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
   62:         if self._length < 1:
--------------------------------------------------------------------------------
[0.15806 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
        popped_value = dll.pop()
    
        assert popped_value == 3
    
>       assert dll.head.prev is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:13: AssertionError
[36m   -[0m [#  68] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
[34m-  62:         if self._length < 1:[0m
[32m+  62:         if not (self._length < 1):[0m
   63:             self.tail = None
   64:         return to_return.data
   65:     
   66:     def append(self, val):
--------------------------------------------------------------------------------
[0.23110 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
        assert queue.dequeue() == 3
        assert queue.peek() == 2
        assert queue.size() == 2
        queue.enqueue(4)
        assert queue.size() == 3
        assert queue.dequeue() == 2
        assert queue.dequeue() == 1
>       assert queue.dequeue() == 4

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ad17640>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [#  69] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
[34m-  70:         if old_tail:[0m
[32m+  70:         if not old_tail:[0m
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
   74:         self._length += 1
--------------------------------------------------------------------------------
[0.16192 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
>       assert dll._repr() == [4, 3, 2, 1, 5]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a96f6a0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [#  70] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
[34m-  72:         if self._length < 1:[0m
[32m+  72:         if not (self._length < 1):[0m
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
--------------------------------------------------------------------------------
[0.17502 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
>       assert dll._repr() == [4, 3, 2, 1, 5]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a71bbb0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [#  71] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
[34m-  79:         if self._length < 1:[0m
[32m+  79:         if not (self._length < 1):[0m
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
--------------------------------------------------------------------------------
[0.17769 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
>       dll.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a936d10>

>   ???
E   IndexError: Cannot shift from an empty list.

binarySearchTree3:80: IndexError
[36m   -[0m [#  72] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   79:         if self._length < 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
[34m-  83:         if new_tail:[0m
[32m+  83:         if not new_tail:[0m
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
   87:         if self._length < 1:
--------------------------------------------------------------------------------
[0.19470 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_shift_with_two_elements

def test_shift_with_two_elements():
        # Create a double linked list with two elements
        dll = DoubleLinkedList([1, 2])
    
        # Perform the shift operation
        shifted_value = dll.shift()
    
        # Verify that the shifted value is correct
        assert shifted_value == 1
    
        # Verify that the tail is updated correctly
        assert dll.tail.data == 2
>       assert dll.tail.next is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:263: AssertionError
[36m   -[0m [#  73] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
[34m-  87:         if self._length < 1:[0m
[32m+  87:         if not (self._length < 1):[0m
   88:             self.tail = None
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
--------------------------------------------------------------------------------
[0.23793 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_shift

def test_shift():
        # Create a double linked list with some values
        dll = DoubleLinkedList([1, 2, 3, 4])
    
        # Shift the last element off the tail
        shifted_value = dll.shift()
    
        # Verify that the shifted value is correct
        assert shifted_value == 1
    
        # Verify that the tail has been updated correctly
>       assert dll.tail.data == 2
E       AttributeError: 'NoneType' object has no attribute 'data'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:66: AttributeError
[36m   -[0m [#  74] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
[34m-  94:         while curr:[0m
[32m+  94:         while not curr:[0m
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
--------------------------------------------------------------------------------
[0.17962 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
>       dll.remove(2)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a96ea70>, val = 2

>   ???
E   ValueError: 2 is not in the list

binarySearchTree3:108: ValueError
[36m   -[0m [#  75] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
[34m-  95:             if curr.data is val:[0m
[32m+  95:             if not (curr.data is val):[0m
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
--------------------------------------------------------------------------------
[0.15939 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.remove(2)
>       assert dll._repr() == [3, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:39: AssertionError
[36m   -[0m [#  76] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
[34m-  96:                 if self._length == 1:[0m
[32m+  96:                 if not (self._length == 1):[0m
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
--------------------------------------------------------------------------------
[0.15387 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.remove(2)
>       assert dll._repr() == [3, 1]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a8e2c20>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [#  77] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
[34m-  98:                 elif (curr is not self.head and curr is not self.tail):[0m
[32m+  98:                 elif not ((curr is not self.head and curr is not self.tail)):[0m
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.16120 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.remove(2)
>       assert dll._repr() == [3, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:39: AssertionError
[36m   -[0m [#  78] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
[34m- 100:                 elif curr is self.head:[0m
[32m+ 100:                 elif not (curr is self.head):[0m
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
--------------------------------------------------------------------------------
[0.23665 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_remove_tail

def test_remove_tail():
        # Create a double linked list with some values
        dll = DoubleLinkedList([1, 2, 3, 4])
    
        # Remove the tail element
>       dll.remove(1)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a52c550>, val = 1

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:101: AttributeError
[36m   -[0m [#  79] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
[34m- 102:                 elif curr is self.tail:[0m
[32m+ 102:                 elif not (curr is self.tail):[0m
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
--------------------------------------------------------------------------------
[0.15621 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_remove_tail

def test_remove_tail():
        # Create a double linked list with some values
        dll = DoubleLinkedList([1, 2, 3, 4])
    
        # Remove the tail element
        dll.remove(1)
    
        # Verify that the tail has been updated correctly
>       assert dll.tail.data == 2
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:76: AssertionError
[36m   -[0m [#  80] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  109:     
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
[34m- 113:         while True:[0m
[32m+ 113:         while not True:[0m
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
--------------------------------------------------------------------------------
[0.15932 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: AssertionError
[36m   -[0m [#  81] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  173:         return (self.right and self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
[34m- 177:         if (self.left and not (self.right)):[0m
[32m+ 177:         if not ((self.left and not (self.right))):[0m
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
--------------------------------------------------------------------------------
[0.24067 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
>       assert root.left.left._onlychild() is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:129: AssertionError
[36m   -[0m [#  82] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
[34m- 179:         if (self.right and not (self.left)):[0m
[32m+ 179:         if not ((self.right and not (self.left))):[0m
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.15632 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
>       assert root.left.left._onlychild() is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:129: AssertionError
[36m   -[0m [#  83] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
[34m- 184:         if self.parent:[0m
[32m+ 184:         if not (self.parent):[0m
  185:             return 'left' if self.parent.left == self else 'right'
  186: 
  187: 
  188: class Bst(object):
--------------------------------------------------------------------------------
[0.16404 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
        assert root.right._onlychild() is None
        assert root._onlychild() is None
    
        # Test _side method
>       assert root.left._side() == 'left'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:134: AssertionError
[36m   -[0m [#  84] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  229:         '''Initialize tree.'''
  230:         self._size = 0
  231:         self.root = None
  232:         
[34m- 233:         if data:[0m
[32m+ 233:         if not data:[0m
  234:             for i in data:
  235:                 self.insert(i)
  236:     
  237:     def insert(self, val):
--------------------------------------------------------------------------------
[0.18721 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
>       assert root._is_leaf() is False
E       AttributeError: 'NoneType' object has no attribute '_is_leaf'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: AttributeError
[36m   -[0m [#  85] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  235:                 self.insert(i)
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
[34m- 239:         if not (self.root):[0m
[32m+ 239:         if not ((not (self.root))):[0m
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
--------------------------------------------------------------------------------
[0.19242 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8f9f90>, val = 5, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:247: AttributeError
[36m   -[0m [#  86] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
[34m- 247:         if val < curr.val:[0m
[32m+ 247:         if not (val < curr.val):[0m
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
--------------------------------------------------------------------------------
[0.25294 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
>       assert root._is_interior() is not None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:125: AssertionError
[36m   -[0m [#  87] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
[34m- 249:         elif val > curr.val:[0m
[32m+ 249:         elif not (val > curr.val):[0m
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
--------------------------------------------------------------------------------
[0.17681 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
>       assert root._is_interior() is not None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:125: AssertionError
[36m   -[0m [#  88] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
[34m- 256:         if child:[0m
[32m+ 256:         if not child:[0m
  257:             count = self._step(val, child)
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
--------------------------------------------------------------------------------
[0.16348 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
binarySearchTree3:257: in _set_child
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7aa13e20>, val = 3, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:247: AttributeError
[36m   -[0m [#  89] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
  257:             count = self._step(val, child)
[34m- 258:             if curr.height <= count:[0m
[32m+ 258:             if not (curr.height <= count):[0m
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
--------------------------------------------------------------------------------
[0.27716 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [#  90] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
[34m- 263:             if curr.height == 1:[0m
[32m+ 263:             if not (curr.height == 1):[0m
  264:                 curr.height += 1
  265:         return curr
  266:     
  267:     def search(self, val):
--------------------------------------------------------------------------------
[0.21647 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_WHOLE_SUITE.py::test_case_6

def test_case_6():
        bytes_0 = b'\xd0\x08\x1b$\xda'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.in_order()
        var_1 = bst_0.depth()
        assert var_1 == 4
        var_2 = bst_0.balance()
>       assert var_2 == 2
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_WHOLE_SUITE.py:83: AssertionError
[36m   -[0m [#  91] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
[34m- 270:         while curr:[0m
[32m+ 270:         while not curr:[0m
  271:             if curr.val == val:
  272:                 return curr
  273:             elif val < curr.val:
  274:                 curr = curr.left
--------------------------------------------------------------------------------
[0.17726 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [#  92] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
[34m- 271:             if curr.val == val:[0m
[32m+ 271:             if not (curr.val == val):[0m
  272:                 return curr
  273:             elif val < curr.val:
  274:                 curr = curr.left
  275:             else:
--------------------------------------------------------------------------------
[0.17068 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case1.delete(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:379: in delete
    ???
binarySearchTree3:379: in delete
    ???
binarySearchTree3:379: in delete
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
[36m   -[0m [#  93] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  269:         curr = self.root
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
[34m- 273:             elif val < curr.val:[0m
[32m+ 273:             elif not (val < curr.val):[0m
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
  277:     
--------------------------------------------------------------------------------
[0.16222 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [#  94] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  294:         positive value, trees which are higher on the right than the left
  295:         should return a negative value. An ideally-balanced tree should
  296:         return 0.
  297:         '''
[34m- 298:         if not tree:[0m
[32m+ 298:         if not ((not tree)):[0m
  299:             tree = self.root
  300:             if not tree:
  301:                 return 0
  302:         
--------------------------------------------------------------------------------
[0.30604 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a3d6230>, tree = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:303: AttributeError
[36m   -[0m [#  95] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  296:         return 0.
  297:         '''
  298:         if not tree:
  299:             tree = self.root
[34m- 300:             if not tree:[0m
[32m+ 300:             if not ((not tree)):[0m
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
--------------------------------------------------------------------------------
[0.20501 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [#  96] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
[34m- 310:         if node == 'root':[0m
[32m+ 310:         if not (node == 'root'):[0m
  311:             node = self.root
  312:         
  313:         if not node:
  314:             return
--------------------------------------------------------------------------------
[0.16716 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
>       result = list(bst.pre_order())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a414d30>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
[36m   -[0m [#  97] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
  312:         
[34m- 313:         if not node:[0m
[32m+ 313:         if not ((not node)):[0m
  314:             return
  315:         
  316:         yield node.val
  317:         
--------------------------------------------------------------------------------
[0.24206 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
        result = list(bst.pre_order())
>       assert result == [5, 3, 2, 4, 7, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:211: AssertionError
[36m   -[0m [#  98] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
[34m- 325:         if node == 'root':[0m
[32m+ 325:         if not (node == 'root'):[0m
  326:             node = self.root
  327:         
  328:         if not node:
  329:             return
--------------------------------------------------------------------------------
[0.18316 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7ad158a0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
[36m   -[0m [#  99] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
  327:         
[34m- 328:         if not node:[0m
[32m+ 328:         if not ((not node)):[0m
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
--------------------------------------------------------------------------------
[0.18034 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 100] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
[34m- 339:         if node == 'root':[0m
[32m+ 339:         if not (node == 'root'):[0m
  340:             node = self.root
  341:         
  342:         if not node:
  343:             return
--------------------------------------------------------------------------------
[0.19973 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7ac2be20>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
[36m   -[0m [# 101] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
  341:         
[34m- 342:         if not node:[0m
[32m+ 342:         if not ((not node)):[0m
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
--------------------------------------------------------------------------------
[0.23538 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:322: AssertionError
[36m   -[0m [# 102] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
[34m- 355:         while q.peek():[0m
[32m+ 355:         while not (q.peek()):[0m
  356:             node = q.dequeue()
  357:             yield node.val
  358:             if node.left:
  359:                 q.enqueue(node.left)
--------------------------------------------------------------------------------
[0.22633 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 103] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  354:         q.enqueue(self.root)
  355:         while q.peek():
  356:             node = q.dequeue()
  357:             yield node.val
[34m- 358:             if node.left:[0m
[32m+ 358:             if not (node.left):[0m
  359:                 q.enqueue(node.left)
  360:             if node.right:
  361:                 q.enqueue(node.right)
  362:     
--------------------------------------------------------------------------------
[0.15992 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 104] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  356:             node = q.dequeue()
  357:             yield node.val
  358:             if node.left:
  359:                 q.enqueue(node.left)
[34m- 360:             if node.right:[0m
[32m+ 360:             if not (node.right):[0m
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
--------------------------------------------------------------------------------
[0.17134 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 105] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
[34m- 365:         if (self._size < 1 or not (self.contains(val))):[0m
[32m+ 365:         if not ((self._size < 1 or not (self.contains(val)))):[0m
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.24053 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 106] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
[34m- 370:         if node._is_leaf():[0m
[32m+ 370:         if not (node._is_leaf()):[0m
  371:             if node.parent:
  372:                 setattr(node.parent, node._side(), None)
  373:             else:
  374:                 self.root = None
--------------------------------------------------------------------------------
[0.15897 s] [36mincompetent[0m

TypeError: binarySearchTree3:383: TypeError: getattr(): attribute name must be string

[36m   -[0m [# 107] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  367:         
  368:         node = self.search(val)
  369:         
  370:         if node._is_leaf():
[34m- 371:             if node.parent:[0m
[32m+ 371:             if not (node.parent):[0m
  372:                 setattr(node.parent, node._side(), None)
  373:             else:
  374:                 self.root = None
  375:         
--------------------------------------------------------------------------------
[0.17721 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 108] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  372:                 setattr(node.parent, node._side(), None)
  373:             else:
  374:                 self.root = None
  375:         
[34m- 376:         elif node._is_interior():[0m
[32m+ 376:         elif not (node._is_interior()):[0m
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
--------------------------------------------------------------------------------
[0.18602 s] [36mincompetent[0m

TypeError: binarySearchTree3:383: TypeError: getattr(): attribute name must be string

[36m   -[0m [# 109] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  380:             node.val = next_node.val
  381:         else:
  382:             
  383:             child = getattr(node, node._onlychild())
[34m- 384:             if node.parent:[0m
[32m+ 384:             if not (node.parent):[0m
  385:                 child.parent = node.parent
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
  388:                 self.root = child
--------------------------------------------------------------------------------
[0.16170 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
>       assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:156: AssertionError
[36m   -[0m [# 110] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  390:         self._size -= 1
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
[34m- 394:         if node.right:[0m
[32m+ 394:         if not (node.right):[0m
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
  398:             if node._side() == 'left':
--------------------------------------------------------------------------------
[0.25869 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case3.delete(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a27a3e0>, val = 5

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:379: AttributeError
[36m   -[0m [# 111] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
  395:             return self._findmin(node.right)
  396:         
[34m- 397:         elif node.parent:[0m
[32m+ 397:         elif not (node.parent):[0m
  398:             if node._side() == 'left':
  399:                 return node.parent
  400:             else:
  401:                 node.parent.right = None
--------------------------------------------------------------------------------
[0.19166 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_find_replacement_left_side

def test_find_replacement_left_side():
        # Create a BST with some nodes
        bst = Bst([5, 3, 7, 2, 4, 6, 8, 1, 9])
    
        # Get a reference to a node with only a left child
        node_with_left_child = bst.search(2)
    
        result = bst._find_replacement(node_with_left_child)
    
        # Verify that the result is as expected (leftmost node of the right subtree)
>       assert result.val == 3
E       AttributeError: 'NoneType' object has no attribute 'val'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:239: AttributeError
[36m   -[0m [# 112] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  394:         if node.right:
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
[34m- 398:             if node._side() == 'left':[0m
[32m+ 398:             if not (node._side() == 'left'):[0m
  399:                 return node.parent
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
--------------------------------------------------------------------------------
[0.16050 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_find_replacement_left_side

def test_find_replacement_left_side():
        # Create a BST with some nodes
        bst = Bst([5, 3, 7, 2, 4, 6, 8, 1, 9])
    
        # Get a reference to a node with only a left child
        node_with_left_child = bst.search(2)
    
        result = bst._find_replacement(node_with_left_child)
    
        # Verify that the result is as expected (leftmost node of the right subtree)
>       assert result.val == 3
E       AttributeError: 'NoneType' object has no attribute 'val'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:239: AttributeError
[36m   -[0m [# 113] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  404:                 return tmp
  405:     
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
[34m- 408:         while node.left:[0m
[32m+ 408:         while not (node.left):[0m
  409:             node = node.left
  410:         return node
--------------------------------------------------------------------------------
[0.16091 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case3.delete(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:379: in delete
    ???
binarySearchTree3:377: in delete
    ???
binarySearchTree3:395: in _find_replacement
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a4a9660>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:408: AttributeError
[36m   -[0m [# 114] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
[34m-  14:         return 'Value: {}'.format(self.data)[0m
[32m+  14:         return 'mutpy'.format(self.data)[0m
   15: 
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[0.21331 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_45

def test_case_45():
        node_d_l_l_0 = module_0.NodeDLL()
        var_0 = node_d_l_l_0.__repr__()
>       assert var_0 == 'Value: None'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:370: AssertionError
[36m   -[0m [# 115] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
[34m-  14:         return 'Value: {}'.format(self.data)[0m
[32m+  14:         return ''.format(self.data)[0m
   15: 
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[0.31708 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_45

def test_case_45():
        node_d_l_l_0 = module_0.NodeDLL()
        var_0 = node_d_l_l_0.__repr__()
>       assert var_0 == 'Value: None'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:370: AssertionError
[36m   -[0m [# 116] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
   31:         self.head = None
   32:         self.tail = None
[34m-  33:         self._length = 0[0m
[32m+  33:         self._length = 1[0m
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
--------------------------------------------------------------------------------
[0.14827 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
        popped_value = dll.pop()
    
        assert popped_value == 3
    
        assert dll.head.prev is None
    
>       assert dll._length == 2
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:15: AssertionError
[36m   -[0m [# 117] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
[34m-  49:         self._length += 1[0m
[32m+  49:         self._length += 2[0m
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
--------------------------------------------------------------------------------
[0.15837 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
        popped_value = dll.pop()
    
        assert popped_value == 3
    
        assert dll.head.prev is None
    
>       assert dll._length == 2
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:15: AssertionError
[36m   -[0m [# 118] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
[34m-  54:         if self._length < 1:[0m
[32m+  54:         if self._length < 2:[0m
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
--------------------------------------------------------------------------------
[0.23055 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: AssertionError
[36m   -[0m [# 119] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
   54:         if self._length < 1:
[34m-  55:             raise IndexError('Cannot pop from an empty list.')[0m
[32m+  55:             raise IndexError('mutpy')[0m
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
--------------------------------------------------------------------------------
[0.26197 s] [31msurvived[0m
[36m   -[0m [# 120] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
   54:         if self._length < 1:
[34m-  55:             raise IndexError('Cannot pop from an empty list.')[0m
[32m+  55:             raise IndexError('')[0m
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
--------------------------------------------------------------------------------
[0.27004 s] [31msurvived[0m
[36m   -[0m [# 121] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
[34m-  61:         self._length -= 1[0m
[32m+  61:         self._length -= 2[0m
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
--------------------------------------------------------------------------------
[0.23481 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
        popped_value = dll.pop()
    
        assert popped_value == 3
    
        assert dll.head.prev is None
    
>       assert dll._length == 2
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:15: AssertionError
[36m   -[0m [# 122] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
[34m-  62:         if self._length < 1:[0m
[32m+  62:         if self._length < 2:[0m
   63:             self.tail = None
   64:         return to_return.data
   65:     
   66:     def append(self, val):
--------------------------------------------------------------------------------
[0.18109 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 123] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
[34m-  72:         if self._length < 1:[0m
[32m+  72:         if self._length < 2:[0m
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
--------------------------------------------------------------------------------
[0.19412 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 124] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
[34m-  74:         self._length += 1[0m
[32m+  74:         self._length += 2[0m
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
--------------------------------------------------------------------------------
[0.15871 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
>       assert dll._repr() == [4, 3, 2, 1, 5]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7aa2d330>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [# 125] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
[34m-  79:         if self._length < 1:[0m
[32m+  79:         if self._length < 2:[0m
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
--------------------------------------------------------------------------------
[0.21316 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_10

def test_case_10():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList(bst_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_0 = double_linked_list_0.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ac29b70>

>   ???
E   IndexError: Cannot shift from an empty list.

binarySearchTree3:80: IndexError
[36m   -[0m [# 126] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
   79:         if self._length < 1:
[34m-  80:             raise IndexError('Cannot shift from an empty list.')[0m
[32m+  80:             raise IndexError('mutpy')[0m
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
--------------------------------------------------------------------------------
[0.36706 s] [31msurvived[0m
[36m   -[0m [# 127] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
   79:         if self._length < 1:
[34m-  80:             raise IndexError('Cannot shift from an empty list.')[0m
[32m+  80:             raise IndexError('')[0m
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
--------------------------------------------------------------------------------
[0.27660 s] [31msurvived[0m
[36m   -[0m [# 128] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
[34m-  86:         self._length -= 1[0m
[32m+  86:         self._length -= 2[0m
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
--------------------------------------------------------------------------------
[0.17574 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
>       assert dll._repr() == [3, 2, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:35: AssertionError
[36m   -[0m [# 129] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
[34m-  87:         if self._length < 1:[0m
[32m+  87:         if self._length < 2:[0m
   88:             self.tail = None
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
--------------------------------------------------------------------------------
[0.24950 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_shift_with_two_elements

def test_shift_with_two_elements():
        # Create a double linked list with two elements
        dll = DoubleLinkedList([1, 2])
    
        # Perform the shift operation
        shifted_value = dll.shift()
    
        # Verify that the shifted value is correct
        assert shifted_value == 1
    
        # Verify that the tail is updated correctly
>       assert dll.tail.data == 2
E       AttributeError: 'NoneType' object has no attribute 'data'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:262: AttributeError
[36m   -[0m [# 130] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
[34m-  96:                 if self._length == 1:[0m
[32m+  96:                 if self._length == 2:[0m
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
--------------------------------------------------------------------------------
[0.21482 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_12

def test_case_12():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(double_linked_list_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_1 = double_linked_list_0.remove(double_linked_list_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a286b60>
val = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a286b60>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:101: AttributeError
[36m   -[0m [# 131] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
[34m- 104:                 self._length -= 1[0m
[32m+ 104:                 self._length -= 2[0m
  105:                 return
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
--------------------------------------------------------------------------------
[0.16367 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.remove(2)
>       assert dll._repr() == [3, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:39: AssertionError
[36m   -[0m [# 132] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
  107:         
[34m- 108:         raise ValueError('{} is not in the list'.format(val))[0m
[32m+ 108:         raise ValueError('mutpy'.format(val))[0m
  109:     
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
--------------------------------------------------------------------------------
[0.26935 s] [31msurvived[0m
[36m   -[0m [# 133] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
  107:         
[34m- 108:         raise ValueError('{} is not in the list'.format(val))[0m
[32m+ 108:         raise ValueError(''.format(val))[0m
  109:     
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
--------------------------------------------------------------------------------
[0.29166 s] [31msurvived[0m
[36m   -[0m [# 134] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  161:         self.val = val
  162:         self.right = None
  163:         self.left = None
  164:         self.parent = parent
[34m- 165:         self.height = 1[0m
[32m+ 165:         self.height = 2[0m
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
--------------------------------------------------------------------------------
[0.25796 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_empty_node

def test_empty_node():
        # Create an empty node
        empty_node = Node()
    
        # Verify that the node is empty
        assert empty_node.val is None
        assert empty_node.left is None
        assert empty_node.right is None
        assert empty_node.parent is None
>       assert empty_node.height == 1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:113: AssertionError
[36m   -[0m [# 135] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
[34m- 178:             return 'left'[0m
[32m+ 178:             return 'mutpy'[0m
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
  182:     def _side(self):
--------------------------------------------------------------------------------
[0.16289 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_onlychild

def test_bst_onlychild():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6])
        root = bst.root
    
        # Test _onlychild method
>       assert root.right._onlychild() == 'left'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:144: AssertionError
[36m   -[0m [# 136] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
[34m- 178:             return 'left'[0m
[32m+ 178:             return ''[0m
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
  182:     def _side(self):
--------------------------------------------------------------------------------
[0.16155 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_onlychild

def test_bst_onlychild():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6])
        root = bst.root
    
        # Test _onlychild method
>       assert root.right._onlychild() == 'left'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:144: AssertionError
[36m   -[0m [# 137] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
  179:         if (self.right and not (self.left)):
[34m- 180:             return 'right'[0m
[32m+ 180:             return 'mutpy'[0m
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
--------------------------------------------------------------------------------
[0.24027 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
>       bst_case2.delete(7)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8ff100>, val = 7

>   ???
E   AttributeError: 'Node' object has no attribute 'mutpy'

binarySearchTree3:383: AttributeError
[36m   -[0m [# 138] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
  179:         if (self.right and not (self.left)):
[34m- 180:             return 'right'[0m
[32m+ 180:             return ''[0m
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
--------------------------------------------------------------------------------
[0.16283 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
>       bst_case2.delete(7)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8b0910>, val = 7

>   ???
E   AttributeError: 'Node' object has no attribute ''

binarySearchTree3:383: AttributeError
[36m   -[0m [# 139] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
[34m- 185:             return 'left' if self.parent.left == self else 'right'[0m
[32m+ 185:             return 'mutpy' if self.parent.left == self else 'right'[0m
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.17164 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
        assert root.right._onlychild() is None
        assert root._onlychild() is None
    
        # Test _side method
>       assert root.left._side() == 'left'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:134: AssertionError
[36m   -[0m [# 140] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
[34m- 185:             return 'left' if self.parent.left == self else 'right'[0m
[32m+ 185:             return '' if self.parent.left == self else 'right'[0m
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.17767 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
        assert root.right._onlychild() is None
        assert root._onlychild() is None
    
        # Test _side method
>       assert root.left._side() == 'left'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:134: AssertionError
[36m   -[0m [# 141] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
[34m- 185:             return 'left' if self.parent.left == self else 'right'[0m
[32m+ 185:             return 'left' if self.parent.left == self else 'mutpy'[0m
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.16696 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
        assert root.right._onlychild() is None
        assert root._onlychild() is None
    
        # Test _side method
        assert root.left._side() == 'left'
>       assert root.right.right._side() == 'right'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:135: AssertionError
[36m   -[0m [# 142] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
[34m- 185:             return 'left' if self.parent.left == self else 'right'[0m
[32m+ 185:             return 'left' if self.parent.left == self else ''[0m
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.18819 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
        assert root.right._onlychild() is None
        assert root._onlychild() is None
    
        # Test _side method
        assert root.left._side() == 'left'
>       assert root.right.right._side() == 'right'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:135: AssertionError
[36m   -[0m [# 143] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  226:     '''
  227:     
  228:     def __init__(self, data=None):
  229:         '''Initialize tree.'''
[34m- 230:         self._size = 0[0m
[32m+ 230:         self._size = 1[0m
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
--------------------------------------------------------------------------------
[0.16619 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
>       assert bst_case1._size == 6
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:151: AssertionError
[36m   -[0m [# 144] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
[34m- 241:             self._size += 1[0m
[32m+ 241:             self._size += 2[0m
  242:         else:
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
--------------------------------------------------------------------------------
[0.18257 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
>       assert bst_case1._size == 6
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:151: AssertionError
[36m   -[0m [# 145] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
[34m- 248:             curr = self._set_child(curr, 'left', val)[0m
[32m+ 248:             curr = self._set_child(curr, 'mutpy', val)[0m
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
--------------------------------------------------------------------------------
[0.26191 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a96b070>
curr = <binarySearchTree3.Node object at 0x7f1f7a968e50>, side = 'mutpy'
val = 3

>   ???
E   AttributeError: 'Node' object has no attribute 'mutpy'

binarySearchTree3:255: AttributeError
[36m   -[0m [# 146] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
[34m- 248:             curr = self._set_child(curr, 'left', val)[0m
[32m+ 248:             curr = self._set_child(curr, '', val)[0m
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
--------------------------------------------------------------------------------
[0.16785 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a7721a0>
curr = <binarySearchTree3.Node object at 0x7f1f7a770b80>, side = '', val = 3

>   ???
E   AttributeError: 'Node' object has no attribute ''

binarySearchTree3:255: AttributeError
[36m   -[0m [# 147] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
[34m- 250:             curr = self._set_child(curr, 'right', val)[0m
[32m+ 250:             curr = self._set_child(curr, 'mutpy', val)[0m
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
--------------------------------------------------------------------------------
[0.15121 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:250: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a9e73d0>
curr = <binarySearchTree3.Node object at 0x7f1f7a9e7460>, side = 'mutpy'
val = 7

>   ???
E   AttributeError: 'Node' object has no attribute 'mutpy'

binarySearchTree3:255: AttributeError
[36m   -[0m [# 148] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
[34m- 250:             curr = self._set_child(curr, 'right', val)[0m
[32m+ 250:             curr = self._set_child(curr, '', val)[0m
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
--------------------------------------------------------------------------------
[0.14964 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:250: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a5c1090>
curr = <binarySearchTree3.Node object at 0x7f1f7a5c11b0>, side = '', val = 7

>   ???
E   AttributeError: 'Node' object has no attribute ''

binarySearchTree3:255: AttributeError
[36m   -[0m [# 149] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  255:         child = getattr(curr, side)
  256:         if child:
  257:             count = self._step(val, child)
  258:             if curr.height <= count:
[34m- 259:                 curr.height += 1[0m
[32m+ 259:                 curr.height += 2[0m
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
  263:             if curr.height == 1:
--------------------------------------------------------------------------------
[0.21748 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [# 150] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
[34m- 262:             self._size += 1[0m
[32m+ 262:             self._size += 2[0m
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
  266:     
--------------------------------------------------------------------------------
[0.17074 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
>       assert bst_case1._size == 6
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:151: AssertionError
[36m   -[0m [# 151] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
[34m- 263:             if curr.height == 1:[0m
[32m+ 263:             if curr.height == 2:[0m
  264:                 curr.height += 1
  265:         return curr
  266:     
  267:     def search(self, val):
--------------------------------------------------------------------------------
[0.21428 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_WHOLE_SUITE.py::test_case_6

def test_case_6():
        bytes_0 = b'\xd0\x08\x1b$\xda'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.in_order()
        var_1 = bst_0.depth()
>       assert var_1 == 4
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_WHOLE_SUITE.py:81: AssertionError
[36m   -[0m [# 152] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
  263:             if curr.height == 1:
[34m- 264:                 curr.height += 1[0m
[32m+ 264:                 curr.height += 2[0m
  265:         return curr
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
--------------------------------------------------------------------------------
[0.24208 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_WHOLE_SUITE.py::test_case_6

def test_case_6():
        bytes_0 = b'\xd0\x08\x1b$\xda'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.in_order()
        var_1 = bst_0.depth()
>       assert var_1 == 4
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_WHOLE_SUITE.py:81: AssertionError
[36m   -[0m [# 153] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  280:         return self._size
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
[34m- 284:         return 0 if not (self.root) else self.root.height[0m
[32m+ 284:         return 1 if not (self.root) else self.root.height[0m
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.29740 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_31

def test_case_31():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
>       assert var_0 == 0
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:250: AssertionError
[36m   -[0m [# 154] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  297:         '''
  298:         if not tree:
  299:             tree = self.root
  300:             if not tree:
[34m- 301:                 return 0[0m
[32m+ 301:                 return 1[0m
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
--------------------------------------------------------------------------------
[0.21510 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_34

def test_case_34():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.balance()
>       assert var_0 == 0
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:274: AssertionError
[36m   -[0m [# 155] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  299:             tree = self.root
  300:             if not tree:
  301:                 return 0
  302:         
[34m- 303:         leftbranch = 0 if not (tree.left) else tree.left.height[0m
[32m+ 303:         leftbranch = 1 if not (tree.left) else tree.left.height[0m
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
--------------------------------------------------------------------------------
[0.19096 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_33

def test_case_33():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.balance()
>       assert var_1 == 0
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:267: AssertionError
[36m   -[0m [# 156] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  300:             if not tree:
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
[34m- 304:         rightbranch = 0 if not (tree.right) else tree.right.height[0m
[32m+ 304:         rightbranch = 1 if not (tree.right) else tree.right.height[0m
  305:         
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
--------------------------------------------------------------------------------
[0.29180 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_33

def test_case_33():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.balance()
>       assert var_1 == 0
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:267: AssertionError
[36m   -[0m [# 157] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
[34m- 308:     def pre_order(self, node='root'):[0m
[32m+ 308:     def pre_order(self, node='mutpy'):[0m
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
  312:         
--------------------------------------------------------------------------------
[0.16502 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
>       result = list(bst.pre_order())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7ad14df0>, node = 'mutpy'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
[36m   -[0m [# 158] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
[34m- 308:     def pre_order(self, node='root'):[0m
[32m+ 308:     def pre_order(self, node=''):[0m
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
  312:         
--------------------------------------------------------------------------------
[0.19454 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
        result = list(bst.pre_order())
>       assert result == [5, 3, 2, 4, 7, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:211: AssertionError
[36m   -[0m [# 159] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
[34m- 310:         if node == 'root':[0m
[32m+ 310:         if node == 'mutpy':[0m
  311:             node = self.root
  312:         
  313:         if not node:
  314:             return
--------------------------------------------------------------------------------
[0.20198 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
>       result = list(bst.pre_order())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8c1420>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
[36m   -[0m [# 160] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
[34m- 310:         if node == 'root':[0m
[32m+ 310:         if node == '':[0m
  311:             node = self.root
  312:         
  313:         if not node:
  314:             return
--------------------------------------------------------------------------------
[0.19291 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
>       result = list(bst.pre_order())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8feef0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
[36m   -[0m [# 161] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
[34m- 323:     def in_order(self, node='root'):[0m
[32m+ 323:     def in_order(self, node='mutpy'):[0m
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
  327:         
--------------------------------------------------------------------------------
[0.24271 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a9e7580>, node = 'mutpy'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
[36m   -[0m [# 162] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
[34m- 323:     def in_order(self, node='root'):[0m
[32m+ 323:     def in_order(self, node=''):[0m
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
  327:         
--------------------------------------------------------------------------------
[0.16173 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 163] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
[34m- 325:         if node == 'root':[0m
[32m+ 325:         if node == 'mutpy':[0m
  326:             node = self.root
  327:         
  328:         if not node:
  329:             return
--------------------------------------------------------------------------------
[0.16347 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a9e7ca0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
[36m   -[0m [# 164] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
[34m- 325:         if node == 'root':[0m
[32m+ 325:         if node == '':[0m
  326:             node = self.root
  327:         
  328:         if not node:
  329:             return
--------------------------------------------------------------------------------
[0.26441 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a96fdf0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
[36m   -[0m [# 165] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
[34m- 337:     def post_order(self, node='root'):[0m
[32m+ 337:     def post_order(self, node='mutpy'):[0m
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
  341:         
--------------------------------------------------------------------------------
[0.21002 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a934a60>, node = 'mutpy'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
[36m   -[0m [# 166] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
[34m- 337:     def post_order(self, node='root'):[0m
[32m+ 337:     def post_order(self, node=''):[0m
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
  341:         
--------------------------------------------------------------------------------
[0.21631 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:322: AssertionError
[36m   -[0m [# 167] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
[34m- 339:         if node == 'root':[0m
[32m+ 339:         if node == 'mutpy':[0m
  340:             node = self.root
  341:         
  342:         if not node:
  343:             return
--------------------------------------------------------------------------------
[0.21227 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a4a8100>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
[36m   -[0m [# 168] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
[34m- 339:         if node == 'root':[0m
[32m+ 339:         if node == '':[0m
  340:             node = self.root
  341:         
  342:         if not node:
  343:             return
--------------------------------------------------------------------------------
[0.22763 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8ff460>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
[36m   -[0m [# 169] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
[34m- 365:         if (self._size < 1 or not (self.contains(val))):[0m
[32m+ 365:         if (self._size < 2 or not (self.contains(val))):[0m
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.26980 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.delete(bst_0)
>       assert bst_0.root is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:179: AssertionError
[36m   -[0m [# 170] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
[34m- 378:             self._size += 1[0m
[32m+ 378:             self._size += 2[0m
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
  382:             
--------------------------------------------------------------------------------
[0.16605 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case3.delete(5)
        assert list(bst_case3.in_order()) == [2, 3, 4, 6, 7, 8]
>       assert bst_case3._size == 6
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:163: AssertionError
[36m   -[0m [# 171] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
  388:                 self.root = child
  389:         
[34m- 390:         self._size -= 1[0m
[32m+ 390:         self._size -= 2[0m
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
--------------------------------------------------------------------------------
[0.15654 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
>       assert bst_case1._size == 6
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:151: AssertionError
[36m   -[0m [# 172] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  394:         if node.right:
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
[34m- 398:             if node._side() == 'left':[0m
[32m+ 398:             if node._side() == 'mutpy':[0m
  399:                 return node.parent
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
--------------------------------------------------------------------------------
[0.25347 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_find_replacement_left_side

def test_find_replacement_left_side():
        # Create a BST with some nodes
        bst = Bst([5, 3, 7, 2, 4, 6, 8, 1, 9])
    
        # Get a reference to a node with only a left child
        node_with_left_child = bst.search(2)
    
        result = bst._find_replacement(node_with_left_child)
    
        # Verify that the result is as expected (leftmost node of the right subtree)
>       assert result.val == 3
E       AttributeError: 'NoneType' object has no attribute 'val'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:239: AttributeError
[36m   -[0m [# 173] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  394:         if node.right:
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
[34m- 398:             if node._side() == 'left':[0m
[32m+ 398:             if node._side() == '':[0m
  399:                 return node.parent
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
--------------------------------------------------------------------------------
[0.17222 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_find_replacement_left_side

def test_find_replacement_left_side():
        # Create a BST with some nodes
        bst = Bst([5, 3, 7, 2, 4, 6, 8, 1, 9])
    
        # Get a reference to a node with only a left child
        node_with_left_child = bst.search(2)
    
        result = bst._find_replacement(node_with_left_child)
    
        # Verify that the result is as expected (leftmost node of the right subtree)
>       assert result.val == 3
E       AttributeError: 'NoneType' object has no attribute 'val'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:239: AttributeError
[36m   -[0m [# 174] EHD binarySearchTree3: 
--------------------------------------------------------------------------------
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
[34m-  38:             if data:[0m
[34m-  39:                 self.push(data)[0m
[32m+  38:             raise[0m
[32m+  39:     [0m
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
--------------------------------------------------------------------------------
[0.16736 s] [36mincompetent[0m

TypeError: binarySearchTree3:35: TypeError: 'NoneType' object is not iterable

[36m   -[0m [# 175] EHD binarySearchTree3: 
--------------------------------------------------------------------------------
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
[34m- 118:                 break[0m
[32m+ 118:                 raise[0m
  119:         return l
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
--------------------------------------------------------------------------------
[0.17996 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a2855a0>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
[36m   -[0m [# 176] EHD binarySearchTree3: 
--------------------------------------------------------------------------------
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
  148:             return self._container.head.data
  149:         except AttributeError:
[34m- 150:             return None[0m
[32m+ 150:             raise[0m
  151:     
  152:     def size(self):
  153:         '''Return the size of the queue.'''
  154:         return self._container._length
--------------------------------------------------------------------------------
[0.17176 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
        assert queue.dequeue() == 3
        assert queue.peek() == 2
        assert queue.size() == 2
        queue.enqueue(4)
        assert queue.size() == 3
        assert queue.dequeue() == 2
        assert queue.dequeue() == 1
        assert queue.dequeue() == 4
        assert queue.size() == 0
>       assert queue.peek() is None

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7f1f7a4ab400>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

binarySearchTree3:148: AttributeError
[36m   -[0m [# 177] EXS binarySearchTree3: 
--------------------------------------------------------------------------------
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
[34m-  38:             if data:[0m
[34m-  39:                 self.push(data)[0m
[32m+  38:             pass[0m
[32m+  39:     [0m
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
--------------------------------------------------------------------------------
[0.24895 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_1

def test_case_1():
        node_0 = module_0.Node()
        assert node_0.height == 1
        double_linked_list_0 = module_0.DoubleLinkedList(node_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:17: AssertionError
[36m   -[0m [# 178] EXS binarySearchTree3: 
--------------------------------------------------------------------------------
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
[34m- 118:                 break[0m
[32m+ 118:                 pass[0m
  119:         return l
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
--------------------------------------------------------------------------------
[5.00658 s] [33mtimeout[0m
[36m   -[0m [# 179] EXS binarySearchTree3: 
--------------------------------------------------------------------------------
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
  148:             return self._container.head.data
  149:         except AttributeError:
[34m- 150:             return None[0m
[32m+ 150:             pass[0m
  151:     
  152:     def size(self):
  153:         '''Return the size of the queue.'''
  154:         return self._container._length
--------------------------------------------------------------------------------
[0.29976 s] [31msurvived[0m
[36m   -[0m [# 180] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
[34m-  98:                 elif (curr is not self.head and curr is not self.tail):[0m
[32m+  98:                 elif (curr is not self.head or curr is not self.tail):[0m
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.16008 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_remove_tail

def test_remove_tail():
        # Create a double linked list with some values
        dll = DoubleLinkedList([1, 2, 3, 4])
    
        # Remove the tail element
>       dll.remove(1)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a9db430>, val = 1

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:99: AttributeError
[36m   -[0m [# 181] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
[34m- 169:         return not ((self.right or self.left))[0m
[32m+ 169:         return not ((self.right and self.left))[0m
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
--------------------------------------------------------------------------------
[0.18686 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
>       assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:156: AssertionError
[36m   -[0m [# 182] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
  169:         return not ((self.right or self.left))
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
[34m- 173:         return (self.right and self.left)[0m
[32m+ 173:         return (self.right or self.left)[0m
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.17122 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case3.delete(5)
        assert list(bst_case3.in_order()) == [2, 3, 4, 6, 7, 8]
        assert bst_case3._size == 6
    
        # Case 4: Deleting the root node with one child
        bst_case4 = Bst([5, 7, 8])
        bst_case4.delete(5)
>       assert list(bst_case4.in_order()) == [7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:168: AssertionError
[36m   -[0m [# 183] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
  173:         return (self.right and self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
[34m- 177:         if (self.left and not (self.right)):[0m
[32m+ 177:         if (self.left or not (self.right)):[0m
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
--------------------------------------------------------------------------------
[0.17914 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
>       assert root.left.left._onlychild() is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:129: AssertionError
[36m   -[0m [# 184] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
[34m- 179:         if (self.right and not (self.left)):[0m
[32m+ 179:         if (self.right or not (self.left)):[0m
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.17377 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
>       assert root.left.left._onlychild() is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:129: AssertionError
[36m   -[0m [# 185] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
[34m- 365:         if (self._size < 1 or not (self.contains(val))):[0m
[32m+ 365:         if (self._size < 1 and not (self.contains(val))):[0m
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.26148 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case3.delete(5)
        assert list(bst_case3.in_order()) == [2, 3, 4, 6, 7, 8]
        assert bst_case3._size == 6
    
        # Case 4: Deleting the root node with one child
        bst_case4 = Bst([5, 7, 8])
        bst_case4.delete(5)
        assert list(bst_case4.in_order()) == [7, 8]
        assert bst_case4._size == 2
    
        # Case 5: Deleting the root node with two children
        bst_case5 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case5.delete(5)
        assert list(bst_case5.in_order()) == [2, 3, 4, 6, 7, 8]
        assert bst_case5._size == 6
    
        # Case 6: Deleting a non-existent node
        bst_case6 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case6.delete(9)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a6129b0>, val = 9

>   ???
E   AttributeError: 'NoneType' object has no attribute '_is_leaf'

binarySearchTree3:370: AttributeError
[36m   -[0m [# 186] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
   33:         self._length = 0
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
[34m-  37:         except TypeError:[0m
[32m+  37:                 breakexcept TypeError:[0m
   38:             if data:
   39:                 self.push(data)
   40:     
   41:     def push(self, val):
--------------------------------------------------------------------------------
[0.16082 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
        popped_value = dll.pop()
    
>       assert popped_value == 3
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:11: AssertionError
[36m   -[0m [# 187] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
[34m- 107:         [0m
[32m+ 107:             break[0m
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
--------------------------------------------------------------------------------
[0.18585 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
>       dll.remove(2)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a9d8220>, val = 2

>   ???
E   ValueError: 2 is not in the list

binarySearchTree3:108: ValueError
[36m   -[0m [# 188] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
[34m- 118:                 break[0m
[32m+ 118:                 breakbreak[0m
  119:         return l
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
--------------------------------------------------------------------------------
[0.16505 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: AssertionError
[36m   -[0m [# 189] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  232:         
  233:         if data:
  234:             for i in data:
  235:                 self.insert(i)
[34m- 236:     [0m
[32m+ 236:                 break[0m
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
--------------------------------------------------------------------------------
[0.18845 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
>       assert root._is_leaf() is False
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: AssertionError
[36m   -[0m [# 190] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  272:                 return curr
  273:             elif val < curr.val:
  274:                 curr = curr.left
  275:             else:
[34m- 276:                 curr = curr.right[0m
[32m+ 276:                 curr = curr.rightbreak[0m
  277:     
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
--------------------------------------------------------------------------------
[0.16606 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 191] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
[34m- 320:         for n in self.pre_order(node=node.right):[0m
[34m- 321:             yield n[0m
[34m- 322:     [0m
[32m+ 320:             break[0m
[32m+ 321:         for n in self.pre_order(node=node.right):[0m
[32m+ 322:             yield n[0m
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
--------------------------------------------------------------------------------
[0.18070 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
        result = list(bst.pre_order())
>       assert result == [5, 3, 2, 4, 7, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:211: AssertionError
[36m   -[0m [# 192] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
[34m- 322:     [0m
[32m+ 322:             break[0m
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
--------------------------------------------------------------------------------
[0.17834 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
        result = list(bst.pre_order())
>       assert result == [5, 3, 2, 4, 7, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:211: AssertionError
[36m   -[0m [# 193] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
[34m- 333:         yield node.val[0m
[34m- 334:         for n in self.in_order(node=node.right):[0m
[34m- 335:             yield n[0m
[34m- 336:     [0m
[32m+ 333:             break[0m
[32m+ 334:         yield node.val[0m
[32m+ 335:         for n in self.in_order(node=node.right):[0m
[32m+ 336:             yield n[0m
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
--------------------------------------------------------------------------------
[0.26458 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 194] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  332:             yield n
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
[34m- 336:     [0m
[32m+ 336:             break[0m
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
--------------------------------------------------------------------------------
[0.18579 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 195] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
[34m- 347:         for n in self.post_order(node=node.right):[0m
[34m- 348:             yield n[0m
[34m- 349:         yield node.val[0m
[34m- 350:     [0m
[32m+ 347:             break[0m
[32m+ 348:         for n in self.post_order(node=node.right):[0m
[32m+ 349:             yield n[0m
[32m+ 350:         yield node.val[0m
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.30796 s] [31msurvived[0m
[36m   -[0m [# 196] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  345:         for n in self.post_order(node=node.left):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
  348:             yield n
[34m- 349:         yield node.val[0m
[34m- 350:     [0m
[32m+ 349:             break[0m
[32m+ 350:         yield node.val[0m
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.27009 s] [31msurvived[0m
[36m   -[0m [# 197] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  358:             if node.left:
  359:                 q.enqueue(node.left)
  360:             if node.right:
  361:                 q.enqueue(node.right)
[34m- 362:     [0m
[32m+ 362:             break[0m
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
  366:             return
--------------------------------------------------------------------------------
[0.17740 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 198] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
  409:             node = node.left
[34m- 410:         return node[0m
[32m+ 410:             break[0m
[32m+ 411:         return node[0m
--------------------------------------------------------------------------------
[0.29718 s] [31msurvived[0m
[36m   -[0m [# 199] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
   31:         self.head = None
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
[34m-  35:             for val in data:[0m
[32m+  35:             for val in reversed(data):[0m
   36:                 self.push(val)
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
--------------------------------------------------------------------------------
[0.16514 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
        popped_value = dll.pop()
    
>       assert popped_value == 3
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:11: AssertionError
[36m   -[0m [# 200] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  230:         self._size = 0
  231:         self.root = None
  232:         
  233:         if data:
[34m- 234:             for i in data:[0m
[32m+ 234:             for i in reversed(data):[0m
  235:                 self.insert(i)
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
--------------------------------------------------------------------------------
[0.16082 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
>       assert root.left.left._is_leaf() is True
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:122: AssertionError
[36m   -[0m [# 201] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  314:             return
  315:         
  316:         yield node.val
  317:         
[34m- 318:         for n in self.pre_order(node=node.left):[0m
[32m+ 318:         for n in reversed(self.pre_order(node=node.left)):[0m
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
--------------------------------------------------------------------------------
[0.23922 s] [36mincompetent[0m

TypeError: binarySearchTree3:318: TypeError: 'generator' object is not reversible

[36m   -[0m [# 202] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
[34m- 320:         for n in self.pre_order(node=node.right):[0m
[32m+ 320:         for n in reversed(self.pre_order(node=node.right)):[0m
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
--------------------------------------------------------------------------------
[0.18304 s] [36mincompetent[0m

TypeError: binarySearchTree3:320: TypeError: 'generator' object is not reversible

[36m   -[0m [# 203] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  327:         
  328:         if not node:
  329:             return
  330:         
[34m- 331:         for n in self.in_order(node=node.left):[0m
[32m+ 331:         for n in reversed(self.in_order(node=node.left)):[0m
  332:             yield n
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
--------------------------------------------------------------------------------
[0.16044 s] [36mincompetent[0m

TypeError: binarySearchTree3:331: TypeError: 'generator' object is not reversible

[36m   -[0m [# 204] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
  333:         yield node.val
[34m- 334:         for n in self.in_order(node=node.right):[0m
[32m+ 334:         for n in reversed(self.in_order(node=node.right)):[0m
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
--------------------------------------------------------------------------------
[0.19315 s] [36mincompetent[0m

TypeError: binarySearchTree3:334: TypeError: 'generator' object is not reversible

[36m   -[0m [# 205] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  341:         
  342:         if not node:
  343:             return
  344:         
[34m- 345:         for n in self.post_order(node=node.left):[0m
[32m+ 345:         for n in reversed(self.post_order(node=node.left)):[0m
  346:             yield n
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
--------------------------------------------------------------------------------
[0.23531 s] [36mincompetent[0m

TypeError: binarySearchTree3:345: TypeError: 'generator' object is not reversible

[36m   -[0m [# 206] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
[34m- 347:         for n in self.post_order(node=node.right):[0m
[32m+ 347:         for n in reversed(self.post_order(node=node.right)):[0m
  348:             yield n
  349:         yield node.val
  350:     
  351:     def breadth_first(self):
--------------------------------------------------------------------------------
[0.30671 s] [36mincompetent[0m

TypeError: binarySearchTree3:347: TypeError: 'generator' object is not reversible

[36m   -[0m [# 207] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
[34m-  54:         if self._length < 1:[0m
[32m+  54:         if self._length > 1:[0m
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
--------------------------------------------------------------------------------
[0.14807 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ac28fa0>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
[36m   -[0m [# 208] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
[34m-  54:         if self._length < 1:[0m
[32m+  54:         if self._length <= 1:[0m
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
--------------------------------------------------------------------------------
[0.16166 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: AssertionError
[36m   -[0m [# 209] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
[34m-  62:         if self._length < 1:[0m
[32m+  62:         if self._length > 1:[0m
   63:             self.tail = None
   64:         return to_return.data
   65:     
   66:     def append(self, val):
--------------------------------------------------------------------------------
[0.25279 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
        assert queue.dequeue() == 3
        assert queue.peek() == 2
        assert queue.size() == 2
        queue.enqueue(4)
        assert queue.size() == 3
        assert queue.dequeue() == 2
        assert queue.dequeue() == 1
>       assert queue.dequeue() == 4

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a5c0d60>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [# 210] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
[34m-  62:         if self._length < 1:[0m
[32m+  62:         if self._length <= 1:[0m
   63:             self.tail = None
   64:         return to_return.data
   65:     
   66:     def append(self, val):
--------------------------------------------------------------------------------
[0.16697 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 211] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
[34m-  72:         if self._length < 1:[0m
[32m+  72:         if self._length > 1:[0m
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
--------------------------------------------------------------------------------
[0.15243 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
>       assert dll._repr() == [4, 3, 2, 1, 5]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a3ce170>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [# 212] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
[34m-  72:         if self._length < 1:[0m
[32m+  72:         if self._length <= 1:[0m
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
--------------------------------------------------------------------------------
[0.23697 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 213] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
[34m-  79:         if self._length < 1:[0m
[32m+  79:         if self._length > 1:[0m
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
--------------------------------------------------------------------------------
[0.15700 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
>       dll.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a786890>

>   ???
E   IndexError: Cannot shift from an empty list.

binarySearchTree3:80: IndexError
[36m   -[0m [# 214] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
[34m-  79:         if self._length < 1:[0m
[32m+  79:         if self._length <= 1:[0m
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
--------------------------------------------------------------------------------
[0.21716 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_10

def test_case_10():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList(bst_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_0 = double_linked_list_0.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a4d8790>

>   ???
E   IndexError: Cannot shift from an empty list.

binarySearchTree3:80: IndexError
[36m   -[0m [# 215] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
[34m-  87:         if self._length < 1:[0m
[32m+  87:         if self._length > 1:[0m
   88:             self.tail = None
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
--------------------------------------------------------------------------------
[0.16182 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_shift

def test_shift():
        # Create a double linked list with some values
        dll = DoubleLinkedList([1, 2, 3, 4])
    
        # Shift the last element off the tail
        shifted_value = dll.shift()
    
        # Verify that the shifted value is correct
        assert shifted_value == 1
    
        # Verify that the tail has been updated correctly
>       assert dll.tail.data == 2
E       AttributeError: 'NoneType' object has no attribute 'data'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:66: AttributeError
[36m   -[0m [# 216] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
[34m-  87:         if self._length < 1:[0m
[32m+  87:         if self._length <= 1:[0m
   88:             self.tail = None
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
--------------------------------------------------------------------------------
[0.16569 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_shift_with_two_elements

def test_shift_with_two_elements():
        # Create a double linked list with two elements
        dll = DoubleLinkedList([1, 2])
    
        # Perform the shift operation
        shifted_value = dll.shift()
    
        # Verify that the shifted value is correct
        assert shifted_value == 1
    
        # Verify that the tail is updated correctly
>       assert dll.tail.data == 2
E       AttributeError: 'NoneType' object has no attribute 'data'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:262: AttributeError
[36m   -[0m [# 217] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
[34m-  96:                 if self._length == 1:[0m
[32m+  96:                 if self._length != 1:[0m
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
--------------------------------------------------------------------------------
[0.21695 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.remove(2)
>       assert dll._repr() == [3, 1]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a4b8cd0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [# 218] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
[34m- 185:             return 'left' if self.parent.left == self else 'right'[0m
[32m+ 185:             return 'left' if self.parent.left != self else 'right'[0m
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.16326 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
        assert root.right._onlychild() is None
        assert root._onlychild() is None
    
        # Test _side method
>       assert root.left._side() == 'left'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:134: AssertionError
[36m   -[0m [# 219] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
[34m- 247:         if val < curr.val:[0m
[32m+ 247:         if val > curr.val:[0m
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
--------------------------------------------------------------------------------
[0.16769 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
>       assert root._is_interior() is not None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:125: AssertionError
[36m   -[0m [# 220] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
[34m- 247:         if val < curr.val:[0m
[32m+ 247:         if val <= curr.val:[0m
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
--------------------------------------------------------------------------------
[0.27443 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [# 221] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
[34m- 249:         elif val > curr.val:[0m
[32m+ 249:         elif val < curr.val:[0m
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
--------------------------------------------------------------------------------
[0.16193 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
>       assert root._is_interior() is not None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:125: AssertionError
[36m   -[0m [# 222] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
[34m- 249:         elif val > curr.val:[0m
[32m+ 249:         elif val >= curr.val:[0m
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
--------------------------------------------------------------------------------
[0.26504 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_DYNAMOSA.py::test_case_27

def test_case_27():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        var_2 = bst_0.depth()
>       assert var_2 == 6
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_DYNAMOSA.py:288: AssertionError
[36m   -[0m [# 223] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
  257:             count = self._step(val, child)
[34m- 258:             if curr.height <= count:[0m
[32m+ 258:             if curr.height >= count:[0m
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
--------------------------------------------------------------------------------
[0.20848 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [# 224] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
  257:             count = self._step(val, child)
[34m- 258:             if curr.height <= count:[0m
[32m+ 258:             if curr.height < count:[0m
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
--------------------------------------------------------------------------------
[0.22728 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [# 225] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
[34m- 263:             if curr.height == 1:[0m
[32m+ 263:             if curr.height != 1:[0m
  264:                 curr.height += 1
  265:         return curr
  266:     
  267:     def search(self, val):
--------------------------------------------------------------------------------
[0.33637 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_WHOLE_SUITE.py::test_case_6

def test_case_6():
        bytes_0 = b'\xd0\x08\x1b$\xda'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.in_order()
        var_1 = bst_0.depth()
        assert var_1 == 4
        var_2 = bst_0.balance()
>       assert var_2 == 2
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_WHOLE_SUITE.py:83: AssertionError
[36m   -[0m [# 226] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
[34m- 271:             if curr.val == val:[0m
[32m+ 271:             if curr.val != val:[0m
  272:                 return curr
  273:             elif val < curr.val:
  274:                 curr = curr.left
  275:             else:
--------------------------------------------------------------------------------
[0.17936 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case1.delete(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:379: in delete
    ???
binarySearchTree3:379: in delete
    ???
binarySearchTree3:379: in delete
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
[36m   -[0m [# 227] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  269:         curr = self.root
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
[34m- 273:             elif val < curr.val:[0m
[32m+ 273:             elif val > curr.val:[0m
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
  277:     
--------------------------------------------------------------------------------
[0.17040 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 228] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  269:         curr = self.root
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
[34m- 273:             elif val < curr.val:[0m
[32m+ 273:             elif val <= curr.val:[0m
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
  277:     
--------------------------------------------------------------------------------
[0.36042 s] [31msurvived[0m
[36m   -[0m [# 229] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
[34m- 310:         if node == 'root':[0m
[32m+ 310:         if node != 'root':[0m
  311:             node = self.root
  312:         
  313:         if not node:
  314:             return
--------------------------------------------------------------------------------
[0.16566 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
>       result = list(bst.pre_order())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a89c7f0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
[36m   -[0m [# 230] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
[34m- 325:         if node == 'root':[0m
[32m+ 325:         if node != 'root':[0m
  326:             node = self.root
  327:         
  328:         if not node:
  329:             return
--------------------------------------------------------------------------------
[0.19395 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7ac104f0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
[36m   -[0m [# 231] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
[34m- 339:         if node == 'root':[0m
[32m+ 339:         if node != 'root':[0m
  340:             node = self.root
  341:         
  342:         if not node:
  343:             return
--------------------------------------------------------------------------------
[0.21359 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a692f50>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
[36m   -[0m [# 232] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
[34m- 365:         if (self._size < 1 or not (self.contains(val))):[0m
[32m+ 365:         if (self._size > 1 or not (self.contains(val))):[0m
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.16653 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 233] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
[34m- 365:         if (self._size < 1 or not (self.contains(val))):[0m
[32m+ 365:         if (self._size <= 1 or not (self.contains(val))):[0m
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.27290 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.delete(bst_0)
>       assert bst_0.root is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:179: AssertionError
[36m   -[0m [# 234] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  394:         if node.right:
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
[34m- 398:             if node._side() == 'left':[0m
[32m+ 398:             if node._side() != 'left':[0m
  399:                 return node.parent
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
--------------------------------------------------------------------------------
[0.16164 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_find_replacement_left_side

def test_find_replacement_left_side():
        # Create a BST with some nodes
        bst = Bst([5, 3, 7, 2, 4, 6, 8, 1, 9])
    
        # Get a reference to a node with only a left child
        node_with_left_child = bst.search(2)
    
        result = bst._find_replacement(node_with_left_child)
    
        # Verify that the result is as expected (leftmost node of the right subtree)
>       assert result.val == 3
E       AttributeError: 'NoneType' object has no attribute 'val'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:239: AttributeError
[36m   -[0m [# 235] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
    2: 
    3: class NodeDLL(object):
    4:     '''Node class for data storage.'''
    5:     
[34m-   6:     def __init__(self, data=None, next_node=None, prev=None):[0m
[34m-   7:         '''Initialize Node.'''[0m
[34m-   8:         self.data = data[0m
[34m-   9:         self.next = next_node[0m
[34m-  10:         self.prev = prev[0m
[34m-  11:     [0m
[32m+   6:     @staticmethod[0m
[32m+   7:     def __init__(self, data=None, next_node=None, prev=None):[0m
[32m+   8:         '''Initialize Node.'''[0m
[32m+   9:         self.data = data[0m
[32m+  10:         self.next = next_node[0m
[32m+  11:         self.prev = prev[0m
   12:     def __repr__(self):
   13:         '''String representation.'''
   14:         return 'Value: {}'.format(self.data)
   15: 
--------------------------------------------------------------------------------
[0.16497 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
binarySearchTree3:44: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 1, data = None, next_node = None, prev = None

>   ???
E   AttributeError: 'int' object has no attribute 'data'

binarySearchTree3:9: AttributeError
[36m   -[0m [# 236] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
    8:         self.data = data
    9:         self.next = next_node
   10:         self.prev = prev
   11:     
[34m-  12:     def __repr__(self):[0m
[34m-  13:         '''String representation.'''[0m
[34m-  14:         return 'Value: {}'.format(self.data)[0m
[34m-  15: [0m
[32m+  12:     @staticmethod[0m
[32m+  13:     def __repr__(self):[0m
[32m+  14:         '''String representation.'''[0m
[32m+  15:         return 'Value: {}'.format(self.data)[0m
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
   19: 
--------------------------------------------------------------------------------
[0.23516 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:369: TypeError: NodeDLL.__repr__() missing 1 required positional argument: 'self'

[36m   -[0m [# 237] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   25:     remove(val) - will remove the first instance of (val) found in the list,
   26:     starting from the head.
   27:     '''
   28:     
[34m-  29:     def __init__(self, data=None):[0m
[34m-  30:         '''Initialize list.'''[0m
[34m-  31:         self.head = None[0m
[34m-  32:         self.tail = None[0m
[34m-  33:         self._length = 0[0m
[34m-  34:         try:[0m
[34m-  35:             for val in data:[0m
[34m-  36:                 self.push(val)[0m
[34m-  37:         except TypeError:[0m
[34m-  38:             if data:[0m
[34m-  39:                 self.push(data)[0m
[34m-  40:     [0m
[32m+  29:     @staticmethod[0m
[32m+  30:     def __init__(self, data=None):[0m
[32m+  31:         '''Initialize list.'''[0m
[32m+  32:         self.head = None[0m
[32m+  33:         self.tail = None[0m
[32m+  34:         self._length = 0[0m
[32m+  35:         try:[0m
[32m+  36:             for val in data:[0m
[32m+  37:                 self.push(val)[0m
[32m+  38:         except TypeError:[0m
[32m+  39:             if data:[0m
[32m+  40:                 self.push(data)[0m
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
--------------------------------------------------------------------------------
[0.15947 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [1, 2, 3], data = None

>   ???
E   AttributeError: 'list' object has no attribute 'head'

binarySearchTree3:32: AttributeError
[36m   -[0m [# 238] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
   40:     
[34m-  41:     def push(self, val):[0m
[34m-  42:         '''Add val to the head of the list.'''[0m
[34m-  43:         old_head = self.head[0m
[34m-  44:         self.head = NodeDLL(val, next_node=old_head)[0m
[34m-  45:         if old_head:[0m
[34m-  46:             old_head.prev = self.head[0m
[34m-  47:         if not (self.tail):[0m
[34m-  48:             self.tail = self.head[0m
[34m-  49:         self._length += 1[0m
[34m-  50:     [0m
[32m+  41:     @staticmethod[0m
[32m+  42:     def push(self, val):[0m
[32m+  43:         '''Add val to the head of the list.'''[0m
[32m+  44:         old_head = self.head[0m
[32m+  45:         self.head = NodeDLL(val, next_node=old_head)[0m
[32m+  46:         if old_head:[0m
[32m+  47:             old_head.prev = self.head[0m
[32m+  48:         if not (self.tail):[0m
[32m+  49:             self.tail = self.head[0m
[32m+  50:         self._length += 1[0m
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
   54:         if self._length < 1:
--------------------------------------------------------------------------------
[0.24186 s] [36mincompetent[0m

TypeError: binarySearchTree3:39: TypeError: DoubleLinkedList.push() missing 1 required positional argument: 'val'

[36m   -[0m [# 239] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   47:         if not (self.tail):
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
[34m-  51:     def pop(self):[0m
[34m-  52:         '''Remove the val from the head of the list.'''[0m
[34m-  53:         to_return = self.head[0m
[34m-  54:         if self._length < 1:[0m
[34m-  55:             raise IndexError('Cannot pop from an empty list.')[0m
[34m-  56:         [0m
[34m-  57:         new_head = self.head.next[0m
[34m-  58:         if new_head:[0m
[34m-  59:             new_head.prev = None[0m
[34m-  60:         self.head = new_head[0m
[34m-  61:         self._length -= 1[0m
[34m-  62:         if self._length < 1:[0m
[34m-  63:             self.tail = None[0m
[34m-  64:         return to_return.data[0m
[34m-  65:     [0m
[32m+  51:     @staticmethod[0m
[32m+  52:     def pop(self):[0m
[32m+  53:         '''Remove the val from the head of the list.'''[0m
[32m+  54:         to_return = self.head[0m
[32m+  55:         if self._length < 1:[0m
[32m+  56:             raise IndexError('Cannot pop from an empty list.')[0m
[32m+  57:         [0m
[32m+  58:         new_head = self.head.next[0m
[32m+  59:         if new_head:[0m
[32m+  60:             new_head.prev = None[0m
[32m+  61:         self.head = new_head[0m
[32m+  62:         self._length -= 1[0m
[32m+  63:         if self._length < 1:[0m
[32m+  64:             self.tail = None[0m
[32m+  65:         return to_return.data[0m
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
--------------------------------------------------------------------------------
[0.15679 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: TypeError: DoubleLinkedList.pop() missing 1 required positional argument: 'self'

[36m   -[0m [# 240] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
[34m-  66:     def append(self, val):[0m
[34m-  67:         '''Add val to the tail of the list.'''[0m
[34m-  68:         old_tail = self.tail[0m
[34m-  69:         self.tail = NodeDLL(val, prev=old_tail)[0m
[34m-  70:         if old_tail:[0m
[34m-  71:             old_tail.next = self.tail[0m
[34m-  72:         if self._length < 1:[0m
[34m-  73:             self.head = self.tail[0m
[34m-  74:         self._length += 1[0m
[34m-  75:     [0m
[32m+  66:     @staticmethod[0m
[32m+  67:     def append(self, val):[0m
[32m+  68:         '''Add val to the tail of the list.'''[0m
[32m+  69:         old_tail = self.tail[0m
[32m+  70:         self.tail = NodeDLL(val, prev=old_tail)[0m
[32m+  71:         if old_tail:[0m
[32m+  72:             old_tail.next = self.tail[0m
[32m+  73:         if self._length < 1:[0m
[32m+  74:             self.head = self.tail[0m
[32m+  75:         self._length += 1[0m
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
   79:         if self._length < 1:
--------------------------------------------------------------------------------
[0.14889 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:26: TypeError: DoubleLinkedList.append() missing 1 required positional argument: 'val'

[36m   -[0m [# 241] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   72:         if self._length < 1:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
[34m-  76:     def shift(self):[0m
[34m-  77:         '''Remove the val from the tail of the list.'''[0m
[34m-  78:         to_return = self.tail[0m
[34m-  79:         if self._length < 1:[0m
[34m-  80:             raise IndexError('Cannot shift from an empty list.')[0m
[34m-  81:         [0m
[34m-  82:         new_tail = self.tail.prev[0m
[34m-  83:         if new_tail:[0m
[34m-  84:             new_tail.next = None[0m
[34m-  85:         self.tail = new_tail[0m
[34m-  86:         self._length -= 1[0m
[34m-  87:         if self._length < 1:[0m
[34m-  88:             self.tail = None[0m
[34m-  89:         return to_return.data[0m
[34m-  90:     [0m
[32m+  76:     @staticmethod[0m
[32m+  77:     def shift(self):[0m
[32m+  78:         '''Remove the val from the tail of the list.'''[0m
[32m+  79:         to_return = self.tail[0m
[32m+  80:         if self._length < 1:[0m
[32m+  81:             raise IndexError('Cannot shift from an empty list.')[0m
[32m+  82:         [0m
[32m+  83:         new_tail = self.tail.prev[0m
[32m+  84:         if new_tail:[0m
[32m+  85:             new_tail.next = None[0m
[32m+  86:         self.tail = new_tail[0m
[32m+  87:         self._length -= 1[0m
[32m+  88:         if self._length < 1:[0m
[32m+  89:             self.tail = None[0m
[32m+  90:         return to_return.data[0m
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
--------------------------------------------------------------------------------
[0.25370 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:34: TypeError: DoubleLinkedList.shift() missing 1 required positional argument: 'self'

[36m   -[0m [# 242] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
[34m-  91:     def remove(self, val):[0m
[34m-  92:         '''Remove first occurance of val from list.'''[0m
[34m-  93:         curr = self.head[0m
[34m-  94:         while curr:[0m
[34m-  95:             if curr.data is val:[0m
[34m-  96:                 if self._length == 1:[0m
[34m-  97:                     (self.head, self.tail) = (None, None)[0m
[34m-  98:                 elif (curr is not self.head and curr is not self.tail):[0m
[34m-  99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)[0m
[34m- 100:                 elif curr is self.head:[0m
[34m- 101:                     (self.head, curr.next.prev) = (curr.next, None)[0m
[34m- 102:                 elif curr is self.tail:[0m
[34m- 103:                     (self.tail, curr.prev.next) = (curr.prev, None)[0m
[34m- 104:                 self._length -= 1[0m
[34m- 105:                 return[0m
[34m- 106:             curr = curr.next[0m
[34m- 107:         [0m
[34m- 108:         raise ValueError('{} is not in the list'.format(val))[0m
[34m- 109:     [0m
[32m+  91:     @staticmethod[0m
[32m+  92:     def remove(self, val):[0m
[32m+  93:         '''Remove first occurance of val from list.'''[0m
[32m+  94:         curr = self.head[0m
[32m+  95:         while curr:[0m
[32m+  96:             if curr.data is val:[0m
[32m+  97:                 if self._length == 1:[0m
[32m+  98:                     (self.head, self.tail) = (None, None)[0m
[32m+  99:                 elif (curr is not self.head and curr is not self.tail):[0m
[32m+ 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)[0m
[32m+ 101:                 elif curr is self.head:[0m
[32m+ 102:                     (self.head, curr.next.prev) = (curr.next, None)[0m
[32m+ 103:                 elif curr is self.tail:[0m
[32m+ 104:                     (self.tail, curr.prev.next) = (curr.prev, None)[0m
[32m+ 105:                 self._length -= 1[0m
[32m+ 106:                 return[0m
[32m+ 107:             curr = curr.next[0m
[32m+ 108:         [0m
[32m+ 109:         raise ValueError('{} is not in the list'.format(val))[0m
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
  113:         while True:
--------------------------------------------------------------------------------
[0.15098 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: TypeError: DoubleLinkedList.remove() missing 1 required positional argument: 'val'

[36m   -[0m [# 243] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
[34m- 110:     def _repr(self):[0m
[34m- 111:         '''Return list representation of dll.'''[0m
[34m- 112:         l = [][0m
[34m- 113:         while True:[0m
[34m- 114:             try:[0m
[34m- 115:                 popped_data = self.pop()[0m
[34m- 116:                 l.append(popped_data)[0m
[34m- 117:             except IndexError:[0m
[34m- 118:                 break[0m
[34m- 119:         return l[0m
[34m- 120: [0m
[32m+ 110:     @staticmethod[0m
[32m+ 111:     def _repr(self):[0m
[32m+ 112:         '''Return list representation of dll.'''[0m
[32m+ 113:         l = [][0m
[32m+ 114:         while True:[0m
[32m+ 115:             try:[0m
[32m+ 116:                 popped_data = self.pop()[0m
[32m+ 117:                 l.append(popped_data)[0m
[32m+ 118:             except IndexError:[0m
[32m+ 119:                 break[0m
[32m+ 120:         return l[0m
  121: class Queue(object):
  122:     '''Implementation of Queue.
  123: 
  124:     This implementation supports the following public methods:
--------------------------------------------------------------------------------
[0.15867 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: TypeError: DoubleLinkedList._repr() missing 1 required positional argument: 'self'

[36m   -[0m [# 244] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  129:     If the queue is empty, returns None
  130:     size(): return the size of the queue. Returns 0 if the queue is empty.
  131:     '''
  132:     
[34m- 133:     def __init__(self, data=None):[0m
[34m- 134:         '''Initialize queue data structure.'''[0m
[34m- 135:         self._container = DoubleLinkedList(data)[0m
[34m- 136:     [0m
[32m+ 133:     @staticmethod[0m
[32m+ 134:     def __init__(self, data=None):[0m
[32m+ 135:         '''Initialize queue data structure.'''[0m
[32m+ 136:         self._container = DoubleLinkedList(data)[0m
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
  140:     
--------------------------------------------------------------------------------
[0.15235 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
>       queue = Queue([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [1, 2, 3], data = None

>   ???
E   AttributeError: 'list' object has no attribute '_container'

binarySearchTree3:136: AttributeError
[36m   -[0m [# 245] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  133:     def __init__(self, data=None):
  134:         '''Initialize queue data structure.'''
  135:         self._container = DoubleLinkedList(data)
  136:     
[34m- 137:     def enqueue(self, val):[0m
[34m- 138:         '''Add a value to the queue.'''[0m
[34m- 139:         self._container.append(val)[0m
[34m- 140:     [0m
[32m+ 137:     @staticmethod[0m
[32m+ 138:     def enqueue(self, val):[0m
[32m+ 139:         '''Add a value to the queue.'''[0m
[32m+ 140:         self._container.append(val)[0m
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
  144:     
--------------------------------------------------------------------------------
[0.15849 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:47: TypeError: Queue.enqueue() missing 1 required positional argument: 'val'

[36m   -[0m [# 246] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
  140:     
[34m- 141:     def dequeue(self):[0m
[34m- 142:         '''Remove a value from the front of the queue.'''[0m
[34m- 143:         return self._container.pop()[0m
[34m- 144:     [0m
[32m+ 141:     @staticmethod[0m
[32m+ 142:     def dequeue(self):[0m
[32m+ 143:         '''Remove a value from the front of the queue.'''[0m
[32m+ 144:         return self._container.pop()[0m
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
  148:             return self._container.head.data
--------------------------------------------------------------------------------
[0.23095 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:44: TypeError: Queue.dequeue() missing 1 required positional argument: 'self'

[36m   -[0m [# 247] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
  144:     
[34m- 145:     def peek(self):[0m
[34m- 146:         '''Return the next value in the queue without dequing it.'''[0m
[34m- 147:         try:[0m
[34m- 148:             return self._container.head.data[0m
[34m- 149:         except AttributeError:[0m
[34m- 150:             return None[0m
[34m- 151:     [0m
[32m+ 145:     @staticmethod[0m
[32m+ 146:     def peek(self):[0m
[32m+ 147:         '''Return the next value in the queue without dequing it.'''[0m
[32m+ 148:         try:[0m
[32m+ 149:             return self._container.head.data[0m
[32m+ 150:         except AttributeError:[0m
[32m+ 151:             return None[0m
  152:     def size(self):
  153:         '''Return the size of the queue.'''
  154:         return self._container._length
  155: 
--------------------------------------------------------------------------------
[0.18235 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:45: TypeError: Queue.peek() missing 1 required positional argument: 'self'

[36m   -[0m [# 248] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  148:             return self._container.head.data
  149:         except AttributeError:
  150:             return None
  151:     
[34m- 152:     def size(self):[0m
[34m- 153:         '''Return the size of the queue.'''[0m
[34m- 154:         return self._container._length[0m
[34m- 155: [0m
[32m+ 152:     @staticmethod[0m
[32m+ 153:     def size(self):[0m
[32m+ 154:         '''Return the size of the queue.'''[0m
[32m+ 155:         return self._container._length[0m
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
  159:     def __init__(self, val=None, parent=None):
--------------------------------------------------------------------------------
[0.17375 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:43: TypeError: Queue.size() missing 1 required positional argument: 'self'

[36m   -[0m [# 249] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  155: 
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
[34m- 159:     def __init__(self, val=None, parent=None):[0m
[34m- 160:         '''Create node object.'''[0m
[34m- 161:         self.val = val[0m
[34m- 162:         self.right = None[0m
[34m- 163:         self.left = None[0m
[34m- 164:         self.parent = parent[0m
[34m- 165:         self.height = 1[0m
[34m- 166:     [0m
[32m+ 159:     @staticmethod[0m
[32m+ 160:     def __init__(self, val=None, parent=None):[0m
[32m+ 161:         '''Create node object.'''[0m
[32m+ 162:         self.val = val[0m
[32m+ 163:         self.right = None[0m
[32m+ 164:         self.left = None[0m
[32m+ 165:         self.parent = parent[0m
[32m+ 166:         self.height = 1[0m
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
  170:     
--------------------------------------------------------------------------------
[0.25075 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:106: TypeError: Node.__init__() missing 1 required positional argument: 'self'

[36m   -[0m [# 250] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
  166:     
[34m- 167:     def _is_leaf(self):[0m
[34m- 168:         '''Return true if a leaf.'''[0m
[34m- 169:         return not ((self.right or self.left))[0m
[34m- 170:     [0m
[32m+ 167:     @staticmethod[0m
[32m+ 168:     def _is_leaf(self):[0m
[32m+ 169:         '''Return true if a leaf.'''[0m
[32m+ 170:         return not ((self.right or self.left))[0m
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
  174:     
--------------------------------------------------------------------------------
[0.15995 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: TypeError: Node._is_leaf() missing 1 required positional argument: 'self'

[36m   -[0m [# 251] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
  170:     
[34m- 171:     def _is_interior(self):[0m
[34m- 172:         '''Return true if a interior node.'''[0m
[34m- 173:         return (self.right and self.left)[0m
[34m- 174:     [0m
[32m+ 171:     @staticmethod[0m
[32m+ 172:     def _is_interior(self):[0m
[32m+ 173:         '''Return true if a interior node.'''[0m
[32m+ 174:         return (self.right and self.left)[0m
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
--------------------------------------------------------------------------------
[0.16162 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:125: TypeError: Node._is_interior() missing 1 required positional argument: 'self'

[36m   -[0m [# 252] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
  174:     
[34m- 175:     def _onlychild(self):[0m
[34m- 176:         '''Return string depending on children.'''[0m
[34m- 177:         if (self.left and not (self.right)):[0m
[34m- 178:             return 'left'[0m
[34m- 179:         if (self.right and not (self.left)):[0m
[34m- 180:             return 'right'[0m
[34m- 181:     [0m
[32m+ 175:     @staticmethod[0m
[32m+ 176:     def _onlychild(self):[0m
[32m+ 177:         '''Return string depending on children.'''[0m
[32m+ 178:         if (self.left and not (self.right)):[0m
[32m+ 179:             return 'left'[0m
[32m+ 180:         if (self.right and not (self.left)):[0m
[32m+ 181:             return 'right'[0m
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
  185:             return 'left' if self.parent.left == self else 'right'
--------------------------------------------------------------------------------
[0.16363 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:129: TypeError: Node._onlychild() missing 1 required positional argument: 'self'

[36m   -[0m [# 253] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
[34m- 182:     def _side(self):[0m
[34m- 183:         '''Return if left or right child of parent.'''[0m
[34m- 184:         if self.parent:[0m
[34m- 185:             return 'left' if self.parent.left == self else 'right'[0m
[34m- 186: [0m
[32m+ 182:     @staticmethod[0m
[32m+ 183:     def _side(self):[0m
[32m+ 184:         '''Return if left or right child of parent.'''[0m
[32m+ 185:         if self.parent:[0m
[32m+ 186:             return 'left' if self.parent.left == self else 'right'[0m
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
  190: 
--------------------------------------------------------------------------------
[0.15956 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:134: TypeError: Node._side() missing 1 required positional argument: 'self'

[36m   -[0m [# 254] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  224:     using breadth frist traversal, one at a time.
  225: 
  226:     '''
  227:     
[34m- 228:     def __init__(self, data=None):[0m
[34m- 229:         '''Initialize tree.'''[0m
[34m- 230:         self._size = 0[0m
[34m- 231:         self.root = None[0m
[34m- 232:         [0m
[34m- 233:         if data:[0m
[34m- 234:             for i in data:[0m
[34m- 235:                 self.insert(i)[0m
[34m- 236:     [0m
[32m+ 228:     @staticmethod[0m
[32m+ 229:     def __init__(self, data=None):[0m
[32m+ 230:         '''Initialize tree.'''[0m
[32m+ 231:         self._size = 0[0m
[32m+ 232:         self.root = None[0m
[32m+ 233:         [0m
[32m+ 234:         if data:[0m
[32m+ 235:             for i in data:[0m
[32m+ 236:                 self.insert(i)[0m
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
--------------------------------------------------------------------------------
[0.25147 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [5, 3, 7, 2, 4, 6, ...], data = None

>   ???
E   AttributeError: 'list' object has no attribute '_size'

binarySearchTree3:231: AttributeError
[36m   -[0m [# 255] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  233:         if data:
  234:             for i in data:
  235:                 self.insert(i)
  236:     
[34m- 237:     def insert(self, val):[0m
[34m- 238:         '''Insert val into BST. If val is already present will be ignored.'''[0m
[34m- 239:         if not (self.root):[0m
[34m- 240:             self.root = Node(val)[0m
[34m- 241:             self._size += 1[0m
[34m- 242:         else:[0m
[34m- 243:             self._step(val, self.root)[0m
[34m- 244:     [0m
[32m+ 237:     @staticmethod[0m
[32m+ 238:     def insert(self, val):[0m
[32m+ 239:         '''Insert val into BST. If val is already present will be ignored.'''[0m
[32m+ 240:         if not (self.root):[0m
[32m+ 241:             self.root = Node(val)[0m
[32m+ 242:             self._size += 1[0m
[32m+ 243:         else:[0m
[32m+ 244:             self._step(val, self.root)[0m
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
--------------------------------------------------------------------------------
[0.15826 s] [36mincompetent[0m

TypeError: binarySearchTree3:235: TypeError: Bst.insert() missing 1 required positional argument: 'val'

[36m   -[0m [# 256] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
  244:     
[34m- 245:     def _step(self, val, curr):[0m
[34m- 246:         '''Decide left or right and returns height.'''[0m
[34m- 247:         if val < curr.val:[0m
[34m- 248:             curr = self._set_child(curr, 'left', val)[0m
[34m- 249:         elif val > curr.val:[0m
[34m- 250:             curr = self._set_child(curr, 'right', val)[0m
[34m- 251:         return curr.height[0m
[34m- 252:     [0m
[32m+ 245:     @staticmethod[0m
[32m+ 246:     def _step(self, val, curr):[0m
[32m+ 247:         '''Decide left or right and returns height.'''[0m
[32m+ 248:         if val < curr.val:[0m
[32m+ 249:             curr = self._set_child(curr, 'left', val)[0m
[32m+ 250:         elif val > curr.val:[0m
[32m+ 251:             curr = self._set_child(curr, 'right', val)[0m
[32m+ 252:         return curr.height[0m
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
--------------------------------------------------------------------------------
[0.18285 s] [36mincompetent[0m

TypeError: binarySearchTree3:243: TypeError: Bst._step() missing 1 required positional argument: 'curr'

[36m   -[0m [# 257] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
[34m- 253:     def _set_child(self, curr, side, val):[0m
[34m- 254:         '''Helping.'''[0m
[34m- 255:         child = getattr(curr, side)[0m
[34m- 256:         if child:[0m
[34m- 257:             count = self._step(val, child)[0m
[34m- 258:             if curr.height <= count:[0m
[34m- 259:                 curr.height += 1[0m
[34m- 260:         else:[0m
[34m- 261:             setattr(curr, side, Node(val, curr))[0m
[34m- 262:             self._size += 1[0m
[34m- 263:             if curr.height == 1:[0m
[34m- 264:                 curr.height += 1[0m
[34m- 265:         return curr[0m
[34m- 266:     [0m
[32m+ 253:     @staticmethod[0m
[32m+ 254:     def _set_child(self, curr, side, val):[0m
[32m+ 255:         '''Helping.'''[0m
[32m+ 256:         child = getattr(curr, side)[0m
[32m+ 257:         if child:[0m
[32m+ 258:             count = self._step(val, child)[0m
[32m+ 259:             if curr.height <= count:[0m
[32m+ 260:                 curr.height += 1[0m
[32m+ 261:         else:[0m
[32m+ 262:             setattr(curr, side, Node(val, curr))[0m
[32m+ 263:             self._size += 1[0m
[32m+ 264:             if curr.height == 1:[0m
[32m+ 265:                 curr.height += 1[0m
[32m+ 266:         return curr[0m
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
--------------------------------------------------------------------------------
[0.15471 s] [36mincompetent[0m

TypeError: binarySearchTree3:248: TypeError: Bst._set_child() missing 1 required positional argument: 'val'

[36m   -[0m [# 258] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
  266:     
[34m- 267:     def search(self, val):[0m
[34m- 268:         '''Return the node containing val.'''[0m
[34m- 269:         curr = self.root[0m
[34m- 270:         while curr:[0m
[34m- 271:             if curr.val == val:[0m
[34m- 272:                 return curr[0m
[34m- 273:             elif val < curr.val:[0m
[34m- 274:                 curr = curr.left[0m
[34m- 275:             else:[0m
[34m- 276:                 curr = curr.right[0m
[34m- 277:     [0m
[32m+ 267:     @staticmethod[0m
[32m+ 268:     def search(self, val):[0m
[32m+ 269:         '''Return the node containing val.'''[0m
[32m+ 270:         curr = self.root[0m
[32m+ 271:         while curr:[0m
[32m+ 272:             if curr.val == val:[0m
[32m+ 273:                 return curr[0m
[32m+ 274:             elif val < curr.val:[0m
[32m+ 275:                 curr = curr.left[0m
[32m+ 276:             else:[0m
[32m+ 277:                 curr = curr.right[0m
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
  281:     
--------------------------------------------------------------------------------
[0.16374 s] [36mincompetent[0m

TypeError: binarySearchTree3:288: TypeError: Bst.search() missing 1 required positional argument: 'val'

[36m   -[0m [# 259] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
  277:     
[34m- 278:     def size(self):[0m
[34m- 279:         '''Return the size of the BST.'''[0m
[34m- 280:         return self._size[0m
[34m- 281:     [0m
[32m+ 278:     @staticmethod[0m
[32m+ 279:     def size(self):[0m
[32m+ 280:         '''Return the size of the BST.'''[0m
[32m+ 281:         return self._size[0m
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
  285:     
--------------------------------------------------------------------------------
[0.27387 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:316: TypeError: Bst.size() missing 1 required positional argument: 'self'

[36m   -[0m [# 260] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
  281:     
[34m- 282:     def depth(self):[0m
[34m- 283:         '''Return depth of the BST, representing total levels.'''[0m
[34m- 284:         return 0 if not (self.root) else self.root.height[0m
[34m- 285:     [0m
[32m+ 282:     @staticmethod[0m
[32m+ 283:     def depth(self):[0m
[32m+ 284:         '''Return depth of the BST, representing total levels.'''[0m
[32m+ 285:         return 0 if not (self.root) else self.root.height[0m
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
  289:     
--------------------------------------------------------------------------------
[0.18835 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:242: TypeError: Bst.depth() missing 1 required positional argument: 'self'

[36m   -[0m [# 261] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
  285:     
[34m- 286:     def contains(self, val):[0m
[34m- 287:         '''Return true if val is in the bst.'''[0m
[34m- 288:         return self.search(val) is not None[0m
[34m- 289:     [0m
[32m+ 286:     @staticmethod[0m
[32m+ 287:     def contains(self, val):[0m
[32m+ 288:         '''Return true if val is in the bst.'''[0m
[32m+ 289:         return self.search(val) is not None[0m
  290:     def balance(self, tree=None):
  291:         '''Return an integer of how well the tree is balanced.
  292: 
  293:         Trees which are higher on the left than the right should return a
--------------------------------------------------------------------------------
[0.16651 s] [36mincompetent[0m

TypeError: binarySearchTree3:365: TypeError: Bst.contains() missing 1 required positional argument: 'val'

[36m   -[0m [# 262] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
  289:     
[34m- 290:     def balance(self, tree=None):[0m
[34m- 291:         '''Return an integer of how well the tree is balanced.[0m
[34m- 292: [0m
[34m- 293:         Trees which are higher on the left than the right should return a[0m
[34m- 294:         positive value, trees which are higher on the right than the left[0m
[34m- 295:         should return a negative value. An ideally-balanced tree should[0m
[34m- 296:         return 0.[0m
[34m- 297:         '''[0m
[34m- 298:         if not tree:[0m
[34m- 299:             tree = self.root[0m
[34m- 300:             if not tree:[0m
[34m- 301:                 return 0[0m
[34m- 302:         [0m
[34m- 303:         leftbranch = 0 if not (tree.left) else tree.left.height[0m
[34m- 304:         rightbranch = 0 if not (tree.right) else tree.right.height[0m
[34m- 305:         [0m
[34m- 306:         return leftbranch - rightbranch[0m
[34m- 307:     [0m
[32m+ 290:     @staticmethod[0m
[32m+ 291:     def balance(self, tree=None):[0m
[32m+ 292:         '''Return an integer of how well the tree is balanced.[0m
[32m+ 293: [0m
[32m+ 294:         Trees which are higher on the left than the right should return a[0m
[32m+ 295:         positive value, trees which are higher on the right than the left[0m
[32m+ 296:         should return a negative value. An ideally-balanced tree should[0m
[32m+ 297:         return 0.[0m
[32m+ 298:         '''[0m
[32m+ 299:         if not tree:[0m
[32m+ 300:             tree = self.root[0m
[32m+ 301:             if not tree:[0m
[32m+ 302:                 return 0[0m
[32m+ 303:         [0m
[32m+ 304:         leftbranch = 0 if not (tree.left) else tree.left.height[0m
[32m+ 305:         rightbranch = 0 if not (tree.right) else tree.right.height[0m
[32m+ 306:         [0m
[32m+ 307:         return leftbranch - rightbranch[0m
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
--------------------------------------------------------------------------------
[0.28159 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:257: TypeError: Bst.balance() missing 1 required positional argument: 'self'

[36m   -[0m [# 263] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
[34m- 308:     def pre_order(self, node='root'):[0m
[34m- 309:         '''Depth first pre-order traversal of tree.'''[0m
[34m- 310:         if node == 'root':[0m
[34m- 311:             node = self.root[0m
[34m- 312:         [0m
[34m- 313:         if not node:[0m
[34m- 314:             return[0m
[34m- 315:         [0m
[34m- 316:         yield node.val[0m
[34m- 317:         [0m
[34m- 318:         for n in self.pre_order(node=node.left):[0m
[34m- 319:             yield n[0m
[34m- 320:         for n in self.pre_order(node=node.right):[0m
[34m- 321:             yield n[0m
[34m- 322:     [0m
[32m+ 308:     @staticmethod[0m
[32m+ 309:     def pre_order(self, node='root'):[0m
[32m+ 310:         '''Depth first pre-order traversal of tree.'''[0m
[32m+ 311:         if node == 'root':[0m
[32m+ 312:             node = self.root[0m
[32m+ 313:         [0m
[32m+ 314:         if not node:[0m
[32m+ 315:             return[0m
[32m+ 316:         [0m
[32m+ 317:         yield node.val[0m
[32m+ 318:         [0m
[32m+ 319:         for n in self.pre_order(node=node.left):[0m
[32m+ 320:             yield n[0m
[32m+ 321:         for n in self.pre_order(node=node.right):[0m
[32m+ 322:             yield n[0m
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
--------------------------------------------------------------------------------
[0.16998 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: TypeError: Bst.pre_order() missing 1 required positional argument: 'self'

[36m   -[0m [# 264] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
[34m- 323:     def in_order(self, node='root'):[0m
[34m- 324:         '''Depth first in-order traversal of tree.'''[0m
[34m- 325:         if node == 'root':[0m
[34m- 326:             node = self.root[0m
[34m- 327:         [0m
[34m- 328:         if not node:[0m
[34m- 329:             return[0m
[34m- 330:         [0m
[34m- 331:         for n in self.in_order(node=node.left):[0m
[34m- 332:             yield n[0m
[34m- 333:         yield node.val[0m
[34m- 334:         for n in self.in_order(node=node.right):[0m
[34m- 335:             yield n[0m
[34m- 336:     [0m
[32m+ 323:     @staticmethod[0m
[32m+ 324:     def in_order(self, node='root'):[0m
[32m+ 325:         '''Depth first in-order traversal of tree.'''[0m
[32m+ 326:         if node == 'root':[0m
[32m+ 327:             node = self.root[0m
[32m+ 328:         [0m
[32m+ 329:         if not node:[0m
[32m+ 330:             return[0m
[32m+ 331:         [0m
[32m+ 332:         for n in self.in_order(node=node.left):[0m
[32m+ 333:             yield n[0m
[32m+ 334:         yield node.val[0m
[32m+ 335:         for n in self.in_order(node=node.right):[0m
[32m+ 336:             yield n[0m
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
--------------------------------------------------------------------------------
[0.16380 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: TypeError: Bst.in_order() missing 1 required positional argument: 'self'

[36m   -[0m [# 265] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
[34m- 337:     def post_order(self, node='root'):[0m
[34m- 338:         '''Depth frist post_order traversal of tree.'''[0m
[34m- 339:         if node == 'root':[0m
[34m- 340:             node = self.root[0m
[34m- 341:         [0m
[34m- 342:         if not node:[0m
[34m- 343:             return[0m
[34m- 344:         [0m
[34m- 345:         for n in self.post_order(node=node.left):[0m
[34m- 346:             yield n[0m
[34m- 347:         for n in self.post_order(node=node.right):[0m
[34m- 348:             yield n[0m
[34m- 349:         yield node.val[0m
[34m- 350:     [0m
[32m+ 337:     @staticmethod[0m
[32m+ 338:     def post_order(self, node='root'):[0m
[32m+ 339:         '''Depth frist post_order traversal of tree.'''[0m
[32m+ 340:         if node == 'root':[0m
[32m+ 341:             node = self.root[0m
[32m+ 342:         [0m
[32m+ 343:         if not node:[0m
[32m+ 344:             return[0m
[32m+ 345:         [0m
[32m+ 346:         for n in self.post_order(node=node.left):[0m
[32m+ 347:             yield n[0m
[32m+ 348:         for n in self.post_order(node=node.right):[0m
[32m+ 349:             yield n[0m
[32m+ 350:         yield node.val[0m
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.20760 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:315: TypeError: Bst.post_order() missing 1 required positional argument: 'self'

[36m   -[0m [# 266] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
  350:     
[34m- 351:     def breadth_first(self):[0m
[34m- 352:         '''Breadth first traversal of tree.'''[0m
[34m- 353:         q = Queue()[0m
[34m- 354:         q.enqueue(self.root)[0m
[34m- 355:         while q.peek():[0m
[34m- 356:             node = q.dequeue()[0m
[34m- 357:             yield node.val[0m
[34m- 358:             if node.left:[0m
[34m- 359:                 q.enqueue(node.left)[0m
[34m- 360:             if node.right:[0m
[34m- 361:                 q.enqueue(node.right)[0m
[34m- 362:     [0m
[32m+ 351:     @staticmethod[0m
[32m+ 352:     def breadth_first(self):[0m
[32m+ 353:         '''Breadth first traversal of tree.'''[0m
[32m+ 354:         q = Queue()[0m
[32m+ 355:         q.enqueue(self.root)[0m
[32m+ 356:         while q.peek():[0m
[32m+ 357:             node = q.dequeue()[0m
[32m+ 358:             yield node.val[0m
[32m+ 359:             if node.left:[0m
[32m+ 360:                 q.enqueue(node.left)[0m
[32m+ 361:             if node.right:[0m
[32m+ 362:                 q.enqueue(node.right)[0m
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
  366:             return
--------------------------------------------------------------------------------
[0.16599 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:218: TypeError: Bst.breadth_first() missing 1 required positional argument: 'self'

[36m   -[0m [# 267] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  359:                 q.enqueue(node.left)
  360:             if node.right:
  361:                 q.enqueue(node.right)
  362:     
[34m- 363:     def delete(self, val):[0m
[34m- 364:         '''Remove a node from the tree.'''[0m
[34m- 365:         if (self._size < 1 or not (self.contains(val))):[0m
[34m- 366:             return[0m
[34m- 367:         [0m
[34m- 368:         node = self.search(val)[0m
[34m- 369:         [0m
[34m- 370:         if node._is_leaf():[0m
[34m- 371:             if node.parent:[0m
[34m- 372:                 setattr(node.parent, node._side(), None)[0m
[34m- 373:             else:[0m
[34m- 374:                 self.root = None[0m
[34m- 375:         [0m
[34m- 376:         elif node._is_interior():[0m
[34m- 377:             next_node = self._find_replacement(node)[0m
[34m- 378:             self._size += 1[0m
[34m- 379:             self.delete(next_node.val)[0m
[34m- 380:             node.val = next_node.val[0m
[34m- 381:         else:[0m
[34m- 382:             [0m
[34m- 383:             child = getattr(node, node._onlychild())[0m
[34m- 384:             if node.parent:[0m
[34m- 385:                 child.parent = node.parent[0m
[34m- 386:                 setattr(node.parent, node._side(), child)[0m
[34m- 387:             else:[0m
[34m- 388:                 self.root = child[0m
[34m- 389:         [0m
[34m- 390:         self._size -= 1[0m
[34m- 391:     [0m
[32m+ 363:     @staticmethod[0m
[32m+ 364:     def delete(self, val):[0m
[32m+ 365:         '''Remove a node from the tree.'''[0m
[32m+ 366:         if (self._size < 1 or not (self.contains(val))):[0m
[32m+ 367:             return[0m
[32m+ 368:         [0m
[32m+ 369:         node = self.search(val)[0m
[32m+ 370:         [0m
[32m+ 371:         if node._is_leaf():[0m
[32m+ 372:             if node.parent:[0m
[32m+ 373:                 setattr(node.parent, node._side(), None)[0m
[32m+ 374:             else:[0m
[32m+ 375:                 self.root = None[0m
[32m+ 376:         [0m
[32m+ 377:         elif node._is_interior():[0m
[32m+ 378:             next_node = self._find_replacement(node)[0m
[32m+ 379:             self._size += 1[0m
[32m+ 380:             self.delete(next_node.val)[0m
[32m+ 381:             node.val = next_node.val[0m
[32m+ 382:         else:[0m
[32m+ 383:             [0m
[32m+ 384:             child = getattr(node, node._onlychild())[0m
[32m+ 385:             if node.parent:[0m
[32m+ 386:                 child.parent = node.parent[0m
[32m+ 387:                 setattr(node.parent, node._side(), child)[0m
[32m+ 388:             else:[0m
[32m+ 389:                 self.root = child[0m
[32m+ 390:         [0m
[32m+ 391:         self._size -= 1[0m
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
  395:             return self._findmin(node.right)
--------------------------------------------------------------------------------
[0.26920 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: TypeError: Bst.delete() missing 1 required positional argument: 'val'

[36m   -[0m [# 268] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  388:                 self.root = child
  389:         
  390:         self._size -= 1
  391:     
[34m- 392:     def _find_replacement(self, node):[0m
[34m- 393:         '''Find left most node of right subtree.'''[0m
[34m- 394:         if node.right:[0m
[34m- 395:             return self._findmin(node.right)[0m
[34m- 396:         [0m
[34m- 397:         elif node.parent:[0m
[34m- 398:             if node._side() == 'left':[0m
[34m- 399:                 return node.parent[0m
[34m- 400:             else:[0m
[34m- 401:                 node.parent.right = None[0m
[34m- 402:                 tmp = self._find_replacement(node.parent)[0m
[34m- 403:                 node.parent.right = node[0m
[34m- 404:                 return tmp[0m
[34m- 405:     [0m
[32m+ 392:     @staticmethod[0m
[32m+ 393:     def _find_replacement(self, node):[0m
[32m+ 394:         '''Find left most node of right subtree.'''[0m
[32m+ 395:         if node.right:[0m
[32m+ 396:             return self._findmin(node.right)[0m
[32m+ 397:         [0m
[32m+ 398:         elif node.parent:[0m
[32m+ 399:             if node._side() == 'left':[0m
[32m+ 400:                 return node.parent[0m
[32m+ 401:             else:[0m
[32m+ 402:                 node.parent.right = None[0m
[32m+ 403:                 tmp = self._find_replacement(node.parent)[0m
[32m+ 404:                 node.parent.right = node[0m
[32m+ 405:                 return tmp[0m
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
  409:             node = node.left
--------------------------------------------------------------------------------
[0.16728 s] [36mincompetent[0m

TypeError: binarySearchTree3:377: TypeError: Bst._find_replacement() missing 1 required positional argument: 'node'

[36m   -[0m [# 269] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  402:                 tmp = self._find_replacement(node.parent)
  403:                 node.parent.right = node
  404:                 return tmp
  405:     
[34m- 406:     def _findmin(self, node):[0m
[34m- 407:         '''Find min of subtree, Min is always left most node.'''[0m
[34m- 408:         while node.left:[0m
[34m- 409:             node = node.left[0m
[34m- 410:         return node[0m
[32m+ 406:     @staticmethod[0m
[32m+ 407:     def _findmin(self, node):[0m
[32m+ 408:         '''Find min of subtree, Min is always left most node.'''[0m
[32m+ 409:         while node.left:[0m
[32m+ 410:             node = node.left[0m
[32m+ 411:         return node[0m
--------------------------------------------------------------------------------
[0.16455 s] [36mincompetent[0m

TypeError: binarySearchTree3:395: TypeError: Bst._findmin() missing 1 required positional argument: 'node'

[36m   -[0m [# 270] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
    4:     '''Node class for data storage.'''
    5:     
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
[34m-   8:         self.data = data[0m
[32m+   8:         pass[0m
    9:         self.next = next_node
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
--------------------------------------------------------------------------------
[0.24414 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a89cdf0>

>   ???
E   AttributeError: 'NodeDLL' object has no attribute 'data'

binarySearchTree3:64: AttributeError
[36m   -[0m [# 271] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
    5:     
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
    8:         self.data = data
[34m-   9:         self.next = next_node[0m
[32m+   9:         pass[0m
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
--------------------------------------------------------------------------------
[0.15391 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a7e8ac0>

>   ???
E   AttributeError: 'NodeDLL' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [# 272] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
    8:         self.data = data
    9:         self.next = next_node
[34m-  10:         self.prev = prev[0m
[32m+  10:         pass[0m
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
   14:         return 'Value: {}'.format(self.data)
--------------------------------------------------------------------------------
[0.18184 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_10

def test_case_10():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList(bst_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_0 = double_linked_list_0.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a49c820>

>   ???
E   AttributeError: 'NodeDLL' object has no attribute 'prev'

binarySearchTree3:82: AttributeError
[36m   -[0m [# 273] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
[34m-  14:         return 'Value: {}'.format(self.data)[0m
[32m+  14:         pass[0m
   15: 
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[0.22071 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_45

def test_case_45():
        node_d_l_l_0 = module_0.NodeDLL()
        var_0 = node_d_l_l_0.__repr__()
>       assert var_0 == 'Value: None'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:370: AssertionError
[36m   -[0m [# 274] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   27:     '''
   28:     
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
[34m-  31:         self.head = None[0m
[32m+  31:         pass[0m
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
   35:             for val in data:
--------------------------------------------------------------------------------
[0.19554 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ad06680>, val = 1

>   ???
E   AttributeError: 'DoubleLinkedList' object has no attribute 'head'

binarySearchTree3:43: AttributeError
[36m   -[0m [# 275] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   28:     
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
   31:         self.head = None
[34m-  32:         self.tail = None[0m
[32m+  32:         pass[0m
   33:         self._length = 0
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
--------------------------------------------------------------------------------
[0.23853 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a3998a0>, val = 1

>   ???
E   AttributeError: 'DoubleLinkedList' object has no attribute 'tail'

binarySearchTree3:47: AttributeError
[36m   -[0m [# 276] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
   31:         self.head = None
   32:         self.tail = None
[34m-  33:         self._length = 0[0m
[32m+  33:         pass[0m
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
--------------------------------------------------------------------------------
[0.18223 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a96e590>, val = 1

>   ???
E   AttributeError: 'DoubleLinkedList' object has no attribute '_length'

binarySearchTree3:49: AttributeError
[36m   -[0m [# 277] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
   35:             for val in data:
[34m-  36:                 self.push(val)[0m
[32m+  36:                 pass[0m
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
   40:     
--------------------------------------------------------------------------------
[0.17448 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a4aa0b0>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
[36m   -[0m [# 278] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
   38:             if data:
[34m-  39:                 self.push(data)[0m
[32m+  39:                 pass[0m
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
--------------------------------------------------------------------------------
[0.30212 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_1

def test_case_1():
        node_0 = module_0.Node()
        assert node_0.height == 1
        double_linked_list_0 = module_0.DoubleLinkedList(node_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:17: AssertionError
[36m   -[0m [# 279] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   39:                 self.push(data)
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
[34m-  43:         old_head = self.head[0m
[32m+  43:         pass[0m
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
--------------------------------------------------------------------------------
[0.15868 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a8fcfa0>, val = 1

>   ???
E   NameError: name 'old_head' is not defined

binarySearchTree3:44: NameError
[36m   -[0m [# 280] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
[34m-  44:         self.head = NodeDLL(val, next_node=old_head)[0m
[32m+  44:         pass[0m
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
--------------------------------------------------------------------------------
[0.17088 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a323fa0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [# 281] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
[34m-  46:             old_head.prev = self.head[0m
[32m+  46:             pass[0m
   47:         if not (self.tail):
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
--------------------------------------------------------------------------------
[0.17856 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
>       dll.remove(2)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a84f670>, val = 2

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:99: AttributeError
[36m   -[0m [# 282] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
[34m-  48:             self.tail = self.head[0m
[32m+  48:             pass[0m
   49:         self._length += 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[0.16520 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
>       assert dll._repr() == [4, 3, 2, 1, 5]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a89efe0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [# 283] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   49:         self._length += 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
[34m-  53:         to_return = self.head[0m
[32m+  53:         pass[0m
   54:         if self._length < 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
--------------------------------------------------------------------------------
[0.16318 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a6028c0>

>   ???
E   NameError: name 'to_return' is not defined

binarySearchTree3:64: NameError
[36m   -[0m [# 284] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   53:         to_return = self.head
   54:         if self._length < 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
[34m-  57:         new_head = self.head.next[0m
[32m+  57:         pass[0m
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
--------------------------------------------------------------------------------
[0.17708 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ac403d0>

>   ???
E   NameError: name 'new_head' is not defined

binarySearchTree3:58: NameError
[36m   -[0m [# 285] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
[34m-  59:             new_head.prev = None[0m
[32m+  59:             pass[0m
   60:         self.head = new_head
   61:         self._length -= 1
   62:         if self._length < 1:
   63:             self.tail = None
--------------------------------------------------------------------------------
[0.17993 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
        popped_value = dll.pop()
    
        assert popped_value == 3
    
>       assert dll.head.prev is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:13: AssertionError
[36m   -[0m [# 286] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
[34m-  60:         self.head = new_head[0m
[32m+  60:         pass[0m
   61:         self._length -= 1
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
--------------------------------------------------------------------------------
[0.24886 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: AssertionError
[36m   -[0m [# 287] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
   62:         if self._length < 1:
[34m-  63:             self.tail = None[0m
[32m+  63:             pass[0m
   64:         return to_return.data
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
--------------------------------------------------------------------------------
[0.28894 s] [31msurvived[0m
[36m   -[0m [# 288] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   60:         self.head = new_head
   61:         self._length -= 1
   62:         if self._length < 1:
   63:             self.tail = None
[34m-  64:         return to_return.data[0m
[32m+  64:         pass[0m
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
--------------------------------------------------------------------------------
[0.16307 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
        popped_value = dll.pop()
    
>       assert popped_value == 3
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:11: AssertionError
[36m   -[0m [# 289] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   64:         return to_return.data
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
[34m-  68:         old_tail = self.tail[0m
[32m+  68:         pass[0m
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
--------------------------------------------------------------------------------
[0.17959 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
>       dll.append(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a9e88e0>, val = 5

>   ???
E   NameError: name 'old_tail' is not defined

binarySearchTree3:69: NameError
[36m   -[0m [# 290] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
[34m-  69:         self.tail = NodeDLL(val, prev=old_tail)[0m
[32m+  69:         pass[0m
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
--------------------------------------------------------------------------------
[0.17542 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
>       assert dll._repr() == [4, 3, 2, 1, 5]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:27: AssertionError
[36m   -[0m [# 291] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
[34m-  71:             old_tail.next = self.tail[0m
[32m+  71:             pass[0m
   72:         if self._length < 1:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
--------------------------------------------------------------------------------
[0.17427 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
>       assert dll._repr() == [4, 3, 2, 1, 5]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:115: in _repr
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a998d30>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:57: AttributeError
[36m   -[0m [# 292] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
[34m-  73:             self.head = self.tail[0m
[32m+  73:             pass[0m
   74:         self._length += 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[0.17052 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 293] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   74:         self._length += 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
[34m-  78:         to_return = self.tail[0m
[32m+  78:         pass[0m
   79:         if self._length < 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
--------------------------------------------------------------------------------
[0.16068 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
>       dll.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ac41e40>

>   ???
E   NameError: name 'to_return' is not defined

binarySearchTree3:89: NameError
[36m   -[0m [# 294] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   78:         to_return = self.tail
   79:         if self._length < 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
[34m-  82:         new_tail = self.tail.prev[0m
[32m+  82:         pass[0m
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
--------------------------------------------------------------------------------
[0.25100 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
>       dll.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a9e9450>

>   ???
E   NameError: name 'new_tail' is not defined

binarySearchTree3:83: NameError
[36m   -[0m [# 295] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
[34m-  84:             new_tail.next = None[0m
[32m+  84:             pass[0m
   85:         self.tail = new_tail
   86:         self._length -= 1
   87:         if self._length < 1:
   88:             self.tail = None
--------------------------------------------------------------------------------
[0.16071 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_shift_with_two_elements

def test_shift_with_two_elements():
        # Create a double linked list with two elements
        dll = DoubleLinkedList([1, 2])
    
        # Perform the shift operation
        shifted_value = dll.shift()
    
        # Verify that the shifted value is correct
        assert shifted_value == 1
    
        # Verify that the tail is updated correctly
        assert dll.tail.data == 2
>       assert dll.tail.next is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:263: AssertionError
[36m   -[0m [# 296] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
[34m-  85:         self.tail = new_tail[0m
[32m+  85:         pass[0m
   86:         self._length -= 1
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
--------------------------------------------------------------------------------
[0.15916 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_shift

def test_shift():
        # Create a double linked list with some values
        dll = DoubleLinkedList([1, 2, 3, 4])
    
        # Shift the last element off the tail
        shifted_value = dll.shift()
    
        # Verify that the shifted value is correct
        assert shifted_value == 1
    
        # Verify that the tail has been updated correctly
>       assert dll.tail.data == 2
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:66: AssertionError
[36m   -[0m [# 297] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
   87:         if self._length < 1:
[34m-  88:             self.tail = None[0m
[32m+  88:             pass[0m
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
--------------------------------------------------------------------------------
[0.37850 s] [31msurvived[0m
[36m   -[0m [# 298] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   85:         self.tail = new_tail
   86:         self._length -= 1
   87:         if self._length < 1:
   88:             self.tail = None
[34m-  89:         return to_return.data[0m
[32m+  89:         pass[0m
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
--------------------------------------------------------------------------------
[0.16456 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_shift

def test_shift():
        # Create a double linked list with some values
        dll = DoubleLinkedList([1, 2, 3, 4])
    
        # Shift the last element off the tail
        shifted_value = dll.shift()
    
        # Verify that the shifted value is correct
>       assert shifted_value == 1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:63: AssertionError
[36m   -[0m [# 299] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
[34m-  93:         curr = self.head[0m
[32m+  93:         pass[0m
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
--------------------------------------------------------------------------------
[0.19243 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
>       dll.remove(2)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a9e6140>, val = 2

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

binarySearchTree3:94: UnboundLocalError
[36m   -[0m [# 300] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
[34m-  97:                     (self.head, self.tail) = (None, None)[0m
[32m+  97:                     pass[0m
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[0.18585 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_12

def test_case_12():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(double_linked_list_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.remove(double_linked_list_0)
>       assert double_linked_list_0.head is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:105: AssertionError
[36m   -[0m [# 301] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
[34m-  99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)[0m
[32m+  99:                     pass[0m
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
--------------------------------------------------------------------------------
[0.16743 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.remove(2)
>       assert dll._repr() == [3, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:39: AssertionError
[36m   -[0m [# 302] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
[34m- 101:                     (self.head, curr.next.prev) = (curr.next, None)[0m
[32m+ 101:                     pass[0m
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
--------------------------------------------------------------------------------
[0.23567 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_remove_head

def test_remove_head():
        # Create a double linked list with some values
        dll = DoubleLinkedList([1, 2, 3, 4])
    
        # Remove the tail element
        dll.remove(4)
    
        # Verify that the tail has been updated correctly
>       assert dll.head.data == 3
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:90: AssertionError
[36m   -[0m [# 303] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
[34m- 103:                     (self.tail, curr.prev.next) = (curr.prev, None)[0m
[32m+ 103:                     pass[0m
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
  107:         
--------------------------------------------------------------------------------
[0.15793 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_remove_tail

def test_remove_tail():
        # Create a double linked list with some values
        dll = DoubleLinkedList([1, 2, 3, 4])
    
        # Remove the tail element
        dll.remove(1)
    
        # Verify that the tail has been updated correctly
>       assert dll.tail.data == 2
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:76: AssertionError
[36m   -[0m [# 304] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
[34m- 105:                 return[0m
[32m+ 105:                 pass[0m
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
--------------------------------------------------------------------------------
[0.15451 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
>       dll.remove(2)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a3c51b0>, val = 2

>   ???
E   ValueError: 2 is not in the list

binarySearchTree3:108: ValueError
[36m   -[0m [# 305] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
[34m- 106:             curr = curr.next[0m
[32m+ 106:             pass[0m
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
  110:     def _repr(self):
--------------------------------------------------------------------------------
[5.00731 s] [33mtimeout[0m
[36m   -[0m [# 306] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
[34m- 112:         l = [][0m
[32m+ 112:         pass[0m
  113:         while True:
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
--------------------------------------------------------------------------------
[0.16801 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a89c9a0>

>   ???
E   NameError: name 'l' is not defined

binarySearchTree3:116: NameError
[36m   -[0m [# 307] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  111:         '''Return list representation of dll.'''
  112:         l = []
  113:         while True:
  114:             try:
[34m- 115:                 popped_data = self.pop()[0m
[32m+ 115:                 pass[0m
  116:                 l.append(popped_data)
  117:             except IndexError:
  118:                 break
  119:         return l
--------------------------------------------------------------------------------
[0.18552 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a8c3a90>

>   ???
E   NameError: name 'popped_data' is not defined

binarySearchTree3:116: NameError
[36m   -[0m [# 308] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  112:         l = []
  113:         while True:
  114:             try:
  115:                 popped_data = self.pop()
[34m- 116:                 l.append(popped_data)[0m
[32m+ 116:                 pass[0m
  117:             except IndexError:
  118:                 break
  119:         return l
  120: 
--------------------------------------------------------------------------------
[0.16906 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: AssertionError
[36m   -[0m [# 309] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
  118:                 break
[34m- 119:         return l[0m
[32m+ 119:         pass[0m
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
  123: 
--------------------------------------------------------------------------------
[0.18202 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: AssertionError
[36m   -[0m [# 310] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  131:     '''
  132:     
  133:     def __init__(self, data=None):
  134:         '''Initialize queue data structure.'''
[34m- 135:         self._container = DoubleLinkedList(data)[0m
[32m+ 135:         pass[0m
  136:     
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
--------------------------------------------------------------------------------
[0.23712 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
>       assert queue.size() == 3

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7f1f7a69d2a0>

>   ???
E   AttributeError: 'Queue' object has no attribute '_container'

binarySearchTree3:154: AttributeError
[36m   -[0m [# 311] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  135:         self._container = DoubleLinkedList(data)
  136:     
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
[34m- 139:         self._container.append(val)[0m
[32m+ 139:         pass[0m
  140:     
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
--------------------------------------------------------------------------------
[0.15657 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
        assert queue.dequeue() == 3
        assert queue.peek() == 2
        assert queue.size() == 2
        queue.enqueue(4)
>       assert queue.size() == 3
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:48: AssertionError
[36m   -[0m [# 312] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  139:         self._container.append(val)
  140:     
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
[34m- 143:         return self._container.pop()[0m
[32m+ 143:         pass[0m
  144:     
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
--------------------------------------------------------------------------------
[0.16005 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
>       assert queue.dequeue() == 3
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:44: AssertionError
[36m   -[0m [# 313] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  144:     
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
[34m- 148:             return self._container.head.data[0m
[32m+ 148:             pass[0m
  149:         except AttributeError:
  150:             return None
  151:     
  152:     def size(self):
--------------------------------------------------------------------------------
[0.25533 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
        assert queue.dequeue() == 3
>       assert queue.peek() == 2
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:45: AssertionError
[36m   -[0m [# 314] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
  148:             return self._container.head.data
  149:         except AttributeError:
[34m- 150:             return None[0m
[32m+ 150:             pass[0m
  151:     
  152:     def size(self):
  153:         '''Return the size of the queue.'''
  154:         return self._container._length
--------------------------------------------------------------------------------
[0.27069 s] [31msurvived[0m
[36m   -[0m [# 315] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  150:             return None
  151:     
  152:     def size(self):
  153:         '''Return the size of the queue.'''
[34m- 154:         return self._container._length[0m
[32m+ 154:         pass[0m
  155: 
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
--------------------------------------------------------------------------------
[0.15678 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
>       assert queue.size() == 3
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:43: AssertionError
[36m   -[0m [# 316] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  157:     '''Node, or leaf of the BST.'''
  158:     
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
[34m- 161:         self.val = val[0m
[32m+ 161:         pass[0m
  162:         self.right = None
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
--------------------------------------------------------------------------------
[0.18461 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_empty_node

def test_empty_node():
        # Create an empty node
        empty_node = Node()
    
        # Verify that the node is empty
>       assert empty_node.val is None
E       AttributeError: 'Node' object has no attribute 'val'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:109: AttributeError
[36m   -[0m [# 317] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  158:     
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
  161:         self.val = val
[34m- 162:         self.right = None[0m
[32m+ 162:         pass[0m
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
  166:     
--------------------------------------------------------------------------------
[0.16202 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_empty_node

def test_empty_node():
        # Create an empty node
        empty_node = Node()
    
        # Verify that the node is empty
        assert empty_node.val is None
        assert empty_node.left is None
>       assert empty_node.right is None
E       AttributeError: 'Node' object has no attribute 'right'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:111: AttributeError
[36m   -[0m [# 318] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
  161:         self.val = val
  162:         self.right = None
[34m- 163:         self.left = None[0m
[32m+ 163:         pass[0m
  164:         self.parent = parent
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
--------------------------------------------------------------------------------
[0.15951 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_empty_node

def test_empty_node():
        # Create an empty node
        empty_node = Node()
    
        # Verify that the node is empty
        assert empty_node.val is None
>       assert empty_node.left is None
E       AttributeError: 'Node' object has no attribute 'left'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:110: AttributeError
[36m   -[0m [# 319] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  160:         '''Create node object.'''
  161:         self.val = val
  162:         self.right = None
  163:         self.left = None
[34m- 164:         self.parent = parent[0m
[32m+ 164:         pass[0m
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
--------------------------------------------------------------------------------
[0.16627 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_empty_node

def test_empty_node():
        # Create an empty node
        empty_node = Node()
    
        # Verify that the node is empty
        assert empty_node.val is None
        assert empty_node.left is None
        assert empty_node.right is None
>       assert empty_node.parent is None
E       AttributeError: 'Node' object has no attribute 'parent'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:112: AttributeError
[36m   -[0m [# 320] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  161:         self.val = val
  162:         self.right = None
  163:         self.left = None
  164:         self.parent = parent
[34m- 165:         self.height = 1[0m
[32m+ 165:         pass[0m
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
--------------------------------------------------------------------------------
[0.18337 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_empty_node

def test_empty_node():
        # Create an empty node
        empty_node = Node()
    
        # Verify that the node is empty
        assert empty_node.val is None
        assert empty_node.left is None
        assert empty_node.right is None
        assert empty_node.parent is None
>       assert empty_node.height == 1
E       AttributeError: 'Node' object has no attribute 'height'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:113: AttributeError
[36m   -[0m [# 321] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
[34m- 169:         return not ((self.right or self.left))[0m
[32m+ 169:         pass[0m
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
--------------------------------------------------------------------------------
[0.26093 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
>       assert root._is_leaf() is False
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: AssertionError
[36m   -[0m [# 322] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  169:         return not ((self.right or self.left))
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
[34m- 173:         return (self.right and self.left)[0m
[32m+ 173:         pass[0m
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.17134 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
>       assert root._is_interior() is not None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:125: AssertionError
[36m   -[0m [# 323] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
[34m- 178:             return 'left'[0m
[32m+ 178:             pass[0m
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
  182:     def _side(self):
--------------------------------------------------------------------------------
[0.16567 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_onlychild

def test_bst_onlychild():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6])
        root = bst.root
    
        # Test _onlychild method
>       assert root.right._onlychild() == 'left'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:144: AssertionError
[36m   -[0m [# 324] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
  179:         if (self.right and not (self.left)):
[34m- 180:             return 'right'[0m
[32m+ 180:             pass[0m
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
--------------------------------------------------------------------------------
[0.15784 s] [36mincompetent[0m

TypeError: binarySearchTree3:383: TypeError: getattr(): attribute name must be string

[36m   -[0m [# 325] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
[34m- 185:             return 'left' if self.parent.left == self else 'right'[0m
[32m+ 185:             pass[0m
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.16600 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
        assert root.right._onlychild() is None
        assert root._onlychild() is None
    
        # Test _side method
>       assert root.left._side() == 'left'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:134: AssertionError
[36m   -[0m [# 326] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  226:     '''
  227:     
  228:     def __init__(self, data=None):
  229:         '''Initialize tree.'''
[34m- 230:         self._size = 0[0m
[32m+ 230:         pass[0m
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
--------------------------------------------------------------------------------
[0.15829 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7aa2dab0>, val = 5

>   ???
E   AttributeError: 'Bst' object has no attribute '_size'

binarySearchTree3:241: AttributeError
[36m   -[0m [# 327] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  227:     
  228:     def __init__(self, data=None):
  229:         '''Initialize tree.'''
  230:         self._size = 0
[34m- 231:         self.root = None[0m
[32m+ 231:         pass[0m
  232:         
  233:         if data:
  234:             for i in data:
  235:                 self.insert(i)
--------------------------------------------------------------------------------
[0.18216 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7aa13b20>, val = 5

>   ???
E   AttributeError: 'Bst' object has no attribute 'root'

binarySearchTree3:239: AttributeError
[36m   -[0m [# 328] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
[34m- 235:                 self.insert(i)[0m
[32m+ 235:                 pass[0m
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
--------------------------------------------------------------------------------
[0.16625 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
>       assert root._is_leaf() is False
E       AttributeError: 'NoneType' object has no attribute '_is_leaf'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: AttributeError
[36m   -[0m [# 329] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
[34m- 240:             self.root = Node(val)[0m
[32m+ 240:             pass[0m
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
  244:     
--------------------------------------------------------------------------------
[0.26450 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
>       assert root._is_leaf() is False
E       AttributeError: 'NoneType' object has no attribute '_is_leaf'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: AttributeError
[36m   -[0m [# 330] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  239:         if not (self.root):
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
[34m- 243:             self._step(val, self.root)[0m
[32m+ 243:             pass[0m
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
--------------------------------------------------------------------------------
[0.18361 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
>       assert root._is_leaf() is False
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: AssertionError
[36m   -[0m [# 331] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
[34m- 248:             curr = self._set_child(curr, 'left', val)[0m
[32m+ 248:             pass[0m
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
--------------------------------------------------------------------------------
[0.16164 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
>       assert root.left.left._is_leaf() is True
E       AttributeError: 'NoneType' object has no attribute 'left'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:122: AttributeError
[36m   -[0m [# 332] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
[34m- 250:             curr = self._set_child(curr, 'right', val)[0m
[32m+ 250:             pass[0m
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
--------------------------------------------------------------------------------
[0.25607 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
>       assert root._is_interior() is not None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:125: AssertionError
[36m   -[0m [# 333] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
[34m- 251:         return curr.height[0m
[32m+ 251:         pass[0m
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
--------------------------------------------------------------------------------
[0.18969 s] [36mincompetent[0m

TypeError: binarySearchTree3:258: TypeError: '<=' not supported between instances of 'int' and 'NoneType'

[36m   -[0m [# 334] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
[34m- 255:         child = getattr(curr, side)[0m
[32m+ 255:         pass[0m
  256:         if child:
  257:             count = self._step(val, child)
  258:             if curr.height <= count:
  259:                 curr.height += 1
--------------------------------------------------------------------------------
[0.16500 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7aa4bdc0>
curr = <binarySearchTree3.Node object at 0x7f1f7aa4be50>, side = 'left', val = 3

>   ???
E   NameError: name 'child' is not defined

binarySearchTree3:256: NameError
[36m   -[0m [# 335] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
[34m- 257:             count = self._step(val, child)[0m
[32m+ 257:             pass[0m
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
--------------------------------------------------------------------------------
[0.17492 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a286cb0>
curr = <binarySearchTree3.Node object at 0x7f1f7a284f70>, side = 'left', val = 2

>   ???
E   NameError: name 'count' is not defined

binarySearchTree3:258: NameError
[36m   -[0m [# 336] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  257:             count = self._step(val, child)
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
[34m- 261:             setattr(curr, side, Node(val, curr))[0m
[32m+ 261:             pass[0m
  262:             self._size += 1
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
--------------------------------------------------------------------------------
[0.15699 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
>       assert root._is_leaf() is False
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: AssertionError
[36m   -[0m [# 337] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
  263:             if curr.height == 1:
  264:                 curr.height += 1
[34m- 265:         return curr[0m
[32m+ 265:         pass[0m
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
--------------------------------------------------------------------------------
[0.23400 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a7d08e0>, val = 3, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'height'

binarySearchTree3:251: AttributeError
[36m   -[0m [# 338] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  265:         return curr
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
[34m- 269:         curr = self.root[0m
[32m+ 269:         pass[0m
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
  273:             elif val < curr.val:
--------------------------------------------------------------------------------
[0.16644 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case1.delete(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:365: in delete
    ???
binarySearchTree3:288: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8f99c0>, val = 4

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

binarySearchTree3:270: UnboundLocalError
[36m   -[0m [# 339] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
  271:             if curr.val == val:
[34m- 272:                 return curr[0m
[32m+ 272:                 pass[0m
  273:             elif val < curr.val:
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
--------------------------------------------------------------------------------
[5.00572 s] [33mtimeout[0m
[36m   -[0m [# 340] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
  273:             elif val < curr.val:
[34m- 274:                 curr = curr.left[0m
[32m+ 274:                 pass[0m
  275:             else:
  276:                 curr = curr.right
  277:     
  278:     def size(self):
--------------------------------------------------------------------------------
[5.00463 s] [33mtimeout[0m
[36m   -[0m [# 341] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  272:                 return curr
  273:             elif val < curr.val:
  274:                 curr = curr.left
  275:             else:
[34m- 276:                 curr = curr.right[0m
[32m+ 276:                 pass[0m
  277:     
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
--------------------------------------------------------------------------------
[5.00723 s] [33mtimeout[0m
[36m   -[0m [# 342] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  276:                 curr = curr.right
  277:     
  278:     def size(self):
  279:         '''Return the size of the BST.'''
[34m- 280:         return self._size[0m
[32m+ 280:         pass[0m
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
--------------------------------------------------------------------------------
[0.20534 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
>       assert var_1 == 0
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:317: AssertionError
[36m   -[0m [# 343] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  280:         return self._size
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
[34m- 284:         return 0 if not (self.root) else self.root.height[0m
[32m+ 284:         pass[0m
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.20009 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_30

def test_case_30():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.depth()
>       assert var_1 == 1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:243: AssertionError
[36m   -[0m [# 344] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  284:         return 0 if not (self.root) else self.root.height
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
[34m- 288:         return self.search(val) is not None[0m
[32m+ 288:         pass[0m
  289:     
  290:     def balance(self, tree=None):
  291:         '''Return an integer of how well the tree is balanced.
  292: 
--------------------------------------------------------------------------------
[0.16226 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 345] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  295:         should return a negative value. An ideally-balanced tree should
  296:         return 0.
  297:         '''
  298:         if not tree:
[34m- 299:             tree = self.root[0m
[32m+ 299:             pass[0m
  300:             if not tree:
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
--------------------------------------------------------------------------------
[0.28573 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [# 346] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  297:         '''
  298:         if not tree:
  299:             tree = self.root
  300:             if not tree:
[34m- 301:                 return 0[0m
[32m+ 301:                 pass[0m
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
--------------------------------------------------------------------------------
[0.21147 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_34

def test_case_34():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
>       var_0 = bst_0.balance()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a690a00>, tree = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:303: AttributeError
[36m   -[0m [# 347] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  299:             tree = self.root
  300:             if not tree:
  301:                 return 0
  302:         
[34m- 303:         leftbranch = 0 if not (tree.left) else tree.left.height[0m
[32m+ 303:         pass[0m
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
--------------------------------------------------------------------------------
[0.22365 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7ab42ce0>
tree = <binarySearchTree3.Node object at 0x7f1f7ab40880>

>   ???
E   NameError: name 'leftbranch' is not defined

binarySearchTree3:306: NameError
[36m   -[0m [# 348] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  300:             if not tree:
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
[34m- 304:         rightbranch = 0 if not (tree.right) else tree.right.height[0m
[32m+ 304:         pass[0m
  305:         
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
--------------------------------------------------------------------------------
[0.28966 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a64e590>
tree = <binarySearchTree3.Node object at 0x7f1f7a64df90>

>   ???
E   NameError: name 'rightbranch' is not defined

binarySearchTree3:306: NameError
[36m   -[0m [# 349] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
[34m- 306:         return leftbranch - rightbranch[0m
[32m+ 306:         pass[0m
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
--------------------------------------------------------------------------------
[0.23823 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -1
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:258: AssertionError
[36m   -[0m [# 350] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
[34m- 311:             node = self.root[0m
[32m+ 311:             pass[0m
  312:         
  313:         if not node:
  314:             return
  315:         
--------------------------------------------------------------------------------
[0.15828 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
>       result = list(bst.pre_order())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7abb8850>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
[36m   -[0m [# 351] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  310:         if node == 'root':
  311:             node = self.root
  312:         
  313:         if not node:
[34m- 314:             return[0m
[32m+ 314:             pass[0m
  315:         
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
--------------------------------------------------------------------------------
[0.17334 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
>       result = list(bst.pre_order())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:318: in pre_order
    ???
binarySearchTree3:318: in pre_order
    ???
binarySearchTree3:318: in pre_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a83c580>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:316: AttributeError
[36m   -[0m [# 352] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  312:         
  313:         if not node:
  314:             return
  315:         
[34m- 316:         yield node.val[0m
[32m+ 316:         pass[0m
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
--------------------------------------------------------------------------------
[0.17333 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
        result = list(bst.pre_order())
>       assert result == [5, 3, 2, 4, 7, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:211: AssertionError
[36m   -[0m [# 353] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  315:         
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
[34m- 319:             yield n[0m
[32m+ 319:             pass[0m
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
--------------------------------------------------------------------------------
[0.16920 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
        result = list(bst.pre_order())
>       assert result == [5, 3, 2, 4, 7, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:211: AssertionError
[36m   -[0m [# 354] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
[34m- 321:             yield n[0m
[32m+ 321:             pass[0m
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
--------------------------------------------------------------------------------
[0.16491 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
        result = list(bst.pre_order())
>       assert result == [5, 3, 2, 4, 7, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:211: AssertionError
[36m   -[0m [# 355] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
[34m- 326:             node = self.root[0m
[32m+ 326:             pass[0m
  327:         
  328:         if not node:
  329:             return
  330:         
--------------------------------------------------------------------------------
[0.16753 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a4a9d50>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
[36m   -[0m [# 356] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  325:         if node == 'root':
  326:             node = self.root
  327:         
  328:         if not node:
[34m- 329:             return[0m
[32m+ 329:             pass[0m
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
  333:         yield node.val
--------------------------------------------------------------------------------
[0.25037 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:331: in in_order
    ???
binarySearchTree3:331: in in_order
    ???
binarySearchTree3:331: in in_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a285060>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:331: AttributeError
[36m   -[0m [# 357] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  328:         if not node:
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
[34m- 332:             yield n[0m
[32m+ 332:             pass[0m
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
--------------------------------------------------------------------------------
[0.18082 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 358] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
[34m- 333:         yield node.val[0m
[32m+ 333:         pass[0m
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
--------------------------------------------------------------------------------
[0.18637 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 359] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  331:         for n in self.in_order(node=node.left):
  332:             yield n
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
[34m- 335:             yield n[0m
[32m+ 335:             pass[0m
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
--------------------------------------------------------------------------------
[0.16489 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 360] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
[34m- 340:             node = self.root[0m
[32m+ 340:             pass[0m
  341:         
  342:         if not node:
  343:             return
  344:         
--------------------------------------------------------------------------------
[0.21555 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a9709d0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
[36m   -[0m [# 361] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  339:         if node == 'root':
  340:             node = self.root
  341:         
  342:         if not node:
[34m- 343:             return[0m
[32m+ 343:             pass[0m
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
--------------------------------------------------------------------------------
[0.29734 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:345: in post_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a95cc10>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:345: AttributeError
[36m   -[0m [# 362] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  342:         if not node:
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
[34m- 346:             yield n[0m
[32m+ 346:             pass[0m
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
  350:     
--------------------------------------------------------------------------------
[0.27425 s] [31msurvived[0m
[36m   -[0m [# 363] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
[34m- 348:             yield n[0m
[32m+ 348:             pass[0m
  349:         yield node.val
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
--------------------------------------------------------------------------------
[0.32872 s] [31msurvived[0m
[36m   -[0m [# 364] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  345:         for n in self.post_order(node=node.left):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
  348:             yield n
[34m- 349:         yield node.val[0m
[32m+ 349:         pass[0m
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
--------------------------------------------------------------------------------
[0.28320 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:322: AssertionError
[36m   -[0m [# 365] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  349:         yield node.val
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
[34m- 353:         q = Queue()[0m
[32m+ 353:         pass[0m
  354:         q.enqueue(self.root)
  355:         while q.peek():
  356:             node = q.dequeue()
  357:             yield node.val
--------------------------------------------------------------------------------
[0.16028 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
>       result = list(bst.breadth_first())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7ac130d0>

>   ???
E   NameError: name 'q' is not defined

binarySearchTree3:354: NameError
[36m   -[0m [# 366] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
[34m- 354:         q.enqueue(self.root)[0m
[32m+ 354:         pass[0m
  355:         while q.peek():
  356:             node = q.dequeue()
  357:             yield node.val
  358:             if node.left:
--------------------------------------------------------------------------------
[0.16746 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 367] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
  355:         while q.peek():
[34m- 356:             node = q.dequeue()[0m
[32m+ 356:             pass[0m
  357:             yield node.val
  358:             if node.left:
  359:                 q.enqueue(node.left)
  360:             if node.right:
--------------------------------------------------------------------------------
[0.25221 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
>       result = list(bst.breadth_first())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7ac13220>

>   ???
E   NameError: name 'node' is not defined

binarySearchTree3:357: NameError
[36m   -[0m [# 368] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  353:         q = Queue()
  354:         q.enqueue(self.root)
  355:         while q.peek():
  356:             node = q.dequeue()
[34m- 357:             yield node.val[0m
[32m+ 357:             pass[0m
  358:             if node.left:
  359:                 q.enqueue(node.left)
  360:             if node.right:
  361:                 q.enqueue(node.right)
--------------------------------------------------------------------------------
[0.16756 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:218: TypeError: 'NoneType' object is not iterable

[36m   -[0m [# 369] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  355:         while q.peek():
  356:             node = q.dequeue()
  357:             yield node.val
  358:             if node.left:
[34m- 359:                 q.enqueue(node.left)[0m
[32m+ 359:                 pass[0m
  360:             if node.right:
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
--------------------------------------------------------------------------------
[0.18668 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 370] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  357:             yield node.val
  358:             if node.left:
  359:                 q.enqueue(node.left)
  360:             if node.right:
[34m- 361:                 q.enqueue(node.right)[0m
[32m+ 361:                 pass[0m
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
--------------------------------------------------------------------------------
[0.18694 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
        result = list(bst.breadth_first())
>       assert result == [5, 3, 7, 2, 4, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:219: AssertionError
[36m   -[0m [# 371] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
[34m- 366:             return[0m
[32m+ 366:             pass[0m
  367:         
  368:         node = self.search(val)
  369:         
  370:         if node._is_leaf():
--------------------------------------------------------------------------------
[0.25483 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case3.delete(5)
        assert list(bst_case3.in_order()) == [2, 3, 4, 6, 7, 8]
        assert bst_case3._size == 6
    
        # Case 4: Deleting the root node with one child
        bst_case4 = Bst([5, 7, 8])
        bst_case4.delete(5)
        assert list(bst_case4.in_order()) == [7, 8]
        assert bst_case4._size == 2
    
        # Case 5: Deleting the root node with two children
        bst_case5 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case5.delete(5)
        assert list(bst_case5.in_order()) == [2, 3, 4, 6, 7, 8]
        assert bst_case5._size == 6
    
        # Case 6: Deleting a non-existent node
        bst_case6 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case6.delete(9)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a4ab4f0>, val = 9

>   ???
E   AttributeError: 'NoneType' object has no attribute '_is_leaf'

binarySearchTree3:370: AttributeError
[36m   -[0m [# 372] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
  366:             return
  367:         
[34m- 368:         node = self.search(val)[0m
[32m+ 368:         pass[0m
  369:         
  370:         if node._is_leaf():
  371:             if node.parent:
  372:                 setattr(node.parent, node._side(), None)
--------------------------------------------------------------------------------
[0.29931 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case1.delete(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8203a0>, val = 4

>   ???
E   NameError: name 'node' is not defined

binarySearchTree3:370: NameError
[36m   -[0m [# 373] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  368:         node = self.search(val)
  369:         
  370:         if node._is_leaf():
  371:             if node.parent:
[34m- 372:                 setattr(node.parent, node._side(), None)[0m
[32m+ 372:                 pass[0m
  373:             else:
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
--------------------------------------------------------------------------------
[0.16679 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 374] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  370:         if node._is_leaf():
  371:             if node.parent:
  372:                 setattr(node.parent, node._side(), None)
  373:             else:
[34m- 374:                 self.root = None[0m
[32m+ 374:                 pass[0m
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
--------------------------------------------------------------------------------
[0.23597 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.delete(bst_0)
>       assert bst_0.root is None
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:179: AssertionError
[36m   -[0m [# 375] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  373:             else:
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
[34m- 377:             next_node = self._find_replacement(node)[0m
[32m+ 377:             pass[0m
  378:             self._size += 1
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
--------------------------------------------------------------------------------
[0.24060 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case3.delete(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7abb09a0>, val = 5

>   ???
E   NameError: name 'next_node' is not defined

binarySearchTree3:379: NameError
[36m   -[0m [# 376] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
[34m- 379:             self.delete(next_node.val)[0m
[32m+ 379:             pass[0m
  380:             node.val = next_node.val
  381:         else:
  382:             
  383:             child = getattr(node, node._onlychild())
--------------------------------------------------------------------------------
[0.16547 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case3.delete(5)
>       assert list(bst_case3.in_order()) == [2, 3, 4, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:162: AssertionError
[36m   -[0m [# 377] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
  379:             self.delete(next_node.val)
[34m- 380:             node.val = next_node.val[0m
[32m+ 380:             pass[0m
  381:         else:
  382:             
  383:             child = getattr(node, node._onlychild())
  384:             if node.parent:
--------------------------------------------------------------------------------
[0.16816 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case3.delete(5)
>       assert list(bst_case3.in_order()) == [2, 3, 4, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:162: AssertionError
[36m   -[0m [# 378] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
  382:             
[34m- 383:             child = getattr(node, node._onlychild())[0m
[32m+ 383:             pass[0m
  384:             if node.parent:
  385:                 child.parent = node.parent
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
--------------------------------------------------------------------------------
[0.16828 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
>       bst_case2.delete(7)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8fac20>, val = 7

>   ???
E   NameError: name 'child' is not defined

binarySearchTree3:385: NameError
[36m   -[0m [# 379] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  381:         else:
  382:             
  383:             child = getattr(node, node._onlychild())
  384:             if node.parent:
[34m- 385:                 child.parent = node.parent[0m
[32m+ 385:                 pass[0m
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
  388:                 self.root = child
  389:         
--------------------------------------------------------------------------------
[0.25989 s] [31msurvived[0m
[36m   -[0m [# 380] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  382:             
  383:             child = getattr(node, node._onlychild())
  384:             if node.parent:
  385:                 child.parent = node.parent
[34m- 386:                 setattr(node.parent, node._side(), child)[0m
[32m+ 386:                 pass[0m
  387:             else:
  388:                 self.root = child
  389:         
  390:         self._size -= 1
--------------------------------------------------------------------------------
[0.23416 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
>       assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:156: AssertionError
[36m   -[0m [# 381] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  384:             if node.parent:
  385:                 child.parent = node.parent
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
[34m- 388:                 self.root = child[0m
[32m+ 388:                 pass[0m
  389:         
  390:         self._size -= 1
  391:     
  392:     def _find_replacement(self, node):
--------------------------------------------------------------------------------
[0.19611 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case3.delete(5)
        assert list(bst_case3.in_order()) == [2, 3, 4, 6, 7, 8]
        assert bst_case3._size == 6
    
        # Case 4: Deleting the root node with one child
        bst_case4 = Bst([5, 7, 8])
        bst_case4.delete(5)
>       assert list(bst_case4.in_order()) == [7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:168: AssertionError
[36m   -[0m [# 382] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
[34m- 395:             return self._findmin(node.right)[0m
[32m+ 395:             pass[0m
  396:         
  397:         elif node.parent:
  398:             if node._side() == 'left':
  399:                 return node.parent
--------------------------------------------------------------------------------
[0.16688 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case3.delete(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8e11e0>, val = 5

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:379: AttributeError
[36m   -[0m [# 383] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
  398:             if node._side() == 'left':
[34m- 399:                 return node.parent[0m
[32m+ 399:                 pass[0m
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
  403:                 node.parent.right = node
--------------------------------------------------------------------------------
[0.25647 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_find_replacement_left_side

def test_find_replacement_left_side():
        # Create a BST with some nodes
        bst = Bst([5, 3, 7, 2, 4, 6, 8, 1, 9])
    
        # Get a reference to a node with only a left child
        node_with_left_child = bst.search(2)
    
        result = bst._find_replacement(node_with_left_child)
    
        # Verify that the result is as expected (leftmost node of the right subtree)
>       assert result.val == 3
E       AttributeError: 'NoneType' object has no attribute 'val'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:239: AttributeError
[36m   -[0m [# 384] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  397:         elif node.parent:
  398:             if node._side() == 'left':
  399:                 return node.parent
  400:             else:
[34m- 401:                 node.parent.right = None[0m
[32m+ 401:                 pass[0m
  402:                 tmp = self._find_replacement(node.parent)
  403:                 node.parent.right = node
  404:                 return tmp
  405:     
--------------------------------------------------------------------------------
[0.15590 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_find

def test_find():
        bst = Bst([11, 7, 5, 6, 2, 13])
    
        no = bst.search(6)
        no = bst._find_replacement(no)
    
>       assert no.val == 7
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:248: AssertionError
[36m   -[0m [# 385] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  398:             if node._side() == 'left':
  399:                 return node.parent
  400:             else:
  401:                 node.parent.right = None
[34m- 402:                 tmp = self._find_replacement(node.parent)[0m
[32m+ 402:                 pass[0m
  403:                 node.parent.right = node
  404:                 return tmp
  405:     
  406:     def _findmin(self, node):
--------------------------------------------------------------------------------
[0.17342 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_find

def test_find():
        bst = Bst([11, 7, 5, 6, 2, 13])
    
        no = bst.search(6)
>       no = bst._find_replacement(no)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:246: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a772620>
node = <binarySearchTree3.Node object at 0x7f1f7a7725f0>

>   ???
E   NameError: name 'tmp' is not defined

binarySearchTree3:404: NameError
[36m   -[0m [# 386] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  399:                 return node.parent
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
[34m- 403:                 node.parent.right = node[0m
[32m+ 403:                 pass[0m
  404:                 return tmp
  405:     
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
--------------------------------------------------------------------------------
[0.18769 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_find

def test_find():
        bst = Bst([11, 7, 5, 6, 2, 13])
    
        no = bst.search(6)
        no = bst._find_replacement(no)
    
        assert no.val == 7
>       assert list(bst.in_order()) == [2, 5, 6, 7, 11, 13]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:249: AssertionError
[36m   -[0m [# 387] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
  403:                 node.parent.right = node
[34m- 404:                 return tmp[0m
[32m+ 404:                 pass[0m
  405:     
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
--------------------------------------------------------------------------------
[0.17319 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_find

def test_find():
        bst = Bst([11, 7, 5, 6, 2, 13])
    
        no = bst.search(6)
        no = bst._find_replacement(no)
    
>       assert no.val == 7
E       AttributeError: 'NoneType' object has no attribute 'val'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:248: AttributeError
[36m   -[0m [# 388] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  405:     
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
[34m- 409:             node = node.left[0m
[32m+ 409:             pass[0m
  410:         return node
--------------------------------------------------------------------------------
[5.00615 s] [33mtimeout[0m
[36m   -[0m [# 389] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
  409:             node = node.left
[34m- 410:         return node[0m
[32m+ 410:         pass[0m
--------------------------------------------------------------------------------
[0.15828 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case3.delete(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a7ebbe0>, val = 5

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:379: AttributeError
[36m   -[0m [# 390] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
    4:     '''Node class for data storage.'''
    5:     
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
[34m-   8:         self.data = data[0m
[32m+   8:         data = data[0m
    9:         self.next = next_node
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 391] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
    5:     
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
    8:         self.data = data
[34m-   9:         self.next = next_node[0m
[32m+   9:         next = next_node[0m
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 392] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
    8:         self.data = data
    9:         self.next = next_node
[34m-  10:         self.prev = prev[0m
[32m+  10:         prev = prev[0m
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
   14:         return 'Value: {}'.format(self.data)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 393] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
[34m-  14:         return 'Value: {}'.format(self.data)[0m
[32m+  14:         return 'Value: {}'.format(data)[0m
   15: 
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[0.21412 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_45

def test_case_45():
        node_d_l_l_0 = module_0.NodeDLL()
>       var_0 = node_d_l_l_0.__repr__()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:369: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[NameError("name 'data' is not defined") raised in repr()] NodeDLL object at 0x7f1f7aa109a0>

>   ???
E   NameError: name 'data' is not defined

binarySearchTree3:14: NameError
[36m   -[0m [# 394] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   27:     '''
   28:     
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
[34m-  31:         self.head = None[0m
[32m+  31:         head = None[0m
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
   35:             for val in data:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 395] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   28:     
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
   31:         self.head = None
[34m-  32:         self.tail = None[0m
[32m+  32:         tail = None[0m
   33:         self._length = 0
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 396] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
   31:         self.head = None
   32:         self.tail = None
[34m-  33:         self._length = 0[0m
[32m+  33:         _length = 0[0m
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 397] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
   35:             for val in data:
[34m-  36:                 self.push(val)[0m
[32m+  36:                 push(val)[0m
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
   40:     
--------------------------------------------------------------------------------
[0.17441 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a41fc40>
data = [1, 2, 3]

>   ???
E   NameError: name 'push' is not defined

binarySearchTree3:36: NameError
[36m   -[0m [# 398] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
   38:             if data:
[34m-  39:                 self.push(data)[0m
[32m+  39:                 push(data)[0m
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
--------------------------------------------------------------------------------
[0.18460 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_1

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a84fd60>
data = <binarySearchTree3.Node object at 0x7f1f7a84c280>

>   ???
E   TypeError: 'Node' object is not iterable

binarySearchTree3:35: TypeError

During handling of the above exception, another exception occurred:

    def test_case_1():
        node_0 = module_0.Node()
        assert node_0.height == 1
>       double_linked_list_0 = module_0.DoubleLinkedList(node_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a84fd60>
data = <binarySearchTree3.Node object at 0x7f1f7a84c280>

>   ???
E   NameError: name 'push' is not defined

binarySearchTree3:39: NameError
[36m   -[0m [# 399] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   39:                 self.push(data)
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
[34m-  43:         old_head = self.head[0m
[32m+  43:         old_head = head[0m
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
--------------------------------------------------------------------------------
[0.24244 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a2999c0>, val = 1

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:43: NameError
[36m   -[0m [# 400] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
[34m-  44:         self.head = NodeDLL(val, next_node=old_head)[0m
[32m+  44:         head = NodeDLL(val, next_node=old_head)[0m
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 401] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
[34m-  46:             old_head.prev = self.head[0m
[32m+  46:             old_head.prev = head[0m
   47:         if not (self.tail):
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
--------------------------------------------------------------------------------
[0.16815 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ac42110>, val = 2

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:46: NameError
[36m   -[0m [# 402] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
[34m-  47:         if not (self.tail):[0m
[32m+  47:         if not tail:[0m
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
   51:     def pop(self):
--------------------------------------------------------------------------------
[0.24522 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a972590>, val = 1

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:47: NameError
[36m   -[0m [# 403] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
[34m-  48:             self.tail = self.head[0m
[32m+  48:             tail = self.head[0m
   49:         self._length += 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 404] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
[34m-  48:             self.tail = self.head[0m
[32m+  48:             self.tail = head[0m
   49:         self._length += 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[0.18705 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
>       dll = DoubleLinkedList([1, 2, 3])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a6ba860>, val = 1

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:48: NameError
[36m   -[0m [# 405] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
[34m-  49:         self._length += 1[0m
[32m+  49:         _length += 1[0m
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 406] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   49:         self._length += 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
[34m-  53:         to_return = self.head[0m
[32m+  53:         to_return = head[0m
   54:         if self._length < 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
--------------------------------------------------------------------------------
[0.15986 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ad9e8f0>

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:53: NameError
[36m   -[0m [# 407] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
[34m-  54:         if self._length < 1:[0m
[32m+  54:         if _length < 1:[0m
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
--------------------------------------------------------------------------------
[0.24134 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ac60f10>

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:54: NameError
[36m   -[0m [# 408] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   53:         to_return = self.head
   54:         if self._length < 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
[34m-  57:         new_head = self.head.next[0m
[32m+  57:         new_head = head.next[0m
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
--------------------------------------------------------------------------------
[0.15562 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ab772e0>

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:57: NameError
[36m   -[0m [# 409] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
[34m-  60:         self.head = new_head[0m
[32m+  60:         head = new_head[0m
   61:         self._length -= 1
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 410] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
[34m-  61:         self._length -= 1[0m
[32m+  61:         _length -= 1[0m
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 411] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
[34m-  62:         if self._length < 1:[0m
[32m+  62:         if _length < 1:[0m
   63:             self.tail = None
   64:         return to_return.data
   65:     
   66:     def append(self, val):
--------------------------------------------------------------------------------
[0.15884 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ab5c610>

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:62: NameError
[36m   -[0m [# 412] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
   62:         if self._length < 1:
[34m-  63:             self.tail = None[0m
[32m+  63:             tail = None[0m
   64:         return to_return.data
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 413] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   64:         return to_return.data
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
[34m-  68:         old_tail = self.tail[0m
[32m+  68:         old_tail = tail[0m
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
--------------------------------------------------------------------------------
[0.17654 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
>       dll.append(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a7e9630>, val = 5

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:68: NameError
[36m   -[0m [# 414] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
[34m-  69:         self.tail = NodeDLL(val, prev=old_tail)[0m
[32m+  69:         tail = NodeDLL(val, prev=old_tail)[0m
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 415] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
[34m-  71:             old_tail.next = self.tail[0m
[32m+  71:             old_tail.next = tail[0m
   72:         if self._length < 1:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
--------------------------------------------------------------------------------
[0.15326 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
>       dll.append(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ac40c40>, val = 5

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:71: NameError
[36m   -[0m [# 416] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
[34m-  72:         if self._length < 1:[0m
[32m+  72:         if _length < 1:[0m
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
--------------------------------------------------------------------------------
[0.16778 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
>       dll.append(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ab43ac0>, val = 5

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:72: NameError
[36m   -[0m [# 417] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
[34m-  73:             self.head = self.tail[0m
[32m+  73:             head = self.tail[0m
   74:         self._length += 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 418] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
[34m-  73:             self.head = self.tail[0m
[32m+  73:             self.head = tail[0m
   74:         self._length += 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[0.24041 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
>       result = list(bst.breadth_first())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:354: in breadth_first
    ???
binarySearchTree3:139: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a7e9b70>
val = <binarySearchTree3.Node object at 0x7f1f7a7e8850>

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:73: NameError
[36m   -[0m [# 419] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
[34m-  74:         self._length += 1[0m
[32m+  74:         _length += 1[0m
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 420] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   74:         self._length += 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
[34m-  78:         to_return = self.tail[0m
[32m+  78:         to_return = tail[0m
   79:         if self._length < 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
--------------------------------------------------------------------------------
[0.16038 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
>       dll.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a69d270>

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:78: NameError
[36m   -[0m [# 421] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
[34m-  79:         if self._length < 1:[0m
[32m+  79:         if _length < 1:[0m
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
--------------------------------------------------------------------------------
[0.16499 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
>       dll.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a84ec50>

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:79: NameError
[36m   -[0m [# 422] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   78:         to_return = self.tail
   79:         if self._length < 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
[34m-  82:         new_tail = self.tail.prev[0m
[32m+  82:         new_tail = tail.prev[0m
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
--------------------------------------------------------------------------------
[0.15589 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
>       dll.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7abb03a0>

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:82: NameError
[36m   -[0m [# 423] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
[34m-  85:         self.tail = new_tail[0m
[32m+  85:         tail = new_tail[0m
   86:         self._length -= 1
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 424] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
[34m-  86:         self._length -= 1[0m
[32m+  86:         _length -= 1[0m
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 425] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
[34m-  87:         if self._length < 1:[0m
[32m+  87:         if _length < 1:[0m
   88:             self.tail = None
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
--------------------------------------------------------------------------------
[0.18304 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
>       dll.shift()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a9731f0>

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:87: NameError
[36m   -[0m [# 426] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
   87:         if self._length < 1:
[34m-  88:             self.tail = None[0m
[32m+  88:             tail = None[0m
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 427] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
[34m-  93:         curr = self.head[0m
[32m+  93:         curr = head[0m
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
--------------------------------------------------------------------------------
[0.15476 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
>       dll.remove(2)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a744460>, val = 2

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:93: NameError
[36m   -[0m [# 428] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
[34m-  96:                 if self._length == 1:[0m
[32m+  96:                 if _length == 1:[0m
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
--------------------------------------------------------------------------------
[0.15816 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
>       dll.remove(2)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ab43340>, val = 2

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:96: NameError
[36m   -[0m [# 429] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
[34m-  97:                     (self.head, self.tail) = (None, None)[0m
[32m+  97:                     (head, self.tail) = (None, None)[0m
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 430] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
[34m-  97:                     (self.head, self.tail) = (None, None)[0m
[32m+  97:                     (self.head, tail) = (None, None)[0m
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 431] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
[34m-  98:                 elif (curr is not self.head and curr is not self.tail):[0m
[32m+  98:                 elif (curr is not head and curr is not self.tail):[0m
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.16234 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
>       dll.remove(2)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7abba890>, val = 2

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:98: NameError
[36m   -[0m [# 432] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
[34m-  98:                 elif (curr is not self.head and curr is not self.tail):[0m
[32m+  98:                 elif (curr is not self.head and curr is not tail):[0m
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.15721 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
>       dll.remove(2)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7aa2f790>, val = 2

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:98: NameError
[36m   -[0m [# 433] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
[34m- 100:                 elif curr is self.head:[0m
[32m+ 100:                 elif curr is head:[0m
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
--------------------------------------------------------------------------------
[0.16308 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_remove_tail

def test_remove_tail():
        # Create a double linked list with some values
        dll = DoubleLinkedList([1, 2, 3, 4])
    
        # Remove the tail element
>       dll.remove(1)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ab6ec20>, val = 1

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:100: NameError
[36m   -[0m [# 434] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
[34m- 101:                     (self.head, curr.next.prev) = (curr.next, None)[0m
[32m+ 101:                     (head, curr.next.prev) = (curr.next, None)[0m
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 435] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
[34m- 102:                 elif curr is self.tail:[0m
[32m+ 102:                 elif curr is tail:[0m
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
--------------------------------------------------------------------------------
[0.18319 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_remove_tail

def test_remove_tail():
        # Create a double linked list with some values
        dll = DoubleLinkedList([1, 2, 3, 4])
    
        # Remove the tail element
>       dll.remove(1)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ab75930>, val = 1

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:102: NameError
[36m   -[0m [# 436] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
[34m- 103:                     (self.tail, curr.prev.next) = (curr.prev, None)[0m
[32m+ 103:                     (tail, curr.prev.next) = (curr.prev, None)[0m
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
  107:         
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 437] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
[34m- 104:                 self._length -= 1[0m
[32m+ 104:                 _length -= 1[0m
  105:                 return
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 438] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  111:         '''Return list representation of dll.'''
  112:         l = []
  113:         while True:
  114:             try:
[34m- 115:                 popped_data = self.pop()[0m
[32m+ 115:                 popped_data = pop()[0m
  116:                 l.append(popped_data)
  117:             except IndexError:
  118:                 break
  119:         return l
--------------------------------------------------------------------------------
[0.15703 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a770250>

>   ???
E   NameError: name 'pop' is not defined

binarySearchTree3:115: NameError
[36m   -[0m [# 439] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  131:     '''
  132:     
  133:     def __init__(self, data=None):
  134:         '''Initialize queue data structure.'''
[34m- 135:         self._container = DoubleLinkedList(data)[0m
[32m+ 135:         _container = DoubleLinkedList(data)[0m
  136:     
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 440] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  135:         self._container = DoubleLinkedList(data)
  136:     
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
[34m- 139:         self._container.append(val)[0m
[32m+ 139:         _container.append(val)[0m
  140:     
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
--------------------------------------------------------------------------------
[0.15857 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
        assert queue.dequeue() == 3
        assert queue.peek() == 2
        assert queue.size() == 2
>       queue.enqueue(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7f1f7ad14880>, val = 4

>   ???
E   NameError: name '_container' is not defined

binarySearchTree3:139: NameError
[36m   -[0m [# 441] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  139:         self._container.append(val)
  140:     
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
[34m- 143:         return self._container.pop()[0m
[32m+ 143:         return _container.pop()[0m
  144:     
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
--------------------------------------------------------------------------------
[0.15398 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
>       assert queue.dequeue() == 3

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7f1f7a84ea10>

>   ???
E   NameError: name '_container' is not defined

binarySearchTree3:143: NameError
[36m   -[0m [# 442] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  144:     
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
[34m- 148:             return self._container.head.data[0m
[32m+ 148:             return _container.head.data[0m
  149:         except AttributeError:
  150:             return None
  151:     
  152:     def size(self):
--------------------------------------------------------------------------------
[0.23761 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
        assert queue.size() == 3
        assert queue.dequeue() == 3
>       assert queue.peek() == 2

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7f1f7a6d5960>

>   ???
E   NameError: name '_container' is not defined

binarySearchTree3:148: NameError
[36m   -[0m [# 443] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  150:             return None
  151:     
  152:     def size(self):
  153:         '''Return the size of the queue.'''
[34m- 154:         return self._container._length[0m
[32m+ 154:         return _container._length[0m
  155: 
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
--------------------------------------------------------------------------------
[0.18818 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_Queue

def test_Queue():
        queue = Queue([1, 2, 3])
>       assert queue.size() == 3

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7f1f7ab41cf0>

>   ???
E   NameError: name '_container' is not defined

binarySearchTree3:154: NameError
[36m   -[0m [# 444] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  157:     '''Node, or leaf of the BST.'''
  158:     
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
[34m- 161:         self.val = val[0m
[32m+ 161:         val = val[0m
  162:         self.right = None
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 445] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  158:     
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
  161:         self.val = val
[34m- 162:         self.right = None[0m
[32m+ 162:         right = None[0m
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
  166:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 446] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
  161:         self.val = val
  162:         self.right = None
[34m- 163:         self.left = None[0m
[32m+ 163:         left = None[0m
  164:         self.parent = parent
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 447] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  160:         '''Create node object.'''
  161:         self.val = val
  162:         self.right = None
  163:         self.left = None
[34m- 164:         self.parent = parent[0m
[32m+ 164:         parent = parent[0m
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 448] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  161:         self.val = val
  162:         self.right = None
  163:         self.left = None
  164:         self.parent = parent
[34m- 165:         self.height = 1[0m
[32m+ 165:         height = 1[0m
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 449] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
[34m- 169:         return not ((self.right or self.left))[0m
[32m+ 169:         return not ((right or self.left))[0m
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
--------------------------------------------------------------------------------
[0.16639 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
>       assert root._is_leaf() is False

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7f1f7abb3610>

>   ???
E   NameError: name 'right' is not defined

binarySearchTree3:169: NameError
[36m   -[0m [# 450] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
[34m- 169:         return not ((self.right or self.left))[0m
[32m+ 169:         return not ((self.right or left))[0m
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
--------------------------------------------------------------------------------
[0.15921 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
>       assert root.left.left._is_leaf() is True

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:122: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7f1f7a64f250>

>   ???
E   NameError: name 'left' is not defined

binarySearchTree3:169: NameError
[36m   -[0m [# 451] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  169:         return not ((self.right or self.left))
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
[34m- 173:         return (self.right and self.left)[0m
[32m+ 173:         return (right and self.left)[0m
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.15777 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
>       assert root._is_interior() is not None

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7f1f7a8b2d40>

>   ???
E   NameError: name 'right' is not defined

binarySearchTree3:173: NameError
[36m   -[0m [# 452] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  169:         return not ((self.right or self.left))
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
[34m- 173:         return (self.right and self.left)[0m
[32m+ 173:         return (self.right and left)[0m
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.18854 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
>       assert root._is_interior() is not None

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7f1f7a973c70>

>   ???
E   NameError: name 'left' is not defined

binarySearchTree3:173: NameError
[36m   -[0m [# 453] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  173:         return (self.right and self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
[34m- 177:         if (self.left and not (self.right)):[0m
[32m+ 177:         if (left and not (self.right)):[0m
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
--------------------------------------------------------------------------------
[0.25431 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
>       assert root.left.left._onlychild() is None

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7f1f7a9717e0>

>   ???
E   NameError: name 'left' is not defined

binarySearchTree3:177: NameError
[36m   -[0m [# 454] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  173:         return (self.right and self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
[34m- 177:         if (self.left and not (self.right)):[0m
[32m+ 177:         if (self.left and not right):[0m
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
--------------------------------------------------------------------------------
[0.15979 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
>       assert root.right._onlychild() is None

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7f1f7a83d690>

>   ???
E   NameError: name 'right' is not defined

binarySearchTree3:177: NameError
[36m   -[0m [# 455] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
[34m- 179:         if (self.right and not (self.left)):[0m
[32m+ 179:         if (right and not (self.left)):[0m
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.18997 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
>       assert root.left.left._onlychild() is None

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7f1f7aa63760>

>   ???
E   NameError: name 'right' is not defined

binarySearchTree3:179: NameError
[36m   -[0m [# 456] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
[34m- 179:         if (self.right and not (self.left)):[0m
[32m+ 179:         if (self.right and not left):[0m
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.18693 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
>       assert root.right._onlychild() is None

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7f1f7ac43f70>

>   ???
E   NameError: name 'left' is not defined

binarySearchTree3:179: NameError
[36m   -[0m [# 457] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
[34m- 184:         if self.parent:[0m
[32m+ 184:         if parent:[0m
  185:             return 'left' if self.parent.left == self else 'right'
  186: 
  187: 
  188: class Bst(object):
--------------------------------------------------------------------------------
[0.15837 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
        assert root.right._onlychild() is None
        assert root._onlychild() is None
    
        # Test _side method
>       assert root.left._side() == 'left'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7f1f7ab77310>

>   ???
E   NameError: name 'parent' is not defined

binarySearchTree3:184: NameError
[36m   -[0m [# 458] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
[34m- 185:             return 'left' if self.parent.left == self else 'right'[0m
[32m+ 185:             return 'left' if parent.left == self else 'right'[0m
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.18992 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
        assert root._is_leaf() is False
        assert root.left.left._is_leaf() is True
    
        # Test _is_interior method
        assert root._is_interior() is not None
        assert root.left.left._is_interior() is None
    
        # Test _onlychild method
        assert root.left.left._onlychild() is None
        assert root.right._onlychild() is None
        assert root._onlychild() is None
    
        # Test _side method
>       assert root.left._side() == 'left'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7f1f7a8ba380>

>   ???
E   NameError: name 'parent' is not defined

binarySearchTree3:185: NameError
[36m   -[0m [# 459] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  226:     '''
  227:     
  228:     def __init__(self, data=None):
  229:         '''Initialize tree.'''
[34m- 230:         self._size = 0[0m
[32m+ 230:         _size = 0[0m
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 460] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  227:     
  228:     def __init__(self, data=None):
  229:         '''Initialize tree.'''
  230:         self._size = 0
[34m- 231:         self.root = None[0m
[32m+ 231:         root = None[0m
  232:         
  233:         if data:
  234:             for i in data:
  235:                 self.insert(i)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 461] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
[34m- 235:                 self.insert(i)[0m
[32m+ 235:                 insert(i)[0m
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
--------------------------------------------------------------------------------
[0.25912 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a88e380>
data = [5, 3, 7, 2, 4, 6, ...]

>   ???
E   NameError: name 'insert' is not defined

binarySearchTree3:235: NameError
[36m   -[0m [# 462] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  235:                 self.insert(i)
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
[34m- 239:         if not (self.root):[0m
[32m+ 239:         if not root:[0m
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
--------------------------------------------------------------------------------
[0.16051 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7ad149d0>, val = 5

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:239: NameError
[36m   -[0m [# 463] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
[34m- 240:             self.root = Node(val)[0m
[32m+ 240:             root = Node(val)[0m
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
  244:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 464] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
[34m- 241:             self._size += 1[0m
[32m+ 241:             _size += 1[0m
  242:         else:
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 465] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  239:         if not (self.root):
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
[34m- 243:             self._step(val, self.root)[0m
[32m+ 243:             _step(val, self.root)[0m
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
--------------------------------------------------------------------------------
[0.17749 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a38bd30>, val = 3

>   ???
E   NameError: name '_step' is not defined

binarySearchTree3:243: NameError
[36m   -[0m [# 466] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  239:         if not (self.root):
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
[34m- 243:             self._step(val, self.root)[0m
[32m+ 243:             self._step(val, root)[0m
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
--------------------------------------------------------------------------------
[0.17369 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a9480d0>, val = 3

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:243: NameError
[36m   -[0m [# 467] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
[34m- 248:             curr = self._set_child(curr, 'left', val)[0m
[32m+ 248:             curr = _set_child(curr, 'left', val)[0m
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
--------------------------------------------------------------------------------
[0.15991 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a388a90>, val = 3
curr = <binarySearchTree3.Node object at 0x7f1f7a388100>

>   ???
E   NameError: name '_set_child' is not defined

binarySearchTree3:248: NameError
[36m   -[0m [# 468] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
[34m- 250:             curr = self._set_child(curr, 'right', val)[0m
[32m+ 250:             curr = _set_child(curr, 'right', val)[0m
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
--------------------------------------------------------------------------------
[0.16536 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8b3160>, val = 7
curr = <binarySearchTree3.Node object at 0x7f1f7a8b13c0>

>   ???
E   NameError: name '_set_child' is not defined

binarySearchTree3:250: NameError
[36m   -[0m [# 469] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
[34m- 257:             count = self._step(val, child)[0m
[32m+ 257:             count = _step(val, child)[0m
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
--------------------------------------------------------------------------------
[0.24835 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
>       bst = Bst([5, 3, 7, 2, 4, 6, 8])

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a828a00>
curr = <binarySearchTree3.Node object at 0x7f1f7a828af0>, side = 'left', val = 2

>   ???
E   NameError: name '_step' is not defined

binarySearchTree3:257: NameError
[36m   -[0m [# 470] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
[34m- 262:             self._size += 1[0m
[32m+ 262:             _size += 1[0m
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
  266:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 471] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  265:         return curr
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
[34m- 269:         curr = self.root[0m
[32m+ 269:         curr = root[0m
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
  273:             elif val < curr.val:
--------------------------------------------------------------------------------
[0.16503 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case1.delete(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:365: in delete
    ???
binarySearchTree3:288: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a682080>, val = 4

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:269: NameError
[36m   -[0m [# 472] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  276:                 curr = curr.right
  277:     
  278:     def size(self):
  279:         '''Return the size of the BST.'''
[34m- 280:         return self._size[0m
[32m+ 280:         return _size[0m
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
--------------------------------------------------------------------------------
[0.29407 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
>       var_1 = bst_0.size()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8e3190>

>   ???
E   NameError: name '_size' is not defined

binarySearchTree3:280: NameError
[36m   -[0m [# 473] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  280:         return self._size
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
[34m- 284:         return 0 if not (self.root) else self.root.height[0m
[32m+ 284:         return 0 if not root else self.root.height[0m
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.22250 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_30

def test_case_30():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_1 = bst_0.depth()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:242: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a7728c0>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:284: NameError
[36m   -[0m [# 474] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  280:         return self._size
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
[34m- 284:         return 0 if not (self.root) else self.root.height[0m
[32m+ 284:         return 0 if not (self.root) else root.height[0m
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.23599 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_30

def test_case_30():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_1 = bst_0.depth()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:242: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a276e30>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:284: NameError
[36m   -[0m [# 475] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  284:         return 0 if not (self.root) else self.root.height
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
[34m- 288:         return self.search(val) is not None[0m
[32m+ 288:         return search(val) is not None[0m
  289:     
  290:     def balance(self, tree=None):
  291:         '''Return an integer of how well the tree is balanced.
  292: 
--------------------------------------------------------------------------------
[0.17125 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case1.delete(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:365: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7ad16ad0>, val = 4

>   ???
E   NameError: name 'search' is not defined

binarySearchTree3:288: NameError
[36m   -[0m [# 476] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  295:         should return a negative value. An ideally-balanced tree should
  296:         return 0.
  297:         '''
  298:         if not tree:
[34m- 299:             tree = self.root[0m
[32m+ 299:             tree = root[0m
  300:             if not tree:
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
--------------------------------------------------------------------------------
[0.21844 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_32

def test_case_32():
        bytes_0 = b'j\xc4u.d\x0btT\x1f\xc1"\x0c.w\x85'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a968550>, tree = None

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:299: NameError
[36m   -[0m [# 477] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
[34m- 311:             node = self.root[0m
[32m+ 311:             node = root[0m
  312:         
  313:         if not node:
  314:             return
  315:         
--------------------------------------------------------------------------------
[0.24117 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
>       result = list(bst.pre_order())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7aa60340>, node = 'root'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:311: NameError
[36m   -[0m [# 478] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  314:             return
  315:         
  316:         yield node.val
  317:         
[34m- 318:         for n in self.pre_order(node=node.left):[0m
[32m+ 318:         for n in pre_order(node=node.left):[0m
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
--------------------------------------------------------------------------------
[0.18621 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
>       result = list(bst.pre_order())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a84eaa0>
node = <binarySearchTree3.Node object at 0x7f1f7a84d840>

>   ???
E   NameError: name 'pre_order' is not defined

binarySearchTree3:318: NameError
[36m   -[0m [# 479] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
[34m- 320:         for n in self.pre_order(node=node.right):[0m
[32m+ 320:         for n in pre_order(node=node.right):[0m
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
--------------------------------------------------------------------------------
[0.18564 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
>       result = list(bst.pre_order())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:318: in pre_order
    ???
binarySearchTree3:318: in pre_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a7e8760>
node = <binarySearchTree3.Node object at 0x7f1f7a7e97b0>

>   ???
E   NameError: name 'pre_order' is not defined

binarySearchTree3:320: NameError
[36m   -[0m [# 480] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
[34m- 326:             node = self.root[0m
[32m+ 326:             node = root[0m
  327:         
  328:         if not node:
  329:             return
  330:         
--------------------------------------------------------------------------------
[0.32561 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a285e70>, node = 'root'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:326: NameError
[36m   -[0m [# 481] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  327:         
  328:         if not node:
  329:             return
  330:         
[34m- 331:         for n in self.in_order(node=node.left):[0m
[32m+ 331:         for n in in_order(node=node.left):[0m
  332:             yield n
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
--------------------------------------------------------------------------------
[0.17123 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a357280>
node = <binarySearchTree3.Node object at 0x7f1f7a3570d0>

>   ???
E   NameError: name 'in_order' is not defined

binarySearchTree3:331: NameError
[36m   -[0m [# 482] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
  333:         yield node.val
[34m- 334:         for n in self.in_order(node=node.right):[0m
[32m+ 334:         for n in in_order(node=node.right):[0m
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
--------------------------------------------------------------------------------
[0.17453 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:331: in in_order
    ???
binarySearchTree3:331: in in_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7ab5e170>
node = <binarySearchTree3.Node object at 0x7f1f7ab5f8b0>

>   ???
E   NameError: name 'in_order' is not defined

binarySearchTree3:334: NameError
[36m   -[0m [# 483] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
[34m- 340:             node = self.root[0m
[32m+ 340:             node = root[0m
  341:         
  342:         if not node:
  343:             return
  344:         
--------------------------------------------------------------------------------
[0.22258 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a89dcf0>, node = 'root'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:340: NameError
[36m   -[0m [# 484] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  341:         
  342:         if not node:
  343:             return
  344:         
[34m- 345:         for n in self.post_order(node=node.left):[0m
[32m+ 345:         for n in post_order(node=node.left):[0m
  346:             yield n
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
--------------------------------------------------------------------------------
[0.21589 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7ac298a0>
node = <binarySearchTree3.Node object at 0x7f1f7ac2a5c0>

>   ???
E   NameError: name 'post_order' is not defined

binarySearchTree3:345: NameError
[36m   -[0m [# 485] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
[34m- 347:         for n in self.post_order(node=node.right):[0m
[32m+ 347:         for n in post_order(node=node.right):[0m
  348:             yield n
  349:         yield node.val
  350:     
  351:     def breadth_first(self):
--------------------------------------------------------------------------------
[0.29103 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py::test_case_39

def test_case_39():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.post_order()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MIO.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a294eb0>
node = <binarySearchTree3.Node object at 0x7f1f7a294f70>

>   ???
E   NameError: name 'post_order' is not defined

binarySearchTree3:347: NameError
[36m   -[0m [# 486] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
[34m- 354:         q.enqueue(self.root)[0m
[32m+ 354:         q.enqueue(root)[0m
  355:         while q.peek():
  356:             node = q.dequeue()
  357:             yield node.val
  358:             if node.left:
--------------------------------------------------------------------------------
[0.17059 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_breadth_first_non_empty_tree

def test_breadth_first_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test breadth_first method for a non-empty tree
>       result = list(bst.breadth_first())

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a84ea70>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:354: NameError
[36m   -[0m [# 487] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
[34m- 365:         if (self._size < 1 or not (self.contains(val))):[0m
[32m+ 365:         if (_size < 1 or not (self.contains(val))):[0m
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.19070 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case1.delete(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a389c30>, val = 4

>   ???
E   NameError: name '_size' is not defined

binarySearchTree3:365: NameError
[36m   -[0m [# 488] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
[34m- 365:         if (self._size < 1 or not (self.contains(val))):[0m
[32m+ 365:         if (self._size < 1 or not (contains(val))):[0m
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.27560 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case1.delete(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a8f1930>, val = 4

>   ???
E   NameError: name 'contains' is not defined

binarySearchTree3:365: NameError
[36m   -[0m [# 489] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
  366:             return
  367:         
[34m- 368:         node = self.search(val)[0m
[32m+ 368:         node = search(val)[0m
  369:         
  370:         if node._is_leaf():
  371:             if node.parent:
  372:                 setattr(node.parent, node._side(), None)
--------------------------------------------------------------------------------
[0.16876 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case1.delete(4)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a770b50>, val = 4

>   ???
E   NameError: name 'search' is not defined

binarySearchTree3:368: NameError
[36m   -[0m [# 490] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  370:         if node._is_leaf():
  371:             if node.parent:
  372:                 setattr(node.parent, node._side(), None)
  373:             else:
[34m- 374:                 self.root = None[0m
[32m+ 374:                 root = None[0m
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 491] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  373:             else:
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
[34m- 377:             next_node = self._find_replacement(node)[0m
[32m+ 377:             next_node = _find_replacement(node)[0m
  378:             self._size += 1
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
--------------------------------------------------------------------------------
[0.16025 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case3.delete(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a9e98a0>, val = 5

>   ???
E   NameError: name '_find_replacement' is not defined

binarySearchTree3:377: NameError
[36m   -[0m [# 492] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
[34m- 378:             self._size += 1[0m
[32m+ 378:             _size += 1[0m
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
  382:             
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 493] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
[34m- 379:             self.delete(next_node.val)[0m
[32m+ 379:             delete(next_node.val)[0m
  380:             node.val = next_node.val
  381:         else:
  382:             
  383:             child = getattr(node, node._onlychild())
--------------------------------------------------------------------------------
[0.16118 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case3.delete(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7abb0f10>, val = 5

>   ???
E   NameError: name 'delete' is not defined

binarySearchTree3:379: NameError
[36m   -[0m [# 494] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  384:             if node.parent:
  385:                 child.parent = node.parent
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
[34m- 388:                 self.root = child[0m
[32m+ 388:                 root = child[0m
  389:         
  390:         self._size -= 1
  391:     
  392:     def _find_replacement(self, node):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 495] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
  388:                 self.root = child
  389:         
[34m- 390:         self._size -= 1[0m
[32m+ 390:         _size -= 1[0m
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 496] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
[34m- 395:             return self._findmin(node.right)[0m
[32m+ 395:             return _findmin(node.right)[0m
  396:         
  397:         elif node.parent:
  398:             if node._side() == 'left':
  399:                 return node.parent
--------------------------------------------------------------------------------
[0.27021 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
>       bst_case3.delete(5)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:377: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7a5040a0>
node = <binarySearchTree3.Node object at 0x7f1f7a504520>

>   ???
E   NameError: name '_findmin' is not defined

binarySearchTree3:395: NameError
[36m   -[0m [# 497] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  398:             if node._side() == 'left':
  399:                 return node.parent
  400:             else:
  401:                 node.parent.right = None
[34m- 402:                 tmp = self._find_replacement(node.parent)[0m
[32m+ 402:                 tmp = _find_replacement(node.parent)[0m
  403:                 node.parent.right = node
  404:                 return tmp
  405:     
  406:     def _findmin(self, node):
--------------------------------------------------------------------------------
[0.18083 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_find

def test_find():
        bst = Bst([11, 7, 5, 6, 2, 13])
    
        no = bst.search(6)
>       no = bst._find_replacement(no)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:246: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7f1f7aabf880>
node = <binarySearchTree3.Node object at 0x7f1f7aabc3d0>

>   ???
E   NameError: name '_find_replacement' is not defined

binarySearchTree3:402: NameError
[36m   -[0m [# 498] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
   35:             for val in data:
[34m-  36:                 self.push(val)[0m
[32m+  36:                 break[0m
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
   40:     
--------------------------------------------------------------------------------
[0.17502 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pop_with_new_head_prev

def test_pop_with_new_head_prev():
        # Create a double linked list with some elements
        dll = DoubleLinkedList([1, 2, 3])
    
        # Call the pop method
>       popped_value = dll.pop()

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7a89d8a0>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
[36m   -[0m [# 499] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
[34m-  95:             if curr.data is val:[0m
[34m-  96:                 if self._length == 1:[0m
[34m-  97:                     (self.head, self.tail) = (None, None)[0m
[34m-  98:                 elif (curr is not self.head and curr is not self.tail):[0m
[34m-  99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)[0m
[34m- 100:                 elif curr is self.head:[0m
[34m- 101:                     (self.head, curr.next.prev) = (curr.next, None)[0m
[34m- 102:                 elif curr is self.tail:[0m
[34m- 103:                     (self.tail, curr.prev.next) = (curr.prev, None)[0m
[34m- 104:                 self._length -= 1[0m
[34m- 105:                 return[0m
[34m- 106:             curr = curr.next[0m
[32m+  95:             break[0m
[32m+  96:         [0m
[32m+  97:         [0m
[32m+  98:         [0m
[32m+  99:         [0m
[32m+ 100:         [0m
[32m+ 101:         [0m
[32m+ 102:         [0m
[32m+ 103:         [0m
[32m+ 104:         [0m
[32m+ 105:         [0m
[32m+ 106:         [0m
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
  110:     def _repr(self):
--------------------------------------------------------------------------------
[0.24624 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
        dll.push(4)
        assert dll._repr() == [4, 3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3, 4])
        dll.append(5)
        assert dll._repr() == [4, 3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3, 4])
        dll.pop()
        assert dll._repr() == [3, 2, 1, 5]
    
        dll = DoubleLinkedList([5, 1, 2, 3])
        dll.shift()
        assert dll._repr() == [3, 2, 1]
    
        dll = DoubleLinkedList([1, 2, 3])
>       dll.remove(2)

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7f1f7ab5c6a0>, val = 2

>   ???
E   ValueError: 2 is not in the list

binarySearchTree3:108: ValueError
[36m   -[0m [# 500] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
  113:         while True:
[34m- 114:             try:[0m
[34m- 115:                 popped_data = self.pop()[0m
[34m- 116:                 l.append(popped_data)[0m
[34m- 117:             except IndexError:[0m
[34m- 118:                 break[0m
[32m+ 114:             break[0m
[32m+ 115:         [0m
[32m+ 116:         [0m
[32m+ 117:         [0m
[32m+ 118:         [0m
  119:         return l
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
--------------------------------------------------------------------------------
[0.15920 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_DoubleLinkedList

def test_DoubleLinkedList():
        dll = DoubleLinkedList([1, 2, 3])
>       assert dll._repr() == [3, 2, 1]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:19: AssertionError
[36m   -[0m [# 501] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
[34m- 235:                 self.insert(i)[0m
[32m+ 235:                 break[0m
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
--------------------------------------------------------------------------------
[0.17012 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_node_properties

def test_bst_node_properties():
        # Create a sample BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
        root = bst.root
    
        # Test _is_leaf method
>       assert root._is_leaf() is False
E       AttributeError: 'NoneType' object has no attribute '_is_leaf'

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:121: AttributeError
[36m   -[0m [# 502] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
[34m- 271:             if curr.val == val:[0m
[34m- 272:                 return curr[0m
[34m- 273:             elif val < curr.val:[0m
[34m- 274:                 curr = curr.left[0m
[34m- 275:             else:[0m
[34m- 276:                 curr = curr.right[0m
[32m+ 271:             break[0m
[32m+ 272:     [0m
[32m+ 273:     [0m
[32m+ 274:     [0m
[32m+ 275:     [0m
[32m+ 276:     [0m
  277:     
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
--------------------------------------------------------------------------------
[0.16732 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 503] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  315:         
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
[34m- 319:             yield n[0m
[32m+ 319:             break[0m
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
--------------------------------------------------------------------------------
[0.18225 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
        result = list(bst.pre_order())
>       assert result == [5, 3, 2, 4, 7, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:211: AssertionError
[36m   -[0m [# 504] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
[34m- 321:             yield n[0m
[32m+ 321:             break[0m
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
--------------------------------------------------------------------------------
[0.27338 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_pre_order_non_empty_tree

def test_pre_order_non_empty_tree():
        # Create a non-empty BST
        bst = Bst([5, 3, 7, 2, 4, 6, 8])
    
        # Test pre_order method for a non-empty tree
        result = list(bst.pre_order())
>       assert result == [5, 3, 2, 4, 7, 6, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:211: AssertionError
[36m   -[0m [# 505] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  328:         if not node:
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
[34m- 332:             yield n[0m
[32m+ 332:             break[0m
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
--------------------------------------------------------------------------------
[0.17826 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 506] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  331:         for n in self.in_order(node=node.left):
  332:             yield n
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
[34m- 335:             yield n[0m
[32m+ 335:             break[0m
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
--------------------------------------------------------------------------------
[0.19654 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
>       assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:150: AssertionError
[36m   -[0m [# 507] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  342:         if not node:
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
[34m- 346:             yield n[0m
[32m+ 346:             break[0m
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
  350:     
--------------------------------------------------------------------------------
[0.41065 s] [31msurvived[0m
[36m   -[0m [# 508] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
[34m- 348:             yield n[0m
[32m+ 348:             break[0m
  349:         yield node.val
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
--------------------------------------------------------------------------------
[0.27578 s] [31msurvived[0m
[36m   -[0m [# 509] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
  355:         while q.peek():
[34m- 356:             node = q.dequeue()[0m
[34m- 357:             yield node.val[0m
[34m- 358:             if node.left:[0m
[34m- 359:                 q.enqueue(node.left)[0m
[34m- 360:             if node.right:[0m
[34m- 361:                 q.enqueue(node.right)[0m
[32m+ 356:             break[0m
[32m+ 357:     [0m
[32m+ 358:     [0m
[32m+ 359:     [0m
[32m+ 360:     [0m
[32m+ 361:     [0m
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
--------------------------------------------------------------------------------
[0.16916 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments/binarySearchTree3/ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:218: TypeError: 'NoneType' object is not iterable

[36m   -[0m [# 510] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  405:     
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
[34m- 409:             node = node.left[0m
[32m+ 409:             break[0m
  410:         return node
--------------------------------------------------------------------------------
[0.16002 s] [32mkilled[0m by ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py::test_bst_deletion

def test_bst_deletion():
        # Case 1: Deleting a leaf node
        bst_case1 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case1.delete(4)
        assert list(bst_case1.in_order()) == [2, 3, 5, 6, 7, 8]
        assert bst_case1._size == 6
    
        # Case 2: Deleting a node with one child
        bst_case2 = Bst([5, 3, 7, 2, 4, 8])
        bst_case2.delete(7)
        assert list(bst_case2.in_order()) == [2, 3, 4, 5, 8]
        assert bst_case2._size == 5
    
        # Case 3: Deleting a node with two children
        bst_case3 = Bst([5, 3, 7, 2, 4, 6, 8])
        bst_case3.delete(5)
>       assert list(bst_case3.in_order()) == [2, 3, 4, 6, 7, 8]
E       AssertionError

ALL-SMART-GPT-MUTATEST/test_binarySearchTree3_MUTATEST.py:162: AssertionError
[34m[*][0m Mutation score [289.42535 s]: [1m[34m95.3%[0m
[36m   -[0m all: 510
[36m   -[0m killed: 395 (77.5%)
[36m   -[0m survived: 20 (3.9%)
[36m   -[0m incompetent: 88 (17.3%)
[36m   -[0m timeout: 7 (1.4%)
