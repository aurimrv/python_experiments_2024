[*] Start mutation process:
   - targets: binarySearchTree3.py
   - tests: ./DYNAMOSA-MIO-MOSA-WHOLE_SUITE
[*] 157 tests passed:
   - test_binarySearchTree3_WHOLE_SUITE [0.06460 s]
   - test_binarySearchTree3_MOSA [0.06001 s]
   - test_binarySearchTree3_DYNAMOSA [0.06988 s]
   - test_binarySearchTree3_MIO [0.06582 s]
[*] Start mutants generation and execution:
   - [#   1] AOR binarySearchTree3: 
--------------------------------------------------------------------------------
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
- 306:         return leftbranch - rightbranch
+ 306:         return leftbranch + rightbranch
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
--------------------------------------------------------------------------------
[0.10809 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [#   2] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
-  49:         self._length += 1
+  49:         self._length -= 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
--------------------------------------------------------------------------------
[0.10225 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd155c61a0>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:101: AttributeError
   - [#   3] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
-  61:         self._length -= 1
+  61:         self._length += 1
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
--------------------------------------------------------------------------------
[0.15261 s] survived
   - [#   4] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
-  74:         self._length += 1
+  74:         self._length -= 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
--------------------------------------------------------------------------------
[0.09958 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd155153f0>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
   - [#   5] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
-  86:         self._length -= 1
+  86:         self._length += 1
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
--------------------------------------------------------------------------------
[0.15316 s] survived
   - [#   6] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 104:                 self._length -= 1
+ 104:                 self._length += 1
  105:                 return
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
--------------------------------------------------------------------------------
[0.15843 s] survived
   - [#   7] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
- 241:             self._size += 1
+ 241:             self._size -= 1
  242:         else:
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
--------------------------------------------------------------------------------
[0.11095 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.delete(bst_0)
>       assert bst_0.root is None
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:177: AssertionError
   - [#   8] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  255:         child = getattr(curr, side)
  256:         if child:
  257:             count = self._step(val, child)
  258:             if curr.height <= count:
- 259:                 curr.height += 1
+ 259:                 curr.height -= 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
  263:             if curr.height == 1:
--------------------------------------------------------------------------------
[0.10842 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [#   9] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
- 262:             self._size += 1
+ 262:             self._size -= 1
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
  266:     
--------------------------------------------------------------------------------
[0.15654 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [#  10] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
  263:             if curr.height == 1:
- 264:                 curr.height += 1
+ 264:                 curr.height -= 1
  265:         return curr
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
--------------------------------------------------------------------------------
[0.13062 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_6

def test_case_6():
        bytes_0 = b'\xd0\x08\x1b$\xda'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.in_order()
        var_1 = bst_0.depth()
>       assert var_1 == 4
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:81: AssertionError
   - [#  11] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
- 378:             self._size += 1
+ 378:             self._size -= 1
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
  382:             
--------------------------------------------------------------------------------
[0.18296 s] survived
   - [#  12] ASR binarySearchTree3: 
--------------------------------------------------------------------------------
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
  388:                 self.root = child
  389:         
- 390:         self._size -= 1
+ 390:         self._size += 1
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
--------------------------------------------------------------------------------
[0.17351 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [#  13] BCR binarySearchTree3: 
--------------------------------------------------------------------------------
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
- 118:                 break
+ 118:                 continue
  119:         return l
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
--------------------------------------------------------------------------------
[0.15538 s] survived
   - [#  14] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
    2: 
    3: class NodeDLL(object):
    4:     '''Node class for data storage.'''
    5:     
-   6:     def __init__(self, data=None, next_node=None, prev=None):
-   7:         '''Initialize Node.'''
-   8:         self.data = data
-   9:         self.next = next_node
-  10:         self.prev = prev
-  11:     
+   6:     @classmethod
+   7:     def __init__(self, data=None, next_node=None, prev=None):
+   8:         '''Initialize Node.'''
+   9:         self.data = data
+  10:         self.next = next_node
+  11:         self.prev = prev
   12:     def __repr__(self):
   13:         '''String representation.'''
   14:         return 'Value: {}'.format(self.data)
   15: 
--------------------------------------------------------------------------------
[0.10376 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
        var_5 = double_linked_list_0.shift()
        assert double_linked_list_0.tail is None
        assert var_3.tail is None
>       assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree3.Bst'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:82: AssertionError
   - [#  15] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
    8:         self.data = data
    9:         self.next = next_node
   10:         self.prev = prev
   11:     
-  12:     def __repr__(self):
-  13:         '''String representation.'''
-  14:         return 'Value: {}'.format(self.data)
-  15: 
+  12:     @classmethod
+  13:     def __repr__(self):
+  14:         '''String representation.'''
+  15:         return 'Value: {}'.format(self.data)
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
   19: 
--------------------------------------------------------------------------------
[0.11482 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_25

def test_case_25():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        node_d_l_l_0 = module_0.NodeDLL()
>       var_0 = node_d_l_l_0.__repr__()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.NodeDLL'>

>   ???
E   AttributeError: type object 'NodeDLL' has no attribute 'data'

binarySearchTree3:15: AttributeError
   - [#  16] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   25:     remove(val) - will remove the first instance of (val) found in the list,
   26:     starting from the head.
   27:     '''
   28:     
-  29:     def __init__(self, data=None):
-  30:         '''Initialize list.'''
-  31:         self.head = None
-  32:         self.tail = None
-  33:         self._length = 0
-  34:         try:
-  35:             for val in data:
-  36:                 self.push(val)
-  37:         except TypeError:
-  38:             if data:
-  39:                 self.push(data)
-  40:     
+  29:     @classmethod
+  30:     def __init__(self, data=None):
+  31:         '''Initialize list.'''
+  32:         self.head = None
+  33:         self.tail = None
+  34:         self._length = 0
+  35:         try:
+  36:             for val in data:
+  37:                 self.push(val)
+  38:         except TypeError:
+  39:             if data:
+  40:                 self.push(data)
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
--------------------------------------------------------------------------------
[0.12982 s] incompetent

TypeError: binarySearchTree3:40: TypeError: DoubleLinkedList.push() missing 1 required positional argument: 'val'

   - [#  17] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
   40:     
-  41:     def push(self, val):
-  42:         '''Add val to the head of the list.'''
-  43:         old_head = self.head
-  44:         self.head = NodeDLL(val, next_node=old_head)
-  45:         if old_head:
-  46:             old_head.prev = self.head
-  47:         if not (self.tail):
-  48:             self.tail = self.head
-  49:         self._length += 1
-  50:     
+  41:     @classmethod
+  42:     def push(self, val):
+  43:         '''Add val to the head of the list.'''
+  44:         old_head = self.head
+  45:         self.head = NodeDLL(val, next_node=old_head)
+  46:         if old_head:
+  47:             old_head.prev = self.head
+  48:         if not (self.tail):
+  49:             self.tail = self.head
+  50:         self._length += 1
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
   54:         if self._length < 1:
--------------------------------------------------------------------------------
[0.09929 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.DoubleLinkedList'>, val = 0

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

binarySearchTree3:44: AttributeError
   - [#  18] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   47:         if not (self.tail):
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
-  51:     def pop(self):
-  52:         '''Remove the val from the head of the list.'''
-  53:         to_return = self.head
-  54:         if self._length < 1:
-  55:             raise IndexError('Cannot pop from an empty list.')
-  56:         
-  57:         new_head = self.head.next
-  58:         if new_head:
-  59:             new_head.prev = None
-  60:         self.head = new_head
-  61:         self._length -= 1
-  62:         if self._length < 1:
-  63:             self.tail = None
-  64:         return to_return.data
-  65:     
+  51:     @classmethod
+  52:     def pop(self):
+  53:         '''Remove the val from the head of the list.'''
+  54:         to_return = self.head
+  55:         if self._length < 1:
+  56:             raise IndexError('Cannot pop from an empty list.')
+  57:         
+  58:         new_head = self.head.next
+  59:         if new_head:
+  60:             new_head.prev = None
+  61:         self.head = new_head
+  62:         self._length -= 1
+  63:         if self._length < 1:
+  64:             self.tail = None
+  65:         return to_return.data
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
--------------------------------------------------------------------------------
[0.10044 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.DoubleLinkedList'>

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

binarySearchTree3:54: AttributeError
   - [#  19] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
-  66:     def append(self, val):
-  67:         '''Add val to the tail of the list.'''
-  68:         old_tail = self.tail
-  69:         self.tail = NodeDLL(val, prev=old_tail)
-  70:         if old_tail:
-  71:             old_tail.next = self.tail
-  72:         if self._length < 1:
-  73:             self.head = self.tail
-  74:         self._length += 1
-  75:     
+  66:     @classmethod
+  67:     def append(self, val):
+  68:         '''Add val to the tail of the list.'''
+  69:         old_tail = self.tail
+  70:         self.tail = NodeDLL(val, prev=old_tail)
+  71:         if old_tail:
+  72:             old_tail.next = self.tail
+  73:         if self._length < 1:
+  74:             self.head = self.tail
+  75:         self._length += 1
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
   79:         if self._length < 1:
--------------------------------------------------------------------------------
[0.09921 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:354: in breadth_first
    ???
binarySearchTree3:139: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.DoubleLinkedList'>
val = <binarySearchTree3.Node object at 0x7fbd157b5f30>

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'tail'

binarySearchTree3:69: AttributeError
   - [#  20] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   72:         if self._length < 1:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
-  76:     def shift(self):
-  77:         '''Remove the val from the tail of the list.'''
-  78:         to_return = self.tail
-  79:         if self._length < 1:
-  80:             raise IndexError('Cannot shift from an empty list.')
-  81:         
-  82:         new_tail = self.tail.prev
-  83:         if new_tail:
-  84:             new_tail.next = None
-  85:         self.tail = new_tail
-  86:         self._length -= 1
-  87:         if self._length < 1:
-  88:             self.tail = None
-  89:         return to_return.data
-  90:     
+  76:     @classmethod
+  77:     def shift(self):
+  78:         '''Remove the val from the tail of the list.'''
+  79:         to_return = self.tail
+  80:         if self._length < 1:
+  81:             raise IndexError('Cannot shift from an empty list.')
+  82:         
+  83:         new_tail = self.tail.prev
+  84:         if new_tail:
+  85:             new_tail.next = None
+  86:         self.tail = new_tail
+  87:         self._length -= 1
+  88:         if self._length < 1:
+  89:             self.tail = None
+  90:         return to_return.data
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
--------------------------------------------------------------------------------
[0.10731 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
>       var_5 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.DoubleLinkedList'>

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'tail'

binarySearchTree3:79: AttributeError
   - [#  21] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
-  91:     def remove(self, val):
-  92:         '''Remove first occurance of val from list.'''
-  93:         curr = self.head
-  94:         while curr:
-  95:             if curr.data is val:
-  96:                 if self._length == 1:
-  97:                     (self.head, self.tail) = (None, None)
-  98:                 elif (curr is not self.head and curr is not self.tail):
-  99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 100:                 elif curr is self.head:
- 101:                     (self.head, curr.next.prev) = (curr.next, None)
- 102:                 elif curr is self.tail:
- 103:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 104:                 self._length -= 1
- 105:                 return
- 106:             curr = curr.next
- 107:         
- 108:         raise ValueError('{} is not in the list'.format(val))
- 109:     
+  91:     @classmethod
+  92:     def remove(self, val):
+  93:         '''Remove first occurance of val from list.'''
+  94:         curr = self.head
+  95:         while curr:
+  96:             if curr.data is val:
+  97:                 if self._length == 1:
+  98:                     (self.head, self.tail) = (None, None)
+  99:                 elif (curr is not self.head and curr is not self.tail):
+ 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
+ 101:                 elif curr is self.head:
+ 102:                     (self.head, curr.next.prev) = (curr.next, None)
+ 103:                 elif curr is self.tail:
+ 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 105:                 self._length -= 1
+ 106:                 return
+ 107:             curr = curr.next
+ 108:         
+ 109:         raise ValueError('{} is not in the list'.format(val))
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
  113:         while True:
--------------------------------------------------------------------------------
[0.13073 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.DoubleLinkedList'>, val = None

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

binarySearchTree3:94: AttributeError
   - [#  22] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
- 110:     def _repr(self):
- 111:         '''Return list representation of dll.'''
- 112:         l = []
- 113:         while True:
- 114:             try:
- 115:                 popped_data = self.pop()
- 116:                 l.append(popped_data)
- 117:             except IndexError:
- 118:                 break
- 119:         return l
- 120: 
+ 110:     @classmethod
+ 111:     def _repr(self):
+ 112:         '''Return list representation of dll.'''
+ 113:         l = []
+ 114:         while True:
+ 115:             try:
+ 116:                 popped_data = self.pop()
+ 117:                 l.append(popped_data)
+ 118:             except IndexError:
+ 119:                 break
+ 120:         return l
  121: class Queue(object):
  122:     '''Implementation of Queue.
  123: 
  124:     This implementation supports the following public methods:
--------------------------------------------------------------------------------
[0.15667 s] survived
   - [#  23] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  129:     If the queue is empty, returns None
  130:     size(): return the size of the queue. Returns 0 if the queue is empty.
  131:     '''
  132:     
- 133:     def __init__(self, data=None):
- 134:         '''Initialize queue data structure.'''
- 135:         self._container = DoubleLinkedList(data)
- 136:     
+ 133:     @classmethod
+ 134:     def __init__(self, data=None):
+ 135:         '''Initialize queue data structure.'''
+ 136:         self._container = DoubleLinkedList(data)
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
  140:     
--------------------------------------------------------------------------------
[0.16149 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_41

def test_case_41():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        var_2 = bst_0.depth()
        assert var_2 == 6
        var_3 = bst_0.post_order()
        queue_0 = module_0.Queue(var_1)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        queue_1 = module_0.Queue(var_3)
        assert f'{type(queue_1).__module__}.{type(queue_1).__qualname__}' == 'binarySearchTree3.Queue'
        var_4 = queue_0.size()
>       assert var_4 == 0
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:495: AssertionError
   - [#  24] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  133:     def __init__(self, data=None):
  134:         '''Initialize queue data structure.'''
  135:         self._container = DoubleLinkedList(data)
  136:     
- 137:     def enqueue(self, val):
- 138:         '''Add a value to the queue.'''
- 139:         self._container.append(val)
- 140:     
+ 137:     @classmethod
+ 138:     def enqueue(self, val):
+ 139:         '''Add a value to the queue.'''
+ 140:         self._container.append(val)
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
  144:     
--------------------------------------------------------------------------------
[0.10030 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:354: in breadth_first
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Queue'>
val = <binarySearchTree3.Node object at 0x7fbd15521f90>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_container'

binarySearchTree3:140: AttributeError
   - [#  25] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
  140:     
- 141:     def dequeue(self):
- 142:         '''Remove a value from the front of the queue.'''
- 143:         return self._container.pop()
- 144:     
+ 141:     @classmethod
+ 142:     def dequeue(self):
+ 143:         '''Remove a value from the front of the queue.'''
+ 144:         return self._container.pop()
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
  148:             return self._container.head.data
--------------------------------------------------------------------------------
[0.10287 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_container'

binarySearchTree3:144: AttributeError
   - [#  26] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
  144:     
- 145:     def peek(self):
- 146:         '''Return the next value in the queue without dequing it.'''
- 147:         try:
- 148:             return self._container.head.data
- 149:         except AttributeError:
- 150:             return None
- 151:     
+ 145:     @classmethod
+ 146:     def peek(self):
+ 147:         '''Return the next value in the queue without dequing it.'''
+ 148:         try:
+ 149:             return self._container.head.data
+ 150:         except AttributeError:
+ 151:             return None
  152:     def size(self):
  153:         '''Return the size of the queue.'''
  154:         return self._container._length
  155: 
--------------------------------------------------------------------------------
[0.10019 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [#  27] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  148:             return self._container.head.data
  149:         except AttributeError:
  150:             return None
  151:     
- 152:     def size(self):
- 153:         '''Return the size of the queue.'''
- 154:         return self._container._length
- 155: 
+ 152:     @classmethod
+ 153:     def size(self):
+ 154:         '''Return the size of the queue.'''
+ 155:         return self._container._length
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
  159:     def __init__(self, val=None, parent=None):
--------------------------------------------------------------------------------
[0.11465 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_26

def test_case_26():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
>       var_0 = queue_0.size()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:297: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Queue'>

>   ???
E   AttributeError: type object 'Queue' has no attribute '_container'

binarySearchTree3:155: AttributeError
   - [#  28] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  155: 
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
- 159:     def __init__(self, val=None, parent=None):
- 160:         '''Create node object.'''
- 161:         self.val = val
- 162:         self.right = None
- 163:         self.left = None
- 164:         self.parent = parent
- 165:         self.height = 1
- 166:     
+ 159:     @classmethod
+ 160:     def __init__(self, val=None, parent=None):
+ 161:         '''Create node object.'''
+ 162:         self.val = val
+ 163:         self.right = None
+ 164:         self.left = None
+ 165:         self.parent = parent
+ 166:         self.height = 1
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
  170:     
--------------------------------------------------------------------------------
[0.10970 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [#  29] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
  166:     
- 167:     def _is_leaf(self):
- 168:         '''Return true if a leaf.'''
- 169:         return not ((self.right or self.left))
- 170:     
+ 167:     @classmethod
+ 168:     def _is_leaf(self):
+ 169:         '''Return true if a leaf.'''
+ 170:         return not ((self.right or self.left))
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
  174:     
--------------------------------------------------------------------------------
[0.13847 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_1 = bst_0.delete(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:370: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Node'>

>   ???
E   AttributeError: type object 'Node' has no attribute 'right'

binarySearchTree3:170: AttributeError
   - [#  30] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
  170:     
- 171:     def _is_interior(self):
- 172:         '''Return true if a interior node.'''
- 173:         return (self.right and self.left)
- 174:     
+ 171:     @classmethod
+ 172:     def _is_interior(self):
+ 173:         '''Return true if a interior node.'''
+ 174:         return (self.right and self.left)
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
--------------------------------------------------------------------------------
[0.15454 s] survived
   - [#  31] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
  174:     
- 175:     def _onlychild(self):
- 176:         '''Return string depending on children.'''
- 177:         if (self.left and not (self.right)):
- 178:             return 'left'
- 179:         if (self.right and not (self.left)):
- 180:             return 'right'
- 181:     
+ 175:     @classmethod
+ 176:     def _onlychild(self):
+ 177:         '''Return string depending on children.'''
+ 178:         if (self.left and not (self.right)):
+ 179:             return 'left'
+ 180:         if (self.right and not (self.left)):
+ 181:             return 'right'
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
  185:             return 'left' if self.parent.left == self else 'right'
--------------------------------------------------------------------------------
[0.15312 s] survived
   - [#  32] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
- 182:     def _side(self):
- 183:         '''Return if left or right child of parent.'''
- 184:         if self.parent:
- 185:             return 'left' if self.parent.left == self else 'right'
- 186: 
+ 182:     @classmethod
+ 183:     def _side(self):
+ 184:         '''Return if left or right child of parent.'''
+ 185:         if self.parent:
+ 186:             return 'left' if self.parent.left == self else 'right'
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
  190: 
--------------------------------------------------------------------------------
[0.15643 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_27

def test_case_27():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
>       var_1 = bst_0.delete(str_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:372: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Node'>

>   ???
E   AttributeError: type object 'Node' has no attribute 'parent'

binarySearchTree3:185: AttributeError
   - [#  33] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  224:     using breadth frist traversal, one at a time.
  225: 
  226:     '''
  227:     
- 228:     def __init__(self, data=None):
- 229:         '''Initialize tree.'''
- 230:         self._size = 0
- 231:         self.root = None
- 232:         
- 233:         if data:
- 234:             for i in data:
- 235:                 self.insert(i)
- 236:     
+ 228:     @classmethod
+ 229:     def __init__(self, data=None):
+ 230:         '''Initialize tree.'''
+ 231:         self._size = 0
+ 232:         self.root = None
+ 233:         
+ 234:         if data:
+ 235:             for i in data:
+ 236:                 self.insert(i)
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
--------------------------------------------------------------------------------
[0.10699 s] incompetent

TypeError: binarySearchTree3:236: TypeError: Bst.insert() missing 1 required positional argument: 'val'

   - [#  34] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  233:         if data:
  234:             for i in data:
  235:                 self.insert(i)
  236:     
- 237:     def insert(self, val):
- 238:         '''Insert val into BST. If val is already present will be ignored.'''
- 239:         if not (self.root):
- 240:             self.root = Node(val)
- 241:             self._size += 1
- 242:         else:
- 243:             self._step(val, self.root)
- 244:     
+ 237:     @classmethod
+ 238:     def insert(self, val):
+ 239:         '''Insert val into BST. If val is already present will be ignored.'''
+ 240:         if not (self.root):
+ 241:             self.root = Node(val)
+ 242:             self._size += 1
+ 243:         else:
+ 244:             self._step(val, self.root)
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
--------------------------------------------------------------------------------
[0.09875 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
>       var_2 = bst_0.insert(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, val = 0

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:240: AttributeError
   - [#  35] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
  244:     
- 245:     def _step(self, val, curr):
- 246:         '''Decide left or right and returns height.'''
- 247:         if val < curr.val:
- 248:             curr = self._set_child(curr, 'left', val)
- 249:         elif val > curr.val:
- 250:             curr = self._set_child(curr, 'right', val)
- 251:         return curr.height
- 252:     
+ 245:     @classmethod
+ 246:     def _step(self, val, curr):
+ 247:         '''Decide left or right and returns height.'''
+ 248:         if val < curr.val:
+ 249:             curr = self._set_child(curr, 'left', val)
+ 250:         elif val > curr.val:
+ 251:             curr = self._set_child(curr, 'right', val)
+ 252:         return curr.height
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
--------------------------------------------------------------------------------
[0.10714 s] incompetent

TypeError: binarySearchTree3:249: TypeError: Bst._set_child() missing 1 required positional argument: 'val'

   - [#  36] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
- 253:     def _set_child(self, curr, side, val):
- 254:         '''Helping.'''
- 255:         child = getattr(curr, side)
- 256:         if child:
- 257:             count = self._step(val, child)
- 258:             if curr.height <= count:
- 259:                 curr.height += 1
- 260:         else:
- 261:             setattr(curr, side, Node(val, curr))
- 262:             self._size += 1
- 263:             if curr.height == 1:
- 264:                 curr.height += 1
- 265:         return curr
- 266:     
+ 253:     @classmethod
+ 254:     def _set_child(self, curr, side, val):
+ 255:         '''Helping.'''
+ 256:         child = getattr(curr, side)
+ 257:         if child:
+ 258:             count = self._step(val, child)
+ 259:             if curr.height <= count:
+ 260:                 curr.height += 1
+ 261:         else:
+ 262:             setattr(curr, side, Node(val, curr))
+ 263:             self._size += 1
+ 264:             if curr.height == 1:
+ 265:                 curr.height += 1
+ 266:         return curr
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
--------------------------------------------------------------------------------
[0.10883 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>
curr = <binarySearchTree3.Node object at 0x7fbd1562ae30>, side = 'left'
val = 57

>   ???
E   AttributeError: type object 'Bst' has no attribute '_size'. Did you mean: 'size'?

binarySearchTree3:263: AttributeError
   - [#  37] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
  266:     
- 267:     def search(self, val):
- 268:         '''Return the node containing val.'''
- 269:         curr = self.root
- 270:         while curr:
- 271:             if curr.val == val:
- 272:                 return curr
- 273:             elif val < curr.val:
- 274:                 curr = curr.left
- 275:             else:
- 276:                 curr = curr.right
- 277:     
+ 267:     @classmethod
+ 268:     def search(self, val):
+ 269:         '''Return the node containing val.'''
+ 270:         curr = self.root
+ 271:         while curr:
+ 272:             if curr.val == val:
+ 273:                 return curr
+ 274:             elif val < curr.val:
+ 275:                 curr = curr.left
+ 276:             else:
+ 277:                 curr = curr.right
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
  281:     
--------------------------------------------------------------------------------
[0.13428 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_4 = bst_0.contains(var_2)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:288: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>
val = <generator object Bst.in_order at 0x7fbd159dfd80>

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:270: AttributeError
   - [#  38] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
  277:     
- 278:     def size(self):
- 279:         '''Return the size of the BST.'''
- 280:         return self._size
- 281:     
+ 278:     @classmethod
+ 279:     def size(self):
+ 280:         '''Return the size of the BST.'''
+ 281:         return self._size
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
  285:     
--------------------------------------------------------------------------------
[0.09945 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
>       var_1 = bst_0.size()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>

>   ???
E   AttributeError: type object 'Bst' has no attribute '_size'. Did you mean: 'size'?

binarySearchTree3:281: AttributeError
   - [#  39] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
  281:     
- 282:     def depth(self):
- 283:         '''Return depth of the BST, representing total levels.'''
- 284:         return 0 if not (self.root) else self.root.height
- 285:     
+ 282:     @classmethod
+ 283:     def depth(self):
+ 284:         '''Return depth of the BST, representing total levels.'''
+ 285:         return 0 if not (self.root) else self.root.height
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
  289:     
--------------------------------------------------------------------------------
[0.10480 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
>       var_0 = bst_0.depth()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:285: AttributeError
   - [#  40] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
  285:     
- 286:     def contains(self, val):
- 287:         '''Return true if val is in the bst.'''
- 288:         return self.search(val) is not None
- 289:     
+ 286:     @classmethod
+ 287:     def contains(self, val):
+ 288:         '''Return true if val is in the bst.'''
+ 289:         return self.search(val) is not None
  290:     def balance(self, tree=None):
  291:         '''Return an integer of how well the tree is balanced.
  292: 
  293:         Trees which are higher on the left than the right should return a
--------------------------------------------------------------------------------
[0.10153 s] incompetent

TypeError: binarySearchTree3:289: TypeError: Bst.search() missing 1 required positional argument: 'val'

   - [#  41] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
  289:     
- 290:     def balance(self, tree=None):
- 291:         '''Return an integer of how well the tree is balanced.
- 292: 
- 293:         Trees which are higher on the left than the right should return a
- 294:         positive value, trees which are higher on the right than the left
- 295:         should return a negative value. An ideally-balanced tree should
- 296:         return 0.
- 297:         '''
- 298:         if not tree:
- 299:             tree = self.root
- 300:             if not tree:
- 301:                 return 0
- 302:         
- 303:         leftbranch = 0 if not (tree.left) else tree.left.height
- 304:         rightbranch = 0 if not (tree.right) else tree.right.height
- 305:         
- 306:         return leftbranch - rightbranch
- 307:     
+ 290:     @classmethod
+ 291:     def balance(self, tree=None):
+ 292:         '''Return an integer of how well the tree is balanced.
+ 293: 
+ 294:         Trees which are higher on the left than the right should return a
+ 295:         positive value, trees which are higher on the right than the left
+ 296:         should return a negative value. An ideally-balanced tree should
+ 297:         return 0.
+ 298:         '''
+ 299:         if not tree:
+ 300:             tree = self.root
+ 301:             if not tree:
+ 302:                 return 0
+ 303:         
+ 304:         leftbranch = 0 if not (tree.left) else tree.left.height
+ 305:         rightbranch = 0 if not (tree.right) else tree.right.height
+ 306:         
+ 307:         return leftbranch - rightbranch
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
--------------------------------------------------------------------------------
[0.10707 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, tree = None

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:300: AttributeError
   - [#  42] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
- 308:     def pre_order(self, node='root'):
- 309:         '''Depth first pre-order traversal of tree.'''
- 310:         if node == 'root':
- 311:             node = self.root
- 312:         
- 313:         if not node:
- 314:             return
- 315:         
- 316:         yield node.val
- 317:         
- 318:         for n in self.pre_order(node=node.left):
- 319:             yield n
- 320:         for n in self.pre_order(node=node.right):
- 321:             yield n
- 322:     
+ 308:     @classmethod
+ 309:     def pre_order(self, node='root'):
+ 310:         '''Depth first pre-order traversal of tree.'''
+ 311:         if node == 'root':
+ 312:             node = self.root
+ 313:         
+ 314:         if not node:
+ 315:             return
+ 316:         
+ 317:         yield node.val
+ 318:         
+ 319:         for n in self.pre_order(node=node.left):
+ 320:             yield n
+ 321:         for n in self.pre_order(node=node.right):
+ 322:             yield n
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
--------------------------------------------------------------------------------
[0.13959 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_17

def test_case_17():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.pre_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, node = 'root'

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:312: AttributeError
   - [#  43] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
- 323:     def in_order(self, node='root'):
- 324:         '''Depth first in-order traversal of tree.'''
- 325:         if node == 'root':
- 326:             node = self.root
- 327:         
- 328:         if not node:
- 329:             return
- 330:         
- 331:         for n in self.in_order(node=node.left):
- 332:             yield n
- 333:         yield node.val
- 334:         for n in self.in_order(node=node.right):
- 335:             yield n
- 336:     
+ 323:     @classmethod
+ 324:     def in_order(self, node='root'):
+ 325:         '''Depth first in-order traversal of tree.'''
+ 326:         if node == 'root':
+ 327:             node = self.root
+ 328:         
+ 329:         if not node:
+ 330:             return
+ 331:         
+ 332:         for n in self.in_order(node=node.left):
+ 333:             yield n
+ 334:         yield node.val
+ 335:         for n in self.in_order(node=node.right):
+ 336:             yield n
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
--------------------------------------------------------------------------------
[0.11655 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
>       double_linked_list_0 = module_0.DoubleLinkedList(var_3)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, node = 'root'

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:327: AttributeError
   - [#  44] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
- 337:     def post_order(self, node='root'):
- 338:         '''Depth frist post_order traversal of tree.'''
- 339:         if node == 'root':
- 340:             node = self.root
- 341:         
- 342:         if not node:
- 343:             return
- 344:         
- 345:         for n in self.post_order(node=node.left):
- 346:             yield n
- 347:         for n in self.post_order(node=node.right):
- 348:             yield n
- 349:         yield node.val
- 350:     
+ 337:     @classmethod
+ 338:     def post_order(self, node='root'):
+ 339:         '''Depth frist post_order traversal of tree.'''
+ 340:         if node == 'root':
+ 341:             node = self.root
+ 342:         
+ 343:         if not node:
+ 344:             return
+ 345:         
+ 346:         for n in self.post_order(node=node.left):
+ 347:             yield n
+ 348:         for n in self.post_order(node=node.right):
+ 349:             yield n
+ 350:         yield node.val
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.11283 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>, node = 'root'

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:341: AttributeError
   - [#  45] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
  350:     
- 351:     def breadth_first(self):
- 352:         '''Breadth first traversal of tree.'''
- 353:         q = Queue()
- 354:         q.enqueue(self.root)
- 355:         while q.peek():
- 356:             node = q.dequeue()
- 357:             yield node.val
- 358:             if node.left:
- 359:                 q.enqueue(node.left)
- 360:             if node.right:
- 361:                 q.enqueue(node.right)
- 362:     
+ 351:     @classmethod
+ 352:     def breadth_first(self):
+ 353:         '''Breadth first traversal of tree.'''
+ 354:         q = Queue()
+ 355:         q.enqueue(self.root)
+ 356:         while q.peek():
+ 357:             node = q.dequeue()
+ 358:             yield node.val
+ 359:             if node.left:
+ 360:                 q.enqueue(node.left)
+ 361:             if node.right:
+ 362:                 q.enqueue(node.right)
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
  366:             return
--------------------------------------------------------------------------------
[0.09918 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

binarySearchTree3:355: AttributeError
   - [#  46] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  359:                 q.enqueue(node.left)
  360:             if node.right:
  361:                 q.enqueue(node.right)
  362:     
- 363:     def delete(self, val):
- 364:         '''Remove a node from the tree.'''
- 365:         if (self._size < 1 or not (self.contains(val))):
- 366:             return
- 367:         
- 368:         node = self.search(val)
- 369:         
- 370:         if node._is_leaf():
- 371:             if node.parent:
- 372:                 setattr(node.parent, node._side(), None)
- 373:             else:
- 374:                 self.root = None
- 375:         
- 376:         elif node._is_interior():
- 377:             next_node = self._find_replacement(node)
- 378:             self._size += 1
- 379:             self.delete(next_node.val)
- 380:             node.val = next_node.val
- 381:         else:
- 382:             
- 383:             child = getattr(node, node._onlychild())
- 384:             if node.parent:
- 385:                 child.parent = node.parent
- 386:                 setattr(node.parent, node._side(), child)
- 387:             else:
- 388:                 self.root = child
- 389:         
- 390:         self._size -= 1
- 391:     
+ 363:     @classmethod
+ 364:     def delete(self, val):
+ 365:         '''Remove a node from the tree.'''
+ 366:         if (self._size < 1 or not (self.contains(val))):
+ 367:             return
+ 368:         
+ 369:         node = self.search(val)
+ 370:         
+ 371:         if node._is_leaf():
+ 372:             if node.parent:
+ 373:                 setattr(node.parent, node._side(), None)
+ 374:             else:
+ 375:                 self.root = None
+ 376:         
+ 377:         elif node._is_interior():
+ 378:             next_node = self._find_replacement(node)
+ 379:             self._size += 1
+ 380:             self.delete(next_node.val)
+ 381:             node.val = next_node.val
+ 382:         else:
+ 383:             
+ 384:             child = getattr(node, node._onlychild())
+ 385:             if node.parent:
+ 386:                 child.parent = node.parent
+ 387:                 setattr(node.parent, node._side(), child)
+ 388:             else:
+ 389:                 self.root = child
+ 390:         
+ 391:         self._size -= 1
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
  395:             return self._findmin(node.right)
--------------------------------------------------------------------------------
[0.10503 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_1 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_2 = double_linked_list_0.push(double_linked_list_0)
        var_3 = double_linked_list_0.remove(double_linked_list_0)
        var_4 = bst_0.post_order(var_3)
        var_5 = bst_0.contains(double_linked_list_0)
        assert var_5 is False
>       var_6 = bst_0.delete(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binarySearchTree3.Bst'>
val = <binarySearchTree3.Bst object at 0x7fbd15067df0>

>   ???
E   AttributeError: type object 'Bst' has no attribute '_size'. Did you mean: 'size'?

binarySearchTree3:366: AttributeError
   - [#  47] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  388:                 self.root = child
  389:         
  390:         self._size -= 1
  391:     
- 392:     def _find_replacement(self, node):
- 393:         '''Find left most node of right subtree.'''
- 394:         if node.right:
- 395:             return self._findmin(node.right)
- 396:         
- 397:         elif node.parent:
- 398:             if node._side() == 'left':
- 399:                 return self.parent
- 400:             else:
- 401:                 node.parent.right = None
- 402:                 tmp = self._find_replacement(node.parent)
- 403:                 node.parent.right = node
- 404:                 return tmp
- 405:     
+ 392:     @classmethod
+ 393:     def _find_replacement(self, node):
+ 394:         '''Find left most node of right subtree.'''
+ 395:         if node.right:
+ 396:             return self._findmin(node.right)
+ 397:         
+ 398:         elif node.parent:
+ 399:             if node._side() == 'left':
+ 400:                 return self.parent
+ 401:             else:
+ 402:                 node.parent.right = None
+ 403:                 tmp = self._find_replacement(node.parent)
+ 404:                 node.parent.right = node
+ 405:                 return tmp
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
  409:             node = node.left
--------------------------------------------------------------------------------
[0.15477 s] survived
   - [#  48] CDI binarySearchTree3: 
--------------------------------------------------------------------------------
  402:                 tmp = self._find_replacement(node.parent)
  403:                 node.parent.right = node
  404:                 return tmp
  405:     
- 406:     def _findmin(self, node):
- 407:         '''Find min of subtree, Min is always left most node.'''
- 408:         while node.left:
- 409:             node = node.left
- 410:         return node
+ 406:     @classmethod
+ 407:     def _findmin(self, node):
+ 408:         '''Find min of subtree, Min is always left most node.'''
+ 409:         while node.left:
+ 410:             node = node.left
+ 411:         return node
--------------------------------------------------------------------------------
[0.15327 s] survived
   - [#  49] COD binarySearchTree3: 
--------------------------------------------------------------------------------
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
-  47:         if not (self.tail):
+  47:         if self.tail:
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
   51:     def pop(self):
--------------------------------------------------------------------------------
[0.10513 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:17: AssertionError
   - [#  50] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
- 169:         return not ((self.right or self.left))
+ 169:         return (self.right or self.left)
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
--------------------------------------------------------------------------------
[0.13636 s] incompetent

TypeError: binarySearchTree3:383: TypeError: getattr(): attribute name must be string

   - [#  51] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  173:         return (self.right and self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
- 177:         if (self.left and not (self.right)):
+ 177:         if (self.left and self.right):
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
--------------------------------------------------------------------------------
[0.15341 s] survived
   - [#  52] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
- 179:         if (self.right and not (self.left)):
+ 179:         if (self.right and self.left):
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.15457 s] survived
   - [#  53] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  235:                 self.insert(i)
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
- 239:         if not (self.root):
+ 239:         if self.root:
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
--------------------------------------------------------------------------------
[0.09571 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
>       var_2 = bst_0.insert(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:243: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15573520>, val = 0, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:247: AttributeError
   - [#  54] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  280:         return self._size
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
- 284:         return 0 if not (self.root) else self.root.height
+ 284:         return 0 if self.root else self.root.height
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.10438 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
>       var_0 = bst_0.depth()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14f7d600>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'height'

binarySearchTree3:284: AttributeError
   - [#  55] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  294:         positive value, trees which are higher on the right than the left
  295:         should return a negative value. An ideally-balanced tree should
  296:         return 0.
  297:         '''
- 298:         if not tree:
+ 298:         if tree:
  299:             tree = self.root
  300:             if not tree:
  301:                 return 0
  302:         
--------------------------------------------------------------------------------
[0.10728 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1526fe80>, tree = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:303: AttributeError
   - [#  56] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  296:         return 0.
  297:         '''
  298:         if not tree:
  299:             tree = self.root
- 300:             if not tree:
+ 300:             if tree:
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
--------------------------------------------------------------------------------
[0.11024 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [#  57] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  299:             tree = self.root
  300:             if not tree:
  301:                 return 0
  302:         
- 303:         leftbranch = 0 if not (tree.left) else tree.left.height
+ 303:         leftbranch = 0 if tree.left else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
--------------------------------------------------------------------------------
[0.10933 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [#  58] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  300:             if not tree:
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
- 304:         rightbranch = 0 if not (tree.right) else tree.right.height
+ 304:         rightbranch = 0 if tree.right else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
--------------------------------------------------------------------------------
[0.13822 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [#  59] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
  312:         
- 313:         if not node:
+ 313:         if node:
  314:             return
  315:         
  316:         yield node.val
  317:         
--------------------------------------------------------------------------------
[0.14397 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_12

def test_case_12():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.size()
        assert var_0 == 0
        var_1 = bst_0.pre_order()
        var_2 = bst_0.size()
        assert var_2 == 0
>       bst_1 = module_0.Bst(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:234: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15c087f0>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:316: AttributeError
   - [#  60] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
  327:         
- 328:         if not node:
+ 328:         if node:
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
--------------------------------------------------------------------------------
[0.11646 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
>       double_linked_list_0 = module_0.DoubleLinkedList(var_3)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1515d090>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:331: AttributeError
   - [#  61] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
  341:         
- 342:         if not node:
+ 342:         if node:
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
--------------------------------------------------------------------------------
[0.17416 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_21

def test_case_21():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.contains(bst_0)
        assert var_0 is False
        bool_0 = True
        var_1 = bst_0.contains(bool_0)
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_3 = bst_0.post_order()
        bst_1 = module_0.Bst(var_3)
        assert f'{type(bst_1).__module__}.{type(bst_1).__qualname__}' == 'binarySearchTree3.Bst'
>       assert f'{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}' == 'binarySearchTree3.Node'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:289: AssertionError
   - [#  62] COD binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
- 365:         if (self._size < 1 or not (self.contains(val))):
+ 365:         if (self._size < 1 or self.contains(val)):
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.11044 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.delete(bst_0)
>       assert bst_0.root is None
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:177: AssertionError
   - [#  63] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
-  38:             if data:
+  38:             if not data:
   39:                 self.push(data)
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
--------------------------------------------------------------------------------
[0.10288 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [#  64] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
-  45:         if old_head:
+  45:         if not old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
   49:         self._length += 1
--------------------------------------------------------------------------------
[0.09887 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd156d4580>, val = 0

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:46: AttributeError
   - [#  65] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
-  47:         if not (self.tail):
+  47:         if not ((not (self.tail))):
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
   51:     def pop(self):
--------------------------------------------------------------------------------
[0.10237 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:17: AssertionError
   - [#  66] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
-  54:         if self._length < 1:
+  54:         if not (self._length < 1):
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
--------------------------------------------------------------------------------
[0.12881 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15514f10>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
   - [#  67] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   54:         if self._length < 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
-  58:         if new_head:
+  58:         if not new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
   62:         if self._length < 1:
--------------------------------------------------------------------------------
[0.09985 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15c3e230>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:59: AttributeError
   - [#  68] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
-  62:         if self._length < 1:
+  62:         if not (self._length < 1):
   63:             self.tail = None
   64:         return to_return.data
   65:     
   66:     def append(self, val):
--------------------------------------------------------------------------------
[0.10223 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:76: AssertionError
   - [#  69] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
-  70:         if old_tail:
+  70:         if not old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
   74:         self._length += 1
--------------------------------------------------------------------------------
[0.13058 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:354: in breadth_first
    ???
binarySearchTree3:139: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15710eb0>
val = <binarySearchTree3.Node object at 0x7fbd157110c0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:71: AttributeError
   - [#  70] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
-  72:         if self._length < 1:
+  72:         if not (self._length < 1):
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
--------------------------------------------------------------------------------
[0.09991 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [#  71] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
-  79:         if self._length < 1:
+  79:         if not (self._length < 1):
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
--------------------------------------------------------------------------------
[0.10200 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
>       var_5 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15c04c40>

>   ???
E   IndexError: Cannot shift from an empty list.

binarySearchTree3:80: IndexError
   - [#  72] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   79:         if self._length < 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
-  83:         if new_tail:
+  83:         if not new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
   87:         if self._length < 1:
--------------------------------------------------------------------------------
[0.10128 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
>       var_5 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd156e17e0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:84: AttributeError
   - [#  73] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
-  87:         if self._length < 1:
+  87:         if not (self._length < 1):
   88:             self.tail = None
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
--------------------------------------------------------------------------------
[0.15369 s] survived
   - [#  74] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
-  94:         while curr:
+  94:         while not curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
--------------------------------------------------------------------------------
[0.13146 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd14f19a50>, val = None

>   ???
E   ValueError: None is not in the list

binarySearchTree3:108: ValueError
   - [#  75] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
-  95:             if curr.data is val:
+  95:             if not (curr.data is val):
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
--------------------------------------------------------------------------------
[0.10492 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_1 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_2 = double_linked_list_0.push(double_linked_list_0)
        var_3 = double_linked_list_0.remove(double_linked_list_0)
        var_4 = bst_0.post_order(var_3)
        var_5 = bst_0.contains(double_linked_list_0)
        assert var_5 is False
        var_6 = bst_0.delete(bst_0)
        var_7 = double_linked_list_0.shift()
        assert double_linked_list_0.tail is None
>       assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'binarySearchTree3.Bst'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:118: AssertionError
   - [#  76] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
-  96:                 if self._length == 1:
+  96:                 if not (self._length == 1):
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
--------------------------------------------------------------------------------
[0.10418 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_1 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_2 = double_linked_list_0.push(double_linked_list_0)
        var_3 = double_linked_list_0.remove(double_linked_list_0)
        var_4 = bst_0.post_order(var_3)
        var_5 = bst_0.contains(double_linked_list_0)
        assert var_5 is False
        var_6 = bst_0.delete(bst_0)
>       var_7 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd156e03d0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:82: AttributeError
   - [#  77] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
-  98:                 elif (curr is not self.head and curr is not self.tail):
+  98:                 elif not ((curr is not self.head and curr is not self.tail)):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.10217 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15642710>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:99: AttributeError
   - [#  78] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 100:                 elif curr is self.head:
+ 100:                 elif not (curr is self.head):
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
--------------------------------------------------------------------------------
[0.10549 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd158620e0>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:101: AttributeError
   - [#  79] COI binarySearchTree3: 
--------------------------------------------------------------------------------
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
- 102:                 elif curr is self.tail:
+ 102:                 elif not (curr is self.tail):
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
--------------------------------------------------------------------------------
[0.15438 s] survived
   - [#  80] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  109:     
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
- 113:         while True:
+ 113:         while not True:
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
--------------------------------------------------------------------------------
[0.15422 s] survived
   - [#  81] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  173:         return (self.right and self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
- 177:         if (self.left and not (self.right)):
+ 177:         if not ((self.left and not (self.right))):
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
--------------------------------------------------------------------------------
[0.15484 s] survived
   - [#  82] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
- 179:         if (self.right and not (self.left)):
+ 179:         if not ((self.right and not (self.left))):
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.22115 s] survived
   - [#  83] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
- 184:         if self.parent:
+ 184:         if not (self.parent):
  185:             return 'left' if self.parent.left == self else 'right'
  186: 
  187: 
  188: class Bst(object):
--------------------------------------------------------------------------------
[0.15238 s] incompetent

TypeError: binarySearchTree3:372: TypeError: attribute name must be string, not 'NoneType'

   - [#  84] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  229:         '''Initialize tree.'''
  230:         self._size = 0
  231:         self.root = None
  232:         
- 233:         if data:
+ 233:         if not data:
  234:             for i in data:
  235:                 self.insert(i)
  236:     
  237:     def insert(self, val):
--------------------------------------------------------------------------------
[0.09985 s] incompetent

TypeError: binarySearchTree3:234: TypeError: 'NoneType' object is not iterable

   - [#  85] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  235:                 self.insert(i)
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
- 239:         if not (self.root):
+ 239:         if not ((not (self.root))):
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
--------------------------------------------------------------------------------
[0.09978 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
>       var_2 = bst_0.insert(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:243: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd151b1450>, val = 0, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:247: AttributeError
   - [#  86] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
- 247:         if val < curr.val:
+ 247:         if not (val < curr.val):
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
--------------------------------------------------------------------------------
[0.10973 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [#  87] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
- 249:         elif val > curr.val:
+ 249:         elif not (val > curr.val):
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
--------------------------------------------------------------------------------
[0.14158 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [#  88] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
- 256:         if child:
+ 256:         if not child:
  257:             count = self._step(val, child)
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
--------------------------------------------------------------------------------
[0.10725 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
binarySearchTree3:257: in _set_child
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd156d4190>, val = 57, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:247: AttributeError
   - [#  89] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
  257:             count = self._step(val, child)
- 258:             if curr.height <= count:
+ 258:             if not (curr.height <= count):
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
--------------------------------------------------------------------------------
[0.10906 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [#  90] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
- 263:             if curr.height == 1:
+ 263:             if not (curr.height == 1):
  264:                 curr.height += 1
  265:         return curr
  266:     
  267:     def search(self, val):
--------------------------------------------------------------------------------
[0.15055 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_6

def test_case_6():
        bytes_0 = b'\xd0\x08\x1b$\xda'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.in_order()
        var_1 = bst_0.depth()
        assert var_1 == 4
        var_2 = bst_0.balance()
>       assert var_2 == 2
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:83: AssertionError
   - [#  91] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
- 270:         while curr:
+ 270:         while not curr:
  271:             if curr.val == val:
  272:                 return curr
  273:             elif val < curr.val:
  274:                 curr = curr.left
--------------------------------------------------------------------------------
[0.10318 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_4 = bst_0.contains(var_2)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:288: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15c16860>
val = <generator object Bst.in_order at 0x7fbd158b4a50>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:271: AttributeError
   - [#  92] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
- 271:             if curr.val == val:
+ 271:             if not (curr.val == val):
  272:                 return curr
  273:             elif val < curr.val:
  274:                 curr = curr.left
  275:             else:
--------------------------------------------------------------------------------
[0.10954 s] incompetent

TypeError: binarySearchTree3:273: TypeError: '<' not supported between instances of 'Bst' and 'Bst'

   - [#  93] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  269:         curr = self.root
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
- 273:             elif val < curr.val:
+ 273:             elif not (val < curr.val):
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
  277:     
--------------------------------------------------------------------------------
[0.15699 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [#  94] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  294:         positive value, trees which are higher on the right than the left
  295:         should return a negative value. An ideally-balanced tree should
  296:         return 0.
  297:         '''
- 298:         if not tree:
+ 298:         if not ((not tree)):
  299:             tree = self.root
  300:             if not tree:
  301:                 return 0
  302:         
--------------------------------------------------------------------------------
[0.10778 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14f11f00>, tree = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:303: AttributeError
   - [#  95] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  296:         return 0.
  297:         '''
  298:         if not tree:
  299:             tree = self.root
- 300:             if not tree:
+ 300:             if not ((not tree)):
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
--------------------------------------------------------------------------------
[0.13745 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [#  96] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
- 310:         if node == 'root':
+ 310:         if not (node == 'root'):
  311:             node = self.root
  312:         
  313:         if not node:
  314:             return
--------------------------------------------------------------------------------
[0.10717 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_17

def test_case_17():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.pre_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15037970>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
   - [#  97] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
  312:         
- 313:         if not node:
+ 313:         if not ((not node)):
  314:             return
  315:         
  316:         yield node.val
  317:         
--------------------------------------------------------------------------------
[0.14149 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_12

def test_case_12():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.size()
        assert var_0 == 0
        var_1 = bst_0.pre_order()
        var_2 = bst_0.size()
        assert var_2 == 0
>       bst_1 = module_0.Bst(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:234: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1512cd60>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:316: AttributeError
   - [#  98] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
- 325:         if node == 'root':
+ 325:         if not (node == 'root'):
  326:             node = self.root
  327:         
  328:         if not node:
  329:             return
--------------------------------------------------------------------------------
[0.14586 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
>       double_linked_list_0 = module_0.DoubleLinkedList(var_3)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14fb6890>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
   - [#  99] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
  327:         
- 328:         if not node:
+ 328:         if not ((not node)):
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
--------------------------------------------------------------------------------
[0.11691 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
>       double_linked_list_0 = module_0.DoubleLinkedList(var_3)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15782b30>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:331: AttributeError
   - [# 100] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
- 339:         if node == 'root':
+ 339:         if not (node == 'root'):
  340:             node = self.root
  341:         
  342:         if not node:
  343:             return
--------------------------------------------------------------------------------
[0.11141 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1553f6a0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
   - [# 101] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
  341:         
- 342:         if not node:
+ 342:         if not ((not node)):
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
--------------------------------------------------------------------------------
[0.12552 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_21

def test_case_21():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.contains(bst_0)
        assert var_0 is False
        bool_0 = True
        var_1 = bst_0.contains(bool_0)
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_3 = bst_0.post_order()
        bst_1 = module_0.Bst(var_3)
        assert f'{type(bst_1).__module__}.{type(bst_1).__qualname__}' == 'binarySearchTree3.Bst'
>       assert f'{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}' == 'binarySearchTree3.Node'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:289: AssertionError
   - [# 102] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
- 355:         while q.peek():
+ 355:         while not (q.peek()):
  356:             node = q.dequeue()
  357:             yield node.val
  358:             if node.left:
  359:                 q.enqueue(node.left)
--------------------------------------------------------------------------------
[0.10017 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 103] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  354:         q.enqueue(self.root)
  355:         while q.peek():
  356:             node = q.dequeue()
  357:             yield node.val
- 358:             if node.left:
+ 358:             if not (node.left):
  359:                 q.enqueue(node.left)
  360:             if node.right:
  361:                 q.enqueue(node.right)
  362:     
--------------------------------------------------------------------------------
[0.14949 s] survived
   - [# 104] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  356:             node = q.dequeue()
  357:             yield node.val
  358:             if node.left:
  359:                 q.enqueue(node.left)
- 360:             if node.right:
+ 360:             if not (node.right):
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
--------------------------------------------------------------------------------
[0.15320 s] survived
   - [# 105] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
- 365:         if (self._size < 1 or not (self.contains(val))):
+ 365:         if not ((self._size < 1 or not (self.contains(val)))):
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.10248 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_1 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_2 = double_linked_list_0.push(double_linked_list_0)
        var_3 = double_linked_list_0.remove(double_linked_list_0)
        var_4 = bst_0.post_order(var_3)
        var_5 = bst_0.contains(double_linked_list_0)
        assert var_5 is False
>       var_6 = bst_0.delete(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1547a650>
val = <binarySearchTree3.Bst object at 0x7fbd1547a650>

>   ???
E   AttributeError: 'NoneType' object has no attribute '_is_leaf'

binarySearchTree3:370: AttributeError
   - [# 106] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
- 370:         if node._is_leaf():
+ 370:         if not (node._is_leaf()):
  371:             if node.parent:
  372:                 setattr(node.parent, node._side(), None)
  373:             else:
  374:                 self.root = None
--------------------------------------------------------------------------------
[0.14008 s] incompetent

TypeError: binarySearchTree3:383: TypeError: getattr(): attribute name must be string

   - [# 107] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  367:         
  368:         node = self.search(val)
  369:         
  370:         if node._is_leaf():
- 371:             if node.parent:
+ 371:             if not (node.parent):
  372:                 setattr(node.parent, node._side(), None)
  373:             else:
  374:                 self.root = None
  375:         
--------------------------------------------------------------------------------
[0.10540 s] incompetent

TypeError: binarySearchTree3:372: TypeError: attribute name must be string, not 'NoneType'

   - [# 108] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  372:                 setattr(node.parent, node._side(), None)
  373:             else:
  374:                 self.root = None
  375:         
- 376:         elif node._is_interior():
+ 376:         elif not (node._is_interior()):
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
--------------------------------------------------------------------------------
[0.14970 s] survived
   - [# 109] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  380:             node.val = next_node.val
  381:         else:
  382:             
  383:             child = getattr(node, node._onlychild())
- 384:             if node.parent:
+ 384:             if not (node.parent):
  385:                 child.parent = node.parent
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
  388:                 self.root = child
--------------------------------------------------------------------------------
[0.15026 s] survived
   - [# 110] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  390:         self._size -= 1
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
- 394:         if node.right:
+ 394:         if not (node.right):
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
  398:             if node._side() == 'left':
--------------------------------------------------------------------------------
[0.15415 s] survived
   - [# 111] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
  395:             return self._findmin(node.right)
  396:         
- 397:         elif node.parent:
+ 397:         elif not (node.parent):
  398:             if node._side() == 'left':
  399:                 return self.parent
  400:             else:
  401:                 node.parent.right = None
--------------------------------------------------------------------------------
[0.15373 s] survived
   - [# 112] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  394:         if node.right:
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
- 398:             if node._side() == 'left':
+ 398:             if not (node._side() == 'left'):
  399:                 return self.parent
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
--------------------------------------------------------------------------------
[0.15300 s] survived
   - [# 113] COI binarySearchTree3: 
--------------------------------------------------------------------------------
  404:                 return tmp
  405:     
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
- 408:         while node.left:
+ 408:         while not (node.left):
  409:             node = node.left
  410:         return node
--------------------------------------------------------------------------------
[0.15420 s] survived
   - [# 114] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
-  14:         return 'Value: {}'.format(self.data)
+  14:         return 'mutpy'.format(self.data)
   15: 
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[0.14047 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_25

def test_case_25():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        node_d_l_l_0 = module_0.NodeDLL()
        var_0 = node_d_l_l_0.__repr__()
>       assert var_0 == 'Value: None'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:287: AssertionError
   - [# 115] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
-  14:         return 'Value: {}'.format(self.data)
+  14:         return ''.format(self.data)
   15: 
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[0.11299 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_25

def test_case_25():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        node_d_l_l_0 = module_0.NodeDLL()
        var_0 = node_d_l_l_0.__repr__()
>       assert var_0 == 'Value: None'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:287: AssertionError
   - [# 116] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
   31:         self.head = None
   32:         self.tail = None
-  33:         self._length = 0
+  33:         self._length = 1
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
--------------------------------------------------------------------------------
[0.10002 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 117] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
-  49:         self._length += 1
+  49:         self._length += 2
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
--------------------------------------------------------------------------------
[0.12376 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_10

def test_case_10():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.push(double_linked_list_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_1 = double_linked_list_0.remove(double_linked_list_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd157b0850>
val = <binarySearchTree3.DoubleLinkedList object at 0x7fbd157b0850>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:101: AttributeError
   - [# 118] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
-  54:         if self._length < 1:
+  54:         if self._length < 2:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
--------------------------------------------------------------------------------
[0.10023 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd154da590>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
   - [# 119] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
   54:         if self._length < 1:
-  55:             raise IndexError('Cannot pop from an empty list.')
+  55:             raise IndexError('mutpy')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
--------------------------------------------------------------------------------
[0.15426 s] survived
   - [# 120] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
   54:         if self._length < 1:
-  55:             raise IndexError('Cannot pop from an empty list.')
+  55:             raise IndexError('')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
--------------------------------------------------------------------------------
[0.15647 s] survived
   - [# 121] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
-  61:         self._length -= 1
+  61:         self._length -= 2
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
--------------------------------------------------------------------------------
[0.10279 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:76: AssertionError
   - [# 122] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
-  62:         if self._length < 1:
+  62:         if self._length < 2:
   63:             self.tail = None
   64:         return to_return.data
   65:     
   66:     def append(self, val):
--------------------------------------------------------------------------------
[0.13126 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:76: AssertionError
   - [# 123] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
-  72:         if self._length < 1:
+  72:         if self._length < 2:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
--------------------------------------------------------------------------------
[0.10382 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15da3e20>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:101: AttributeError
   - [# 124] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
-  74:         self._length += 1
+  74:         self._length += 2
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
--------------------------------------------------------------------------------
[0.10523 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_10

def test_case_10():
        int_0 = 76
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(int_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_1 = double_linked_list_0.remove(int_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15269870>, val = 76

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:101: AttributeError
   - [# 125] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
-  79:         if self._length < 1:
+  79:         if self._length < 2:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
--------------------------------------------------------------------------------
[0.10289 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
>       var_5 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd150f5540>

>   ???
E   IndexError: Cannot shift from an empty list.

binarySearchTree3:80: IndexError
   - [# 126] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
   79:         if self._length < 1:
-  80:             raise IndexError('Cannot shift from an empty list.')
+  80:             raise IndexError('mutpy')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
--------------------------------------------------------------------------------
[0.15364 s] survived
   - [# 127] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
   79:         if self._length < 1:
-  80:             raise IndexError('Cannot shift from an empty list.')
+  80:             raise IndexError('')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
--------------------------------------------------------------------------------
[0.15450 s] survived
   - [# 128] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
-  86:         self._length -= 1
+  86:         self._length -= 2
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
--------------------------------------------------------------------------------
[0.15363 s] survived
   - [# 129] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
-  87:         if self._length < 1:
+  87:         if self._length < 2:
   88:             self.tail = None
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
--------------------------------------------------------------------------------
[0.15445 s] survived
   - [# 130] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
-  96:                 if self._length == 1:
+  96:                 if self._length == 2:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
--------------------------------------------------------------------------------
[0.13466 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_1 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_2 = double_linked_list_0.push(double_linked_list_0)
        var_3 = double_linked_list_0.remove(double_linked_list_0)
        var_4 = bst_0.post_order(var_3)
        var_5 = bst_0.contains(double_linked_list_0)
        assert var_5 is False
        var_6 = bst_0.delete(bst_0)
>       var_7 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd14fffe80>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:82: AttributeError
   - [# 131] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 104:                 self._length -= 1
+ 104:                 self._length -= 2
  105:                 return
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
--------------------------------------------------------------------------------
[0.10403 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_1 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_2 = double_linked_list_0.push(double_linked_list_0)
        var_3 = double_linked_list_0.remove(double_linked_list_0)
        var_4 = bst_0.post_order(var_3)
        var_5 = bst_0.contains(double_linked_list_0)
        assert var_5 is False
        var_6 = bst_0.delete(bst_0)
>       var_7 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1551a470>

>   ???
E   IndexError: Cannot shift from an empty list.

binarySearchTree3:80: IndexError
   - [# 132] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
  107:         
- 108:         raise ValueError('{} is not in the list'.format(val))
+ 108:         raise ValueError('mutpy'.format(val))
  109:     
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
--------------------------------------------------------------------------------
[0.15275 s] survived
   - [# 133] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
  107:         
- 108:         raise ValueError('{} is not in the list'.format(val))
+ 108:         raise ValueError(''.format(val))
  109:     
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
--------------------------------------------------------------------------------
[0.15397 s] survived
   - [# 134] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  161:         self.val = val
  162:         self.right = None
  163:         self.left = None
  164:         self.parent = parent
- 165:         self.height = 1
+ 165:         self.height = 2
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
--------------------------------------------------------------------------------
[0.12009 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_27

def test_case_27():
        node_0 = module_0.Node()
>       assert node_0.height == 1
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:307: AssertionError
   - [# 135] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
- 178:             return 'left'
+ 178:             return 'mutpy'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
  182:     def _side(self):
--------------------------------------------------------------------------------
[0.15377 s] survived
   - [# 136] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
- 178:             return 'left'
+ 178:             return ''
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
  182:     def _side(self):
--------------------------------------------------------------------------------
[0.15347 s] survived
   - [# 137] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
  179:         if (self.right and not (self.left)):
- 180:             return 'right'
+ 180:             return 'mutpy'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
--------------------------------------------------------------------------------
[0.14919 s] survived
   - [# 138] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
  179:         if (self.right and not (self.left)):
- 180:             return 'right'
+ 180:             return ''
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
--------------------------------------------------------------------------------
[0.15440 s] survived
   - [# 139] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
- 185:             return 'left' if self.parent.left == self else 'right'
+ 185:             return 'mutpy' if self.parent.left == self else 'right'
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.15629 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [# 140] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
- 185:             return 'left' if self.parent.left == self else 'right'
+ 185:             return '' if self.parent.left == self else 'right'
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.15753 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [# 141] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
- 185:             return 'left' if self.parent.left == self else 'right'
+ 185:             return 'left' if self.parent.left == self else 'mutpy'
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.18647 s] survived
   - [# 142] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
- 185:             return 'left' if self.parent.left == self else 'right'
+ 185:             return 'left' if self.parent.left == self else ''
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.15425 s] survived
   - [# 143] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  226:     '''
  227:     
  228:     def __init__(self, data=None):
  229:         '''Initialize tree.'''
- 230:         self._size = 0
+ 230:         self._size = 1
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
--------------------------------------------------------------------------------
[0.10233 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
>       assert var_1 == 0
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:11: AssertionError
   - [# 144] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
- 241:             self._size += 1
+ 241:             self._size += 2
  242:         else:
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
--------------------------------------------------------------------------------
[0.12552 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_14

def test_case_14():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.size()
>       assert var_1 == 1
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:179: AssertionError
   - [# 145] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
- 248:             curr = self._set_child(curr, 'left', val)
+ 248:             curr = self._set_child(curr, 'mutpy', val)
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
--------------------------------------------------------------------------------
[0.10814 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd155193f0>
curr = <binarySearchTree3.Node object at 0x7fbd1551b790>, side = 'mutpy'
val = 57

>   ???
E   AttributeError: 'Node' object has no attribute 'mutpy'

binarySearchTree3:255: AttributeError
   - [# 146] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
- 248:             curr = self._set_child(curr, 'left', val)
+ 248:             curr = self._set_child(curr, '', val)
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
--------------------------------------------------------------------------------
[0.13609 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15204160>
curr = <binarySearchTree3.Node object at 0x7fbd15204190>, side = '', val = 57

>   ???
E   AttributeError: 'Node' object has no attribute ''

binarySearchTree3:255: AttributeError
   - [# 147] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
- 250:             curr = self._set_child(curr, 'right', val)
+ 250:             curr = self._set_child(curr, 'mutpy', val)
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
--------------------------------------------------------------------------------
[0.10803 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:250: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1583fc70>
curr = <binarySearchTree3.Node object at 0x7fbd1583eaa0>, side = 'mutpy'
val = 113

>   ???
E   AttributeError: 'Node' object has no attribute 'mutpy'

binarySearchTree3:255: AttributeError
   - [# 148] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
- 250:             curr = self._set_child(curr, 'right', val)
+ 250:             curr = self._set_child(curr, '', val)
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
--------------------------------------------------------------------------------
[0.11138 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:250: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd159be530>
curr = <binarySearchTree3.Node object at 0x7fbd159be560>, side = '', val = 113

>   ???
E   AttributeError: 'Node' object has no attribute ''

binarySearchTree3:255: AttributeError
   - [# 149] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  255:         child = getattr(curr, side)
  256:         if child:
  257:             count = self._step(val, child)
  258:             if curr.height <= count:
- 259:                 curr.height += 1
+ 259:                 curr.height += 2
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
  263:             if curr.height == 1:
--------------------------------------------------------------------------------
[0.13856 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 150] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
- 262:             self._size += 1
+ 262:             self._size += 2
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
  266:     
--------------------------------------------------------------------------------
[0.15656 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [# 151] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
- 263:             if curr.height == 1:
+ 263:             if curr.height == 2:
  264:                 curr.height += 1
  265:         return curr
  266:     
  267:     def search(self, val):
--------------------------------------------------------------------------------
[0.12141 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_6

def test_case_6():
        bytes_0 = b'\xd0\x08\x1b$\xda'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.in_order()
        var_1 = bst_0.depth()
>       assert var_1 == 4
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:81: AssertionError
   - [# 152] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
  263:             if curr.height == 1:
- 264:                 curr.height += 1
+ 264:                 curr.height += 2
  265:         return curr
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
--------------------------------------------------------------------------------
[0.12077 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_6

def test_case_6():
        bytes_0 = b'\xd0\x08\x1b$\xda'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.in_order()
        var_1 = bst_0.depth()
>       assert var_1 == 4
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:81: AssertionError
   - [# 153] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  280:         return self._size
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
- 284:         return 0 if not (self.root) else self.root.height
+ 284:         return 1 if not (self.root) else self.root.height
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.10336 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
>       assert var_0 == 0
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:103: AssertionError
   - [# 154] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  297:         '''
  298:         if not tree:
  299:             tree = self.root
  300:             if not tree:
- 301:                 return 0
+ 301:                 return 1
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
--------------------------------------------------------------------------------
[0.14156 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_21

def test_case_21():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_2 = double_linked_list_0.push(double_linked_list_0)
        var_3 = double_linked_list_0.remove(double_linked_list_0)
        var_4 = bst_0.balance()
>       assert var_4 == 0
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:253: AssertionError
   - [# 155] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  299:             tree = self.root
  300:             if not tree:
  301:                 return 0
  302:         
- 303:         leftbranch = 0 if not (tree.left) else tree.left.height
+ 303:         leftbranch = 1 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
--------------------------------------------------------------------------------
[0.11069 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
        queue_0 = module_0.Queue(var_1)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.balance()
>       assert var_2 == 0
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:228: AssertionError
   - [# 156] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  300:             if not tree:
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
- 304:         rightbranch = 0 if not (tree.right) else tree.right.height
+ 304:         rightbranch = 1 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
--------------------------------------------------------------------------------
[0.11068 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
        queue_0 = module_0.Queue(var_1)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.balance()
>       assert var_2 == 0
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:228: AssertionError
   - [# 157] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
- 308:     def pre_order(self, node='root'):
+ 308:     def pre_order(self, node='mutpy'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
  312:         
--------------------------------------------------------------------------------
[0.13979 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_17

def test_case_17():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.pre_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15301690>, node = 'mutpy'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
   - [# 158] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
- 308:     def pre_order(self, node='root'):
+ 308:     def pre_order(self, node=''):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
  312:         
--------------------------------------------------------------------------------
[0.15399 s] survived
   - [# 159] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
- 310:         if node == 'root':
+ 310:         if node == 'mutpy':
  311:             node = self.root
  312:         
  313:         if not node:
  314:             return
--------------------------------------------------------------------------------
[0.10973 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_17

def test_case_17():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.pre_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15295f60>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
   - [# 160] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
- 310:         if node == 'root':
+ 310:         if node == '':
  311:             node = self.root
  312:         
  313:         if not node:
  314:             return
--------------------------------------------------------------------------------
[0.11328 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_17

def test_case_17():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.pre_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15168b50>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
   - [# 161] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
- 323:     def in_order(self, node='root'):
+ 323:     def in_order(self, node='mutpy'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
  327:         
--------------------------------------------------------------------------------
[0.12087 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
>       double_linked_list_0 = module_0.DoubleLinkedList(var_3)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15c08610>, node = 'mutpy'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
   - [# 162] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
- 323:     def in_order(self, node='root'):
+ 323:     def in_order(self, node=''):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
  327:         
--------------------------------------------------------------------------------
[0.12463 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_35

def test_case_35():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.in_order()
        queue_0 = module_0.Queue(var_1)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = queue_0.peek()
>       assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree3.Bst'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:434: AssertionError
   - [# 163] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
- 325:         if node == 'root':
+ 325:         if node == 'mutpy':
  326:             node = self.root
  327:         
  328:         if not node:
  329:             return
--------------------------------------------------------------------------------
[0.11675 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
>       double_linked_list_0 = module_0.DoubleLinkedList(var_3)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15bf8940>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
   - [# 164] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
- 325:         if node == 'root':
+ 325:         if node == '':
  326:             node = self.root
  327:         
  328:         if not node:
  329:             return
--------------------------------------------------------------------------------
[0.11633 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
>       double_linked_list_0 = module_0.DoubleLinkedList(var_3)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd156147c0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
   - [# 165] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
- 337:     def post_order(self, node='root'):
+ 337:     def post_order(self, node='mutpy'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
  341:         
--------------------------------------------------------------------------------
[0.14297 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd155369b0>, node = 'mutpy'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
   - [# 166] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
- 337:     def post_order(self, node='root'):
+ 337:     def post_order(self, node=''):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
  341:         
--------------------------------------------------------------------------------
[0.12918 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_21

def test_case_21():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.contains(bst_0)
        assert var_0 is False
        bool_0 = True
        var_1 = bst_0.contains(bool_0)
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_3 = bst_0.post_order()
        bst_1 = module_0.Bst(var_3)
        assert f'{type(bst_1).__module__}.{type(bst_1).__qualname__}' == 'binarySearchTree3.Bst'
>       assert f'{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}' == 'binarySearchTree3.Node'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:289: AssertionError
   - [# 167] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
- 339:         if node == 'root':
+ 339:         if node == 'mutpy':
  340:             node = self.root
  341:         
  342:         if not node:
  343:             return
--------------------------------------------------------------------------------
[0.11232 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd154b6440>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
   - [# 168] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
- 339:         if node == 'root':
+ 339:         if node == '':
  340:             node = self.root
  341:         
  342:         if not node:
  343:             return
--------------------------------------------------------------------------------
[0.11150 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd156d7d90>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
   - [# 169] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
- 365:         if (self._size < 1 or not (self.contains(val))):
+ 365:         if (self._size < 2 or not (self.contains(val))):
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.11037 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.delete(bst_0)
>       assert bst_0.root is None
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:177: AssertionError
   - [# 170] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
- 378:             self._size += 1
+ 378:             self._size += 2
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
  382:             
--------------------------------------------------------------------------------
[0.15423 s] survived
   - [# 171] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
  388:                 self.root = child
  389:         
- 390:         self._size -= 1
+ 390:         self._size -= 2
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
--------------------------------------------------------------------------------
[0.15681 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [# 172] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  394:         if node.right:
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
- 398:             if node._side() == 'left':
+ 398:             if node._side() == 'mutpy':
  399:                 return self.parent
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
--------------------------------------------------------------------------------
[0.15367 s] survived
   - [# 173] CRP binarySearchTree3: 
--------------------------------------------------------------------------------
  394:         if node.right:
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
- 398:             if node._side() == 'left':
+ 398:             if node._side() == '':
  399:                 return self.parent
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
--------------------------------------------------------------------------------
[0.15169 s] survived
   - [# 174] EHD binarySearchTree3: 
--------------------------------------------------------------------------------
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
-  38:             if data:
-  39:                 self.push(data)
+  38:             raise
+  39:     
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
--------------------------------------------------------------------------------
[0.10319 s] incompetent

TypeError: binarySearchTree3:35: TypeError: 'NoneType' object is not iterable

   - [# 175] EHD binarySearchTree3: 
--------------------------------------------------------------------------------
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
- 118:                 break
+ 118:                 raise
  119:         return l
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
--------------------------------------------------------------------------------
[0.15311 s] survived
   - [# 176] EHD binarySearchTree3: 
--------------------------------------------------------------------------------
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
  148:             return self._container.head.data
  149:         except AttributeError:
- 150:             return None
+ 150:             raise
  151:     
  152:     def size(self):
  153:         '''Return the size of the queue.'''
  154:         return self._container._length
--------------------------------------------------------------------------------
[0.10382 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:355: in breadth_first
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7fbd14ff3820>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

binarySearchTree3:148: AttributeError
   - [# 177] EXS binarySearchTree3: 
--------------------------------------------------------------------------------
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
-  38:             if data:
-  39:                 self.push(data)
+  38:             pass
+  39:     
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
--------------------------------------------------------------------------------
[0.09976 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:26: AssertionError
   - [# 178] EXS binarySearchTree3: 
--------------------------------------------------------------------------------
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
- 118:                 break
+ 118:                 pass
  119:         return l
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
--------------------------------------------------------------------------------
[0.15420 s] survived
   - [# 179] EXS binarySearchTree3: 
--------------------------------------------------------------------------------
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
  148:             return self._container.head.data
  149:         except AttributeError:
- 150:             return None
+ 150:             pass
  151:     
  152:     def size(self):
  153:         '''Return the size of the queue.'''
  154:         return self._container._length
--------------------------------------------------------------------------------
[0.15374 s] survived
   - [# 180] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
-  98:                 elif (curr is not self.head and curr is not self.tail):
+  98:                 elif (curr is not self.head or curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.10214 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd156fa980>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:99: AttributeError
   - [# 181] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
- 169:         return not ((self.right or self.left))
+ 169:         return not ((self.right and self.left))
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
--------------------------------------------------------------------------------
[0.18549 s] survived
   - [# 182] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
  169:         return not ((self.right or self.left))
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
- 173:         return (self.right and self.left)
+ 173:         return (self.right or self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.15406 s] survived
   - [# 183] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
  173:         return (self.right and self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
- 177:         if (self.left and not (self.right)):
+ 177:         if (self.left or not (self.right)):
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
--------------------------------------------------------------------------------
[0.15464 s] survived
   - [# 184] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
- 179:         if (self.right and not (self.left)):
+ 179:         if (self.right or not (self.left)):
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.15336 s] survived
   - [# 185] LCR binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
- 365:         if (self._size < 1 or not (self.contains(val))):
+ 365:         if (self._size < 1 and not (self.contains(val))):
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.11259 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_16

def test_case_16():
        bool_0 = False
        bytes_0 = b'\xa6"\x8b\xdam\xe3\x8fL\xeb\xcb\xeb\x95\xec'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.delete(bool_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15c06ad0>, val = False

>   ???
E   AttributeError: 'NoneType' object has no attribute '_is_leaf'

binarySearchTree3:370: AttributeError
   - [# 186] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
   33:         self._length = 0
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
-  37:         except TypeError:
+  37:                 breakexcept TypeError:
   38:             if data:
   39:                 self.push(data)
   40:     
   41:     def push(self, val):
--------------------------------------------------------------------------------
[0.12148 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_7

def test_case_7():
        bytes_0 = b'5\x98{\xa7\x1f8CA\x8cr\x06\x98\x0bY\xad'
        double_linked_list_0 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.pop()
>       assert var_0 == 173
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:96: AssertionError
   - [# 187] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
- 107:         
+ 107:             break
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
--------------------------------------------------------------------------------
[0.10241 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15519cc0>, val = None

>   ???
E   ValueError: None is not in the list

binarySearchTree3:108: ValueError
   - [# 188] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
- 118:                 break
+ 118:                 breakbreak
  119:         return l
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
--------------------------------------------------------------------------------
[0.15460 s] survived
   - [# 189] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  232:         
  233:         if data:
  234:             for i in data:
  235:                 self.insert(i)
- 236:     
+ 236:                 break
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
--------------------------------------------------------------------------------
[0.14568 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 190] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  272:                 return curr
  273:             elif val < curr.val:
  274:                 curr = curr.left
  275:             else:
- 276:                 curr = curr.right
+ 276:                 curr = curr.rightbreak
  277:     
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
--------------------------------------------------------------------------------
[0.15724 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [# 191] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
- 320:         for n in self.pre_order(node=node.right):
- 321:             yield n
- 322:     
+ 320:             break
+ 321:         for n in self.pre_order(node=node.right):
+ 322:             yield n
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
--------------------------------------------------------------------------------
[0.15529 s] survived
   - [# 192] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
- 322:     
+ 322:             break
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
--------------------------------------------------------------------------------
[0.18655 s] survived
   - [# 193] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
- 333:         yield node.val
- 334:         for n in self.in_order(node=node.right):
- 335:             yield n
- 336:     
+ 333:             break
+ 334:         yield node.val
+ 335:         for n in self.in_order(node=node.right):
+ 336:             yield n
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
--------------------------------------------------------------------------------
[0.15386 s] survived
   - [# 194] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  332:             yield n
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
- 336:     
+ 336:             break
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
--------------------------------------------------------------------------------
[0.15417 s] survived
   - [# 195] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
- 347:         for n in self.post_order(node=node.right):
- 348:             yield n
- 349:         yield node.val
- 350:     
+ 347:             break
+ 348:         for n in self.post_order(node=node.right):
+ 349:             yield n
+ 350:         yield node.val
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.15365 s] survived
   - [# 196] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  345:         for n in self.post_order(node=node.left):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
  348:             yield n
- 349:         yield node.val
- 350:     
+ 349:             break
+ 350:         yield node.val
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.15428 s] survived
   - [# 197] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  358:             if node.left:
  359:                 q.enqueue(node.left)
  360:             if node.right:
  361:                 q.enqueue(node.right)
- 362:     
+ 362:             break
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
  366:             return
--------------------------------------------------------------------------------
[0.18798 s] survived
   - [# 198] OIL binarySearchTree3: 
--------------------------------------------------------------------------------
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
  409:             node = node.left
- 410:         return node
+ 410:             break
+ 411:         return node
--------------------------------------------------------------------------------
[0.15462 s] survived
   - [# 199] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
   31:         self.head = None
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
-  35:             for val in data:
+  35:             for val in reversed(data):
   36:                 self.push(val)
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
--------------------------------------------------------------------------------
[0.11631 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
        double_linked_list_0 = module_0.DoubleLinkedList(var_3)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert double_linked_list_0.head is None
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:345: AssertionError
   - [# 200] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  230:         self._size = 0
  231:         self.root = None
  232:         
  233:         if data:
- 234:             for i in data:
+ 234:             for i in reversed(data):
  235:                 self.insert(i)
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
--------------------------------------------------------------------------------
[0.10933 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 201] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  314:             return
  315:         
  316:         yield node.val
  317:         
- 318:         for n in self.pre_order(node=node.left):
+ 318:         for n in reversed(self.pre_order(node=node.left)):
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
--------------------------------------------------------------------------------
[0.15724 s] survived
   - [# 202] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
- 320:         for n in self.pre_order(node=node.right):
+ 320:         for n in reversed(self.pre_order(node=node.right)):
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
--------------------------------------------------------------------------------
[0.15426 s] survived
   - [# 203] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  327:         
  328:         if not node:
  329:             return
  330:         
- 331:         for n in self.in_order(node=node.left):
+ 331:         for n in reversed(self.in_order(node=node.left)):
  332:             yield n
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
--------------------------------------------------------------------------------
[0.11906 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_35

def test_case_35():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.in_order()
        queue_0 = module_0.Queue(var_1)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = queue_0.peek()
>       assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree3.Bst'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:434: AssertionError
   - [# 204] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
  333:         yield node.val
- 334:         for n in self.in_order(node=node.right):
+ 334:         for n in reversed(self.in_order(node=node.right)):
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
--------------------------------------------------------------------------------
[0.11944 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_35

def test_case_35():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.in_order()
        queue_0 = module_0.Queue(var_1)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = queue_0.peek()
>       assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree3.Bst'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:434: AssertionError
   - [# 205] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  341:         
  342:         if not node:
  343:             return
  344:         
- 345:         for n in self.post_order(node=node.left):
+ 345:         for n in reversed(self.post_order(node=node.left)):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
--------------------------------------------------------------------------------
[0.16130 s] incompetent

TypeError: binarySearchTree3:345: TypeError: 'generator' object is not reversible

   - [# 206] RIL binarySearchTree3: 
--------------------------------------------------------------------------------
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
- 347:         for n in self.post_order(node=node.right):
+ 347:         for n in reversed(self.post_order(node=node.right)):
  348:             yield n
  349:         yield node.val
  350:     
  351:     def breadth_first(self):
--------------------------------------------------------------------------------
[0.12873 s] incompetent

TypeError: binarySearchTree3:347: TypeError: 'generator' object is not reversible

   - [# 207] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
-  54:         if self._length < 1:
+  54:         if self._length > 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
--------------------------------------------------------------------------------
[0.10296 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
>       var_3 = double_linked_list_0.pop()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd14f7ab60>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
   - [# 208] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
-  54:         if self._length < 1:
+  54:         if self._length <= 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
--------------------------------------------------------------------------------
[0.09988 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1565e020>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
   - [# 209] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
-  62:         if self._length < 1:
+  62:         if self._length > 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
   66:     def append(self, val):
--------------------------------------------------------------------------------
[0.12196 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_7

def test_case_7():
        bytes_0 = b'5\x98{\xa7\x1f8CA\x8cr\x06\x98\x0bY\xad'
        double_linked_list_0 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.pop()
        assert var_0 == 173
>       var_1 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15571870>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:82: AttributeError
   - [# 210] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
-  62:         if self._length < 1:
+  62:         if self._length <= 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
   66:     def append(self, val):
--------------------------------------------------------------------------------
[0.13136 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:76: AssertionError
   - [# 211] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
-  72:         if self._length < 1:
+  72:         if self._length > 1:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
--------------------------------------------------------------------------------
[0.09998 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 212] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
-  72:         if self._length < 1:
+  72:         if self._length <= 1:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
--------------------------------------------------------------------------------
[0.10292 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15780130>, val = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:101: AttributeError
   - [# 213] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
-  79:         if self._length < 1:
+  79:         if self._length > 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
--------------------------------------------------------------------------------
[0.13689 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_9

def test_case_9():
        bool_0 = True
        node_d_l_l_0 = module_0.NodeDLL(prev=bool_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        with pytest.raises(IndexError):
>           double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd150378e0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:82: AttributeError
   - [# 214] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
-  79:         if self._length < 1:
+  79:         if self._length <= 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
--------------------------------------------------------------------------------
[0.10224 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
>       var_5 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd14fa9a80>

>   ???
E   IndexError: Cannot shift from an empty list.

binarySearchTree3:80: IndexError
   - [# 215] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
-  87:         if self._length < 1:
+  87:         if self._length > 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
--------------------------------------------------------------------------------
[0.15483 s] survived
   - [# 216] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
-  87:         if self._length < 1:
+  87:         if self._length <= 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
--------------------------------------------------------------------------------
[0.15327 s] survived
   - [# 217] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
-  96:                 if self._length == 1:
+  96:                 if self._length != 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
--------------------------------------------------------------------------------
[0.10578 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_1 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_2 = double_linked_list_0.push(double_linked_list_0)
        var_3 = double_linked_list_0.remove(double_linked_list_0)
        var_4 = bst_0.post_order(var_3)
        var_5 = bst_0.contains(double_linked_list_0)
        assert var_5 is False
        var_6 = bst_0.delete(bst_0)
>       var_7 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15518af0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

binarySearchTree3:82: AttributeError
   - [# 218] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
- 185:             return 'left' if self.parent.left == self else 'right'
+ 185:             return 'left' if self.parent.left != self else 'right'
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.18754 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [# 219] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
- 247:         if val < curr.val:
+ 247:         if val > curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
--------------------------------------------------------------------------------
[0.11119 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 220] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
- 247:         if val < curr.val:
+ 247:         if val <= curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
--------------------------------------------------------------------------------
[0.15683 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_27

def test_case_27():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        var_2 = bst_0.depth()
>       assert var_2 == 6
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:288: AssertionError
   - [# 221] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
- 249:         elif val > curr.val:
+ 249:         elif val < curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
--------------------------------------------------------------------------------
[0.13983 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 222] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
- 249:         elif val > curr.val:
+ 249:         elif val >= curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
--------------------------------------------------------------------------------
[0.15318 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_27

def test_case_27():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        var_2 = bst_0.depth()
>       assert var_2 == 6
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:288: AssertionError
   - [# 223] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
  257:             count = self._step(val, child)
- 258:             if curr.height <= count:
+ 258:             if curr.height >= count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
--------------------------------------------------------------------------------
[0.10970 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 224] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
  257:             count = self._step(val, child)
- 258:             if curr.height <= count:
+ 258:             if curr.height < count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
--------------------------------------------------------------------------------
[0.12200 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 225] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
- 263:             if curr.height == 1:
+ 263:             if curr.height != 1:
  264:                 curr.height += 1
  265:         return curr
  266:     
  267:     def search(self, val):
--------------------------------------------------------------------------------
[0.24641 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_6

def test_case_6():
        bytes_0 = b'\xd0\x08\x1b$\xda'
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.in_order()
        var_1 = bst_0.depth()
        assert var_1 == 4
        var_2 = bst_0.balance()
>       assert var_2 == 2
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:83: AssertionError
   - [# 226] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
- 271:             if curr.val == val:
+ 271:             if curr.val != val:
  272:                 return curr
  273:             elif val < curr.val:
  274:                 curr = curr.left
  275:             else:
--------------------------------------------------------------------------------
[0.12385 s] incompetent

TypeError: binarySearchTree3:273: TypeError: '<' not supported between instances of 'Bst' and 'Bst'

   - [# 227] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  269:         curr = self.root
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
- 273:             elif val < curr.val:
+ 273:             elif val > curr.val:
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
  277:     
--------------------------------------------------------------------------------
[0.17214 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [# 228] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  269:         curr = self.root
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
- 273:             elif val < curr.val:
+ 273:             elif val <= curr.val:
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
  277:     
--------------------------------------------------------------------------------
[0.16075 s] survived
   - [# 229] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
- 310:         if node == 'root':
+ 310:         if node != 'root':
  311:             node = self.root
  312:         
  313:         if not node:
  314:             return
--------------------------------------------------------------------------------
[0.14385 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_17

def test_case_17():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.pre_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14f949d0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
   - [# 230] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
- 325:         if node == 'root':
+ 325:         if node != 'root':
  326:             node = self.root
  327:         
  328:         if not node:
  329:             return
--------------------------------------------------------------------------------
[0.12098 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
>       double_linked_list_0 = module_0.DoubleLinkedList(var_3)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14fabe80>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
   - [# 231] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
- 339:         if node == 'root':
+ 339:         if node != 'root':
  340:             node = self.root
  341:         
  342:         if not node:
  343:             return
--------------------------------------------------------------------------------
[0.11669 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd157b1c60>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
   - [# 232] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
- 365:         if (self._size < 1 or not (self.contains(val))):
+ 365:         if (self._size > 1 or not (self.contains(val))):
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.17415 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [# 233] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
- 365:         if (self._size < 1 or not (self.contains(val))):
+ 365:         if (self._size <= 1 or not (self.contains(val))):
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.11499 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.delete(bst_0)
>       assert bst_0.root is None
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:177: AssertionError
   - [# 234] ROR binarySearchTree3: 
--------------------------------------------------------------------------------
  394:         if node.right:
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
- 398:             if node._side() == 'left':
+ 398:             if node._side() != 'left':
  399:                 return self.parent
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
--------------------------------------------------------------------------------
[0.27963 s] survived
   - [# 235] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
    2: 
    3: class NodeDLL(object):
    4:     '''Node class for data storage.'''
    5:     
-   6:     def __init__(self, data=None, next_node=None, prev=None):
-   7:         '''Initialize Node.'''
-   8:         self.data = data
-   9:         self.next = next_node
-  10:         self.prev = prev
-  11:     
+   6:     @staticmethod
+   7:     def __init__(self, data=None, next_node=None, prev=None):
+   8:         '''Initialize Node.'''
+   9:         self.data = data
+  10:         self.next = next_node
+  11:         self.prev = prev
   12:     def __repr__(self):
   13:         '''String representation.'''
   14:         return 'Value: {}'.format(self.data)
   15: 
--------------------------------------------------------------------------------
[0.12822 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 236] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
    8:         self.data = data
    9:         self.next = next_node
   10:         self.prev = prev
   11:     
-  12:     def __repr__(self):
-  13:         '''String representation.'''
-  14:         return 'Value: {}'.format(self.data)
-  15: 
+  12:     @staticmethod
+  13:     def __repr__(self):
+  14:         '''String representation.'''
+  15:         return 'Value: {}'.format(self.data)
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
   19: 
--------------------------------------------------------------------------------
[0.19348 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:286: TypeError: NodeDLL.__repr__() missing 1 required positional argument: 'self'

   - [# 237] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   25:     remove(val) - will remove the first instance of (val) found in the list,
   26:     starting from the head.
   27:     '''
   28:     
-  29:     def __init__(self, data=None):
-  30:         '''Initialize list.'''
-  31:         self.head = None
-  32:         self.tail = None
-  33:         self._length = 0
-  34:         try:
-  35:             for val in data:
-  36:                 self.push(val)
-  37:         except TypeError:
-  38:             if data:
-  39:                 self.push(data)
-  40:     
+  29:     @staticmethod
+  30:     def __init__(self, data=None):
+  31:         '''Initialize list.'''
+  32:         self.head = None
+  33:         self.tail = None
+  34:         self._length = 0
+  35:         try:
+  36:             for val in data:
+  37:                 self.push(val)
+  38:         except TypeError:
+  39:             if data:
+  40:                 self.push(data)
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
--------------------------------------------------------------------------------
[0.22320 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <generator object Bst.breadth_first at 0x7fbd152f06d0>, data = None

>   ???
E   AttributeError: 'generator' object has no attribute 'head'

binarySearchTree3:32: AttributeError
   - [# 238] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
   40:     
-  41:     def push(self, val):
-  42:         '''Add val to the head of the list.'''
-  43:         old_head = self.head
-  44:         self.head = NodeDLL(val, next_node=old_head)
-  45:         if old_head:
-  46:             old_head.prev = self.head
-  47:         if not (self.tail):
-  48:             self.tail = self.head
-  49:         self._length += 1
-  50:     
+  41:     @staticmethod
+  42:     def push(self, val):
+  43:         '''Add val to the head of the list.'''
+  44:         old_head = self.head
+  45:         self.head = NodeDLL(val, next_node=old_head)
+  46:         if old_head:
+  47:             old_head.prev = self.head
+  48:         if not (self.tail):
+  49:             self.tail = self.head
+  50:         self._length += 1
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
   54:         if self._length < 1:
--------------------------------------------------------------------------------
[0.14288 s] incompetent

TypeError: binarySearchTree3:39: TypeError: DoubleLinkedList.push() missing 1 required positional argument: 'val'

   - [# 239] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   47:         if not (self.tail):
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
-  51:     def pop(self):
-  52:         '''Remove the val from the head of the list.'''
-  53:         to_return = self.head
-  54:         if self._length < 1:
-  55:             raise IndexError('Cannot pop from an empty list.')
-  56:         
-  57:         new_head = self.head.next
-  58:         if new_head:
-  59:             new_head.prev = None
-  60:         self.head = new_head
-  61:         self._length -= 1
-  62:         if self._length < 1:
-  63:             self.tail = None
-  64:         return to_return.data
-  65:     
+  51:     @staticmethod
+  52:     def pop(self):
+  53:         '''Remove the val from the head of the list.'''
+  54:         to_return = self.head
+  55:         if self._length < 1:
+  56:             raise IndexError('Cannot pop from an empty list.')
+  57:         
+  58:         new_head = self.head.next
+  59:         if new_head:
+  60:             new_head.prev = None
+  61:         self.head = new_head
+  62:         self._length -= 1
+  63:         if self._length < 1:
+  64:             self.tail = None
+  65:         return to_return.data
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
--------------------------------------------------------------------------------
[0.13416 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:73: TypeError: DoubleLinkedList.pop() missing 1 required positional argument: 'self'

   - [# 240] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
-  66:     def append(self, val):
-  67:         '''Add val to the tail of the list.'''
-  68:         old_tail = self.tail
-  69:         self.tail = NodeDLL(val, prev=old_tail)
-  70:         if old_tail:
-  71:             old_tail.next = self.tail
-  72:         if self._length < 1:
-  73:             self.head = self.tail
-  74:         self._length += 1
-  75:     
+  66:     @staticmethod
+  67:     def append(self, val):
+  68:         '''Add val to the tail of the list.'''
+  69:         old_tail = self.tail
+  70:         self.tail = NodeDLL(val, prev=old_tail)
+  71:         if old_tail:
+  72:             old_tail.next = self.tail
+  73:         if self._length < 1:
+  74:             self.head = self.tail
+  75:         self._length += 1
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
   79:         if self._length < 1:
--------------------------------------------------------------------------------
[0.10605 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:30: TypeError: DoubleLinkedList.append() missing 1 required positional argument: 'val'

   - [# 241] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   72:         if self._length < 1:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
-  76:     def shift(self):
-  77:         '''Remove the val from the tail of the list.'''
-  78:         to_return = self.tail
-  79:         if self._length < 1:
-  80:             raise IndexError('Cannot shift from an empty list.')
-  81:         
-  82:         new_tail = self.tail.prev
-  83:         if new_tail:
-  84:             new_tail.next = None
-  85:         self.tail = new_tail
-  86:         self._length -= 1
-  87:         if self._length < 1:
-  88:             self.tail = None
-  89:         return to_return.data
-  90:     
+  76:     @staticmethod
+  77:     def shift(self):
+  78:         '''Remove the val from the tail of the list.'''
+  79:         to_return = self.tail
+  80:         if self._length < 1:
+  81:             raise IndexError('Cannot shift from an empty list.')
+  82:         
+  83:         new_tail = self.tail.prev
+  84:         if new_tail:
+  85:             new_tail.next = None
+  86:         self.tail = new_tail
+  87:         self._length -= 1
+  88:         if self._length < 1:
+  89:             self.tail = None
+  90:         return to_return.data
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
--------------------------------------------------------------------------------
[0.13355 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: TypeError: DoubleLinkedList.shift() missing 1 required positional argument: 'self'

   - [# 242] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
-  91:     def remove(self, val):
-  92:         '''Remove first occurance of val from list.'''
-  93:         curr = self.head
-  94:         while curr:
-  95:             if curr.data is val:
-  96:                 if self._length == 1:
-  97:                     (self.head, self.tail) = (None, None)
-  98:                 elif (curr is not self.head and curr is not self.tail):
-  99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 100:                 elif curr is self.head:
- 101:                     (self.head, curr.next.prev) = (curr.next, None)
- 102:                 elif curr is self.tail:
- 103:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 104:                 self._length -= 1
- 105:                 return
- 106:             curr = curr.next
- 107:         
- 108:         raise ValueError('{} is not in the list'.format(val))
- 109:     
+  91:     @staticmethod
+  92:     def remove(self, val):
+  93:         '''Remove first occurance of val from list.'''
+  94:         curr = self.head
+  95:         while curr:
+  96:             if curr.data is val:
+  97:                 if self._length == 1:
+  98:                     (self.head, self.tail) = (None, None)
+  99:                 elif (curr is not self.head and curr is not self.tail):
+ 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
+ 101:                 elif curr is self.head:
+ 102:                     (self.head, curr.next.prev) = (curr.next, None)
+ 103:                 elif curr is self.tail:
+ 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 105:                 self._length -= 1
+ 106:                 return
+ 107:             curr = curr.next
+ 108:         
+ 109:         raise ValueError('{} is not in the list'.format(val))
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
  113:         while True:
--------------------------------------------------------------------------------
[0.24773 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: TypeError: DoubleLinkedList.remove() missing 1 required positional argument: 'val'

   - [# 243] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
- 110:     def _repr(self):
- 111:         '''Return list representation of dll.'''
- 112:         l = []
- 113:         while True:
- 114:             try:
- 115:                 popped_data = self.pop()
- 116:                 l.append(popped_data)
- 117:             except IndexError:
- 118:                 break
- 119:         return l
- 120: 
+ 110:     @staticmethod
+ 111:     def _repr(self):
+ 112:         '''Return list representation of dll.'''
+ 113:         l = []
+ 114:         while True:
+ 115:             try:
+ 116:                 popped_data = self.pop()
+ 117:                 l.append(popped_data)
+ 118:             except IndexError:
+ 119:                 break
+ 120:         return l
  121: class Queue(object):
  122:     '''Implementation of Queue.
  123: 
  124:     This implementation supports the following public methods:
--------------------------------------------------------------------------------
[0.37388 s] survived
   - [# 244] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  129:     If the queue is empty, returns None
  130:     size(): return the size of the queue. Returns 0 if the queue is empty.
  131:     '''
  132:     
- 133:     def __init__(self, data=None):
- 134:         '''Initialize queue data structure.'''
- 135:         self._container = DoubleLinkedList(data)
- 136:     
+ 133:     @staticmethod
+ 134:     def __init__(self, data=None):
+ 135:         '''Initialize queue data structure.'''
+ 136:         self._container = DoubleLinkedList(data)
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
  140:     
--------------------------------------------------------------------------------
[0.16353 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:34: TypeError: Queue.__init__() missing 1 required positional argument: 'self'

   - [# 245] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  133:     def __init__(self, data=None):
  134:         '''Initialize queue data structure.'''
  135:         self._container = DoubleLinkedList(data)
  136:     
- 137:     def enqueue(self, val):
- 138:         '''Add a value to the queue.'''
- 139:         self._container.append(val)
- 140:     
+ 137:     @staticmethod
+ 138:     def enqueue(self, val):
+ 139:         '''Add a value to the queue.'''
+ 140:         self._container.append(val)
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
  144:     
--------------------------------------------------------------------------------
[0.16674 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_31

def test_case_31():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.delete(bst_0)
        var_1 = bst_0.in_order()
        var_2 = bst_0.breadth_first()
        double_linked_list_0 = module_0.DoubleLinkedList(var_2)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert double_linked_list_0.head is None
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:378: AssertionError
   - [# 246] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
  140:     
- 141:     def dequeue(self):
- 142:         '''Remove a value from the front of the queue.'''
- 143:         return self._container.pop()
- 144:     
+ 141:     @staticmethod
+ 142:     def dequeue(self):
+ 143:         '''Remove a value from the front of the queue.'''
+ 144:         return self._container.pop()
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
  148:             return self._container.head.data
--------------------------------------------------------------------------------
[0.25151 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:190: TypeError: Queue.dequeue() missing 1 required positional argument: 'self'

   - [# 247] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
  144:     
- 145:     def peek(self):
- 146:         '''Return the next value in the queue without dequing it.'''
- 147:         try:
- 148:             return self._container.head.data
- 149:         except AttributeError:
- 150:             return None
- 151:     
+ 145:     @staticmethod
+ 146:     def peek(self):
+ 147:         '''Return the next value in the queue without dequing it.'''
+ 148:         try:
+ 149:             return self._container.head.data
+ 150:         except AttributeError:
+ 151:             return None
  152:     def size(self):
  153:         '''Return the size of the queue.'''
  154:         return self._container._length
  155: 
--------------------------------------------------------------------------------
[0.29610 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:88: TypeError: Queue.peek() missing 1 required positional argument: 'self'

   - [# 248] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  148:             return self._container.head.data
  149:         except AttributeError:
  150:             return None
  151:     
- 152:     def size(self):
- 153:         '''Return the size of the queue.'''
- 154:         return self._container._length
- 155: 
+ 152:     @staticmethod
+ 153:     def size(self):
+ 154:         '''Return the size of the queue.'''
+ 155:         return self._container._length
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
  159:     def __init__(self, val=None, parent=None):
--------------------------------------------------------------------------------
[0.32277 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:297: TypeError: Queue.size() missing 1 required positional argument: 'self'

   - [# 249] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  155: 
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
- 159:     def __init__(self, val=None, parent=None):
- 160:         '''Create node object.'''
- 161:         self.val = val
- 162:         self.right = None
- 163:         self.left = None
- 164:         self.parent = parent
- 165:         self.height = 1
- 166:     
+ 159:     @staticmethod
+ 160:     def __init__(self, val=None, parent=None):
+ 161:         '''Create node object.'''
+ 162:         self.val = val
+ 163:         self.right = None
+ 164:         self.left = None
+ 165:         self.parent = parent
+ 166:         self.height = 1
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
  170:     
--------------------------------------------------------------------------------
[0.34130 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
>       var_2 = bst_0.insert(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:240: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0, val = None, parent = None

>   ???
E   AttributeError: 'int' object has no attribute 'val'

binarySearchTree3:162: AttributeError
   - [# 250] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
  166:     
- 167:     def _is_leaf(self):
- 168:         '''Return true if a leaf.'''
- 169:         return not ((self.right or self.left))
- 170:     
+ 167:     @staticmethod
+ 168:     def _is_leaf(self):
+ 169:         '''Return true if a leaf.'''
+ 170:         return not ((self.right or self.left))
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
  174:     
--------------------------------------------------------------------------------
[0.37783 s] incompetent

TypeError: binarySearchTree3:370: TypeError: Node._is_leaf() missing 1 required positional argument: 'self'

   - [# 251] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
  170:     
- 171:     def _is_interior(self):
- 172:         '''Return true if a interior node.'''
- 173:         return (self.right and self.left)
- 174:     
+ 171:     @staticmethod
+ 172:     def _is_interior(self):
+ 173:         '''Return true if a interior node.'''
+ 174:         return (self.right and self.left)
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
--------------------------------------------------------------------------------
[0.32542 s] survived
   - [# 252] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
  174:     
- 175:     def _onlychild(self):
- 176:         '''Return string depending on children.'''
- 177:         if (self.left and not (self.right)):
- 178:             return 'left'
- 179:         if (self.right and not (self.left)):
- 180:             return 'right'
- 181:     
+ 175:     @staticmethod
+ 176:     def _onlychild(self):
+ 177:         '''Return string depending on children.'''
+ 178:         if (self.left and not (self.right)):
+ 179:             return 'left'
+ 180:         if (self.right and not (self.left)):
+ 181:             return 'right'
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
  185:             return 'left' if self.parent.left == self else 'right'
--------------------------------------------------------------------------------
[0.45373 s] survived
   - [# 253] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
- 182:     def _side(self):
- 183:         '''Return if left or right child of parent.'''
- 184:         if self.parent:
- 185:             return 'left' if self.parent.left == self else 'right'
- 186: 
+ 182:     @staticmethod
+ 183:     def _side(self):
+ 184:         '''Return if left or right child of parent.'''
+ 185:         if self.parent:
+ 186:             return 'left' if self.parent.left == self else 'right'
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
  190: 
--------------------------------------------------------------------------------
[0.20013 s] incompetent

TypeError: binarySearchTree3:372: TypeError: Node._side() missing 1 required positional argument: 'self'

   - [# 254] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  224:     using breadth frist traversal, one at a time.
  225: 
  226:     '''
  227:     
- 228:     def __init__(self, data=None):
- 229:         '''Initialize tree.'''
- 230:         self._size = 0
- 231:         self.root = None
- 232:         
- 233:         if data:
- 234:             for i in data:
- 235:                 self.insert(i)
- 236:     
+ 228:     @staticmethod
+ 229:     def __init__(self, data=None):
+ 230:         '''Initialize tree.'''
+ 231:         self._size = 0
+ 232:         self.root = None
+ 233:         
+ 234:         if data:
+ 235:             for i in data:
+ 236:                 self.insert(i)
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
--------------------------------------------------------------------------------
[0.14581 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:6: TypeError: Bst.__init__() missing 1 required positional argument: 'self'

   - [# 255] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  233:         if data:
  234:             for i in data:
  235:                 self.insert(i)
  236:     
- 237:     def insert(self, val):
- 238:         '''Insert val into BST. If val is already present will be ignored.'''
- 239:         if not (self.root):
- 240:             self.root = Node(val)
- 241:             self._size += 1
- 242:         else:
- 243:             self._step(val, self.root)
- 244:     
+ 237:     @staticmethod
+ 238:     def insert(self, val):
+ 239:         '''Insert val into BST. If val is already present will be ignored.'''
+ 240:         if not (self.root):
+ 241:             self.root = Node(val)
+ 242:             self._size += 1
+ 243:         else:
+ 244:             self._step(val, self.root)
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
--------------------------------------------------------------------------------
[0.18621 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:12: TypeError: Bst.insert() missing 1 required positional argument: 'val'

   - [# 256] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
  244:     
- 245:     def _step(self, val, curr):
- 246:         '''Decide left or right and returns height.'''
- 247:         if val < curr.val:
- 248:             curr = self._set_child(curr, 'left', val)
- 249:         elif val > curr.val:
- 250:             curr = self._set_child(curr, 'right', val)
- 251:         return curr.height
- 252:     
+ 245:     @staticmethod
+ 246:     def _step(self, val, curr):
+ 247:         '''Decide left or right and returns height.'''
+ 248:         if val < curr.val:
+ 249:             curr = self._set_child(curr, 'left', val)
+ 250:         elif val > curr.val:
+ 251:             curr = self._set_child(curr, 'right', val)
+ 252:         return curr.height
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
--------------------------------------------------------------------------------
[0.17311 s] incompetent

TypeError: binarySearchTree3:243: TypeError: Bst._step() missing 1 required positional argument: 'curr'

   - [# 257] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
- 253:     def _set_child(self, curr, side, val):
- 254:         '''Helping.'''
- 255:         child = getattr(curr, side)
- 256:         if child:
- 257:             count = self._step(val, child)
- 258:             if curr.height <= count:
- 259:                 curr.height += 1
- 260:         else:
- 261:             setattr(curr, side, Node(val, curr))
- 262:             self._size += 1
- 263:             if curr.height == 1:
- 264:                 curr.height += 1
- 265:         return curr
- 266:     
+ 253:     @staticmethod
+ 254:     def _set_child(self, curr, side, val):
+ 255:         '''Helping.'''
+ 256:         child = getattr(curr, side)
+ 257:         if child:
+ 258:             count = self._step(val, child)
+ 259:             if curr.height <= count:
+ 260:                 curr.height += 1
+ 261:         else:
+ 262:             setattr(curr, side, Node(val, curr))
+ 263:             self._size += 1
+ 264:             if curr.height == 1:
+ 265:                 curr.height += 1
+ 266:         return curr
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
--------------------------------------------------------------------------------
[0.13958 s] incompetent

TypeError: binarySearchTree3:248: TypeError: Bst._set_child() missing 1 required positional argument: 'val'

   - [# 258] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
  266:     
- 267:     def search(self, val):
- 268:         '''Return the node containing val.'''
- 269:         curr = self.root
- 270:         while curr:
- 271:             if curr.val == val:
- 272:                 return curr
- 273:             elif val < curr.val:
- 274:                 curr = curr.left
- 275:             else:
- 276:                 curr = curr.right
- 277:     
+ 267:     @staticmethod
+ 268:     def search(self, val):
+ 269:         '''Return the node containing val.'''
+ 270:         curr = self.root
+ 271:         while curr:
+ 272:             if curr.val == val:
+ 273:                 return curr
+ 274:             elif val < curr.val:
+ 275:                 curr = curr.left
+ 276:             else:
+ 277:                 curr = curr.right
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
  281:     
--------------------------------------------------------------------------------
[0.19882 s] incompetent

TypeError: binarySearchTree3:288: TypeError: Bst.search() missing 1 required positional argument: 'val'

   - [# 259] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
  277:     
- 278:     def size(self):
- 279:         '''Return the size of the BST.'''
- 280:         return self._size
- 281:     
+ 278:     @staticmethod
+ 279:     def size(self):
+ 280:         '''Return the size of the BST.'''
+ 281:         return self._size
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
  285:     
--------------------------------------------------------------------------------
[0.28837 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:10: TypeError: Bst.size() missing 1 required positional argument: 'self'

   - [# 260] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
  281:     
- 282:     def depth(self):
- 283:         '''Return depth of the BST, representing total levels.'''
- 284:         return 0 if not (self.root) else self.root.height
- 285:     
+ 282:     @staticmethod
+ 283:     def depth(self):
+ 284:         '''Return depth of the BST, representing total levels.'''
+ 285:         return 0 if not (self.root) else self.root.height
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
  289:     
--------------------------------------------------------------------------------
[0.14752 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:102: TypeError: Bst.depth() missing 1 required positional argument: 'self'

   - [# 261] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
  285:     
- 286:     def contains(self, val):
- 287:         '''Return true if val is in the bst.'''
- 288:         return self.search(val) is not None
- 289:     
+ 286:     @staticmethod
+ 287:     def contains(self, val):
+ 288:         '''Return true if val is in the bst.'''
+ 289:         return self.search(val) is not None
  290:     def balance(self, tree=None):
  291:         '''Return an integer of how well the tree is balanced.
  292: 
  293:         Trees which are higher on the left than the right should return a
--------------------------------------------------------------------------------
[0.13473 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:77: TypeError: Bst.contains() missing 1 required positional argument: 'val'

   - [# 262] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
  289:     
- 290:     def balance(self, tree=None):
- 291:         '''Return an integer of how well the tree is balanced.
- 292: 
- 293:         Trees which are higher on the left than the right should return a
- 294:         positive value, trees which are higher on the right than the left
- 295:         should return a negative value. An ideally-balanced tree should
- 296:         return 0.
- 297:         '''
- 298:         if not tree:
- 299:             tree = self.root
- 300:             if not tree:
- 301:                 return 0
- 302:         
- 303:         leftbranch = 0 if not (tree.left) else tree.left.height
- 304:         rightbranch = 0 if not (tree.right) else tree.right.height
- 305:         
- 306:         return leftbranch - rightbranch
- 307:     
+ 290:     @staticmethod
+ 291:     def balance(self, tree=None):
+ 292:         '''Return an integer of how well the tree is balanced.
+ 293: 
+ 294:         Trees which are higher on the left than the right should return a
+ 295:         positive value, trees which are higher on the right than the left
+ 296:         should return a negative value. An ideally-balanced tree should
+ 297:         return 0.
+ 298:         '''
+ 299:         if not tree:
+ 300:             tree = self.root
+ 301:             if not tree:
+ 302:                 return 0
+ 303:         
+ 304:         leftbranch = 0 if not (tree.left) else tree.left.height
+ 305:         rightbranch = 0 if not (tree.right) else tree.right.height
+ 306:         
+ 307:         return leftbranch - rightbranch
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
  311:             node = self.root
--------------------------------------------------------------------------------
[0.14193 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:162: TypeError: Bst.balance() missing 1 required positional argument: 'self'

   - [# 263] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
- 308:     def pre_order(self, node='root'):
- 309:         '''Depth first pre-order traversal of tree.'''
- 310:         if node == 'root':
- 311:             node = self.root
- 312:         
- 313:         if not node:
- 314:             return
- 315:         
- 316:         yield node.val
- 317:         
- 318:         for n in self.pre_order(node=node.left):
- 319:             yield n
- 320:         for n in self.pre_order(node=node.right):
- 321:             yield n
- 322:     
+ 308:     @staticmethod
+ 309:     def pre_order(self, node='root'):
+ 310:         '''Depth first pre-order traversal of tree.'''
+ 311:         if node == 'root':
+ 312:             node = self.root
+ 313:         
+ 314:         if not node:
+ 315:             return
+ 316:         
+ 317:         yield node.val
+ 318:         
+ 319:         for n in self.pre_order(node=node.left):
+ 320:             yield n
+ 321:         for n in self.pre_order(node=node.right):
+ 322:             yield n
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
  326:             node = self.root
--------------------------------------------------------------------------------
[0.18612 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:193: TypeError: Bst.pre_order() missing 1 required positional argument: 'self'

   - [# 264] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
- 323:     def in_order(self, node='root'):
- 324:         '''Depth first in-order traversal of tree.'''
- 325:         if node == 'root':
- 326:             node = self.root
- 327:         
- 328:         if not node:
- 329:             return
- 330:         
- 331:         for n in self.in_order(node=node.left):
- 332:             yield n
- 333:         yield node.val
- 334:         for n in self.in_order(node=node.right):
- 335:             yield n
- 336:     
+ 323:     @staticmethod
+ 324:     def in_order(self, node='root'):
+ 325:         '''Depth first in-order traversal of tree.'''
+ 326:         if node == 'root':
+ 327:             node = self.root
+ 328:         
+ 329:         if not node:
+ 330:             return
+ 331:         
+ 332:         for n in self.in_order(node=node.left):
+ 333:             yield n
+ 334:         yield node.val
+ 335:         for n in self.in_order(node=node.right):
+ 336:             yield n
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
  340:             node = self.root
--------------------------------------------------------------------------------
[0.24973 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:342: TypeError: Bst.in_order() missing 1 required positional argument: 'self'

   - [# 265] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
- 337:     def post_order(self, node='root'):
- 338:         '''Depth frist post_order traversal of tree.'''
- 339:         if node == 'root':
- 340:             node = self.root
- 341:         
- 342:         if not node:
- 343:             return
- 344:         
- 345:         for n in self.post_order(node=node.left):
- 346:             yield n
- 347:         for n in self.post_order(node=node.right):
- 348:             yield n
- 349:         yield node.val
- 350:     
+ 337:     @staticmethod
+ 338:     def post_order(self, node='root'):
+ 339:         '''Depth frist post_order traversal of tree.'''
+ 340:         if node == 'root':
+ 341:             node = self.root
+ 342:         
+ 343:         if not node:
+ 344:             return
+ 345:         
+ 346:         for n in self.post_order(node=node.left):
+ 347:             yield n
+ 348:         for n in self.post_order(node=node.right):
+ 349:             yield n
+ 350:         yield node.val
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.25062 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:224: TypeError: Bst.post_order() missing 1 required positional argument: 'self'

   - [# 266] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
  350:     
- 351:     def breadth_first(self):
- 352:         '''Breadth first traversal of tree.'''
- 353:         q = Queue()
- 354:         q.enqueue(self.root)
- 355:         while q.peek():
- 356:             node = q.dequeue()
- 357:             yield node.val
- 358:             if node.left:
- 359:                 q.enqueue(node.left)
- 360:             if node.right:
- 361:                 q.enqueue(node.right)
- 362:     
+ 351:     @staticmethod
+ 352:     def breadth_first(self):
+ 353:         '''Breadth first traversal of tree.'''
+ 354:         q = Queue()
+ 355:         q.enqueue(self.root)
+ 356:         while q.peek():
+ 357:             node = q.dequeue()
+ 358:             yield node.val
+ 359:             if node.left:
+ 360:                 q.enqueue(node.left)
+ 361:             if node.right:
+ 362:                 q.enqueue(node.right)
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
  366:             return
--------------------------------------------------------------------------------
[0.22278 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:9: TypeError: Bst.breadth_first() missing 1 required positional argument: 'self'

   - [# 267] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  359:                 q.enqueue(node.left)
  360:             if node.right:
  361:                 q.enqueue(node.right)
  362:     
- 363:     def delete(self, val):
- 364:         '''Remove a node from the tree.'''
- 365:         if (self._size < 1 or not (self.contains(val))):
- 366:             return
- 367:         
- 368:         node = self.search(val)
- 369:         
- 370:         if node._is_leaf():
- 371:             if node.parent:
- 372:                 setattr(node.parent, node._side(), None)
- 373:             else:
- 374:                 self.root = None
- 375:         
- 376:         elif node._is_interior():
- 377:             next_node = self._find_replacement(node)
- 378:             self._size += 1
- 379:             self.delete(next_node.val)
- 380:             node.val = next_node.val
- 381:         else:
- 382:             
- 383:             child = getattr(node, node._onlychild())
- 384:             if node.parent:
- 385:                 child.parent = node.parent
- 386:                 setattr(node.parent, node._side(), child)
- 387:             else:
- 388:                 self.root = child
- 389:         
- 390:         self._size -= 1
- 391:     
+ 363:     @staticmethod
+ 364:     def delete(self, val):
+ 365:         '''Remove a node from the tree.'''
+ 366:         if (self._size < 1 or not (self.contains(val))):
+ 367:             return
+ 368:         
+ 369:         node = self.search(val)
+ 370:         
+ 371:         if node._is_leaf():
+ 372:             if node.parent:
+ 373:                 setattr(node.parent, node._side(), None)
+ 374:             else:
+ 375:                 self.root = None
+ 376:         
+ 377:         elif node._is_interior():
+ 378:             next_node = self._find_replacement(node)
+ 379:             self._size += 1
+ 380:             self.delete(next_node.val)
+ 381:             node.val = next_node.val
+ 382:         else:
+ 383:             
+ 384:             child = getattr(node, node._onlychild())
+ 385:             if node.parent:
+ 386:                 child.parent = node.parent
+ 387:                 setattr(node.parent, node._side(), child)
+ 388:             else:
+ 389:                 self.root = child
+ 390:         
+ 391:         self._size -= 1
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
  395:             return self._findmin(node.right)
--------------------------------------------------------------------------------
[0.19017 s] incompetent

TypeError: /home/auri/temp/lucca/python_experiments/binarySearchTree3/DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:115: TypeError: Bst.delete() missing 1 required positional argument: 'val'

   - [# 268] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  388:                 self.root = child
  389:         
  390:         self._size -= 1
  391:     
- 392:     def _find_replacement(self, node):
- 393:         '''Find left most node of right subtree.'''
- 394:         if node.right:
- 395:             return self._findmin(node.right)
- 396:         
- 397:         elif node.parent:
- 398:             if node._side() == 'left':
- 399:                 return self.parent
- 400:             else:
- 401:                 node.parent.right = None
- 402:                 tmp = self._find_replacement(node.parent)
- 403:                 node.parent.right = node
- 404:                 return tmp
- 405:     
+ 392:     @staticmethod
+ 393:     def _find_replacement(self, node):
+ 394:         '''Find left most node of right subtree.'''
+ 395:         if node.right:
+ 396:             return self._findmin(node.right)
+ 397:         
+ 398:         elif node.parent:
+ 399:             if node._side() == 'left':
+ 400:                 return self.parent
+ 401:             else:
+ 402:                 node.parent.right = None
+ 403:                 tmp = self._find_replacement(node.parent)
+ 404:                 node.parent.right = node
+ 405:                 return tmp
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
  409:             node = node.left
--------------------------------------------------------------------------------
[0.26646 s] survived
   - [# 269] SDI binarySearchTree3: 
--------------------------------------------------------------------------------
  402:                 tmp = self._find_replacement(node.parent)
  403:                 node.parent.right = node
  404:                 return tmp
  405:     
- 406:     def _findmin(self, node):
- 407:         '''Find min of subtree, Min is always left most node.'''
- 408:         while node.left:
- 409:             node = node.left
- 410:         return node
+ 406:     @staticmethod
+ 407:     def _findmin(self, node):
+ 408:         '''Find min of subtree, Min is always left most node.'''
+ 409:         while node.left:
+ 410:             node = node.left
+ 411:         return node
--------------------------------------------------------------------------------
[0.19711 s] survived
   - [# 270] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
    4:     '''Node class for data storage.'''
    5:     
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
-   8:         self.data = data
+   8:         pass
    9:         self.next = next_node
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
--------------------------------------------------------------------------------
[0.15664 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 271] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
    5:     
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
    8:         self.data = data
-   9:         self.next = next_node
+   9:         pass
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
--------------------------------------------------------------------------------
[0.27270 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1531b8e0>

>   ???
E   AttributeError: 'NodeDLL' object has no attribute 'next'

binarySearchTree3:57: AttributeError
   - [# 272] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
    8:         self.data = data
    9:         self.next = next_node
-  10:         self.prev = prev
+  10:         pass
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
   14:         return 'Value: {}'.format(self.data)
--------------------------------------------------------------------------------
[0.17061 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1565c370>, val = None

>   ???
E   AttributeError: 'NodeDLL' object has no attribute 'prev'

binarySearchTree3:103: AttributeError
   - [# 273] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
-  14:         return 'Value: {}'.format(self.data)
+  14:         pass
   15: 
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[0.14291 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_25

def test_case_25():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        node_d_l_l_0 = module_0.NodeDLL()
        var_0 = node_d_l_l_0.__repr__()
>       assert var_0 == 'Value: None'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:287: AssertionError
   - [# 274] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   27:     '''
   28:     
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
-  31:         self.head = None
+  31:         pass
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
   35:             for val in data:
--------------------------------------------------------------------------------
[0.12391 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd155726b0>, val = 0

>   ???
E   AttributeError: 'DoubleLinkedList' object has no attribute 'head'

binarySearchTree3:43: AttributeError
   - [# 275] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   28:     
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
   31:         self.head = None
-  32:         self.tail = None
+  32:         pass
   33:         self._length = 0
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
--------------------------------------------------------------------------------
[0.16006 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:354: in breadth_first
    ???
binarySearchTree3:139: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15782830>
val = <binarySearchTree3.Node object at 0x7fbd15780d30>

>   ???
E   AttributeError: 'DoubleLinkedList' object has no attribute 'tail'

binarySearchTree3:68: AttributeError
   - [# 276] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
   31:         self.head = None
   32:         self.tail = None
-  33:         self._length = 0
+  33:         pass
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
--------------------------------------------------------------------------------
[0.15057 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:354: in breadth_first
    ???
binarySearchTree3:139: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd151133a0>
val = <binarySearchTree3.Node object at 0x7fbd15113670>

>   ???
E   AttributeError: 'DoubleLinkedList' object has no attribute '_length'

binarySearchTree3:72: AttributeError
   - [# 277] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
   35:             for val in data:
-  36:                 self.push(val)
+  36:                 pass
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
   40:     
--------------------------------------------------------------------------------
[0.11010 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 278] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
   38:             if data:
-  39:                 self.push(data)
+  39:                 pass
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
--------------------------------------------------------------------------------
[0.11142 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:26: AssertionError
   - [# 279] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   39:                 self.push(data)
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
-  43:         old_head = self.head
+  43:         pass
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
--------------------------------------------------------------------------------
[0.14945 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd156e1930>, val = 0

>   ???
E   NameError: name 'old_head' is not defined

binarySearchTree3:44: NameError
   - [# 280] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
-  44:         self.head = NodeDLL(val, next_node=old_head)
+  44:         pass
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
--------------------------------------------------------------------------------
[0.10950 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 281] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
-  46:             old_head.prev = self.head
+  46:             pass
   47:         if not (self.tail):
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
--------------------------------------------------------------------------------
[0.12508 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_32

def test_case_32():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(bst_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        node_0 = module_0.Node()
        assert node_0.height == 1
        var_2 = double_linked_list_0.append(bst_0)
        var_3 = double_linked_list_0.push(double_linked_list_0)
>       var_4 = double_linked_list_0.remove(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:401: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd159dd090>
val = <binarySearchTree3.Bst object at 0x7fbd159dd990>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

binarySearchTree3:99: AttributeError
   - [# 282] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
-  48:             self.tail = self.head
+  48:             pass
   49:         self._length += 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[0.11083 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:17: AssertionError
   - [# 283] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   49:         self._length += 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
-  53:         to_return = self.head
+  53:         pass
   54:         if self._length < 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
--------------------------------------------------------------------------------
[0.10833 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15469390>

>   ???
E   NameError: name 'to_return' is not defined

binarySearchTree3:64: NameError
   - [# 284] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   53:         to_return = self.head
   54:         if self._length < 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
-  57:         new_head = self.head.next
+  57:         pass
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
--------------------------------------------------------------------------------
[0.11696 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1563b0a0>

>   ???
E   NameError: name 'new_head' is not defined

binarySearchTree3:58: NameError
   - [# 285] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
-  59:             new_head.prev = None
+  59:             pass
   60:         self.head = new_head
   61:         self._length -= 1
   62:         if self._length < 1:
   63:             self.tail = None
--------------------------------------------------------------------------------
[0.21353 s] survived
   - [# 286] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
-  60:         self.head = new_head
+  60:         pass
   61:         self._length -= 1
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
--------------------------------------------------------------------------------
[0.11335 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15573ac0>

>   ???
E   IndexError: Cannot pop from an empty list.

binarySearchTree3:55: IndexError
   - [# 287] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
   62:         if self._length < 1:
-  63:             self.tail = None
+  63:             pass
   64:         return to_return.data
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
--------------------------------------------------------------------------------
[0.17616 s] survived
   - [# 288] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   60:         self.head = new_head
   61:         self._length -= 1
   62:         if self._length < 1:
   63:             self.tail = None
-  64:         return to_return.data
+  64:         pass
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
--------------------------------------------------------------------------------
[0.11930 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd157c12d0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:357: AttributeError
   - [# 289] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   64:         return to_return.data
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
-  68:         old_tail = self.tail
+  68:         pass
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
--------------------------------------------------------------------------------
[0.11097 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:354: in breadth_first
    ???
binarySearchTree3:139: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15441630>
val = <binarySearchTree3.Node object at 0x7fbd15441900>

>   ???
E   NameError: name 'old_tail' is not defined

binarySearchTree3:69: NameError
   - [# 290] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
-  69:         self.tail = NodeDLL(val, prev=old_tail)
+  69:         pass
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
--------------------------------------------------------------------------------
[0.14948 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 291] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
-  71:             old_tail.next = self.tail
+  71:             pass
   72:         if self._length < 1:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
--------------------------------------------------------------------------------
[0.11530 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15309090>, val = None

>   ???
E   ValueError: None is not in the list

binarySearchTree3:108: ValueError
   - [# 292] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
-  73:             self.head = self.tail
+  73:             pass
   74:         self._length += 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[0.10856 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 293] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   74:         self._length += 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
-  78:         to_return = self.tail
+  78:         pass
   79:         if self._length < 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
--------------------------------------------------------------------------------
[0.11056 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
>       var_5 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd151f8280>

>   ???
E   NameError: name 'to_return' is not defined

binarySearchTree3:89: NameError
   - [# 294] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   78:         to_return = self.tail
   79:         if self._length < 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
-  82:         new_tail = self.tail.prev
+  82:         pass
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
--------------------------------------------------------------------------------
[0.11118 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
>       var_5 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15780190>

>   ???
E   NameError: name 'new_tail' is not defined

binarySearchTree3:83: NameError
   - [# 295] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
-  84:             new_tail.next = None
+  84:             pass
   85:         self.tail = new_tail
   86:         self._length -= 1
   87:         if self._length < 1:
   88:             self.tail = None
--------------------------------------------------------------------------------
[0.16424 s] survived
   - [# 296] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
-  85:         self.tail = new_tail
+  85:         pass
   86:         self._length -= 1
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
--------------------------------------------------------------------------------
[0.16477 s] survived
   - [# 297] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
   87:         if self._length < 1:
-  88:             self.tail = None
+  88:             pass
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
--------------------------------------------------------------------------------
[0.19584 s] survived
   - [# 298] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   85:         self.tail = new_tail
   86:         self._length -= 1
   87:         if self._length < 1:
   88:             self.tail = None
-  89:         return to_return.data
+  89:         pass
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
--------------------------------------------------------------------------------
[0.16089 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
        var_5 = double_linked_list_0.shift()
        assert double_linked_list_0.tail is None
        assert var_3.tail is None
>       assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'binarySearchTree3.Bst'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:82: AssertionError
   - [# 299] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
-  93:         curr = self.head
+  93:         pass
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
--------------------------------------------------------------------------------
[0.11371 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd14f7fc70>, val = None

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

binarySearchTree3:94: UnboundLocalError
   - [# 300] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
-  97:                     (self.head, self.tail) = (None, None)
+  97:                     pass
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[0.13289 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_10

def test_case_10():
        int_0 = 76
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(int_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.remove(int_0)
>       assert double_linked_list_0.head is None
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:140: AssertionError
   - [# 301] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
-  99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
+  99:                     pass
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
--------------------------------------------------------------------------------
[0.20863 s] survived
   - [# 302] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
- 101:                     (self.head, curr.next.prev) = (curr.next, None)
+ 101:                     pass
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
--------------------------------------------------------------------------------
[0.17106 s] survived
   - [# 303] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
- 103:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 103:                     pass
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
  107:         
--------------------------------------------------------------------------------
[0.19107 s] survived
   - [# 304] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
- 105:                 return
+ 105:                 pass
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
--------------------------------------------------------------------------------
[0.10880 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15541510>, val = None

>   ???
E   ValueError: None is not in the list

binarySearchTree3:108: ValueError
   - [# 305] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
- 106:             curr = curr.next
+ 106:             pass
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
  110:     def _repr(self):
--------------------------------------------------------------------------------
[5.00296 s] timeout
   - [# 306] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
- 112:         l = []
+ 112:         pass
  113:         while True:
  114:             try:
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
--------------------------------------------------------------------------------
[0.24769 s] survived
   - [# 307] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  111:         '''Return list representation of dll.'''
  112:         l = []
  113:         while True:
  114:             try:
- 115:                 popped_data = self.pop()
+ 115:                 pass
  116:                 l.append(popped_data)
  117:             except IndexError:
  118:                 break
  119:         return l
--------------------------------------------------------------------------------
[0.18839 s] survived
   - [# 308] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  112:         l = []
  113:         while True:
  114:             try:
  115:                 popped_data = self.pop()
- 116:                 l.append(popped_data)
+ 116:                 pass
  117:             except IndexError:
  118:                 break
  119:         return l
  120: 
--------------------------------------------------------------------------------
[0.19305 s] survived
   - [# 309] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  115:                 popped_data = self.pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
  118:                 break
- 119:         return l
+ 119:         pass
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
  123: 
--------------------------------------------------------------------------------
[0.20599 s] survived
   - [# 310] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  131:     '''
  132:     
  133:     def __init__(self, data=None):
  134:         '''Initialize queue data structure.'''
- 135:         self._container = DoubleLinkedList(data)
+ 135:         pass
  136:     
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
--------------------------------------------------------------------------------
[0.18903 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:354: in breadth_first
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7fbd15c15690>
val = <binarySearchTree3.Node object at 0x7fbd15c17400>

>   ???
E   AttributeError: 'Queue' object has no attribute '_container'

binarySearchTree3:139: AttributeError
   - [# 311] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  135:         self._container = DoubleLinkedList(data)
  136:     
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
- 139:         self._container.append(val)
+ 139:         pass
  140:     
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
--------------------------------------------------------------------------------
[0.14752 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 312] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  139:         self._container.append(val)
  140:     
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
- 143:         return self._container.pop()
+ 143:         pass
  144:     
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
--------------------------------------------------------------------------------
[0.13669 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd155d1510>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:357: AttributeError
   - [# 313] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  144:     
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
- 148:             return self._container.head.data
+ 148:             pass
  149:         except AttributeError:
  150:             return None
  151:     
  152:     def size(self):
--------------------------------------------------------------------------------
[0.21594 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 314] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
  148:             return self._container.head.data
  149:         except AttributeError:
- 150:             return None
+ 150:             pass
  151:     
  152:     def size(self):
  153:         '''Return the size of the queue.'''
  154:         return self._container._length
--------------------------------------------------------------------------------
[0.38868 s] survived
   - [# 315] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  150:             return None
  151:     
  152:     def size(self):
  153:         '''Return the size of the queue.'''
- 154:         return self._container._length
+ 154:         pass
  155: 
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
--------------------------------------------------------------------------------
[0.18081 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_26

def test_case_26():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_0 = queue_0.size()
>       assert var_0 == 0
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:298: AssertionError
   - [# 316] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  157:     '''Node, or leaf of the BST.'''
  158:     
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
- 161:         self.val = val
+ 161:         pass
  162:         self.right = None
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
--------------------------------------------------------------------------------
[0.20705 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd155d01f0>

>   ???
E   AttributeError: 'Node' object has no attribute 'val'

binarySearchTree3:357: AttributeError
   - [# 317] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  158:     
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
  161:         self.val = val
- 162:         self.right = None
+ 162:         pass
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
  166:     
--------------------------------------------------------------------------------
[0.18297 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1546b730>

>   ???
E   AttributeError: 'Node' object has no attribute 'right'. Did you mean: 'height'?

binarySearchTree3:360: AttributeError
   - [# 318] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
  161:         self.val = val
  162:         self.right = None
- 163:         self.left = None
+ 163:         pass
  164:         self.parent = parent
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
--------------------------------------------------------------------------------
[0.13774 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15037670>

>   ???
E   AttributeError: 'Node' object has no attribute 'left'

binarySearchTree3:358: AttributeError
   - [# 319] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  160:         '''Create node object.'''
  161:         self.val = val
  162:         self.right = None
  163:         self.left = None
- 164:         self.parent = parent
+ 164:         pass
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
--------------------------------------------------------------------------------
[0.16403 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_1 = bst_0.delete(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1511d960>
val = <binarySearchTree3.Bst object at 0x7fbd1511d960>

>   ???
E   AttributeError: 'Node' object has no attribute 'parent'

binarySearchTree3:371: AttributeError
   - [# 320] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  161:         self.val = val
  162:         self.right = None
  163:         self.left = None
  164:         self.parent = parent
- 165:         self.height = 1
+ 165:         pass
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
--------------------------------------------------------------------------------
[0.15666 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15780970>
curr = <binarySearchTree3.Node object at 0x7fbd15781660>, side = 'left'
val = 57

>   ???
E   AttributeError: 'Node' object has no attribute 'height'. Did you mean: 'right'?

binarySearchTree3:263: AttributeError
   - [# 321] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
- 169:         return not ((self.right or self.left))
+ 169:         pass
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
--------------------------------------------------------------------------------
[0.14314 s] incompetent

TypeError: binarySearchTree3:383: TypeError: getattr(): attribute name must be string

   - [# 322] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  169:         return not ((self.right or self.left))
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
- 173:         return (self.right and self.left)
+ 173:         pass
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.16397 s] survived
   - [# 323] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
- 178:             return 'left'
+ 178:             pass
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
  182:     def _side(self):
--------------------------------------------------------------------------------
[0.16304 s] survived
   - [# 324] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
  179:         if (self.right and not (self.left)):
- 180:             return 'right'
+ 180:             pass
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
--------------------------------------------------------------------------------
[0.16235 s] survived
   - [# 325] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
- 185:             return 'left' if self.parent.left == self else 'right'
+ 185:             pass
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.18997 s] incompetent

TypeError: binarySearchTree3:372: TypeError: attribute name must be string, not 'NoneType'

   - [# 326] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  226:     '''
  227:     
  228:     def __init__(self, data=None):
  229:         '''Initialize tree.'''
- 230:         self._size = 0
+ 230:         pass
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
--------------------------------------------------------------------------------
[0.10573 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
>       var_1 = bst_0.size()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15c45810>

>   ???
E   AttributeError: 'Bst' object has no attribute '_size'. Did you mean: 'size'?

binarySearchTree3:280: AttributeError
   - [# 327] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  227:     
  228:     def __init__(self, data=None):
  229:         '''Initialize tree.'''
  230:         self._size = 0
- 231:         self.root = None
+ 231:         pass
  232:         
  233:         if data:
  234:             for i in data:
  235:                 self.insert(i)
--------------------------------------------------------------------------------
[0.10353 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
>       assert bst_0.root is None
E       AttributeError: 'Bst' object has no attribute 'root'

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:8: AttributeError
   - [# 328] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
- 235:                 self.insert(i)
+ 235:                 pass
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
--------------------------------------------------------------------------------
[0.10796 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
>       assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:161: AssertionError
   - [# 329] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
- 240:             self.root = Node(val)
+ 240:             pass
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
  244:     
--------------------------------------------------------------------------------
[0.10906 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
>       assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:13: AssertionError
   - [# 330] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  239:         if not (self.root):
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
- 243:             self._step(val, self.root)
+ 243:             pass
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
--------------------------------------------------------------------------------
[0.15697 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 331] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
- 248:             curr = self._set_child(curr, 'left', val)
+ 248:             pass
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
--------------------------------------------------------------------------------
[0.11781 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 332] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
- 250:             curr = self._set_child(curr, 'right', val)
+ 250:             pass
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
--------------------------------------------------------------------------------
[0.11810 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 333] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
- 251:         return curr.height
+ 251:         pass
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
--------------------------------------------------------------------------------
[0.19894 s] incompetent

TypeError: binarySearchTree3:258: TypeError: '<=' not supported between instances of 'int' and 'NoneType'

   - [# 334] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
- 255:         child = getattr(curr, side)
+ 255:         pass
  256:         if child:
  257:             count = self._step(val, child)
  258:             if curr.height <= count:
  259:                 curr.height += 1
--------------------------------------------------------------------------------
[0.12399 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:248: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd156d4df0>
curr = <binarySearchTree3.Node object at 0x7fbd156d71f0>, side = 'left'
val = 57

>   ???
E   NameError: name 'child' is not defined

binarySearchTree3:256: NameError
   - [# 335] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
- 257:             count = self._step(val, child)
+ 257:             pass
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
--------------------------------------------------------------------------------
[0.14678 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:250: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15139a50>
curr = <binarySearchTree3.Node object at 0x7fbd15139a80>, side = 'right'
val = 213

>   ???
E   NameError: name 'count' is not defined

binarySearchTree3:258: NameError
   - [# 336] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  257:             count = self._step(val, child)
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
- 261:             setattr(curr, side, Node(val, curr))
+ 261:             pass
  262:             self._size += 1
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
--------------------------------------------------------------------------------
[0.18483 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 337] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  261:             setattr(curr, side, Node(val, curr))
  262:             self._size += 1
  263:             if curr.height == 1:
  264:                 curr.height += 1
- 265:         return curr
+ 265:         pass
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
--------------------------------------------------------------------------------
[0.12690 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15542050>, val = 57, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'height'

binarySearchTree3:251: AttributeError
   - [# 338] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  265:         return curr
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
- 269:         curr = self.root
+ 269:         pass
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
  273:             elif val < curr.val:
--------------------------------------------------------------------------------
[0.11652 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_4 = bst_0.contains(var_2)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:288: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1583a2f0>
val = <generator object Bst.in_order at 0x7fbd152446d0>

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

binarySearchTree3:270: UnboundLocalError
   - [# 339] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
  271:             if curr.val == val:
- 272:                 return curr
+ 272:                 pass
  273:             elif val < curr.val:
  274:                 curr = curr.left
  275:             else:
  276:                 curr = curr.right
--------------------------------------------------------------------------------
[5.00414 s] timeout
   - [# 340] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
  273:             elif val < curr.val:
- 274:                 curr = curr.left
+ 274:                 pass
  275:             else:
  276:                 curr = curr.right
  277:     
  278:     def size(self):
--------------------------------------------------------------------------------
[5.00305 s] timeout
   - [# 341] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  272:                 return curr
  273:             elif val < curr.val:
  274:                 curr = curr.left
  275:             else:
- 276:                 curr = curr.right
+ 276:                 pass
  277:     
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
--------------------------------------------------------------------------------
[5.00663 s] timeout
   - [# 342] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  276:                 curr = curr.right
  277:     
  278:     def size(self):
  279:         '''Return the size of the BST.'''
- 280:         return self._size
+ 280:         pass
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
--------------------------------------------------------------------------------
[0.10461 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
>       assert var_1 == 0
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:11: AssertionError
   - [# 343] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  280:         return self._size
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
- 284:         return 0 if not (self.root) else self.root.height
+ 284:         pass
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.10344 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
>       assert var_0 == 0
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:103: AssertionError
   - [# 344] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  284:         return 0 if not (self.root) else self.root.height
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
- 288:         return self.search(val) is not None
+ 288:         pass
  289:     
  290:     def balance(self, tree=None):
  291:         '''Return an integer of how well the tree is balanced.
  292: 
--------------------------------------------------------------------------------
[0.09975 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
>       assert var_4 is False
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:78: AssertionError
   - [# 345] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  295:         should return a negative value. An ideally-balanced tree should
  296:         return 0.
  297:         '''
  298:         if not tree:
- 299:             tree = self.root
+ 299:             pass
  300:             if not tree:
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
--------------------------------------------------------------------------------
[0.11199 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 346] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  297:         '''
  298:         if not tree:
  299:             tree = self.root
  300:             if not tree:
- 301:                 return 0
+ 301:                 pass
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
--------------------------------------------------------------------------------
[0.11439 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_21

def test_case_21():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_2 = double_linked_list_0.push(double_linked_list_0)
        var_3 = double_linked_list_0.remove(double_linked_list_0)
>       var_4 = bst_0.balance()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14f15060>, tree = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:303: AttributeError
   - [# 347] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  299:             tree = self.root
  300:             if not tree:
  301:                 return 0
  302:         
- 303:         leftbranch = 0 if not (tree.left) else tree.left.height
+ 303:         pass
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
  306:         return leftbranch - rightbranch
  307:     
--------------------------------------------------------------------------------
[0.10857 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd150679a0>
tree = <binarySearchTree3.Node object at 0x7fbd15064670>

>   ???
E   NameError: name 'leftbranch' is not defined

binarySearchTree3:306: NameError
   - [# 348] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  300:             if not tree:
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
- 304:         rightbranch = 0 if not (tree.right) else tree.right.height
+ 304:         pass
  305:         
  306:         return leftbranch - rightbranch
  307:     
  308:     def pre_order(self, node='root'):
--------------------------------------------------------------------------------
[0.11196 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14ff1330>
tree = <binarySearchTree3.Node object at 0x7fbd14ff06d0>

>   ???
E   NameError: name 'rightbranch' is not defined

binarySearchTree3:306: NameError
   - [# 349] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
  304:         rightbranch = 0 if not (tree.right) else tree.right.height
  305:         
- 306:         return leftbranch - rightbranch
+ 306:         pass
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
--------------------------------------------------------------------------------
[0.14242 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.balance()
>       assert var_0 == -3
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:163: AssertionError
   - [# 350] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
- 311:             node = self.root
+ 311:             pass
  312:         
  313:         if not node:
  314:             return
  315:         
--------------------------------------------------------------------------------
[0.11130 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_17

def test_case_17():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.pre_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1583d300>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

binarySearchTree3:316: AttributeError
   - [# 351] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  310:         if node == 'root':
  311:             node = self.root
  312:         
  313:         if not node:
- 314:             return
+ 314:             pass
  315:         
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
--------------------------------------------------------------------------------
[0.12184 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_17

def test_case_17():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.pre_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:318: in pre_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1546b8e0>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

binarySearchTree3:316: AttributeError
   - [# 352] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  312:         
  313:         if not node:
  314:             return
  315:         
- 316:         yield node.val
+ 316:         pass
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
--------------------------------------------------------------------------------
[0.19046 s] survived
   - [# 353] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  315:         
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
- 319:             yield n
+ 319:             pass
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
--------------------------------------------------------------------------------
[0.16436 s] survived
   - [# 354] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
- 321:             yield n
+ 321:             pass
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
--------------------------------------------------------------------------------
[0.15263 s] survived
   - [# 355] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
- 326:             node = self.root
+ 326:             pass
  327:         
  328:         if not node:
  329:             return
  330:         
--------------------------------------------------------------------------------
[0.11761 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
>       double_linked_list_0 = module_0.DoubleLinkedList(var_3)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15543370>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:331: AttributeError
   - [# 356] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  325:         if node == 'root':
  326:             node = self.root
  327:         
  328:         if not node:
- 329:             return
+ 329:             pass
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
  333:         yield node.val
--------------------------------------------------------------------------------
[0.11627 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
>       double_linked_list_0 = module_0.DoubleLinkedList(var_3)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14f116f0>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:331: AttributeError
   - [# 357] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  328:         if not node:
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
- 332:             yield n
+ 332:             pass
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
--------------------------------------------------------------------------------
[0.16057 s] survived
   - [# 358] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
- 333:         yield node.val
+ 333:         pass
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
--------------------------------------------------------------------------------
[0.12418 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_35

def test_case_35():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.in_order()
        queue_0 = module_0.Queue(var_1)
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = queue_0.peek()
>       assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'binarySearchTree3.Bst'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:434: AssertionError
   - [# 359] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  331:         for n in self.in_order(node=node.left):
  332:             yield n
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
- 335:             yield n
+ 335:             pass
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
--------------------------------------------------------------------------------
[0.16773 s] survived
   - [# 360] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
- 340:             node = self.root
+ 340:             pass
  341:         
  342:         if not node:
  343:             return
  344:         
--------------------------------------------------------------------------------
[0.14386 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1502e3b0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

binarySearchTree3:345: AttributeError
   - [# 361] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  339:         if node == 'root':
  340:             node = self.root
  341:         
  342:         if not node:
- 343:             return
+ 343:             pass
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
--------------------------------------------------------------------------------
[0.11535 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:345: in post_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14f12a10>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

binarySearchTree3:345: AttributeError
   - [# 362] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  342:         if not node:
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
- 346:             yield n
+ 346:             pass
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
  350:     
--------------------------------------------------------------------------------
[0.16332 s] survived
   - [# 363] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
- 348:             yield n
+ 348:             pass
  349:         yield node.val
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
--------------------------------------------------------------------------------
[0.16192 s] survived
   - [# 364] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  345:         for n in self.post_order(node=node.left):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
  348:             yield n
- 349:         yield node.val
+ 349:         pass
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
--------------------------------------------------------------------------------
[0.13315 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py::test_case_21

def test_case_21():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.contains(bst_0)
        assert var_0 is False
        bool_0 = True
        var_1 = bst_0.contains(bool_0)
        var_2 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_3 = bst_0.post_order()
        bst_1 = module_0.Bst(var_3)
        assert f'{type(bst_1).__module__}.{type(bst_1).__qualname__}' == 'binarySearchTree3.Bst'
>       assert f'{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}' == 'binarySearchTree3.Node'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_WHOLE_SUITE.py:289: AssertionError
   - [# 365] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  349:         yield node.val
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
- 353:         q = Queue()
+ 353:         pass
  354:         q.enqueue(self.root)
  355:         while q.peek():
  356:             node = q.dequeue()
  357:             yield node.val
--------------------------------------------------------------------------------
[0.13302 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15139b70>

>   ???
E   NameError: name 'q' is not defined

binarySearchTree3:354: NameError
   - [# 366] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
- 354:         q.enqueue(self.root)
+ 354:         pass
  355:         while q.peek():
  356:             node = q.dequeue()
  357:             yield node.val
  358:             if node.left:
--------------------------------------------------------------------------------
[0.10182 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 367] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
  355:         while q.peek():
- 356:             node = q.dequeue()
+ 356:             pass
  357:             yield node.val
  358:             if node.left:
  359:                 q.enqueue(node.left)
  360:             if node.right:
--------------------------------------------------------------------------------
[0.09966 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd159be2c0>

>   ???
E   NameError: name 'node' is not defined

binarySearchTree3:357: NameError
   - [# 368] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  353:         q = Queue()
  354:         q.enqueue(self.root)
  355:         while q.peek():
  356:             node = q.dequeue()
- 357:             yield node.val
+ 357:             pass
  358:             if node.left:
  359:                 q.enqueue(node.left)
  360:             if node.right:
  361:                 q.enqueue(node.right)
--------------------------------------------------------------------------------
[0.13200 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 369] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  355:         while q.peek():
  356:             node = q.dequeue()
  357:             yield node.val
  358:             if node.left:
- 359:                 q.enqueue(node.left)
+ 359:                 pass
  360:             if node.right:
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
--------------------------------------------------------------------------------
[0.15453 s] survived
   - [# 370] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  357:             yield node.val
  358:             if node.left:
  359:                 q.enqueue(node.left)
  360:             if node.right:
- 361:                 q.enqueue(node.right)
+ 361:                 pass
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
--------------------------------------------------------------------------------
[0.15457 s] survived
   - [# 371] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
- 366:             return
+ 366:             pass
  367:         
  368:         node = self.search(val)
  369:         
  370:         if node._is_leaf():
--------------------------------------------------------------------------------
[0.10311 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_1 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_2 = double_linked_list_0.push(double_linked_list_0)
        var_3 = double_linked_list_0.remove(double_linked_list_0)
        var_4 = bst_0.post_order(var_3)
        var_5 = bst_0.contains(double_linked_list_0)
        assert var_5 is False
>       var_6 = bst_0.delete(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd152c5420>
val = <binarySearchTree3.Bst object at 0x7fbd152c5420>

>   ???
E   AttributeError: 'NoneType' object has no attribute '_is_leaf'

binarySearchTree3:370: AttributeError
   - [# 372] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
  366:             return
  367:         
- 368:         node = self.search(val)
+ 368:         pass
  369:         
  370:         if node._is_leaf():
  371:             if node.parent:
  372:                 setattr(node.parent, node._side(), None)
--------------------------------------------------------------------------------
[0.12661 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_1 = bst_0.delete(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15571900>
val = <binarySearchTree3.Bst object at 0x7fbd15571900>

>   ???
E   NameError: name 'node' is not defined

binarySearchTree3:370: NameError
   - [# 373] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  368:         node = self.search(val)
  369:         
  370:         if node._is_leaf():
  371:             if node.parent:
- 372:                 setattr(node.parent, node._side(), None)
+ 372:                 pass
  373:             else:
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
--------------------------------------------------------------------------------
[0.18457 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_35

def test_case_35():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
        var_1 = bst_0.delete(str_0)
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
        var_2 = bst_0.delete(str_0)
        queue_1 = module_0.Queue()
        var_3 = bst_0.size()
>       assert var_3 == 16
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:418: AssertionError
   - [# 374] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  370:         if node._is_leaf():
  371:             if node.parent:
  372:                 setattr(node.parent, node._side(), None)
  373:             else:
- 374:                 self.root = None
+ 374:                 pass
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
--------------------------------------------------------------------------------
[0.11199 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.delete(bst_0)
>       assert bst_0.root is None
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:177: AssertionError
   - [# 375] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  373:             else:
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
- 377:             next_node = self._find_replacement(node)
+ 377:             pass
  378:             self._size += 1
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
--------------------------------------------------------------------------------
[0.15551 s] survived
   - [# 376] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
- 379:             self.delete(next_node.val)
+ 379:             pass
  380:             node.val = next_node.val
  381:         else:
  382:             
  383:             child = getattr(node, node._onlychild())
--------------------------------------------------------------------------------
[0.18628 s] survived
   - [# 377] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
  379:             self.delete(next_node.val)
- 380:             node.val = next_node.val
+ 380:             pass
  381:         else:
  382:             
  383:             child = getattr(node, node._onlychild())
  384:             if node.parent:
--------------------------------------------------------------------------------
[0.16207 s] survived
   - [# 378] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
  382:             
- 383:             child = getattr(node, node._onlychild())
+ 383:             pass
  384:             if node.parent:
  385:                 child.parent = node.parent
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
--------------------------------------------------------------------------------
[0.20252 s] survived
   - [# 379] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  381:         else:
  382:             
  383:             child = getattr(node, node._onlychild())
  384:             if node.parent:
- 385:                 child.parent = node.parent
+ 385:                 pass
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
  388:                 self.root = child
  389:         
--------------------------------------------------------------------------------
[0.15799 s] survived
   - [# 380] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  382:             
  383:             child = getattr(node, node._onlychild())
  384:             if node.parent:
  385:                 child.parent = node.parent
- 386:                 setattr(node.parent, node._side(), child)
+ 386:                 pass
  387:             else:
  388:                 self.root = child
  389:         
  390:         self._size -= 1
--------------------------------------------------------------------------------
[0.15428 s] survived
   - [# 381] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  384:             if node.parent:
  385:                 child.parent = node.parent
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
- 388:                 self.root = child
+ 388:                 pass
  389:         
  390:         self._size -= 1
  391:     
  392:     def _find_replacement(self, node):
--------------------------------------------------------------------------------
[0.16560 s] survived
   - [# 382] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
- 395:             return self._findmin(node.right)
+ 395:             pass
  396:         
  397:         elif node.parent:
  398:             if node._side() == 'left':
  399:                 return self.parent
--------------------------------------------------------------------------------
[0.16024 s] survived
   - [# 383] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
  398:             if node._side() == 'left':
- 399:                 return self.parent
+ 399:                 pass
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
  403:                 node.parent.right = node
--------------------------------------------------------------------------------
[0.16221 s] survived
   - [# 384] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  397:         elif node.parent:
  398:             if node._side() == 'left':
  399:                 return self.parent
  400:             else:
- 401:                 node.parent.right = None
+ 401:                 pass
  402:                 tmp = self._find_replacement(node.parent)
  403:                 node.parent.right = node
  404:                 return tmp
  405:     
--------------------------------------------------------------------------------
[0.17847 s] survived
   - [# 385] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  398:             if node._side() == 'left':
  399:                 return self.parent
  400:             else:
  401:                 node.parent.right = None
- 402:                 tmp = self._find_replacement(node.parent)
+ 402:                 pass
  403:                 node.parent.right = node
  404:                 return tmp
  405:     
  406:     def _findmin(self, node):
--------------------------------------------------------------------------------
[0.22299 s] survived
   - [# 386] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  399:                 return self.parent
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
- 403:                 node.parent.right = node
+ 403:                 pass
  404:                 return tmp
  405:     
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
--------------------------------------------------------------------------------
[0.20358 s] survived
   - [# 387] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
  403:                 node.parent.right = node
- 404:                 return tmp
+ 404:                 pass
  405:     
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
--------------------------------------------------------------------------------
[0.29799 s] survived
   - [# 388] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  405:     
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
- 409:             node = node.left
+ 409:             pass
  410:         return node
--------------------------------------------------------------------------------
[0.17409 s] survived
   - [# 389] SDL binarySearchTree3: 
--------------------------------------------------------------------------------
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
  409:             node = node.left
- 410:         return node
+ 410:         pass
--------------------------------------------------------------------------------
[0.16268 s] survived
   - [# 390] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
    4:     '''Node class for data storage.'''
    5:     
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
-   8:         self.data = data
+   8:         data = data
    9:         self.next = next_node
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 391] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
    5:     
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
    8:         self.data = data
-   9:         self.next = next_node
+   9:         next = next_node
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 392] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
    6:     def __init__(self, data=None, next_node=None, prev=None):
    7:         '''Initialize Node.'''
    8:         self.data = data
    9:         self.next = next_node
-  10:         self.prev = prev
+  10:         prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
   14:         return 'Value: {}'.format(self.data)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 393] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   10:         self.prev = prev
   11:     
   12:     def __repr__(self):
   13:         '''String representation.'''
-  14:         return 'Value: {}'.format(self.data)
+  14:         return 'Value: {}'.format(data)
   15: 
   16: 
   17: class DoubleLinkedList(object):
   18:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[0.11620 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_25

def test_case_25():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        node_d_l_l_0 = module_0.NodeDLL()
>       var_0 = node_d_l_l_0.__repr__()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[NameError("name 'data' is not defined") raised in repr()] NodeDLL object at 0x7fbd15be0a90>

>   ???
E   NameError: name 'data' is not defined

binarySearchTree3:14: NameError
   - [# 394] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   27:     '''
   28:     
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
-  31:         self.head = None
+  31:         head = None
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
   35:             for val in data:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 395] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   28:     
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
   31:         self.head = None
-  32:         self.tail = None
+  32:         tail = None
   33:         self._length = 0
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 396] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   29:     def __init__(self, data=None):
   30:         '''Initialize list.'''
   31:         self.head = None
   32:         self.tail = None
-  33:         self._length = 0
+  33:         _length = 0
   34:         try:
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 397] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
   35:             for val in data:
-  36:                 self.push(val)
+  36:                 push(val)
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
   40:     
--------------------------------------------------------------------------------
[0.10453 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1555e500>
data = <generator object Bst.breadth_first at 0x7fbd156f9380>

>   ???
E   NameError: name 'push' is not defined

binarySearchTree3:36: NameError
   - [# 398] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   35:             for val in data:
   36:                 self.push(val)
   37:         except TypeError:
   38:             if data:
-  39:                 self.push(data)
+  39:                 push(data)
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
--------------------------------------------------------------------------------
[0.10585 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1555f490>
data = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1555f760>

>   ???
E   TypeError: 'DoubleLinkedList' object is not iterable

binarySearchTree3:35: TypeError

During handling of the above exception, another exception occurred:

    def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
>       double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1555f490>
data = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1555f760>

>   ???
E   NameError: name 'push' is not defined

binarySearchTree3:39: NameError
   - [# 399] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   39:                 self.push(data)
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
-  43:         old_head = self.head
+  43:         old_head = head
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
--------------------------------------------------------------------------------
[0.13166 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd154daf80>, val = 0

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:43: NameError
   - [# 400] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   40:     
   41:     def push(self, val):
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
-  44:         self.head = NodeDLL(val, next_node=old_head)
+  44:         head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 401] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   42:         '''Add val to the head of the list.'''
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
-  46:             old_head.prev = self.head
+  46:             old_head.prev = head
   47:         if not (self.tail):
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
--------------------------------------------------------------------------------
[0.10683 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_3

def test_case_3():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_1 = double_linked_list_0.push(double_linked_list_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd14f7dde0>
val = <binarySearchTree3.DoubleLinkedList object at 0x7fbd14f7dde0>

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:46: NameError
   - [# 402] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   43:         old_head = self.head
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
-  47:         if not (self.tail):
+  47:         if not tail:
   48:             self.tail = self.head
   49:         self._length += 1
   50:     
   51:     def pop(self):
--------------------------------------------------------------------------------
[0.10443 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15469360>, val = 0

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:47: NameError
   - [# 403] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
-  48:             self.tail = self.head
+  48:             tail = self.head
   49:         self._length += 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 404] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   44:         self.head = NodeDLL(val, next_node=old_head)
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
-  48:             self.tail = self.head
+  48:             self.tail = head
   49:         self._length += 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[0.10850 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:36: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15c3fd60>, val = 0

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:48: NameError
   - [# 405] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   45:         if old_head:
   46:             old_head.prev = self.head
   47:         if not (self.tail):
   48:             self.tail = self.head
-  49:         self._length += 1
+  49:         _length += 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 406] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   49:         self._length += 1
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
-  53:         to_return = self.head
+  53:         to_return = head
   54:         if self._length < 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
--------------------------------------------------------------------------------
[0.12379 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15542ef0>

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:53: NameError
   - [# 407] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   50:     
   51:     def pop(self):
   52:         '''Remove the val from the head of the list.'''
   53:         to_return = self.head
-  54:         if self._length < 1:
+  54:         if _length < 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
--------------------------------------------------------------------------------
[0.11013 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd158c2050>

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:54: NameError
   - [# 408] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   53:         to_return = self.head
   54:         if self._length < 1:
   55:             raise IndexError('Cannot pop from an empty list.')
   56:         
-  57:         new_head = self.head.next
+  57:         new_head = head.next
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
--------------------------------------------------------------------------------
[0.11547 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd155358d0>

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:57: NameError
   - [# 409] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   56:         
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
-  60:         self.head = new_head
+  60:         head = new_head
   61:         self._length -= 1
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 410] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   57:         new_head = self.head.next
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
-  61:         self._length -= 1
+  61:         _length -= 1
   62:         if self._length < 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 411] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   58:         if new_head:
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
-  62:         if self._length < 1:
+  62:         if _length < 1:
   63:             self.tail = None
   64:         return to_return.data
   65:     
   66:     def append(self, val):
--------------------------------------------------------------------------------
[0.14229 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
binarySearchTree3:143: in dequeue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15779a80>

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:62: NameError
   - [# 412] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   59:             new_head.prev = None
   60:         self.head = new_head
   61:         self._length -= 1
   62:         if self._length < 1:
-  63:             self.tail = None
+  63:             tail = None
   64:         return to_return.data
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 413] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   64:         return to_return.data
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
-  68:         old_tail = self.tail
+  68:         old_tail = tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
--------------------------------------------------------------------------------
[0.10467 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:354: in breadth_first
    ???
binarySearchTree3:139: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd157051e0>
val = <binarySearchTree3.Node object at 0x7fbd15705300>

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:68: NameError
   - [# 414] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   65:     
   66:     def append(self, val):
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
-  69:         self.tail = NodeDLL(val, prev=old_tail)
+  69:         tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 415] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   67:         '''Add val to the tail of the list.'''
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
-  71:             old_tail.next = self.tail
+  71:             old_tail.next = tail
   72:         if self._length < 1:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
--------------------------------------------------------------------------------
[0.10282 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_1 = double_linked_list_0.append(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd14f7d720>, val = None

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:71: NameError
   - [# 416] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   68:         old_tail = self.tail
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
-  72:         if self._length < 1:
+  72:         if _length < 1:
   73:             self.head = self.tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
--------------------------------------------------------------------------------
[0.11468 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:354: in breadth_first
    ???
binarySearchTree3:139: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd14f4ed40>
val = <binarySearchTree3.Node object at 0x7fbd14f4efb0>

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:72: NameError
   - [# 417] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
-  73:             self.head = self.tail
+  73:             head = self.tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 418] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   69:         self.tail = NodeDLL(val, prev=old_tail)
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
-  73:             self.head = self.tail
+  73:             self.head = tail
   74:         self._length += 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[0.10477 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:354: in breadth_first
    ???
binarySearchTree3:139: in enqueue
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd156d6920>
val = <binarySearchTree3.Node object at 0x7fbd156d7700>

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:73: NameError
   - [# 419] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   70:         if old_tail:
   71:             old_tail.next = self.tail
   72:         if self._length < 1:
   73:             self.head = self.tail
-  74:         self._length += 1
+  74:         _length += 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 420] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   74:         self._length += 1
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
-  78:         to_return = self.tail
+  78:         to_return = tail
   79:         if self._length < 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
--------------------------------------------------------------------------------
[0.11185 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
>       var_5 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15bf99f0>

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:78: NameError
   - [# 421] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   75:     
   76:     def shift(self):
   77:         '''Remove the val from the tail of the list.'''
   78:         to_return = self.tail
-  79:         if self._length < 1:
+  79:         if _length < 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
--------------------------------------------------------------------------------
[0.10785 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
>       var_5 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1577b580>

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:79: NameError
   - [# 422] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   78:         to_return = self.tail
   79:         if self._length < 1:
   80:             raise IndexError('Cannot shift from an empty list.')
   81:         
-  82:         new_tail = self.tail.prev
+  82:         new_tail = tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
--------------------------------------------------------------------------------
[0.14217 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
>       var_5 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15c20eb0>

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:82: NameError
   - [# 423] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   81:         
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
-  85:         self.tail = new_tail
+  85:         tail = new_tail
   86:         self._length -= 1
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 424] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   82:         new_tail = self.tail.prev
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
-  86:         self._length -= 1
+  86:         _length -= 1
   87:         if self._length < 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 425] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   83:         if new_tail:
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
-  87:         if self._length < 1:
+  87:         if _length < 1:
   88:             self.tail = None
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
--------------------------------------------------------------------------------
[0.10590 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_4 = bst_0.contains(var_2)
        assert var_4 is False
>       var_5 = double_linked_list_0.shift()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15c067a0>

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:87: NameError
   - [# 426] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   84:             new_tail.next = None
   85:         self.tail = new_tail
   86:         self._length -= 1
   87:         if self._length < 1:
-  88:             self.tail = None
+  88:             tail = None
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 427] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   89:         return to_return.data
   90:     
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
-  93:         curr = self.head
+  93:         curr = head
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
--------------------------------------------------------------------------------
[0.14707 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd14f66e00>, val = None

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:93: NameError
   - [# 428] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
-  96:                 if self._length == 1:
+  96:                 if _length == 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
--------------------------------------------------------------------------------
[0.10778 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15bf9b10>, val = None

>   ???
E   NameError: name '_length' is not defined

binarySearchTree3:96: NameError
   - [# 429] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
-  97:                     (self.head, self.tail) = (None, None)
+  97:                     (head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 430] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   93:         curr = self.head
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
-  97:                     (self.head, self.tail) = (None, None)
+  97:                     (self.head, tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 431] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
-  98:                 elif (curr is not self.head and curr is not self.tail):
+  98:                 elif (curr is not head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.10793 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd158f6ec0>, val = None

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:98: NameError
   - [# 432] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   94:         while curr:
   95:             if curr.data is val:
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
-  98:                 elif (curr is not self.head and curr is not self.tail):
+  98:                 elif (curr is not self.head and curr is not tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.10815 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd1542f220>, val = None

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:98: NameError
   - [# 433] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   96:                 if self._length == 1:
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 100:                 elif curr is self.head:
+ 100:                 elif curr is head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
--------------------------------------------------------------------------------
[0.10678 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15408700>, val = None

>   ???
E   NameError: name 'head' is not defined

binarySearchTree3:100: NameError
   - [# 434] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   97:                     (self.head, self.tail) = (None, None)
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
- 101:                     (self.head, curr.next.prev) = (curr.next, None)
+ 101:                     (head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 435] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   98:                 elif (curr is not self.head and curr is not self.tail):
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
- 102:                 elif curr is self.tail:
+ 102:                 elif curr is tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
--------------------------------------------------------------------------------
[0.13797 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd158a1690>, val = None

>   ???
E   NameError: name 'tail' is not defined

binarySearchTree3:102: NameError
   - [# 436] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
   99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
- 103:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 103:                     (tail, curr.prev.next) = (curr.prev, None)
  104:                 self._length -= 1
  105:                 return
  106:             curr = curr.next
  107:         
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 437] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  100:                 elif curr is self.head:
  101:                     (self.head, curr.next.prev) = (curr.next, None)
  102:                 elif curr is self.tail:
  103:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 104:                 self._length -= 1
+ 104:                 _length -= 1
  105:                 return
  106:             curr = curr.next
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 438] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  111:         '''Return list representation of dll.'''
  112:         l = []
  113:         while True:
  114:             try:
- 115:                 popped_data = self.pop()
+ 115:                 popped_data = pop()
  116:                 l.append(popped_data)
  117:             except IndexError:
  118:                 break
  119:         return l
--------------------------------------------------------------------------------
[0.19732 s] survived
   - [# 439] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  131:     '''
  132:     
  133:     def __init__(self, data=None):
  134:         '''Initialize queue data structure.'''
- 135:         self._container = DoubleLinkedList(data)
+ 135:         _container = DoubleLinkedList(data)
  136:     
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
  139:         self._container.append(val)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 440] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  135:         self._container = DoubleLinkedList(data)
  136:     
  137:     def enqueue(self, val):
  138:         '''Add a value to the queue.'''
- 139:         self._container.append(val)
+ 139:         _container.append(val)
  140:     
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
  143:         return self._container.pop()
--------------------------------------------------------------------------------
[0.10327 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:354: in breadth_first
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7fbd15836ef0>
val = <binarySearchTree3.Node object at 0x7fbd15837a00>

>   ???
E   NameError: name '_container' is not defined

binarySearchTree3:139: NameError
   - [# 441] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  139:         self._container.append(val)
  140:     
  141:     def dequeue(self):
  142:         '''Remove a value from the front of the queue.'''
- 143:         return self._container.pop()
+ 143:         return _container.pop()
  144:     
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
--------------------------------------------------------------------------------
[0.10944 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:356: in breadth_first
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7fbd15571960>

>   ???
E   NameError: name '_container' is not defined

binarySearchTree3:143: NameError
   - [# 442] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  144:     
  145:     def peek(self):
  146:         '''Return the next value in the queue without dequing it.'''
  147:         try:
- 148:             return self._container.head.data
+ 148:             return _container.head.data
  149:         except AttributeError:
  150:             return None
  151:     
  152:     def size(self):
--------------------------------------------------------------------------------
[0.10301 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
binarySearchTree3:355: in breadth_first
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7fbd1540a530>

>   ???
E   NameError: name '_container' is not defined

binarySearchTree3:148: NameError
   - [# 443] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  150:             return None
  151:     
  152:     def size(self):
  153:         '''Return the size of the queue.'''
- 154:         return self._container._length
+ 154:         return _container._length
  155: 
  156: class Node(object):
  157:     '''Node, or leaf of the BST.'''
  158:     
--------------------------------------------------------------------------------
[0.11530 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_26

def test_case_26():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        queue_0 = module_0.Queue()
        assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'binarySearchTree3.Queue'
>       var_0 = queue_0.size()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:297: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Queue object at 0x7fbd158c2890>

>   ???
E   NameError: name '_container' is not defined

binarySearchTree3:154: NameError
   - [# 444] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  157:     '''Node, or leaf of the BST.'''
  158:     
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
- 161:         self.val = val
+ 161:         val = val
  162:         self.right = None
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 445] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  158:     
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
  161:         self.val = val
- 162:         self.right = None
+ 162:         right = None
  163:         self.left = None
  164:         self.parent = parent
  165:         self.height = 1
  166:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 446] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  159:     def __init__(self, val=None, parent=None):
  160:         '''Create node object.'''
  161:         self.val = val
  162:         self.right = None
- 163:         self.left = None
+ 163:         left = None
  164:         self.parent = parent
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 447] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  160:         '''Create node object.'''
  161:         self.val = val
  162:         self.right = None
  163:         self.left = None
- 164:         self.parent = parent
+ 164:         parent = parent
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 448] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  161:         self.val = val
  162:         self.right = None
  163:         self.left = None
  164:         self.parent = parent
- 165:         self.height = 1
+ 165:         height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
  169:         return not ((self.right or self.left))
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 449] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
- 169:         return not ((self.right or self.left))
+ 169:         return not ((right or self.left))
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
--------------------------------------------------------------------------------
[0.14131 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_1 = bst_0.delete(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:370: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7fbd152472b0>

>   ???
E   NameError: name 'right' is not defined

binarySearchTree3:169: NameError
   - [# 450] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  165:         self.height = 1
  166:     
  167:     def _is_leaf(self):
  168:         '''Return true if a leaf.'''
- 169:         return not ((self.right or self.left))
+ 169:         return not ((self.right or left))
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
  173:         return (self.right and self.left)
--------------------------------------------------------------------------------
[0.11582 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_1 = bst_0.delete(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:370: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7fbd15519720>

>   ???
E   NameError: name 'left' is not defined

binarySearchTree3:169: NameError
   - [# 451] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  169:         return not ((self.right or self.left))
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
- 173:         return (self.right and self.left)
+ 173:         return (right and self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.16379 s] survived
   - [# 452] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  169:         return not ((self.right or self.left))
  170:     
  171:     def _is_interior(self):
  172:         '''Return true if a interior node.'''
- 173:         return (self.right and self.left)
+ 173:         return (self.right and left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.17548 s] survived
   - [# 453] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  173:         return (self.right and self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
- 177:         if (self.left and not (self.right)):
+ 177:         if (left and not (self.right)):
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
--------------------------------------------------------------------------------
[0.19626 s] survived
   - [# 454] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  173:         return (self.right and self.left)
  174:     
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
- 177:         if (self.left and not (self.right)):
+ 177:         if (self.left and not right):
  178:             return 'left'
  179:         if (self.right and not (self.left)):
  180:             return 'right'
  181:     
--------------------------------------------------------------------------------
[0.17620 s] survived
   - [# 455] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
- 179:         if (self.right and not (self.left)):
+ 179:         if (right and not (self.left)):
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.16825 s] survived
   - [# 456] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  175:     def _onlychild(self):
  176:         '''Return string depending on children.'''
  177:         if (self.left and not (self.right)):
  178:             return 'left'
- 179:         if (self.right and not (self.left)):
+ 179:         if (self.right and not left):
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.16636 s] survived
   - [# 457] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  180:             return 'right'
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
- 184:         if self.parent:
+ 184:         if parent:
  185:             return 'left' if self.parent.left == self else 'right'
  186: 
  187: 
  188: class Bst(object):
--------------------------------------------------------------------------------
[0.19696 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_27

def test_case_27():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
>       var_1 = bst_0.delete(str_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:372: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7fbd14ff0400>

>   ???
E   NameError: name 'parent' is not defined

binarySearchTree3:184: NameError
   - [# 458] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  181:     
  182:     def _side(self):
  183:         '''Return if left or right child of parent.'''
  184:         if self.parent:
- 185:             return 'left' if self.parent.left == self else 'right'
+ 185:             return 'left' if parent.left == self else 'right'
  186: 
  187: 
  188: class Bst(object):
  189:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.16371 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py::test_case_27

def test_case_27():
        str_0 = 'LpnzcVxEf~\x0b6\x0b3IV]t'
        bst_0 = module_0.Bst(str_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_0 = bst_0.insert(str_0)
>       var_1 = bst_0.delete(str_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_DYNAMOSA.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:372: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Node object at 0x7fbd15408850>

>   ???
E   NameError: name 'parent' is not defined

binarySearchTree3:185: NameError
   - [# 459] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  226:     '''
  227:     
  228:     def __init__(self, data=None):
  229:         '''Initialize tree.'''
- 230:         self._size = 0
+ 230:         _size = 0
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 460] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  227:     
  228:     def __init__(self, data=None):
  229:         '''Initialize tree.'''
  230:         self._size = 0
- 231:         self.root = None
+ 231:         root = None
  232:         
  233:         if data:
  234:             for i in data:
  235:                 self.insert(i)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 461] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
- 235:                 self.insert(i)
+ 235:                 insert(i)
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
--------------------------------------------------------------------------------
[0.12639 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15519450>
data = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'

>   ???
E   NameError: name 'insert' is not defined

binarySearchTree3:235: NameError
   - [# 462] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  235:                 self.insert(i)
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
- 239:         if not (self.root):
+ 239:         if not root:
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
--------------------------------------------------------------------------------
[0.15306 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
>       var_2 = bst_0.insert(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15c3f580>, val = 0

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:239: NameError
   - [# 463] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
- 240:             self.root = Node(val)
+ 240:             root = Node(val)
  241:             self._size += 1
  242:         else:
  243:             self._step(val, self.root)
  244:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 464] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
  240:             self.root = Node(val)
- 241:             self._size += 1
+ 241:             _size += 1
  242:         else:
  243:             self._step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 465] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  239:         if not (self.root):
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
- 243:             self._step(val, self.root)
+ 243:             _step(val, self.root)
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
--------------------------------------------------------------------------------
[0.14831 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd155eb6d0>, val = 57

>   ???
E   NameError: name '_step' is not defined

binarySearchTree3:243: NameError
   - [# 466] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  239:         if not (self.root):
  240:             self.root = Node(val)
  241:             self._size += 1
  242:         else:
- 243:             self._step(val, self.root)
+ 243:             self._step(val, root)
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
--------------------------------------------------------------------------------
[0.12039 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1502f9d0>, val = 57

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:243: NameError
   - [# 467] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  244:     
  245:     def _step(self, val, curr):
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
- 248:             curr = self._set_child(curr, 'left', val)
+ 248:             curr = _set_child(curr, 'left', val)
  249:         elif val > curr.val:
  250:             curr = self._set_child(curr, 'right', val)
  251:         return curr.height
  252:     
--------------------------------------------------------------------------------
[0.11778 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1555dc90>, val = 57
curr = <binarySearchTree3.Node object at 0x7fbd1555dcc0>

>   ???
E   NameError: name '_set_child' is not defined

binarySearchTree3:248: NameError
   - [# 468] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  246:         '''Decide left or right and returns height.'''
  247:         if val < curr.val:
  248:             curr = self._set_child(curr, 'left', val)
  249:         elif val > curr.val:
- 250:             curr = self._set_child(curr, 'right', val)
+ 250:             curr = _set_child(curr, 'right', val)
  251:         return curr.height
  252:     
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
--------------------------------------------------------------------------------
[0.11389 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1548d420>, val = 113
curr = <binarySearchTree3.Node object at 0x7fbd1548d4e0>

>   ???
E   NameError: name '_set_child' is not defined

binarySearchTree3:250: NameError
   - [# 469] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  253:     def _set_child(self, curr, side, val):
  254:         '''Helping.'''
  255:         child = getattr(curr, side)
  256:         if child:
- 257:             count = self._step(val, child)
+ 257:             count = _step(val, child)
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
--------------------------------------------------------------------------------
[0.11267 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
>       bst_0 = module_0.Bst(bytes_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:235: in __init__
    ???
binarySearchTree3:243: in insert
    ???
binarySearchTree3:250: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15be2410>
curr = <binarySearchTree3.Node object at 0x7fbd15be1ba0>, side = 'right'
val = 213

>   ???
E   NameError: name '_step' is not defined

binarySearchTree3:257: NameError
   - [# 470] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  258:             if curr.height <= count:
  259:                 curr.height += 1
  260:         else:
  261:             setattr(curr, side, Node(val, curr))
- 262:             self._size += 1
+ 262:             _size += 1
  263:             if curr.height == 1:
  264:                 curr.height += 1
  265:         return curr
  266:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 471] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  265:         return curr
  266:     
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
- 269:         curr = self.root
+ 269:         curr = root
  270:         while curr:
  271:             if curr.val == val:
  272:                 return curr
  273:             elif val < curr.val:
--------------------------------------------------------------------------------
[0.10697 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_4 = bst_0.contains(var_2)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:288: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15be0a90>
val = <generator object Bst.in_order at 0x7fbd152c8ba0>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:269: NameError
   - [# 472] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  276:                 curr = curr.right
  277:     
  278:     def size(self):
  279:         '''Return the size of the BST.'''
- 280:         return self._size
+ 280:         return _size
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
  284:         return 0 if not (self.root) else self.root.height
--------------------------------------------------------------------------------
[0.10626 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
>       var_1 = bst_0.size()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd155d1a50>

>   ???
E   NameError: name '_size' is not defined

binarySearchTree3:280: NameError
   - [# 473] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  280:         return self._size
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
- 284:         return 0 if not (self.root) else self.root.height
+ 284:         return 0 if not root else self.root.height
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.14201 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
>       var_0 = bst_0.depth()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14f72830>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:284: NameError
   - [# 474] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  280:         return self._size
  281:     
  282:     def depth(self):
  283:         '''Return depth of the BST, representing total levels.'''
- 284:         return 0 if not (self.root) else self.root.height
+ 284:         return 0 if not (self.root) else root.height
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
  288:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.11659 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_30

def test_case_30():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.delete(bst_0)
        var_1 = bst_0.breadth_first()
        var_2 = bst_0.size()
        assert var_2 == 0
        var_3 = bst_0.insert(var_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_4 = bst_0.depth()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15571de0>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:284: NameError
   - [# 475] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  284:         return 0 if not (self.root) else self.root.height
  285:     
  286:     def contains(self, val):
  287:         '''Return true if val is in the bst.'''
- 288:         return self.search(val) is not None
+ 288:         return search(val) is not None
  289:     
  290:     def balance(self, tree=None):
  291:         '''Return an integer of how well the tree is balanced.
  292: 
--------------------------------------------------------------------------------
[0.10288 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_5

def test_case_5():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = bst_0.in_order(bst_0)
        var_3 = double_linked_list_0.pop()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(var_3.head).__module__}.{type(var_3.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(var_3.tail).__module__}.{type(var_3.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
>       var_4 = bst_0.contains(var_2)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd156a17e0>
val = <generator object Bst.in_order at 0x7fbd158e46d0>

>   ???
E   NameError: name 'search' is not defined

binarySearchTree3:288: NameError
   - [# 476] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  295:         should return a negative value. An ideally-balanced tree should
  296:         return 0.
  297:         '''
  298:         if not tree:
- 299:             tree = self.root
+ 299:             tree = root
  300:             if not tree:
  301:                 return 0
  302:         
  303:         leftbranch = 0 if not (tree.left) else tree.left.height
--------------------------------------------------------------------------------
[0.11553 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_0 = bst_0.balance()

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15be2500>, tree = None

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:299: NameError
   - [# 477] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  307:     
  308:     def pre_order(self, node='root'):
  309:         '''Depth first pre-order traversal of tree.'''
  310:         if node == 'root':
- 311:             node = self.root
+ 311:             node = root
  312:         
  313:         if not node:
  314:             return
  315:         
--------------------------------------------------------------------------------
[0.12032 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_17

def test_case_17():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.pre_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15c35cc0>, node = 'root'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:311: NameError
   - [# 478] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  314:             return
  315:         
  316:         yield node.val
  317:         
- 318:         for n in self.pre_order(node=node.left):
+ 318:         for n in pre_order(node=node.left):
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
--------------------------------------------------------------------------------
[0.18128 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_17

def test_case_17():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.pre_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd155e8970>
node = <binarySearchTree3.Node object at 0x7fbd155e8e50>

>   ???
E   NameError: name 'pre_order' is not defined

binarySearchTree3:318: NameError
   - [# 479] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
- 320:         for n in self.pre_order(node=node.right):
+ 320:         for n in pre_order(node=node.right):
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
--------------------------------------------------------------------------------
[0.12760 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_17

def test_case_17():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.pre_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14f12470>
node = <binarySearchTree3.Node object at 0x7fbd14f7f730>

>   ???
E   NameError: name 'pre_order' is not defined

binarySearchTree3:320: NameError
   - [# 480] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
- 326:             node = self.root
+ 326:             node = root
  327:         
  328:         if not node:
  329:             return
  330:         
--------------------------------------------------------------------------------
[0.16543 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_29

def test_case_29():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        var_1 = bst_0.__repr__()
        var_2 = bst_0.delete(bst_0)
        var_3 = bst_0.in_order()
>       double_linked_list_0 = module_0.DoubleLinkedList(var_3)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15067e80>, node = 'root'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:326: NameError
   - [# 481] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  327:         
  328:         if not node:
  329:             return
  330:         
- 331:         for n in self.in_order(node=node.left):
+ 331:         for n in in_order(node=node.left):
  332:             yield n
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
--------------------------------------------------------------------------------
[0.22657 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_35

def test_case_35():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.in_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:431: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1548fc10>
node = <binarySearchTree3.Node object at 0x7fbd1548fe20>

>   ???
E   NameError: name 'in_order' is not defined

binarySearchTree3:331: NameError
   - [# 482] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  330:         
  331:         for n in self.in_order(node=node.left):
  332:             yield n
  333:         yield node.val
- 334:         for n in self.in_order(node=node.right):
+ 334:         for n in in_order(node=node.right):
  335:             yield n
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
--------------------------------------------------------------------------------
[0.17031 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_35

def test_case_35():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.in_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:431: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1583e380>
node = <binarySearchTree3.Node object at 0x7fbd1583f5e0>

>   ???
E   NameError: name 'in_order' is not defined

binarySearchTree3:334: NameError
   - [# 483] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
- 340:             node = self.root
+ 340:             node = root
  341:         
  342:         if not node:
  343:             return
  344:         
--------------------------------------------------------------------------------
[0.12988 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd14f13a60>, node = 'root'

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:340: NameError
   - [# 484] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  341:         
  342:         if not node:
  343:             return
  344:         
- 345:         for n in self.post_order(node=node.left):
+ 345:         for n in post_order(node=node.left):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
--------------------------------------------------------------------------------
[0.14448 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd155d2620>
node = <binarySearchTree3.Node object at 0x7fbd155d1f30>

>   ???
E   NameError: name 'post_order' is not defined

binarySearchTree3:345: NameError
   - [# 485] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
- 347:         for n in self.post_order(node=node.right):
+ 347:         for n in post_order(node=node.right):
  348:             yield n
  349:         yield node.val
  350:     
  351:     def breadth_first(self):
--------------------------------------------------------------------------------
[0.14506 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_20

def test_case_20():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.post_order()
>       queue_0 = module_0.Queue(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:135: in __init__
    ???
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15066230>
node = <binarySearchTree3.Node object at 0x7fbd15064e80>

>   ???
E   NameError: name 'post_order' is not defined

binarySearchTree3:347: NameError
   - [# 486] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
- 354:         q.enqueue(self.root)
+ 354:         q.enqueue(root)
  355:         while q.peek():
  356:             node = q.dequeue()
  357:             yield node.val
  358:             if node.left:
--------------------------------------------------------------------------------
[0.10872 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       double_linked_list_0 = module_0.DoubleLinkedList(var_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binarySearchTree3:35: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15245450>

>   ???
E   NameError: name 'root' is not defined

binarySearchTree3:354: NameError
   - [# 487] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
- 365:         if (self._size < 1 or not (self.contains(val))):
+ 365:         if (_size < 1 or not (self.contains(val))):
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.10870 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_8

def test_case_8():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.depth()
        assert var_0 == 0
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_1 = double_linked_list_0.append(bst_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_2 = double_linked_list_0.push(double_linked_list_0)
        var_3 = double_linked_list_0.remove(double_linked_list_0)
        var_4 = bst_0.post_order(var_3)
        var_5 = bst_0.contains(double_linked_list_0)
        assert var_5 is False
>       var_6 = bst_0.delete(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd1583a440>
val = <binarySearchTree3.Bst object at 0x7fbd1583a440>

>   ???
E   NameError: name '_size' is not defined

binarySearchTree3:365: NameError
   - [# 488] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  361:                 q.enqueue(node.right)
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
- 365:         if (self._size < 1 or not (self.contains(val))):
+ 365:         if (self._size < 1 or not (contains(val))):
  366:             return
  367:         
  368:         node = self.search(val)
  369:         
--------------------------------------------------------------------------------
[0.11019 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_1 = bst_0.delete(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd15c21f30>
val = <binarySearchTree3.Bst object at 0x7fbd15c21f30>

>   ???
E   NameError: name 'contains' is not defined

binarySearchTree3:365: NameError
   - [# 489] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
  366:             return
  367:         
- 368:         node = self.search(val)
+ 368:         node = search(val)
  369:         
  370:         if node._is_leaf():
  371:             if node.parent:
  372:                 setattr(node.parent, node._side(), None)
--------------------------------------------------------------------------------
[0.14910 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
>       var_1 = bst_0.delete(bst_0)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.Bst object at 0x7fbd151d4400>
val = <binarySearchTree3.Bst object at 0x7fbd151d4400>

>   ???
E   NameError: name 'search' is not defined

binarySearchTree3:368: NameError
   - [# 490] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  370:         if node._is_leaf():
  371:             if node.parent:
  372:                 setattr(node.parent, node._side(), None)
  373:             else:
- 374:                 self.root = None
+ 374:                 root = None
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 491] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  373:             else:
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
- 377:             next_node = self._find_replacement(node)
+ 377:             next_node = _find_replacement(node)
  378:             self._size += 1
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
--------------------------------------------------------------------------------
[0.16434 s] survived
   - [# 492] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  374:                 self.root = None
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
- 378:             self._size += 1
+ 378:             _size += 1
  379:             self.delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
  382:             
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 493] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  375:         
  376:         elif node._is_interior():
  377:             next_node = self._find_replacement(node)
  378:             self._size += 1
- 379:             self.delete(next_node.val)
+ 379:             delete(next_node.val)
  380:             node.val = next_node.val
  381:         else:
  382:             
  383:             child = getattr(node, node._onlychild())
--------------------------------------------------------------------------------
[0.16252 s] survived
   - [# 494] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  384:             if node.parent:
  385:                 child.parent = node.parent
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
- 388:                 self.root = child
+ 388:                 root = child
  389:         
  390:         self._size -= 1
  391:     
  392:     def _find_replacement(self, node):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 495] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  386:                 setattr(node.parent, node._side(), child)
  387:             else:
  388:                 self.root = child
  389:         
- 390:         self._size -= 1
+ 390:         _size -= 1
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 496] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  391:     
  392:     def _find_replacement(self, node):
  393:         '''Find left most node of right subtree.'''
  394:         if node.right:
- 395:             return self._findmin(node.right)
+ 395:             return _findmin(node.right)
  396:         
  397:         elif node.parent:
  398:             if node._side() == 'left':
  399:                 return self.parent
--------------------------------------------------------------------------------
[0.15957 s] survived
   - [# 497] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  395:             return self._findmin(node.right)
  396:         
  397:         elif node.parent:
  398:             if node._side() == 'left':
- 399:                 return self.parent
+ 399:                 return parent
  400:             else:
  401:                 node.parent.right = None
  402:                 tmp = self._find_replacement(node.parent)
  403:                 node.parent.right = node
--------------------------------------------------------------------------------
[0.16219 s] survived
   - [# 498] SVD binarySearchTree3: 
--------------------------------------------------------------------------------
  398:             if node._side() == 'left':
  399:                 return self.parent
  400:             else:
  401:                 node.parent.right = None
- 402:                 tmp = self._find_replacement(node.parent)
+ 402:                 tmp = _find_replacement(node.parent)
  403:                 node.parent.right = node
  404:                 return tmp
  405:     
  406:     def _findmin(self, node):
--------------------------------------------------------------------------------
[0.16163 s] survived
   - [# 499] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
   32:         self.tail = None
   33:         self._length = 0
   34:         try:
   35:             for val in data:
-  36:                 self.push(val)
+  36:                 break
   37:         except TypeError:
   38:             if data:
   39:                 self.push(data)
   40:     
--------------------------------------------------------------------------------
[0.10786 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 500] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
   91:     def remove(self, val):
   92:         '''Remove first occurance of val from list.'''
   93:         curr = self.head
   94:         while curr:
-  95:             if curr.data is val:
-  96:                 if self._length == 1:
-  97:                     (self.head, self.tail) = (None, None)
-  98:                 elif (curr is not self.head and curr is not self.tail):
-  99:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 100:                 elif curr is self.head:
- 101:                     (self.head, curr.next.prev) = (curr.next, None)
- 102:                 elif curr is self.tail:
- 103:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 104:                 self._length -= 1
- 105:                 return
- 106:             curr = curr.next
+  95:             break
+  96:         
+  97:         
+  98:         
+  99:         
+ 100:         
+ 101:         
+ 102:         
+ 103:         
+ 104:         
+ 105:         
+ 106:         
  107:         
  108:         raise ValueError('{} is not in the list'.format(val))
  109:     
  110:     def _repr(self):
--------------------------------------------------------------------------------
[0.13984 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_1

def test_case_1():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_0 = double_linked_list_0.push(double_linked_list_1)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'binarySearchTree3.NodeDLL'
        var_1 = double_linked_list_0.append(var_0)
>       var_2 = double_linked_list_0.remove(var_1)

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binarySearchTree3.DoubleLinkedList object at 0x7fbd15615000>, val = None

>   ???
E   ValueError: None is not in the list

binarySearchTree3:108: ValueError
   - [# 501] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  110:     def _repr(self):
  111:         '''Return list representation of dll.'''
  112:         l = []
  113:         while True:
- 114:             try:
- 115:                 popped_data = self.pop()
- 116:                 l.append(popped_data)
- 117:             except IndexError:
- 118:                 break
+ 114:             break
+ 115:         
+ 116:         
+ 117:         
+ 118:         
  119:         return l
  120: 
  121: class Queue(object):
  122:     '''Implementation of Queue.
--------------------------------------------------------------------------------
[0.18234 s] survived
   - [# 502] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  231:         self.root = None
  232:         
  233:         if data:
  234:             for i in data:
- 235:                 self.insert(i)
+ 235:                 break
  236:     
  237:     def insert(self, val):
  238:         '''Insert val into BST. If val is already present will be ignored.'''
  239:         if not (self.root):
--------------------------------------------------------------------------------
[0.11119 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_13

def test_case_13():
        bytes_0 = b';9q\xd5\xe4\\!+v\xc3\xb2\x97\xf0'
        none_type_0 = None
        bst_0 = module_0.Bst(bytes_0)
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
>       assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:161: AssertionError
   - [# 503] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  267:     def search(self, val):
  268:         '''Return the node containing val.'''
  269:         curr = self.root
  270:         while curr:
- 271:             if curr.val == val:
- 272:                 return curr
- 273:             elif val < curr.val:
- 274:                 curr = curr.left
- 275:             else:
- 276:                 curr = curr.right
+ 271:             break
+ 272:     
+ 273:     
+ 274:     
+ 275:     
+ 276:     
  277:     
  278:     def size(self):
  279:         '''Return the size of the BST.'''
  280:         return self._size
--------------------------------------------------------------------------------
[0.11564 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_15

def test_case_15():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.insert(bst_0)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        var_1 = bst_0.delete(bst_0)
>       assert bst_0.root is None
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:177: AssertionError
   - [# 504] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  315:         
  316:         yield node.val
  317:         
  318:         for n in self.pre_order(node=node.left):
- 319:             yield n
+ 319:             break
  320:         for n in self.pre_order(node=node.right):
  321:             yield n
  322:     
  323:     def in_order(self, node='root'):
--------------------------------------------------------------------------------
[0.18318 s] survived
   - [# 505] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  317:         
  318:         for n in self.pre_order(node=node.left):
  319:             yield n
  320:         for n in self.pre_order(node=node.right):
- 321:             yield n
+ 321:             break
  322:     
  323:     def in_order(self, node='root'):
  324:         '''Depth first in-order traversal of tree.'''
  325:         if node == 'root':
--------------------------------------------------------------------------------
[0.16644 s] survived
   - [# 506] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  328:         if not node:
  329:             return
  330:         
  331:         for n in self.in_order(node=node.left):
- 332:             yield n
+ 332:             break
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
  335:             yield n
  336:     
--------------------------------------------------------------------------------
[0.16887 s] survived
   - [# 507] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  331:         for n in self.in_order(node=node.left):
  332:             yield n
  333:         yield node.val
  334:         for n in self.in_order(node=node.right):
- 335:             yield n
+ 335:             break
  336:     
  337:     def post_order(self, node='root'):
  338:         '''Depth frist post_order traversal of tree.'''
  339:         if node == 'root':
--------------------------------------------------------------------------------
[0.18115 s] survived
   - [# 508] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  342:         if not node:
  343:             return
  344:         
  345:         for n in self.post_order(node=node.left):
- 346:             yield n
+ 346:             break
  347:         for n in self.post_order(node=node.right):
  348:             yield n
  349:         yield node.val
  350:     
--------------------------------------------------------------------------------
[0.20277 s] survived
   - [# 509] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  344:         
  345:         for n in self.post_order(node=node.left):
  346:             yield n
  347:         for n in self.post_order(node=node.right):
- 348:             yield n
+ 348:             break
  349:         yield node.val
  350:     
  351:     def breadth_first(self):
  352:         '''Breadth first traversal of tree.'''
--------------------------------------------------------------------------------
[0.16364 s] survived
   - [# 510] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  352:         '''Breadth first traversal of tree.'''
  353:         q = Queue()
  354:         q.enqueue(self.root)
  355:         while q.peek():
- 356:             node = q.dequeue()
- 357:             yield node.val
- 358:             if node.left:
- 359:                 q.enqueue(node.left)
- 360:             if node.right:
- 361:                 q.enqueue(node.right)
+ 356:             break
+ 357:     
+ 358:     
+ 359:     
+ 360:     
+ 361:     
  362:     
  363:     def delete(self, val):
  364:         '''Remove a node from the tree.'''
  365:         if (self._size < 1 or not (self.contains(val))):
--------------------------------------------------------------------------------
[0.10507 s] killed by DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py::test_case_0

def test_case_0():
        bst_0 = module_0.Bst()
        assert f'{type(bst_0).__module__}.{type(bst_0).__qualname__}' == 'binarySearchTree3.Bst'
        assert bst_0.root is None
        var_0 = bst_0.breadth_first()
        var_1 = bst_0.size()
        assert var_1 == 0
        var_2 = bst_0.insert(var_1)
        assert f'{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}' == 'binarySearchTree3.Node'
        double_linked_list_0 = module_0.DoubleLinkedList(var_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'binarySearchTree3.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'binarySearchTree3.NodeDLL'
E       AssertionError

DYNAMOSA-MIO-MOSA-WHOLE_SUITE/test_binarySearchTree3_MOSA.py:16: AssertionError
   - [# 511] ZIL binarySearchTree3: 
--------------------------------------------------------------------------------
  405:     
  406:     def _findmin(self, node):
  407:         '''Find min of subtree, Min is always left most node.'''
  408:         while node.left:
- 409:             node = node.left
+ 409:             break
  410:         return node
--------------------------------------------------------------------------------
[0.19227 s] survived
[*] Mutation score [221.25113 s]: 69.8%
   - all: 511
   - killed: 296 (57.9%)
   - survived: 130 (25.4%)
   - incompetent: 81 (15.9%)
   - timeout: 4 (0.8%)
